Array.prototype.contains = function(hash, v) {
    for(var i = 0; i < this.length; i++) {
        if(this[i][hash] === v) return true;
    }
    return false;
};
Array.prototype.unique = function(hash) {
    var arr = [];
    for(var i = 0; i < this.length; i++) {
        if(!arr.contains(hash, this[i][hash])) {
            arr.push(this[i]);
        }
    }
    return arr;
};
Date.prototype.toDateInputValue = (function() {
    var local = new Date(this);
    local.setMinutes(this.getMinutes() - this.getTimezoneOffset());
    return local.toJSON().slice(0,10);
});
function onlyUnique(value, index, self) {
    return self.indexOf(value) === index;
}
//From APIO CODE - AS Is
//This is for formatting the date such that there will be padding of zero's for values <10...
Number.prototype.padLeft = function(base,chr){
    var  len = (String(base || 10).length - String(this).length)+1;
    return len > 0? new Array(len).join(chr || '0')+this : this;
}
var filterTagTypes = {'select' : 0, 'valueString' : 1, 'valueNumber' : 2, 'range' : 3, 'boolean' : 4}
var secretEmptyKey = '[$empty$]';
var ebsapp = angular.module("ebs.controller", ['ui.bootstrap', 
    'angular.filter', 'toastr', 'ngTagsInput', 'firebase','infinite-scroll',
    'ngMaterial','angular-svg-round-progressbar','ui.sortable', 'material.svgAssetsCache', 
    'ngMaterialCollapsible','ngMessages']);
ebsapp.directive('emptyTypeahead', function () {
    return {
        require: 'ngModel',
        link: function (scope, element, attrs, modelCtrl) {
            // this parser run before typeahead's parser
            modelCtrl.$parsers.unshift(function (inputValue) {
                var value = (inputValue ? inputValue : secretEmptyKey); // replace empty string with secretEmptyKey to bypass typeahead-min-length check
                modelCtrl.$viewValue = value; // this $viewValue must match the inputValue pass to typehead directive
                return value;
            });
            // this parser run after typeahead's parser
            modelCtrl.$parsers.push(function (inputValue) {
                return inputValue === secretEmptyKey ? '' : inputValue; // set the secretEmptyKey back to empty string
            });
        }
    }
})
ebsapp.controller("ServicesCtrl",function ($scope, $filter, $http, $modal, Settings, $window, toastr, $firebaseObject, $interval,$sce,$mdDialog) {
    console.log("Hello from ServicesCtrl");
    //$scope.orderByField = 'firstName';
    //$scope.reverseSort = false;
    //$scope.importMobileMaster = false ;
    $scope.serviceClient = null;
    $scope.serviceClients = [];
    $scope.serviceClientsTemp = [];
    $scope.items = [];
    $scope.devices = null;
    $scope.selectedSeller = null;
    $scope.selectedDealer = null;
    $scope.orders = [];
    $scope.skureport = [];
    var allOrders;			//... To re-initialize the scope.orders, we can use this temp..
    var quotation_allOrders;
    var purchaseorder_allOrders;
    var filteredQuotation;
    var allAttendance;
    var allComplaints;
    var filteredComplaints;
    $scope.user = {};
    $scope.user.role = '';
    $scope.stocks = {};
    $scope.seller = {};
    $scope.sellers = [];
    $scope.sellerNames = []; //stores seller name
    $scope.dealerNames = [];
    $scope.fulfillers = [];
    $scope.fulfillerNames = {};
    $scope.tenant = {};
    $scope.tenants = {};
    $scope.tab = 0;
    $scope.reportTabId = 0;
    $scope.summaryTab = 1;
    $scope.group = {};
    $scope.group.Name = false;
    $scope.group.Phone = false;
    $scope.group.Email = false;
    $scope.group.nameList = [];
    $scope.newMeetingList = [];
    $scope.newItemList = [];
    $scope.categories = [];
    $scope.villa = [];
    $scope.apartment = [];
    $scope.warehouseRole = 0;
    //... TODO : DP...
    $scope.dealerSelectAll = {};
    $scope.dealerSelectAll.city =true;
    $scope.duplicateStores = [];
    $scope.duplicates = [];
    $scope.duplicateType = {};
    $scope.dealerRegions = [];
    $scope.posDiscount = {};
    $scope.leadTransaction=[];
    $scope.leadStatus=[];
    $scope.validLeadStatus=[];
    var instanceDetails =  Settings.getInstance();
    $scope.leadstatus=instanceDetails.leadStatus;
    $scope.RenderLeadData = () => {
        $http.get('/dash/store/lead/status/count').then(function (response){
            if(response.data.length){
                $scope.leadTransaction=response.data;
                if($scope.leadTransaction.length){
                    for(var i=0;i<$scope.leadstatus.length;i++){
                        for(var j=0;j<$scope.leadTransaction.length;j++){
                            if($scope.leadstatus[i]==$scope.leadTransaction[j]._id){
                                $scope.validLeadStatus.push($scope.leadTransaction[j])
                            }
                        }
                    }
                }
            }
        })
    }
    if($scope.leadstatus && $scope.leadstatus.length){
        $scope.RenderLeadData();
    }
    console.log("Instance Details --> ", instanceDetails);
    $scope.countryCodeGet = function () {
        $http.get("/dash/countryCode").success(function (res) {
            $scope.countryCode = res[0];
        })
    }
    $scope.userRoles = {};
    $scope.userRoles.Roles = true;
    $scope.userSelectedRole = true;
    //.... For Invoice creation....
    $scope.create_invoice = [];     //... Confirmed transactions / orders are added to this list..
    $scope.filtered_customers_invoice = []; //... Filtered orders that are eligible to be added to the invoice...
    $scope.settings = {};
    $scope.sellerUserFilter1 = {};
    $scope.freight = [];
    $scope.masterorders = {};
    $scope.orderSearch = {};
    $scope.PurchaseOrderSearch = {};
    $scope.quotationSearch = {};
    $scope.invoicelabels = '';
    $scope.allInvoiceItems = '';
    $scope.orderAttendance = {};
    $scope.inventory = {};
    $scope.assets = {};
    $scope.shipping_addresses = [];
    $scope.allShippingAddress = [];
    $scope.selected_customer = [];
    $scope.itemSearch = {};
    $scope.messageSearch = {};
    $scope.messageSearch.filter = '';
    $scope.processSearch = {};
    $scope.processSearch.filter = '';
    $scope.processSearch.process = 'Chemical-Galv';
    $scope.processSearch.type = 'Chemicals';
    $scope.enquirydetails = [];
    $scope.invoicePaymentDetails = [];
    $scope.visitarray = [];
    $scope.showvisit = false;
    $scope.complaintprojects = [];
    $scope.complaintCompanies = [];
    $scope.complaintTypes = [];
    $scope.issueType = [];
    $scope.groupsubcategory = [];
    $scope.groupnamearray = [];
    $scope.grouplistarray = [];
    $scope.showgroupdetails=false;
    $scope.checkgroup = false;
    $scope.complaintapikey = '';
    $scope.Complaintcompany = [];
    $scope.inventoryDealer = [];
    $scope.location = {};
    $scope.subCategoriesDropDown = [];
    $scope.subSubCategoriesDropDown = [];
//$scope.category = {};
    $scope.loading = true;
    $scope.sortOn = "";
    $scope.sortOrder = false;
    $scope.coID = '';
    $scope.country = {};
    $scope.country.name = 'India';
    $scope.tempCountryName = $scope.country.name.toLowerCase();
    $scope.quotation_uom = 'â‚¹';
    $scope.companyEmail = '';
    $scope.companyQtnEmail = '';
    $scope.enableOrdersEmail = false;
    $scope.token = true;
    $scope.addItems = true;
    $scope.attendance = false;
    $scope.enableStocks = false;
    $scope.settings = {};
    $scope.settings.invoice = "";
    $scope.invoice_details = {};
    $scope.enforceCredit = false;
    $scope.enforceInventoryOrder = false;
    $scope.multipleStockistFlag = false;
    $scope.multipleStockistFlag = false;
    $scope.newTabName = '';
    $scope.newReportTabName = '';
    $scope.newMainTabName = '';
    $scope.orderAttendance.date = new Date();
    //... for displaying upload page for respective tabs
    $scope.uploadFiles = {};
    $scope.uploadFiles.orders = false;
    $scope.uploadFiles.purchaseOrders = false;
    $scope.uploadFiles.inventory = false;
    $scope.uploadFiles.price = false;
    $scope.uploadFiles.sellers = false;
    $scope.uploadFiles.items = false;
    $scope.uploadFiles.dealers = false;
    $scope.uploadFiles.stocks = false;
    $scope.checkinMapLocation = {}; // to store checkin locations of Customer, Start Visit, End Visit
    // item page declaration
    $scope.itemListPage = true ;
    $scope.itemAddPage = false ;
    $scope.itemEditPage = false ;
    // Dealer page declaration
    $scope.dealerListPage = true ;
    $scope.dealerAddPage = false ;
    $scope.dealerEditPage = false ;
    $scope.dealerEditFlag = true ;
    // User page declaration
    $scope.userListPage = true ;
    $scope.userAddPage = false ;
    $scope.userEditPage = false ;
    $scope.dealerSearch = {};
    $scope.dealerSearch.filter = '';
    $scope.cityText = {};
    $scope.cityText.filter = '';
    $scope.supplierSearch = {};
    $scope.supplierSearch.filter = '';
    $scope.supplierSelectAll = {};
    $scope.supplierSelectAll.city = true;
    $scope.supplierSelectAll.area = true;
    $scope.dealers = [];
    $scope.suppliers = [];
    var localAllDealers = []; //Stores all dealers for further use.
    //... Search model filters...
    $scope.assetSearch = {};
    $scope.assetSearch.filter = '';
    //for display in settings page
    $scope.dataSource = {} //for displaying the data input sources
    $scope.dataSource.selected = 'profile' //default
    $scope.navTabDataSource = 'tab';
    $scope.dataIntegrationTabDataSource = 'shopify';
    $scope.items_csv_upload_date = '';
    $scope.stores_csv_upload_date = '';
    $scope.order_transactions = [];
    $scope.showMap = false;
    $scope.storeEntryshowMap= false;
    $scope.showPjpMap = false;
    $scope.showTaskDetails=false ;
    $scope.showInventoryDetails = false ;
    //ForAddOrder Button
    //$scope.addOrderButton = true;
    //.... For Branch Details....
    $scope.branches = [];
    var OneSignal = window.OneSignal || [];
    $scope.orderSearch.date_from = new Date();
    $scope.orderSearch.date_from.setDate($scope.orderSearch.date_from.getDate() - 7);
    $scope.orderSearch.date_from.setHours(0, 0, 0, 0);
    $scope.orderSearch.date_to = new Date();
    $scope.orderSearch.date_to.setHours(23, 59, 59, 59);
    $scope.PurchaseOrderSearch.date_from = new Date();
    $scope.PurchaseOrderSearch.date_from.setDate($scope.PurchaseOrderSearch.date_from.getDate() - 7);
    $scope.PurchaseOrderSearch.date_from.setHours(0, 0, 0, 0);
    $scope.PurchaseOrderSearch.date_to = new Date();
    $scope.PurchaseOrderSearch.date_to.setHours(23, 59, 59, 59);
    $scope.quotationSearch.date_from = new Date();
    $scope.quotationSearch.date_from.setDate($scope.quotationSearch.date_from.getDate() - 7);
    $scope.quotationSearch.date_from.setHours(0, 0, 0, 0);
    $scope.quotationSearch.date_to = new Date();
    $scope.quotationSearch.date_to.setHours(23, 59, 59, 59);
    $scope.orderSearch.date_from = '';
    $scope.orderSearch.date_to = '';
    $scope.orderSearch.filter = '';
    $scope.orderSearch.dealer = '';
    $scope.orderSearch.source = '';
    $scope.orderSearch.seller = '';
    $scope.userFilterStatus = '';
    $scope.Bidshistorydetails = [];
    $scope.PurchaseOrderSearch.date_from = '';
    $scope.PurchaseOrderSearch.date_to = '';
    $scope.PurchaseOrderSearch.filter = '';
    $scope.PurchaseOrderSearch.supplier = '';
    $scope.PurchaseOrderSearch.seller = '';
    $scope.userFilterStatus = '';
    $scope.allTaskSearch = {};
    $scope.allTaskSearch.filter = '';
    $scope.allbidHistorySearch = {};
    $scope.allbidHistorySearch.filter = '';
    $scope.dealerReportSearch = {};
    $scope.dealerReportSearch.filter = '';
    $scope.itemDealersList = [];
    $scope.quotationSearch.date_from = '';
    $scope.quotationSearch.date_to = '';
    $scope.leaveRecords = {};
    $scope.leaveRecords.startDate = new Date();
    $scope.leaveRecords.startDate.setDate($scope.leaveRecords.startDate.getDate() - 6);
    $scope.leaveRecords.startDate.setHours(0, 0, 0, 0);
    $scope.leaveRecords.endDate = new Date();
    $scope.leaveRecords.endDate.setHours(23, 59, 59, 59);
    $scope.leaveFilter = false;
    $scope.filterStatusSelect = '';
    $scope.qtnMRP = 0;
    //ForAddOrder Button
    $scope.displayloader = false
    $scope.addTaskButton = true;
    $scope.addQuotationButton = true;
    //For add Dealer button
    $scope.addDealerButton = true;
    $scope.showDealerTransactions = true;
    $scope.addSupplierButton = true;
    $scope.showSupplierTransactions = true;
    //ForAddPurchaseOrder Button
    $scope.addPurchaseOrderButton = true;
    $scope.showSupplierTransactions = true;
    //For add item button
    $scope.addItemButton = true;
    //For add item button
    $scope.addComplaintButton = true;
    // ************************Add dealer
    $scope.dealer = {};
    $scope.supplier = {};
    $scope.email = {};
    $scope.showStockist = false;
    $scope.showSalesperson = false;
    //*****************Add item
    $scope.newItem = {};
    $scope.newItem.Product = '';
    // $scope.newItem.Manufacturer = 'DEFAULT';
    // $scope.newItem.subCategory = 'DEFAULT';
    //sms selected person
    $scope.selectedPerson = {};
    $scope.smsRole = 'dealer';
    $scope.showDealerDetails = false;
    $scope.orderViewTab = {};
    $scope.orderViewTab.tab = 0;
    $scope.showSupplierDetails = false;
    $scope.PurchaseorderViewTab = 0;
    $scope.quotationshowDealerDetails = false;
    $scope.quotationViewTab = 0;
    $scope.newOrderTaxAmount = {};
    $scope.newOrderExcTaxAmount = 0;
    $scope.newPurchaseOrderTaxAmount = {};
    $scope.newPurchaseOrderExcTaxAmount = 0;
    $scope.newQuotationExcTaxAmount = 0;
    $scope.mapAttendance = {};
    $scope.mapOrders = [];
    $scope.markerType = {};
    $scope.markerType.all = true;
    $scope.showMapDetails = false;
    $scope.orderFilter = false;
    $scope.saleByDealer = [];
    $scope.quotationFilter = false;
    $scope.toggleTrue = {};
    // Service Complaint types
    $scope.complaintTypes = [];
    $scope.calender = [];
    $scope.dateFormat = 'dd-MMM-yyyy';
    $scope.dateFormatMMYY = 'MMM/yyyy'
    $scope.complaintStatus = [];
    $scope.modalComplaint = {};
    $scope.modalComplaint.latestComment = '';
    $scope.complaintCustomer = true;
    $scope.complaintFilter = false;
    $scope.complaint = {};
    $scope.complaint.store = "";
    $scope.complaint.owner = '';
    $scope.complaint.ownerPhone = 0;
    $scope.complaint.dueDate = '';
    $scope.complaint.ticketComment = [];
    var dealerComplaintPhone = 0;
    $scope.complaintSearch = {};
    $scope.complaintSearch.date_to = '';
    $scope.complaintSearch.date_from = '';
    $scope.complaintStatusFilter = '';
    $scope.assignSeller = '';
    $scope.searchDealerBox = '';
    $scope.searchDealerByArea ='';
    $scope.searchDealerByCity ='';
    $scope.searchDealerByBranch ='';
    $scope.displayDealerByArea =[];
    $scope.displayDealerByCity =[];
    $scope.displayDealerByBranch =[];
    $scope.taskUserBox = '';
    $scope.showSkuDropdown = false;
    $scope.taskTab = '';
    $scope.pickup = {};
    $scope.pickupLocations = [];
    $scope.newPayment = {};
    $scope.dealerClasses = [];
    $scope.masterPriceList = [];
    $scope.priceListName = ['master'];
    $scope.class = {};
    $scope.class.priceList = 'master';
    $scope.price = {};
    $scope.newPrice = {} ;
    $scope.priceEditFlag =  [] ;
    $scope.priceListfilter = false;
    $scope.priceListView = {};
    $scope.itemIndexFlag = null ;
    // ...................................... Firebase Variables......................................
    $scope.chat = {};
    // .................................................................................................
    //New Pagination variables
    $scope.viewLength = 0;
    $scope.newViewBy = 10;
    var viewBy = {};
    viewBy.items = 12;
    viewBy.purchaseorder = 10;
    viewBy.suppliers = 12;
    viewBy.sellers = 12;
    viewBy.complaints = 10;
    viewBy.allbidHistory   = 10;
    var initialViewBy = 60;
    var bidHistoryinitialViewBy = 10;
    var initialUserViewBy = 60;
    var localViewBy = $scope.newViewBy;
    var purchaseordersearchObj = {};
    var inventoryTransactionObj =  {};
    var searchObj = {};
    var paymentSearchObj = {};
    var itemSearchObj = {};
    var musicSearchObj = {};
    var attSearchObj = {};
    var targetAchievementSearchObj = {};
    var supplierSearchObj = {};
    var playlistSearchObj = {};
    var songSearchObj = {};
    var sellerSearchObj = {};
    var topCustomerSearchObj = {};
    var bidHistorySearchObj ={};
    var orderSearchBy = ['orderId', 'sellername', 'seller', 'dealername', 'dealerphone', 'quantity', 'stockistname', 'total_amount'];
    var purchaseorderSearchBy = ['PurchaseOrderId', 'sellername', 'seller', 'suppliername', 'supplierphone', 'quantity', 'stockistname', 'total_amount'];
    var itemSearchBy = ['itemCode', 'Product', 'Manufacturer', 'subCategory','subSubCategory'];
    var dealerSearchBy = ['Dealercode', 'DealerName', 'City', 'seller','SellerName', 'StockistName', 'Area', 'Phone', 'email'];
    var checkinDealerSearchBy = ['dealername','sellername'];
    var sellerSearchBy = ['sellername','sellerphone','role','email','userStatus', 'appVersion','EMPLOYEE_ID','Resort'];
    var supplierSearchBy = ['SupplierCode', 'SupplierName', 'City', 'Seller', 'StockistName', 'Area', 'Phone', 'Email'];
    var dealerSearchSales = ['SellerName'];
    var bidHistorySearchBy = ['Product','Model','Manufacturer','Reg_No','Fuel','Color','Reg_Date','Base_Price','OSL_No','Kilometer','Mfg_Date']
    var inventoryTransactionHistorySearchBy = ['transaction_id','date_added','type'];
    var assetTransactionHistorySearchBy = ['transaction_id','type','transaction.serial_number','transaction.Product', 'transaction.sellerName'];
    var assetSearchBy = ['Product','Category','itemCode','subCategory','serial_number','sellerName'];
    var enquirySearchBy = ['itemName'];
    var topDealerSearchBy = ['dealername','sellername'];
    $scope.itemSearch.filter = '';
    $scope.itemSearch.priceList = '';
    $scope.storesSearch = '';
    var playlistSearchBy = ['playlist_name'];
    var songSearchBy = ['song_Name', 'language'];
    $scope.showOrderFilter = false;
    $scope.showInvoiceFilter = false;
    $scope.showPurchaseOrderFilter = false;
    $scope.showItemFilter = false;
    $scope.showAttendanceFilter = false;
    $scope.showStoreFilter = false;
    $scope.showSupplierFilter = false;
    $scope.showStockInventory = true;
    //PJP variables
    $scope.addPjpButton = true;
    $scope.newPjpTab = 0;
    $scope.newPjpBeat = '';
    $scope.pjpBeat = [];
    $scope.pjpDealersByArea = [];
    $scope.pjpDealersByCity = [];
    $scope.allPjp = [];
    $scope.editPjpTable = [];
    $scope.beatDetails = {};
    var tempBeat = {};
    var beatCreated = true;
    var askToSaveBeat = false;
    $scope.pjpDays = ["Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"];
    $scope.showPjpDealersSearch = false;
    //To edit nav details in settings
    $scope.editSettingNav = [];
    $scope.editSettingsNavReport = [];
    $scope.toggleTab = [];
    $scope.editOrderStatus = [];
    $scope.editPaymentStatus = [];
    $scope.editpurchaseOrderStatus = [];
    $scope.editFreightChargeType = [];
    //To show portal statistics if B2BOMS superadmin logs in
    $scope.showB2BOMSAdminStatus = false;
    var instanceCryptoPass = '';
    $scope.showReports = false;
    $scope.reportTabName = "Home";
    $scope.edit = {};
    $scope.editedItem = {};
    $scope.editDealer = {};
    $scope.editedDealer = {};
    $scope.editSupplier = {};
    $scope.editedSupplier = {};
    $scope.addMeeting = true;
    $scope.addLeave = true;
    $scope.showPlaylist = true;
    $scope.discountList = []; //Holds Discount List Values
    $scope.leaveRecord = {};
    $scope.leaveDays = 0;
    $scope.meeting = {};
    $scope.paymentInv = {};
    $scope.invoiceReport = [];
    $scope.invoiceItems = [];
    $scope.Source = [];
    $scope.lead = [];
    $scope.budget = [];
    $scope.salary = [];
    $scope.plotsize = [];
    $scope.directions = [];
    $scope.occupation = [];
    $scope.allItems = []; //Stores all items
    $scope.addItemSubCategory = []; //Holds Subcategory after adding an new subacategory
    $scope.addItemSubSubCategory = []; //Holds SubSubcategory after adding an new sub-sub-categor
    //Customer Reference
    $scope.customerReference = ['Advertisment', 'Website', 'Social Media', 'Employee', 'Others'];
    var allAttendanceRecords = {}; //Holds all attendance records - MASTER
    //Holds date in 'DATE_ADDED' format.
    $scope.orderEditForStatus = []; //Holds edit order status with flags
    $scope.inventoryType = []; //Holds the type of inventory to be used in the instance -- SERIALNUMBER BASED OR QUANTITY
    $scope.purchaseorderEditForStatus = []; //Holds edit order status with flags
    $scope.freightChargeEditType = [];
    $scope.sellerreport = [];
    /*
     Rhythmscape Declarations
     */
    $scope.allPlaylists = '';
    $scope.allSongs = '';
    $scope.storeID = '';
    $scope.editPlaylist = [];
    $scope.newPlaylistName = '';
    $scope.storetags = [];
    $scope.playlistTags = [];
    $scope.checkPlay = [];
    $scope.songsSearch = '';
    $scope.playlistSearch = '';
    $scope.bumpers = [];
    $scope.ads = [];
    $scope.playlistTags = []
    $scope.tagArray = []
    $scope.tagArrayTemp = [];
    /*
     End Rhythmscape Declarations
     */
    $scope.filter = {};
    $scope.filter.sales = 'All';
    $scope.filter.sales.seller = '';
    $scope.filter.branch = 'All';
    $scope.filter.class = 'All';
    $scope.filter.supplierbranch = 'All';
    $scope.filter.suppliersales = 'All';
    $scope.filter.purchasesales = 'All';
    $scope.userLabel = {};
    $scope.allLabels = '';
    /*
     Goloco Declarations
     */
    $scope.partnerLocations = ''
    /*
     End of Goloco Declarations
     */
    $scope.editUserRoles = [];
    $scope.newUserRole = '';
    $scope.editLabel = [];
    $scope.newLabel = '';
    $scope.quotationselectedStores = {};
    $scope.quotationselectedStores.name = '';
    $scope.displayPopular=true;
    //recent delear
    var recentorder = [];
    $scope.recentDelears = [];
    $scope.displayLineComment = false;
    $scope.editMRP = false;
    //ATMOSPHERE DECLARATIONS
    $scope.allGoals = [];
    $scope.reportGoals = [];
    $scope.goalsResort = [];
    $scope.totalcolleagues=0;
    $scope.showmoregoals=[];
    // $scope.atmsseller={};
    $scope.showsearchedgoals=false;
    $scope.goalSearch = {};
    $scope.EmployeeSearch = {};
    $scope.goalEmployeecode={};
    $scope.searchcolleaguefromgoalsBody={};
    $scope.goalsevaluation=[];
    $scope.goalssearch={};
    $scope.goalssearchwithemployee={}
    $scope.goalSearch.filter = '';
    var goalSearchObj = {};
    var resortfilter={};
    var resortforsearch={}
    var resortdataonclick={}
    viewBy.goals = 12;
    var goalSearchBy = ['RESORT','GOAL_ID', 'GOAL_STATEMENT', 'ROLE', 'DEPARTMENT', 'WEIGHTAGE', 'EVALUATION_TYPE', 'EVALUATION', 'EVALUVATOR', 'EVALUATION_BY_ROLE', 'RATING_SCALE'];
    var ncNrSearchBy = ['sellername','EMPLOYEE_ID','sellerid','DEPARTMENT','role'];
    $scope.editGoal = {};
    $scope.editGoalEvaluation = [];
    $scope.newGoal = {};
    // $scope.newGoal.RATING_SCALE = [];
    $scope.addGoalButton = true;
    $scope.newEvaluationType = {};
    $scope.settingsEvaluation = [];
    $scope.settingsDepartment = [];
    $scope.editEvaluationType = [];
    $scope.editDepartmentSetup = [];
    $scope.formName = {};
    $scope.formName.name = '';
    $scope.editFormLabel = [];
    $scope.formLabels = [];
    $scope.newLabelModal = '';
    $scope.assignUI = [];
    $scope.allPerformance = [];
    $scope.managerSelectedList = [];
    $scope.reportsGoalSearch = {};
    // $scope.reportsGoalSearch.filter = '';
    var reportsGoalSearchObj = {};
    // $scope.pageNumber=0;
    var reportsNcNrObj = {};
    $scope.reportsNcNr = {};
    $scope.reportsNcNr.filter = '';
    $scope.atmsFilter5 = true;
    viewBy.reportsGoals = 12;
    $scope.atmsColleagues = {};
    var colleaguesSearchObj = {};
    $scope.colleaguesReportSearch = {};
    $scope.colleaguesReportSearch.filter = '';
    var colleaguesSearchBy = ['sellername','EMPLOYEE_ID','DEPARTMENT','role','Designation','Supervisor_Code','Supervisor_Name','Supervisor_Designation','Assistant_Manager_Code','Assistant_Manager_Name','Assistant_Manager_Designation','Manager_Code','Manager_Name','Manager_Designation'];
    $scope.colleaguesReportFilter = {};
    $scope.atmsIndividualReport = {};
    var individualReportSearchObj = {};
    var atmsdashboardSearch={}
    $scope.individualReportSearch = {};
    $scope.individualReportSearch.filter = '';
    var individualReportSearchBy = ['goal_statement'];
    $scope.individualReportFilter = {};
    $scope.allIndividualReportData = [];
    $scope.individualReportFilter.startDate = '';
    $scope.individualReportFilter.endDate = new Date();
    $scope.individualReportFilter.endDate.setHours(23, 59, 59, 59);
    $scope.atmsIndividualReportDays =0;
    $scope.resortname='';
    var scoreCardObj = {};
    $scope.scoreCardFilterObj = {};
    $scope.scoreCardFilterObj.filter = '';
    viewBy.scoreCard = 12;
    var scoreCardSearchBy = ['sellername'];
    $scope.showdepartments=false;
    var reportsDashboardSearchObj = {};
    $scope.reportsDashboardSearch = {};
    $scope.reportsDashboardSearch.filter = '';
    var dashboardReportSearchBy = ['statement','score','personal_details'];
    $scope.colleagueSearcgObj={}
    var atmsUsersSearchObj = {};
    $scope.atmsUsersSearch = {};
    $scope.atmsUsersSearch.filter = '';
    $scope.branchName = ''
    $scope.atmsDasboard ={};
    $scope.atms_Dashboard_filter = {}
    $scope.flagforncNr=false;
    $scope.qbConnect = false;
    $scope.showLoader = false;
    $scope.distinctperformance=[]
    //End of Atmosphere Declarations
    $scope.itemTabView = 'grid'; // Default shows grid view for items
    $scope.dealerTabView = 'list'; // Default shows grid view for dealers/stores/customers
    $scope.supplierTabView = 'grid'; // Default shows grid view for dealers/stores/customers
    $scope.userTabView = 'grid'; // Default shows grid view for users
    $scope.branchTabView = 'grid'; // Default shows grid view for branches
    $scope.stocksTabView = 'list';// Default shows list view for stocks
    //Store customer images and document images while creating a new customer from portal
    $scope.newStoreImageArray = {};
    $scope.newStoreImageArray.customerImage = [];
    $scope.newStoreImageArray.customerDoc = [];
    //Supplier supplier images and document images while creating a new supplier from portal
    $scope.newSupplierImageArray = {};
    $scope.newSupplierImageArray.supplierImage = [];
    $scope.newSupplierImageArray.supplierDoc = [];
    $scope.newItemImageArray = {};
    $scope.newItemImageArray.itemImage = [];
    $scope.tax = []; //Holds array of tax objects
    var defaultTaxObj = {} //Has default tax object..
    //Ghana tax
    $scope.ghanaTax = {
        NHIL:2.5,
        GETL:2.5,
        VAT:15.9,
        VAT_VAL: 15
    }
    $scope.newBranch = {}; //Branch Objects
    $scope.itemsInModal = [];
    var masterDealers = [];
    $scope.allDealers = [];
    $scope.stockistFromOrders = [];
    $scope.items_length = 0;
    $scope.filteredItems = [];
    $scope.dealers_length = 0;
    $scope.filteredDealers = [];
    $scope.mopMargin = 0 ;
    $scope.showShipment = true;
    $scope.appTabs = [];
    $scope.appTabs = ["New Order","Order History","Catalog","Leave Management","Chat","Inventory","Task Management","New Payment","New Meeting","Payment History","Meeting History","Visit History","Expense History"];
    $scope.sourceType = [];
    $scope.sourceType = ["Pos","Order","App","Shopify","Old orders"];
    //Adding functions for using Angular Material Components
    $scope.showTags = function () {
        $scope.tagValue = !$scope.tagValue;
    }
    $scope.showSubtasks = function () {
        $scope.subtaskValue = !$scope.subtaskValue;
    }
    $scope.toggleButton = function(){
        $scope.showCheck = !$scope.showCheck;
    }
    $scope.showGroupMembers = function () {
        $scope.groupMembers = !$scope.groupMembers;
    }
    /*---------------------------------------------------------------------
     Author -> Nithish
     The below code is used to add mobiles from ZZZZ instance to MASTERITEMS collection.....
     Used for AIMRA purpose......
     ---------------------------------------------------------------------*/
    $scope.newMobile = {};
    $scope.addMobileToMaster = function () {
        if ($scope.newMobile.Brand && $scope.newMobile.DeviceName && $scope.newMobile.bluetooth &&
            $scope.newMobile.chipset && $scope.newMobile.colors && $scope.newMobile.cpu && $scope.newMobile.internal &&
            $scope.newMobile.os && $scope.newMobile.sensors && $scope.newMobile.sim && $scope.newMobile.size &&
            $scope.newMobile.technology && $scope.newMobile.sellerName && $scope.newMobile.sellerPhone
        ) {
            if ($scope.newMobile.cloudinaryURL) {
                var temp = $scope.newMobile.cloudinaryURL;
                var date = new Date();
                var dformat = [date.getFullYear(), (date.getMonth() + 1).padLeft(), date.getDate().padLeft()].join('-') + ' '
                    + [date.getHours().padLeft(), date.getMinutes().padLeft(), date.getSeconds().padLeft()].join(':');
                $scope.newMobile.cloudinaryURL = [];
                $scope.newMobile.cloudinaryURL.push({
                    'cloudinaryURL': temp,
                    'date_added': dformat,
                    'sellerPhone': 'PORTAL'
                });
            }
            bootbox.confirm({
                title: 'CONFIRM',
                message: "Are you sure about adding the mobile??",
                className: "text-center",
                buttons: {
                    confirm: {
                        label: 'YES',
                        className: 'btn-success'
                    },
                    cancel: {
                        label: 'Cancel',
                        className: 'btn-danger'
                    }
                },
                callback: function (result) {
                    if (result) {
                        $http.post("/dash/aimra/addMobile", $scope.newMobile)
                            .success(function (res) {
                                if (res) {
                                    $scope.newMobile = {};
                                    bootbox.alert({
                                        title: "SUCCESS",
                                        message: "Successfully added the mobile with ITEMID = " + res.itemID,
                                        className: 'text-center'
                                    })
                                    jQuery.noConflict();
                                    $('#aimraMobileModal').modal('hide');
                                }
                                else {
                                    bootbox.alert({
                                        title: "ERROR",
                                        message: "Failed to add. Please try again later",
                                        className: 'text-center'
                                    })
                                }
                            })
                    }
                }
            })
        }
        else {
            bootbox.alert({
                title: "ERROR",
                message: "Please enter all the fields",
                className: 'text-center'
            })
        }
    }
    //invoice generate
    $scope.tableRowExpanded = false;
    $scope.tableRowIndexCurrExpanded = "";
    $scope.tableRowIndexPrevExpanded = "";
    $scope.storeIdExpanded = "";
    $scope.dayDataCollapse = [true, true, true, true, true, true];
    $scope.dayDataCollapseFn = function () {
        for (var i = 0; storeDataModel.storedata.length - 1; i += 1) {
            $scope.dayDataCollapse.append('true');
        }
    };
    $scope.selectTableRow = function (index, storeId) {
        if ($scope.dayDataCollapse === 'undefined') {
            $scope.dayDataCollapse = $scope.dayDataCollapseFn();
        } else {
            if ($scope.tableRowExpanded === false && $scope.tableRowIndexCurrExpanded === "" && $scope.storeIdExpanded === "") {
                $scope.tableRowIndexPrevExpanded = "";
                $scope.tableRowExpanded = true;
                $scope.tableRowIndexCurrExpanded = index;
                $scope.storeIdExpanded = storeId;
                $scope.dayDataCollapse[index] = false;
            } else if ($scope.tableRowExpanded === true) {
                if ($scope.tableRowIndexCurrExpanded === index && $scope.storeIdExpanded === storeId) {
                    $scope.tableRowExpanded = false;
                    $scope.tableRowIndexCurrExpanded = "";
                    $scope.storeIdExpanded = "";
                    $scope.dayDataCollapse[index] = true;
                } else {
                    $scope.tableRowIndexPrevExpanded = $scope.tableRowIndexCurrExpanded;
                    $scope.tableRowIndexCurrExpanded = index;
                    $scope.storeIdExpanded = storeId;
                    $scope.dayDataCollapse[$scope.tableRowIndexPrevExpanded] = true;
                    $scope.dayDataCollapse[$scope.tableRowIndexCurrExpanded] = false;
                }
            }
        }
    };
    //Function to change type of tab view - Can have GRID or LIST(table) view.
    $scope.changeTabView = function (tab, type) {
        if (tab == 'branch') {
            $scope.branchTabView = type;
            if (type == 'grid') {
                $scope.itemsPerPage = 12;
                $scope.currentPage = 1;
                $scope.viewby = 12;
            }
            else if (type == 'list') {
                $scope.itemsPerPage = 10;
                $scope.currentPage = 1;
                $scope.viewby = 12;
            }
        }
        else if (tab == 'supplier') {
            $scope.supplierTabView = type;
            if (type == 'grid') {
                viewBy.suppliers = 12;
                $scope.viewLength = 0;
                $scope.newViewBy = 12;
            }
            else if (type == 'list') {
                viewBy.suppliers = 10;
                $scope.viewLength = 0;
                $scope.newViewBy = 10;
            }
        }
    }
    $scope.window = function () {
        $window.scrollTo(0, 0);
    };
    $scope.allStockistDisplay = [];
    $scope.displayBeat = [];
    $scope.renderServiceClients = function (response) {
        $scope.serviceClients =[];
        //console.log(response)
        // console.log("GetAll Stores --> " + response.length);
        $scope.invoiceClients = response;
        // console.log(response)
        $scope.multipleUsers(response);
        if($scope.dealerSelectAll.city)
            $scope.dealerSelectAll.city = true;
        else
            $scope.dealerSelectAll.city = false;
        if($scope.dealerSelectAll.city)
            $scope.dealerSelectAll.area = true;
        else
            $scope.dealerSelectAll.area = false;
        $http.get("/dash/store/branches").then(function(response){
            if(response.data.length){
                for(var i = 0; i < response.data.length; i++){
                    if(response.data[i].branchCode[0] && response.data[i].branchName[0])
                        $scope.branches.push({'branchCode' : response.data[i].branchCode[0], 'branchName' : response.data[i].branchName[0]});
                }
            }
        })
        if(response.length == 1){
            console.log('One Store');
            $scope.data.newOrderStore = response[0];
            $scope.a.selectedStores = response[0];
            $scope.data.newOrderShipping_address = response[0].Address;
            $http.get("/dash/address-list/" + $scope.data.newOrderStore.Dealercode)
                .success(function(response){
                    //console.log(response);
                    $scope.shipping_addresses = response;
                });
            //console.log($scope.newOrderShipping_address)
        }
        // /*if(response.length < 50)
        //   $scope.totalStoresDisplayed = response.length;*/
        $scope.getRewardPoints(1);
        //Set checkboxes for CITY and AREA filter as true
        $scope.dealerSelectAll = {};
        $scope.dealerSelectAll.city = true;
        $scope.dealerSelectAll.area = true;
    };
    $scope.beatPlanLoadMore = function() {
        var last=  $scope.dealers_length;
        if($scope.dealers.length>$scope.dealers_length){
            // var last=  $scope.items_length;
            $scope.dealers_length +=50;
        }else{
            $scope.dealers_length=$scope.dealers.length;
        }
        for(var i=last;i<$scope.dealers_length && i<$scope.dealers.length;i++){
            $scope.filteredDealers.push($scope.dealers[i]);
        }
    };
    //..... check if the column exists in nav file ....
    $scope.checkIfColExists = function(indx, colName) {
        if($scope.nav[indx].cols.indexOf(colName) == -1){
            return false;
        }
        else
            return true;
    }
    //.....Format the date in datetime stamp format (2017-04-23 11:03:40) ....
    function DateTimeStampFormat(date_added) {
        if (date_added) {
            //This is to format the date in dd-mm-yy hh:mm:ss format, also padding 0's if values are <10 using above function
            var date = new Date(date_added);
            var dformat = [date.getFullYear(), (date.getMonth() + 1).padLeft(), date.getDate().padLeft()].join('-') + ' '
                + [date.getHours().padLeft(), date.getMinutes().padLeft(), date.getSeconds().padLeft()].join(':');
            return (dformat);
        }
        else
            return null;
    }
    $scope.returnCustomers = function (cust){
        if(cust){
            return (cust)
        }else{
            return (0)
        }
    }
    $scope.DateTimeFormat = function (date_added, when) {
        if (date_added) {
            //This is to format the date in dd-mm-yy hh:mm:ss format, also padding 0's if values are <10 using above function
            var date = new Date(date_added);
            if (when == 'start') date.setHours(0, 0, 0, 0);
            else if (when == 'end') date.setHours(23, 59, 59, 999);
            var dformat = [date.getFullYear(), (date.getMonth() + 1).padLeft(), date.getDate().padLeft()].join('-') + ' '
                + [date.getHours().padLeft(), date.getMinutes().padLeft(), date.getSeconds().padLeft()].join(':');
            return (dformat);
        }
        else
            return 0;
    }
    $scope.updateOrderStatus = function (order, temp, flag) {
        order.taxSetupStatus = $scope.taxSetup;
        if (flag) {
            var obj = {};
            obj.status = temp;
            obj.dealerphone = order[0].dealerphone;
            obj.dealername = order[0].dealername;
            obj.taxSetupStatus = order.taxSetupStatus;
            obj.stockist = order[0].stockist
            $scope.allOrderStatus = temp;
            $http.put("/dash/orders/status/" + order[0].orderId + "/1", obj)
                .success(function (response) {
                });
        }
        else {
            order.status = temp;
            $http.put("/dash/orders/status/" + order._id + "/0", order)
                .success(function (response) {
                    // $scope.all();
                    toastr.success("Status of " + order.orderId + " changed to " + temp);
                });
        }
    }
    $scope.updatePurchaseOrderStatus = function (order, temp, flag) {
        if (flag) {
            var obj = {};
            obj.status = temp;
            obj.supplierphone = order.supplierphone;
            $scope.allPurchaseOrderStatus = temp;
            $http.put("/dash/purchase/order/status/" + order.PurchaseOrderId + "/1", obj)
                .success(function (response) {
                    // $scope.all();
                    //$scope.showOrderDetails(order[0]);
                    $scope.refreshPurchaseOrders();
                });
        }
        else {
            order[0].status = temp;
            $http.put("/dash/purchase/order/status/" + order[0]._id + "/0", order[0])
                .success(function (response) {
                    // $scope.all();
                    toastr.success("Status of " + order[0].PurchaseOrderId + " changed to " + temp);
                    $scope.refreshPurchaseOrders();
                });
        }
    }
    $scope.updateFulfiller = function (order, fulfiller, flag) {
        if (flag) {
            if(!order.length){
                var obj = {};
                obj.fulfiller = fulfiller;
                obj.dealername = order.dealername[0];
                obj.dealerphone = order.dealerphone;
                $http.put("/dash/orders/fulfiller/" + order.orderId[0] + "/1", obj)
                    .success(function (response) {
                        //$scope.showOrderDetails(order[0]);
                        $scope.orderFulfiller = '';
                    });
            }else{
                var obj = {};
                obj.fulfiller = fulfiller;
                obj.dealername = order[0].dealername;
                obj.dealerphone = order.dealerphone;
                $http.put("/dash/orders/fulfiller/" + order[0].orderId + "/1", obj)
                    .success(function (response) {
                        //$scope.showOrderDetails(order[0]);
                        $scope.orderFulfiller = '';
                    });
            }
        }
        else {
            $http.put("/dash/orders/fulfiller/" + order._id + "/0", order)
                .success(function (response) {
                    // console.log("Update -->" + response);
                    //$scope.all();
                    toastr.success($scope.getSellerName(fulfiller) + " assigned to " + order.orderId);
                });
        }
    }
    $scope.updatepurchaseorderFulfiller = function (order, fulfiller, flag) {
        if (flag) {
            var obj = {};
            obj.fulfiller = fulfiller;
            obj.suppliername = order[0].suppliername;
            obj.supplierphone = order.supplierphone
            $http.put("/dash/purchase/order/fulfiller/" + order[0].PurchaseOrderId + "/1", obj)
                .success(function (response) {
                    //$scope.showOrderDetails(order[0]);
                    $scope.orderFulfiller = '';
                });
        }
        else {
            $http.put("/dash/purchase/order/fulfiller/" + order._id + "/0", order)
                .success(function (response) {
                    // console.log("Update -->" + response);
                    //$scope.all();
                    toastr.success($scope.getSellerName(fulfiller) + " assigned to " + order.PurchaseOrderId);
                });
        }
    }
    $scope.updateDeliveryDate = function (order, date, flag) {
        var tempDate = flag ? $scope.DateTimeFormat(new Date(date), 'start') : $scope.DateTimeFormat(new Date(order.deliveryDate), 'start');
        var today = $scope.DateTimeFormat(new Date(), 'start')
        order.taxSetupStatus = $scope.taxSetup;
        if (tempDate >= today) {
            if (flag) {
                var obj = {};
                obj.deliveryDate = $scope.DateTimeFormat(new Date(date), 'start');
                obj.dealerphone = order.dealerphone
                obj.taxSetupStatus = order.taxSetupStatus;
                $http.put("/dash/orders/delivery/" + order.orderId + "/1", obj)
                    .success(function (response) {
                        //$scope.showOrderDetails(order[0]);
                    });
            }
            else {
                order.deliveryDate = $scope.DateTimeFormat(new Date(order.deliveryDate), 'start');
                order.status = $scope.nav[1].status[1];
                $http.put("/dash/orders/delivery/" + order._id + "/0", order)
                    .success(function (response) {
                        // console.log("Update -->" + response);
                        //$scope.all();
                        toastr.success("Order : " + order.orderId + " assigned " + $scope.formatDate(date))
                    });
            }
        }
        else {
            jQuery.noConflict();
            if (flag)
                $("#order_deliverDate").val(null);
            else
                $("#orderLine_deliveryDate").val(null);
            bootbox.alert({
                title: "ERROR",
                message: "Please select today or any future date",
                className: 'text-center'
            })
        }
    }
    $scope.updatepurchaseorderDeliveryDate = function (order, date, flag) {
        var tempDate = flag ? $scope.DateTimeFormat(new Date(date), 'start') : $scope.DateTimeFormat(new Date(date), 'start');
        var today = $scope.DateTimeFormat(new Date(), 'start')
        if (tempDate >= today) {
            if (flag) {
                var obj = {};
                obj.deliveryDate = $scope.DateTimeFormat(new Date(date), 'start');
                obj.supplierphone = order.supplierphone
                $http.put("/dash/purchase/order/delivery/" + order.PurchaseOrderId + "/1", obj)
                    .success(function (response) {
                        //$scope.showOrderDetails(order[0]);
                    });
            }
            else {
                order.deliveryDate = $scope.DateTimeFormat(new Date(date), 'start');
                order.status = $scope.nav[32].status[32];
                $http.put("/dash/purchase/order/delivery/" + order._id + "/0", order)
                    .success(function (response) {
                        // console.log("Update -->" + response);
                        //$scope.all();
                        toastr.success("Purchase Order : " + order.PurchaseOrderId + " assigned " + $scope.formatDate(date))
                    });
            }
        }
        else {
            jQuery.noConflict();
            if (flag)
                $("#purchaseorder_deliverDate").val(null);
            else
                $("#purchaseorderLine_deliveryDate").val(null);
            bootbox.alert({
                title: "ERROR",
                message: "Please select today or any future date",
                className: 'text-center'
            })
        }
    }
    $scope.updateExpenseStatus = function (order) {
        var temp = {};
        temp = order;
        bootbox.confirm({
            title: 'CONFIRM',
            message: "Are you sure ?",
            className: "text-center",
            buttons: {
                confirm: {
                    label: 'YES',
                    className: 'btn-success'
                },
                cancel: {
                    label: 'Cancel',
                    className: 'btn-danger'
                }
            },
            callback: function (result) {
                if (result && temp) {
                    $http.put("/dash/expense/update/status", temp)
                        .success(function (res) {
                            //console.log(res);
                        })
                }
                else {
                    $scope.refreshReports(7);
                }
            }
        })
    }
    var data = [{x: 0, y: 40}, {x: 1, y: 49}, {x: 2, y: 17}, {x: 3, y: 42}];
    $scope.showGrapth = function () {
        var graph = new Rickshaw.Graph({
            element: document.querySelector("#rickshawchart"),
            width: 250,
            height: 250,
            renderer: 'bar',
            series: [{
                color: 'steelblue',
                data: data
            }]
        });
        graph.render();
        var xAxis = new Rickshaw.Graph.Axis.Time({graph: graph});
        xAxis.render();
        var yAxis = new Rickshaw.Graph.Axis.Y({graph: graph});
        yAxis.render();
    }
    $scope.setSMSGateway = function (sms) {
        $scope.sms = sms;
        if ($scope.sms) {
            $http.put("/dash/sms/gateway", {smsGateway: $scope.sms})
                .success(function (response) {
                    console.log(response);
                    if (!response) $scope.sms = '';
                })
        }
    }
// --- inventory Qty in catelog--//
    $scope.invQtyInItems = false;
    $scope.showInvQtyItems = function(showQty){
        $scope.invQtyInItems = showQty;
    }
    $scope.additems = function () {
        bootbox.confirm("Do you want to add items?", function (result) {
            if (result) {
                $scope.addItems = !$scope.addItems;
                $http.put("/dash/items/add/update", {addItems: $scope.addItems})
                    .success(function (response) {
                        if (!response) {
                            $scope.addItems = !$scope.addItems;
                        }
                    })
            }
        })
    }
    //end
    $scope.stocksenable = function () {
        $scope.enableStocks = !$scope.enableStocks;
        console.log("enableStocks Access --> " + $scope.enableStocks);
        $http.put("/dash/enableStocks", {enableStocks: $scope.enableStocks})
            .success(function (response) {
                if (!response) {
                    $scope.enableStocks = !$scope.enableStocks;
                }
            })
    }
    $scope.multipleStockistInv = function () {
        $scope.multipleStockistFlag = !$scope.multipleStockistFlag;
        console.log("Add Items Access --> " + $scope.multipleStockistFlag);
        var body = {};
        body.type = 'multipleStockist';
        body.multipleStockist = $scope.multipleStockistFlag;
        $http.put("/dash/multiplaStockist", body)
            .success(function (response) {
                if (!response) {
                    $scope.multipleStockistFlag = !$scope.multipleStockistFlag;
                }
            })
    }
    //order status enable function
    $scope.orderstatus = function () {
        bootbox.confirm("Do you want enable orderstatus?", function (result) {
            if (result) {
                $scope.settings.statusChange = !$scope.settings.statusChange;
                $scope.statusChangeEnable();
            }
        })
    }
    // line status enable function
    $scope.linestatus = function () {
        bootbox.confirm("Do you want to enable linestatus?", function (result) {
            if (result) {
                $scope.settings.lineStatusChange = !$scope.settings.lineStatusChange;
                $scope.lineStatusEnable();
            }
        })
    }
    /*.............. Function to render templates for different tabs..........*/
    //... Function to edit the table heads....
    $scope.editName = function (index) {
        $scope.selectedHead = index;
    }
    //...Function to render display templates...
    $scope.getTemplate = function (tab, i) {
        if (tab == 1) {
            if (i === $scope.selectedHead) return 'editOrder';
            else return 'displayOrder';
        } else if (tab == 2) {
            if (i === $scope.selectedHead) return 'editStore';
            else return 'displayStore';
        } else if (tab == 3) {
            if (i === $scope.selectedHead) return 'editItem';
            else return 'displayItem';
        } else if (tab == 4) {
            if (i === $scope.selectedHead) return 'editUsers';
            else return 'displayUsers';
        } else if (tab == 29) {
            if (i === $scope.selectedHead) return 'editGoals';
            else return 'displayGoals';
        }
        else if (tab == 31) {
            if (i === $scope.selectedHead) return 'editSupplier';
            else return 'displaySupplier';
        }
        else if (tab == 32) {
            if (i === $scope.selectedHead) return 'editPurchaseOrder';
            else return 'displayPurchaseOrder';
        }
    };
    //... Function to save a new name for the tab...
    $scope.saveNewName = function (tab, index, name) {
        console.log('NAV Tab ---> ' + tab);
        console.log('Index ---> ' + index);
        console.log('New name : ' + name);
        if (name) {
            $scope.nav[tab].display[index] = name;
            //console.log($scope.nav);
            $http.put("/dash/nav/update", $scope.nav)
                .success(function (response) {
                    //console.log("Update -->" + response);
                    $scope.selectedHead = null;
                    $scope.newName = '';
                });
            $scope.selectedHead = null;
        }
    };
    //... Function to cancel editing...
    $scope.cancelEdit = function () {
        $scope.selectedHead = null;
        $scope.newName = '';
    };
    //... Orders modal close..
    $scope.closeModal = function () {
        jQuery.noConflict();
        $('#selectDate').modal('hide');
        jQuery.noConflict();
        $('#sold').modal('hide');
        jQuery.noConflict();
        $('#dealers').modal('hide');
        jQuery.noConflict();
        $('#user').modal('hide');
        jQuery.noConflict();
        $('#summary').modal('hide');
        jQuery.noConflict();
        $('#payments').modal('hide');
        jQuery.noConflict();
        $('#checkins').modal('hide');
        jQuery.noConflict();
        $('#expense').modal('hide');
        jQuery.noConflict();
        $('#meeting').modal('hide');
        jQuery.noConflict();
        $('#items').modal('hide');
        jQuery.noConflict();
        $('#visits').modal('hide');
        jQuery.noConflict();
        $('#attendance').modal('hide');
        jQuery.noConflict();
        $('#quotation').modal('hide');
        jQuery.noConflict();
        $('#allreport').modal('hide');
        jQuery.noConflict();
        $('#groupTask').modal('hide');
        jQuery.noConflict();
        $('#editGroupTask').modal('hide');
        jQuery.noConflict();
        $('#ncNrApply').modal('hide');
        jQuery.noConflict();
        $('#payment').modal('hide');
        jQuery.noConflict();
        $('#orderPayment').modal('hide');
        jQuery.noConflict();
        $('#dealerPayment').modal('hide');
    };
    /*.............. Function to render templates for editing the main tabs..........*/
    //... Function to display the templates for main tabs....
    $scope.getMainTemplate = function (tab) {
        if (tab == 1) {
            if (tab == $scope.selectedMain) return 'editMainOrderTab';
            else return 'displayMainOrderTab';
        }
        else if (tab == 2) {
            if (tab == $scope.selectedMain) return 'editMainStoresTab';
            else return 'displayMainStoresTab';
        }
        else if (tab == 3) {
            if (tab == $scope.selectedMain) return 'editMainItemsTab';
            else return 'displayMainItemsTab';
        }
        if (tab == 4) {
            if (tab == $scope.selectedMain) return 'editMainUsersTab';
            else return 'displayMainUsersTab';
        }
        if (tab == 31) {
            if (tab == $scope.selectedMain) return 'editMainSuppliersTab';
            else return 'displayMainSuppliersTab';
        }
        if (tab == 32) {
            if (tab == $scope.selectedMain) return 'editMainPurchaseOrderTab';
            else return 'displayMainPurchaseOrderTab';
        }
    };
    //... Function to edit the Main tab....
    $scope.editMainTabName = function (index) {
        $scope.selectedMain = index;
    };
    //... Function to save the new Main tab name....
    $scope.saveNewMainTabName = function (index, name) {
        console.log('NAV Tab ---> ' + index);
        console.log('New name : ' + name);
        if (name) {
            $scope.nav[index].tab = name;
            $http.put("/dash/nav/update", $scope.nav)
                .success(function (response) {
                    //console.log("Update -->" + response);
                    $scope.selectedMain = null;
                    $scope.newMainTabName = '';
                });
            $scope.selectedMain = null;
        }
    };
    //... Function to cancel the Main tab editing....
    $scope.cancelMainTabEdit = function () {
        $scope.selectedMain = null;
        $scope.newMainTabName = '';
    };
    $scope.setPage = function (pageNo) {
        $scope.currentPage = pageNo;
    };
    $scope.pageChanged = function () {
        console.log('Page changed to: ' + $scope.currentPage);
    };
    $scope.setItemsPerPage = function (num) {
        $scope.itemsPerPage = num;
        $scope.currentPage = 1; //reset to first page
    }
    $scope.setPage1 = function (pageNo) {
        $scope.currentPage1 = pageNo;
    };
    $scope.pageChanged1 = function () {
        console.log('Page changed to: ' + $scope.currentPage);
    };
    $scope.setItemsPerPage1 = function (num) {
        $scope.itemsPerPage1 = num;
        $scope.currentPage1 = 1; //reset to first page
    }
    $scope.setPage2 = function (pageNo) {
        $scope.currentPage2 = pageNo;
    };
    $scope.pageChanged2 = function () {
        console.log('Page changed to: ' + $scope.currentPage);
    };
    $scope.setItemsPerPage2 = function (num) {
        $scope.itemsPerPage2 = num;
        $scope.currentPage2 = 1; //reset to first page
    }
    $scope.setPage3 = function (pageNo) {
        $scope.currentPage3 = pageNo;
    };
    $scope.pageChanged3 = function () {
        console.log('Page changed to: ' + $scope.currentPage);
    };
    $scope.setItemsPerPage3 = function (num) {
        $scope.itemsPerPage3 = num;
        $scope.currentPage3 = 1; //reset to first page
    };
    $scope.setPage4 = function (pageNo) {
        $scope.currentPage4 = pageNo;
    };
    $scope.pageChanged4 = function () {
        console.log('Page changed to: ' + $scope.currentPage);
    };
    $scope.setItemsPerPage4 = function (num) {
        $scope.itemsPerPage4 = num;
        $scope.currentPage4 = 1; //reset to first page
    };
    $scope.setPage5 = function (pageNo) {
        $scope.currentPage5 = pageNo;
    };
    $scope.pageChanged5 = function () {
        console.log('Page changed to: ' + $scope.currentPage);
    };
    $scope.setItemsPerPage5 = function (num) {
        $scope.itemsPerPage5 = num;
        $scope.currentPage5 = 1; //reset to first page
    };
    $scope.setPage6 = function (pageNo) {
        $scope.currentPage6 = pageNo;
    };
    $scope.pageChanged6 = function () {
        console.log('Page changed to: ' + $scope.currentPage);
    };
    $scope.setItemsPerPage6 = function (num) {
        $scope.itemsPerPage6 = num;
        $scope.currentPage6 = 1; //reset to first page
    };
    $scope.setPage7 = function (pageNo) {
        $scope.currentPage7 = pageNo;
    };
    $scope.pageChanged7 = function () {
        console.log('Page changed to: ' + $scope.currentPage);
    };
    $scope.setItemsPerPage7 = function (num) {
        $scope.itemsPerPage7 = num;
        $scope.currentPage7 = 1; //reset to first page
    };
    $scope.setPage8 = function (pageNo) {
        $scope.currentPage8 = pageNo;
    };
    $scope.pageChanged8 = function () {
        console.log('Page changed to: ' + $scope.currentPage);
    };
    $scope.setItemsPerPage8 = function (num) {
        $scope.itemsPerPage8 = num;
        $scope.currentPage8 = 1; //reset to first page
    };
    $scope.setPage9 = function (pageNo) {
        $scope.currentPage9 = pageNo;
    };
    $scope.pageChanged9 = function () {
        console.log('Page changed to: ' + $scope.currentPage);
    };
    $scope.setItemsPerPage9 = function (num) {
        $scope.itemsPerPage9 = num;
        $scope.currentPage9 = 1; //reset to first page
    };
    $scope.setPage10 = function (pageNo) {
        $scope.currentPage10 = pageNo;
    };
    $scope.pageChanged10 = function () {
        console.log('Page changed to: ' + $scope.currentPage);
    };
    $scope.setItemsPerPage10 = function (num) {
        $scope.itemsPerPage10 = num;
        $scope.currentPage10 = 1; //reset to first page
    };
    var sortDir = false;
    $scope.sortTable = function (item, prop) {
        // debugger
        sortDir = !sortDir;
        if (($scope[item][0]) != null) {
            if (typeof ($scope[item][0][prop]) == "string") {
                if (sortDir) {
                    $scope[item].sort(function (a, b) {
                        var nameA = a[prop], nameB = b[prop];
                        // console.log(nameA)
                        if (nameA != "" && nameB != "" && nameA != undefined && nameB != undefined) {
                            if (isNaN(nameA[0]) == true && isNaN(nameB[0]) == true) {
                                if (nameA[0].toLowerCase() && nameB[0].toLowerCase())
                                    return (nameA[0].toLowerCase() < nameB[0].toLowerCase() ? 1 : -1);
                                else return nameA[0] < nameB[0] ? 1 : -1;
                            }
                            else if (isNaN(nameA[0]) == false && isNaN(nameB[0]) == false) {
                                return a[prop] - b[prop]
                            }
                            else {
                                if (nameA[0].toLowerCase() && nameB[0].toLowerCase())
                                    return (nameA[0].toLowerCase() < nameB[0].toLowerCase() ? 1 : -1);
                                else return nameA[0] < nameB[0] ? 1 : -1;
                            }
                        }
                        else {
                            return a[prop] > b[prop]
                        }
                    });
                } else {
                    $scope[item].sort(function (a, b) {
                        var nameA = a[prop], nameB = b[prop];
                        // console.log(nameA)
                        if (nameA != "" && nameB != "" && nameA != undefined && nameB != undefined) {
                            if (isNaN(nameA[0]) == true && isNaN(nameB[0]) == true) {
                                if (nameA[0].toLowerCase() && nameB[0].toLowerCase())
                                    return (nameA[0].toLowerCase() > nameB[0].toLowerCase() ? 1 : -1);
                                else return nameA[0] > nameB[0] ? 1 : -1;
                            }
                            else if (isNaN(nameA[0]) == false && isNaN(nameB[0]) == false) {
                                return b[prop] - a[prop]
                            }
                            else {
                                if (nameA[0].toLowerCase() && nameB[0].toLowerCase())
                                    return (nameA[0].toLowerCase() > nameB[0].toLowerCase() ? 1 : -1);
                                else
                                    return nameA[0] > nameB[0] ? 1 : -1;
                            }
                        }
                        else {
                            return a[prop] > b[prop]
                        }
                    });
                }
            }
            else if (typeof ($scope[item][0][prop]) == "number") {
                if (sortDir) {
                    $scope[item].sort(function (a, b) {
                        return a[prop] - b[prop];
                        // return (a[prop] < b[prop] ? 1 : -1);
                    });
                }
                else {
                    $scope[item].sort(function (a, b) {
                        return b[prop] - a[prop];
                        // return (a[prop] > b[prop] ? 1 : -1);
                    });
                }
            }
        }
        if ((($scope[item][0][prop][0])) != null) {
            if (typeof (($scope[item][0][prop][0])) == "string") {
                if (sortDir) {
                    $scope[item].sort(function (a, b) {
                        var nameA = a[prop], nameB = b[prop];
                        // console.log(nameA)
                        if (nameA != "" && nameB != "" && nameA != undefined && nameB != undefined) {
                            if (isNaN(nameA[0]) == true && isNaN(nameB[0]) == true) {
                                if (nameA[0].toLowerCase() && nameB[0].toLowerCase())
                                    return (nameA[0].toLowerCase() < nameB[0].toLowerCase() ? 1 : -1);
                                else
                                    return nameA[0] < nameB[0] ? 1 : -1;
                            }
                            else if (isNaN(nameA[0]) == false && isNaN(nameB[0]) == false) {
                                return a[prop] - b[prop]
                            }
                            else {
                                if (nameA[0].toLowerCase() && nameB[0].toLowerCase())
                                    return (nameA[0].toLowerCase() < nameB[0].toLowerCase() ? 1 : -1);
                                else
                                    return nameA[0] < nameB[0] ? 1 : -1;
                            }
                        }
                        else {
                            return a[prop] > b[prop]
                        }
                    });
                } else {
                    $scope[item].sort(function (a, b) {
                        var nameA = a[prop], nameB = b[prop];
                        // console.log(nameA)
                        if (nameA != "" && nameB != "" && nameA != undefined && nameB != undefined) {
                            if (isNaN(nameA[0]) == true && isNaN(nameB[0]) == true) {
                                if (nameA[0].toLowerCase() && nameB[0].toLowerCase())
                                    return (nameA[0].toLowerCase() > nameB[0].toLowerCase() ? 1 : -1);
                                else
                                    return nameA[0] > nameB[0] ? 1 : -1;
                            }
                            else if (isNaN(nameA[0]) == false && isNaN(nameB[0]) == false) {
                                return b[prop] - a[prop]
                            }
                            else {
                                if (nameA[0].toLowerCase() && nameB[0].toLowerCase())
                                    return (nameA[0].toLowerCase() > nameB[0].toLowerCase() ? 1 : -1);
                                else return nameA[0] > nameB[0] ? 1 : -1;
                            }
                        }
                        else {
                            return a[prop] > b[prop]
                        }
                    });
                }
            }
            else if (typeof (($scope[item][0][prop][0])) == "number") {
                if (sortDir) {
                    $scope[item].sort(function (a, b) {
                        return a[prop] - b[prop];
                        // return (a[prop] < b[prop] ? 1 : -1);
                    });
                }
                else {
                    $scope[item].sort(function (a, b) {
                        return b[prop] - a[prop];
                        // return (a[prop] > b[prop] ? 1 : -1);
                    });
                }
            }
        }
        if (($scope[item][0][0]) != null) {
            // if (typeof ($scope[item][0][prop][0]) != null){
            if (typeof ($scope[item][0][prop])[0] == "string") {
                if (sortDir) {
                    $scope[item].sort(function (a, b) {
                        var nameA = a[prop][0], nameB = b[prop][0];
                        // console.log(nameA)
                        if (nameA != "" && nameB != "" && nameA != undefined && nameB != undefined) {
                            if (isNaN(nameA[0]) == true && isNaN(nameB[0]) == true) {
                                if (nameA[0].toLowerCase() && nameB[0].toLowerCase())
                                    return (nameA[0].toLowerCase() < nameB[0].toLowerCase() ? 1 : -1);
                                else return nameA[0] < nameB[0] ? 1 : -1;
                            }
                            else if (isNaN(nameA[0]) == false && isNaN(nameB[0]) == false) {
                                return a[prop] - b[prop]
                            }
                            else {
                                if (nameA[0].toLowerCase() && nameB[0].toLowerCase())
                                    return (nameA[0].toLowerCase() < nameB[0].toLowerCase() ? 1 : -1);
                                else return nameA[0] < nameB[0] ? 1 : -1;
                            }
                        }
                        else {
                            return a[prop] > b[prop]
                        }
                    });
                } else {
                    $scope[item].sort(function (a, b) {
                        var nameA = a[prop][0], nameB = b[prop][0];
                        // console.log(nameA)
                        if (nameA != "" && nameB != "" && nameA != undefined && nameB != undefined) {
                            if (isNaN(nameA[0]) == true && isNaN(nameB[0]) == true) {
                                if (nameA[0].toLowerCase() && nameB[0].toLowerCase())
                                    return (nameA[0].toLowerCase() > nameB[0].toLowerCase() ? 1 : -1);
                                else return nameA[0] > nameB[0] ? 1 : -1;
                            }
                            else if (isNaN(nameA[0]) == false && isNaN(nameB[0]) == false) {
                                return b[prop] - a[prop]
                            }
                            else {
                                if (nameA[0].toLowerCase() && nameB[0].toLowerCase())
                                    return (nameA[0].toLowerCase() > nameB[0].toLowerCase() ? 1 : -1);
                                else return nameA[0] > nameB[0] ? 1 : -1;
                            }
                        }
                        else {
                            return a[prop] > b[prop]
                        }
                    });
                }
            }
            // }
            else if (typeof ($scope[item][0][prop][0]) == "number") {
                if (sortDir) {
                    $scope[item].sort(function (a, b) {
                        return a[prop] - b[prop];
                        // return (a[prop] < b[prop] ? 1 : -1);
                    });
                }
                else {
                    $scope[item].sort(function (a, b) {
                        return b[prop] - a[prop];
                        // return (a[prop] > b[prop] ? 1 : -1);
                    });
                }
            }
        }
        // }
        // }
        //         var prop = z;
        //         sortDir = !sortDir;
        //         // debugger
        //         // if(x[0][z]) {
        //         for(i=0 ; i <x.length ; i++) {
        //             if(x[i][z]) {
        //                 if ((x[i][z])[0] != undefined) {
        //                     var typ = typeof (x[i][z])[0];
        //                 }
        //
        //                 else if (x[i][z] != undefined) {
        //                     var typ = typeof ((x[i][z]));
        //                 }
        //             }
        //             }
        //         // }
        //
        //
        // if(typ != undefined) {
        //         if (typ == "string") {
        //             if (sortDir) {
        //                 x.sort(function (a, b) {
        //                     var nameA = a[prop], nameB = b[prop]
        //                     // console.log(nameA)
        //                     if (nameA != "" && nameB != "" && nameA != undefined && nameB != undefined && nameA[0].toLowerCase() && nameB[0].toLowerCase()) {
        //                         return (nameA[0].toLowerCase() < nameB[0].toLowerCase() ? 1 : -1);
        //                     }
        //                     else {
        //                         return a[prop] > b[prop]
        //                     }
        //                 });
        //             } else {
        //                 x.sort(function (a, b) {
        //                     var nameA = a[prop], nameB = b[prop]
        //                     if (nameA != "" && nameB != "" && nameA != undefined && nameB != undefined) {
        //                         return (nameA[0].toLowerCase() > nameB[0].toLowerCase() ? 1 : -1);
        //                     }
        //                     else {
        //                         return b[prop] > a[prop]
        //                     }
        //                 });
        //             }
        //         }
        //     else if(typ == "number") {
        //             if(sortDir) {
        //                         x.sort(function(a, b) {
        //                             return a[prop]-b[prop]
        //                             // return (a[prop] < b[prop] ? 1 : -1);
        //                         });
        //                     }
        //                     else {
        //                         x.sort(function(a, b) {
        //                             return b[prop]-a[prop]
        //                             // return (a[prop] > b[prop] ? 1 : -1);
        //                         });
        //                     }
        //         }
        //     }
        // if(x.z == undefined) {
        //
        // }
        // else {
        // if(type == "text") {
        //     if(sortDir) {
        //         x.sort(function(a, b) {
        //             var nameA=a[prop], nameB=b[prop]
        //             // console.log(nameA)
        //             if(nameA != "" && nameB != "" && nameA != undefined && nameB != undefined) {
        //                 return (nameA[0].toLowerCase() < nameB[0].toLowerCase() ? 1 : -1);
        //             }
        //         });
        //     }
        //     else {
        //         x.sort(function(a, b) {
        //             var nameA=a[prop], nameB=b[prop]
        //             if(nameA != "" && nameB != "" && nameA != undefined && nameB != undefined) {
        //                 return (nameA[0].toLowerCase() > nameB[0].toLowerCase() ? 1 : -1);
        //             }
        //         });
        //     }
        // }
        // else if(type == "number") {
        //     if(sortDir) {
        //         x.sort(function(a, b) {
        //             return a[prop]-b[prop]
        //             // return (a[prop] < b[prop] ? 1 : -1);
        //         });
        //     }
        //     else {
        //         x.sort(function(a, b) {
        //             return b[prop]-a[prop]
        //             // return (a[prop] > b[prop] ? 1 : -1);
        //         });
        //     }
        // }
        // else if(type == "date") {
        //     if(sortDir) {
        //         x.sort(function(a, b) {
        //             return (a[prop] < b[prop] ? 1 : -1);
        //         });
        //     }
        //     else {
        //         x.sort(function(a, b) {
        //             return (a[prop] > b[prop] ? 1 : -1);
        //         });
        //     }
        // }
        // }
    };
    var masterUsers = [];
    $scope.totalUserCount = 0;
    //var $scope.active be a flag that is true when the tab is active
    $scope.loaded = function (tab,arg) {
        $scope.tab = tab;
        $scope.userRoles.Roles = true;
        switch (tab) {
            case 0: {
                console.log("Changed ******* 1 " + tab);
                break;
            }
            case 1 : {
                console.log("Changed ******* 7 " + tab);
                break;
            }
            case 2: {
                console.log("Changed ******* 2 " + tab);
                break;
            }
            case 3: {
                console.log("Changed ******* 3 " + tab);
                $scope.clearFilter(2);
                if ($scope.items_count < viewBy.items) {
                    $scope.newViewBy = $scope.items_count;
                }
                if ($scope.user.role == 'Dealer') {
                    if (dealerItemsCount) {
                        $scope.items_count = dealerItemsCount;
                        if (dealerNewViewBy < viewBy.items) {
                            $scope.newViewBy = dealerNewViewBy;
                        }
                    }
                }
                break;
            }
            case 4: {
                console.log("Changed ******* 4 " + tab);
                $scope.userSelectedTab = 'user'; //Select USER tab when users.html is opened
                $scope.changeDataSource('users', 'user');
                var sellerObj = {};
                sellerObj.viewLength = 0;
                sellerObj.viewBy = initialUserViewBy;
                sellerObj.statusFilter = '';
                sellerObj.searchFor = '';
                sellerObj.searchBy = [];
                sellerObj.userLoginDetails = $scope.user ;
                if($scope.applicationType == 'Atmosphere' && $scope.user.sellerObject)
                    sellerObj.resort = $scope.user.sellerObject.Resort;
                $scope.userSearch.filter = '';
                if(masterUsers == undefined){
                    masterUsers = [];
                }
                if ($scope.totalUserCount != $scope.sellers_count) {
                    $http.post("/dash/users/list", sellerObj)
                        .success(function (res) {
                            $scope.renderSellers(res);
                            $scope.sellers = res;
                            masterUsers = res;
                            $scope.items19 = $scope.sellers;
                        })
                    $http.post("/dash/users/count", sellerObj)
                        .success(function (res) {
                            //$scope.sellers_count = res;
                            $scope.totalUserCount = res;
                            $scope.transactionCount(res, 5);
                        });
                }
                $scope.viewLength = 0;
                $scope.newViewBy = viewBy.sellers;
                // $scope.viewby = 10;
                $scope.totalItems = $scope.sellers.length;
                $scope.currentPage = 1;
                $scope.itemsPerPage = $scope.viewby;
                $scope.maxSize = 5;
                $scope.sellers_count = $scope.allUserLength;
                $scope.userStatus = "Active User";
                $scope.refreshSellerNames();
                for (var i = 0; i < $scope.sellers.length; i++) {
                    if ($scope.sellers[i].userStatus == 'Active') {
                        for (var j = 0; j < $scope.devices.length; j++) {
                            if ($scope.sellers[i].sellerphone == $scope.devices[j].sellerid) {
                                $scope.sellers[i].appVersion = $scope.devices[j].appversion;
                            }
                        }
                    }
                }
                //console.log($scope.sellers);
                if($scope.sellers_count < viewBy.sellers){
                    $scope.newViewBy = $scope.sellers_count;
                }
                if($scope.applicationType == 'Atmosphere'){
                    $scope.allDesignations = [];
                    $scope.allDepartments=[];
                    console.log("Atmosphere Users dropdowns");
                    $http.get('/dash/allUsers')
                        .success(function (response) {
                            console.log("ALL users count--------->>>"+ response.length)
                            $scope.allGoalUsers = response
                        });
                    $http.get("/dash/userRoles")
                        .success(function (response) {
                            console.log("All Users Roles--------->>>" + response.length);
                            $scope.userRole = response;
                        });
                    $http.get("/dash/userDesignations")
                        .success(function (response) {
                            console.log("All Users Designation--------->>>" + response.length);
                            $scope.allDesignations = response;
                        });
                    $http.get("/dash/userDepartments")
                        .success(function(response){
                            console.log("All departments" + response.length)
                            // console.log(response)
                            if(response.length) $scope.allDepartments = response;
                        });
                    if(!$scope.roleManager.length){
                        var body = {};
                        body.text = '';
                        body.role = "Manager";
                        // console.log($scope.user.sellerObject.Resort);
                        if($scope.user){
                            if($scope.user.sellerObject){
                                if($scope.user.sellerObject.Resort){
                                    body.resort = $scope.user.sellerObject.Resort
                                }
                                else{
                                    body.resort = ''
                                }
                            }
                            else{
                                body.resort = ''
                            }
                        }
                        else{
                            body.resort = ''
                        }
                        $http.post('/dash/getSellers/roleType',body)
                            .success(function(response){
                                console.log("all managers"+response.length);
                                $scope.roleManager = response;
                            });
                    }
                }
                var sellerObj1 = {};
                if($scope.user){
                    if($scope.user.sellerObject){
                        if($scope.user.sellerObject.Resort){
                            sellerObj1.resort = $scope.user.sellerObject.Resort;
                        }
                        else{
                            sellerObj1.resort = ''
                        }
                    }
                    else{
                        sellerObj1.resort = ''
                    }
                }
                else{
                    sellerObj1.resort = ''
                }
                $http.post("/dash/allBranches",sellerObj1)
                    .success(function(branches){
                        // console.log("all branches"+branches.length)
                        $scope.branches = branches;
                        if($scope.user){
                            if($scope.user.sellerObject){
                                if($scope.user.sellerObject.branchCode[0]){
                                    $scope.getBranchName($scope.user.sellerObject.branchCode[0]);
                                }
                            }
                        }
                    });
                //$scope.transactionCount($scope.sellers.length, 5);
                $http.get('/dash/userTabs/showUserTabs')
                    .success(function (response){
                        if(response.length){
                            $scope.showSelectUserTabs = response[0].UserTab;
                        }
                    })
                $window.scrollTo(0, 0);
                $scope.getWarehouseLocation();
                $scope.filterInventoryByLocation();
            }
                break;
            case 5:
                console.log("Changed ******* 5 " + tab);
                $scope.dataSource.selected = 'profile';
                $scope.navTabDataSource = 'tab';
                if ($scope.orderEditForStatus.length == 0) {
                    var obj = {};
                    obj.type = 'orderEdit';
                    obj.obj = [];
                    for (var i = 0; i < $scope.nav[1].status.length; i++) {
                        obj.obj.push({'status': $scope.nav[1].status[i], 'editable': false});
                    }
                    $http.put("/dash/settings/update/order/edit/access", obj.obj)
                        .success(function (res) {
                            //console.log(res);
                            $scope.orderEditForStatus = obj.obj;
                        })
                }
                if($scope.applicationType == 'Atmosphere')
                {
                    $scope.dataSource.selected = 'csv';
                }
                $http.get('/dash/userTabs/showUserTabs')
                    .success(function (result){
                        if(result.length)
                            $scope.UserTabsActive = result[0].UserTab;
                    })
                // for fetching quickbooks credentials //
                $http.get("/dash/quickbooks/creds/fetch").then(function(creds){
                    if(creds){
                        if (creds.data) {
                            if(creds.data.quickbooks_token){
                                $http.get("/dash/quickbooks/token/check").then(function(result){
                                    if(result){
                                        if(result.data){
                                            if(result.data.QueryResponse){
                                                if(result.data.QueryResponse.CompanyInfo){
                                                    if(creds.data.lastConnectedTime){
                                                        $scope.qbConnectTime = creds.data.lastConnectedTime;
                                                    }
                                                    if(creds.data.qbCompany){
                                                        $scope.qbCompany = creds.data.qbCompany;
                                                    }
                                                    else{
                                                        $scope.qbCompany = result.data.QueryResponse.CompanyInfo[0].CompanyName;
                                                    }
                                                    $scope.qbConnect = true;
                                                }
                                            }
                                            else{
                                                $scope.qbConnect = false;
                                            }
                                        }
                                        else{
                                            $scope.qbConnect = false;
                                        }
                                    }
                                    else{
                                        $scope.qbConnect = false;
                                    }
                                })
                            }
                            else{
                                $scope.qbConnect = false;
                            }
                        }
                        else{
                            $scope.qbConnect = false;
                        }
                    }
                    else{
                        $scope.qbConnect = false;
                    }
                })
                break;
            /*case 6:{
             console.log("Changed ******* 6 " + tab);
             if(!$scope.devices){
             startLoading($scope);
             $http.get("/dash/devices")
             .success($scope.renderDevices)
             .finally(function(){
             endLoading($scope);
             });
             }
             break;
             }*/
            case 10:
                $scope.viewLength = 0;
                $scope.newViewBy = viewBy.complaints;
                try {
                    if (!$scope.serviceComplaints) {
                        $http.get("/dash/getComplaint")
                            .success($scope.renderComplaints);
                    }
                }
                catch (e) {
                    console.log(e);
                    $http.get("/dash/getComplaint")
                        .success($scope.renderComplaints);
                }
                if($scope.serviceComplaints.length < viewBy.complaints){
                    $scope.newViewBy = $scope.serviceComplaints.length;
                }
                $scope.transactionCount($scope.serviceComplaints.length, 10);
                break;
            case 12: {
                break;
            }
            case 13: {
                break;
            }
            case 14: {
                break;
            }
            case 15: {
                $http.get("/dash/custom_prices")
                    .success(function (response) {
                        console.log("Get --- > All Custom Price List");
                        $scope.customPrices = response;
                        $scope.items16 = $scope.customPrices;
                        $scope.viewby = 10;
                        $scope.totalItems = $scope.customPrices.length;
                        $scope.currentPage = 1;
                        $scope.itemsPerPage = $scope.viewby;
                        $scope.maxSize = 5;
                        $scope.case16Length = $scope.customPrices.length;
                    });
                break;
            }
            case 16: {
                $scope.renderLocationTrackerMaps();
                console.log("LocationTracker Maps ****** 17");
                break;
            }
            case 17: {
                break;
            }
            case 18: {
                console.log("Fetching all Items")
                $scope.countryCodeGet();
                $http.get("/dash/fetch/leadsource").success(function (response) {
                    $scope.Source= response;
                    for (var i = 0; i < response.length; i++) {
                        if (response[i].field == "Lead Source") {
                            $scope.lead.push(response[i]);
                        }
                        if (response[i].field == "Budget") {
                            $scope.budget.push(response[i]);
                        }
                        if (response[i].field == "Salary") {
                            $scope.salary.push(response[i]);
                        }
                        if (response[i].field == "Expected Plot Size") {
                            $scope.plotsize.push(response[i]);
                        }
                        if (response[i].field == "Directions") {
                            $scope.directions.push(response[i]);
                        }
                        if (response[i].field == "Occupation") {
                            $scope.occupation.push(response[i]);
                        }
                    }
                    if ($scope.Source == "") {
                        $scope.lead = [{"type": "Walik-In"},
                            {"type": "Land Line"},
                            {"type": "Mobile"},
                            {"type": "Web Site"},
                            {"type": "Hoarding"},
                            {"type": "News Paper"},
                            {"type": "Hand Bills"},
                            {"type": "TV"},
                            {"type": "Radio"},
                            {"type": "Exhibitions"},
                            {"type": "Road Shows"},
                            {"type": "Digital Marketing"},
                            {"type": "Client Reference"},
                            {"type": "Friend Reference"},
                            {"type": "Employee Reference"},
                            {"type": "Other Reference"},
                            {"type": "Any Other Mode"}
                        ];
                        $scope.budget = [
                            {"type": "< 30 Lakhs"},
                            {"type": "30,00,001 - 40,00,000"},
                            {"type": "40,00,001 - 50,00,000"},
                            {"type": "50,00,001 - 60,00,000"},
                            {"type": "60,00,001 - 75,00,000"},
                            {"type": "75,00,001 - 1,00,00,000"},
                            {"type": "> 1,00,00,000"}
                        ];
                        $scope.salary = [
                            {"type": "< 3,00,000"},
                            {"type": "3,00,001 - 6,00,000"},
                            {"type": "6,00,001 - 10,00,000"},
                            {"type": "10,00,001 - 15,00,000"},
                            {"type": "15,00,001 - 20,00,000"},
                            {"type": "> 200,00,000"}
                        ];
                        $scope.plotsize = [
                            {"type": "< 1800 Sq.ft"},
                            {"type": "1801 - 2400 Sq.ft"},
                            {"type": "2401 - 3000 Sq.ft"},
                            {"type": "3001 - 4000 Sq.ft"},
                            {"type": "4001 - 5000 Sq.ft"},
                            {"type": "> 5000 Sq.ft"}
                        ];
                        $scope.directions = [
                            {"type": "north"},
                            {"type": "east"},
                            {"type": "west"},
                            {"type": "south"}
                        ];
                        $scope.occupation = [
                            {"type": "Central Govt"},
                            {"type": "State Govt"},
                            {"type": "Private"},
                            {"type": "Professional"},
                            {"type": "Self Employed"},
                            {"type": "Others"}
                        ];
                    }
                });
                // $http.get("/dash/items")
                //     .success(function (response) {
                //         masterItems = response ;
                //         $scope.itemCategories = masterItems.unique("Manufacturer");
                //         $scope.itemSubCategories = masterItems.unique("subCategory");
                //         $scope.itemSubSubCategories = masterItems.unique("subsubCategory");
                //
                //         //console.log($scope.itemCategories)
                //     })
                $scope.renderMeetingReport();
                break;
            }
            case 19 : {
                //Fetch Leave records if tab is activated
                try {
                    if ($scope.nav[19].activated) {
                        $scope.renderLeaveReport();
                    }
                }
                catch (e) {
                    console.log(e);
                    $scope.renderLeaveReport();
                }
                break;
            }
            case 20 : {
                //Fetch Playlist if tab is activated
                $http.get("/dash/playlist")
                    .success($scope.renderPlaylists);
                break;
            }
            case 22 :{
                //Fetch Leave records if tab is activated
                break;
            }
            case 24 : {
                //Fetch Karaokes if tab is activated
                console.log("Fetching all Karaokes")
                $http.get("/dash/karaoke")
                    .success(function (response) {
                        $scope.allKaraokes = response;
                        console.log($scope.allKaraokes)
                    })
                break;
            }
            case 25 : {
                //Fetch Games if tab is activated
                console.log("Fetching all Games")
                $http.get("/dash/games")
                    .success(function (response) {
                        $scope.allGames = response;
                        console.log($scope.allGames)
                    })
                break;
            }
            case 26 : {
                console.log("Fetching Process Data");
                $scope.refreshProcessData();
                break;
            }
            case 28 :{
                break;
            }
            case 29 : {
                //Fetch Goals if tab is activated
                console.log("***** Tab 29 : Fetching all Goals")
                $scope.viewLength = 0;
                $scope.newViewBy = viewBy.goals;
                /*$http.get("/dash/goals")
                 .success(function(response){
                 $scope.allGoals = response;
                 console.log($scope.allGoals)
                 })*/
                goalSearchObj.viewLength = 0;
                goalSearchObj.viewBy = initialViewBy;
                goalSearchObj.searchBy = [];
                goalSearchObj.searchFor = '';
                $scope.goalEmployeecode.all_Colleague_Code='';
                if($scope.applicationType == 'Atmosphere' && $scope.user.sellerObject) {
                    goalSearchObj.resort = $scope.user.sellerObject.Resort;
                }
                $scope.allGoals = [];
                $scope.reportGoals = [];
                //  $scope.tempGoals = [];
                $http.post("/dash/mastergoals", goalSearchObj)
                    .success($scope.renderGoals);
                $http.post('/dash/mastergoals/count', goalSearchObj)
                    .success(function (response) {
                        console.log("Goals count--------->>>"+response.length)
                        $scope.transactionCount(response, 29)
                    });
                $http.get('/dash/allUsers')
                    .success(function (response) {
                        console.log("Goals users count--------->>>")
                        // console.log(response)
                        if(response.length) $scope.allGoalUsers = response
                    });
                break;
            }
            case 31 :{
                //Fetch Supplier if tab is activated
                console.log("Changed ******* 31 " + tab);
                if (masterSupplier.length == 0) {
                    $http.get("/dash/supplier")
                        .success(function (res) {
                            $scope.renderServiceSupplier(res);
                            if(res[0].stockiNumber){
                                for(var i=0;i<res.length;i++){
                                    if(res[0].stockiNumber==res[i].Stockist){
                                        $scope.warehouseRole = res[0].stockiNumber;
                                        $scope.suppliers.push(res[i]);
                                        console.log($scope.suppliers);
                                        masterSupplier = $scope.suppliers;
                                        $scope.allSupplier = $scope.suppliers;
                                    }
                                }
                            }
                            if(!res[0].stockiNumber) {
                                $scope.suppliers = res;
                                masterSupplier = res;
                                $scope.allSupplier = res;
                            }
                            //$scope.suppliers = res;
                            if ($scope.allSupplier.length == 0) {
                                $scope.uploadFiles.suppliers = true;
                            }
                            $scope.supplier_city = masterSupplier.unique('City');
                            $scope.supplier_area = masterSupplier.unique('Area');
                            $scope.supplier_city.map(function (supplier) {
                                supplier.selected_city = true;
                                return supplier;
                            });
                            $scope.renderSupplier($scope.suppliers);
                            $scope.supplier_area.map(function (supplier) {
                                supplier.selected_area = true;
                                return supplier;
                            }) ;
                        })
                }
                $scope.newViewBy = viewBy.suppliers;
                $scope.supplier_count = $scope.suppliers.length;
                $scope.showSupplierTransactions = true;
                if ($scope.supplier_count < viewBy.suppliers) {
                    $scope.newViewBy = $scope.supplier_count;
                }
                jQuery.noConflict();
                $('.showSupplierImages').css('display', 'none');
                $('#supplierModal').css('pointer-events', 'auto');
                break;
            }
            case 32 :{
                //Fetch PurchaseOrder if tab is activated
                $scope.viewLength = 0;
                $scope.newViewBy = localViewBy;
                console.log("***** Tab 32 : Fetching PurchaseOrder");
                // $scope.getAllPurchaseOrders = function() {
                //using this api here for to display suppliers in fileters
                $http.get("/dash/supplier")
                    .success(function(response){
                        if(response[0].stockiNumber){
                            for(var i=0;i<response.length;i++){
                                if(response[0].stockiNumber == response[i].Stockist){
                                    $scope.suppliers.push(response[i]);
                                }
                            }
                        }
                        if(!response[0].stockiNumber) {
                            $scope.suppliers = response;
                        }
                    })
                // $http.post("/dash/purchase/orders")
                //     .success(function (response) {
                //         $scope.purchaseOrder = response;
                //         $scope.viewLength = 0;
                //         $scope.newViewBy = viewBy.purchaseorder;
                //
                //         if($scope.purchaseOrder.length < viewBy.purchaseorder){
                //             $scope.newViewBy = $scope.purchaseOrder.length;
                //         }
                //         $scope.renderPurchaseOrders(response,32);
                //
                //
                //
                //     })
                if($scope.user.role == 'Supplier'){
                    $http.get("/dash/checkIfSupplier/:phone",+$scope.user.sellerphone)
                        .success(function(supplier){
                            // console.log(supplier)
                            $http.get('dash/customprice/'+supplier[0].Suppliercode)
                                .success(function(response){
                                    $scope.renderItems(response);
                                    masterItems = response;
                                    $scope.itemCategories = response.unique("Manufacturer"); //Get the categories for products for subgrouping
                                    $scope.PurchaseOrderitemsInModal = response;
                                    for(var i=0; i < $scope.PurchaseOrderitemsInModal.length; i++ ){
                                        $scope.PurchaseOrderitemsInModal[i].orderMRP = Number($scope.PurchaseOrderitemsInModal[i].MRP) - (Number($scope.PurchaseOrderitemsInModal[i].MRP) * Number($scope.PurchaseOrderitemsInModal[i].Specials) / 100);
                                        $scope.PurchaseOrderitemsInModal[i].added = $scope.doesItemExistsInCart($scope.newPurchaseOrderItemList, "Product", $scope.PurchaseOrderitemsInModal[i]);
                                    }
                                    //$scope.handleChangeInCategory('Manufacturer', 'All');
                                    // console.log($scope.PurchaseOrderitemsInModal)
                                })
                        })
                }else {
                    // $http.get("/dash/items")
                    //     .success(function (response) {
                    //         $scope.renderItems(response);
                    //         masterItems = response;
                    //         $scope.itemCategories = response.unique("Manufacturer"); //Get the categories for products for subgrouping
                    //         $scope.PurchaseOrderitemsInModal = response;
                    //
                    //         for (var i = 0; i < $scope.PurchaseOrderitemsInModal.length; i++) {
                    //             $scope.PurchaseOrderitemsInModal[i].orderMRP = Number($scope.PurchaseOrderitemsInModal[i].MRP) - (Number($scope.PurchaseOrderitemsInModal[i].MRP) * Number($scope.PurchaseOrderitemsInModal[i].Specials) / 100);
                    //             $scope.PurchaseOrderitemsInModal[i].added = $scope.doesItemExistsInCart($scope.newPurchaseOrderItemList, "Product", $scope.PurchaseOrderitemsInModal[i]);
                    //         }
                    //
                    //         //$scope.handleChangeInCategory('Manufacturer', 'All');
                    //     })
                }
                break;
            };
            case 34: {
                break;
            };
            case 35: {
                $scope.viewLength = 0;
                $scope.newViewBy = viewBy.allbidHistory ;
                bidHistorySearchObj.viewLength = 0;
                bidHistorySearchObj.viewBy = initialViewBy;
                bidHistorySearchObj.searchBy = [];
                bidHistorySearchObj.searchFor = '';
                // $http.post("/dash/items", bidHistorySearchObj)
                //     .success(function (res) {
                //         $scope.renderBidHistory(res);
                //
                //     });
                //
                // $http.post("/dash/item/count", bidHistorySearchObj)
                //     .success(function (response) {
                //         $scope.transactionCount(response, 35)
                //     });
                console.log("Changed ******* " + tab);
                // $scope.getBids = function(){
                //     $http.get("/dash/items").success(function (result) {
                //         console.log(result)
                //         $scope.bidhistory = result;
                //     })
                // }
                $scope.getBids();
                $scope.getBidshistoy();
                break;
            };
            case 33 : {
                //Fetch Goals if tab is activated
                console.log("***** Tab 33 : Tab not in use");
                $scope.posTabFlag= true;
                $scope.addPosInitialize('posTab');
                $scope.store_changed();
                document.getElementById("posItemCode").focus();
                /*   atmsUsersSearchObj.viewLength = 0;
                 atmsUsersSearchObj.viewBy = 15;
                 atmsUsersSearchObj.searchBy = [];
                 atmsUsersSearchObj.searchFor = '';
                 console.log($scope.allGoalUsers)
                 $http.get("/dash/all/performance")
                 .success(function(response)
                 {
                 console.log(response)
                 $scope.allPerformance = response
                 });
                 $http.post('/dash/allATMSUsers',atmsUsersSearchObj)
                 .success(function (response) {
                 console.log("Goals users count--------->>>",response.length)
                 // console.log(response)
                 $scope.allGoalUsers = response
                 });*/
                break;
            }
            case 36 : {
                //Fetch Goals if tab is activated
                console.log("***** Tab 36 : Fetching all Performance Reports");
                $scope.showATMSReports = false;
                $scope.atmsTabName = 'Home';
                $scope.atmsTab = 0;
                break;
            }
            case 37 : {
                //Fetch Goals if tab is activated
                console.log("***** Tab 37 : ATmosphere Dashboard");
                $scope.atmsTabName='Dashboard';
                $scope.department_perf_groups = [];
                $scope.showdepartments = false;
                $scope.distinctperformance=[];
                resortfilter.resortname='all';
                $scope.resortname = 'all';
                $scope.atmsDasboard.dashboard_startDate = new Date();
                $scope.atmsDasboard.dashboard_startDate = new Date($scope.atmsDasboard.dashboard_startDate.setDate($scope.atmsDasboard.dashboard_startDate.getDate() - 30));
                $scope.atmsDasboard.dashboard_todayDate = new Date();
                var start_date = $scope.atmsDasboard.dashboard_startDate;
                var today = $scope.atmsDasboard.dashboard_todayDate;
                today.setHours(0, 0, 0)
                start_date.setHours(0,0,0)
                resortfilter.TODAY_DATE = [today.getFullYear(), (today.getMonth() + 1).padLeft(), today.getDate().padLeft()].join('-') + ' '
                    + [today.getHours().padLeft(), today.getMinutes().padLeft(), today.getSeconds().padLeft()].join(':');
                resortfilter.START_DATE = [start_date.getFullYear(), (start_date.getMonth() + 1).padLeft(), (start_date.getDate()).padLeft()].join('-') + ' '
                    + [start_date.getHours().padLeft(), start_date.getMinutes().padLeft(), start_date.getSeconds().padLeft()].join(':');
                $scope.atms_Dashboard_filter.TODAY_DATE = resortfilter.TODAY_DATE;
                $scope.atms_Dashboard_filter.START_DATE = resortfilter.START_DATE;
                $http.post("/dash/goals/calculation/weekly",resortfilter).success(function(goals_pendingcount)
                {
                    console.log("Goals Pending Count......." + goals_pendingcount.length);
                    // console.log(goals_pendingcount)
                    $scope.atmsDashboardData = goals_pendingcount;
                    if($scope.atmsDashboardData.length){
                        //  console.log($scope.atmsDashboardData)
                        if($scope.atmsDashboardData[0]._id.DEPARTMENT){
                            $scope.departmentValue = $scope.atmsDashboardData[0]._id.DEPARTMENT;
                            resortfilter.DEPARTMENT = $scope.departmentValue;
                            $scope.showdepartments = true;
                            $scope.pageNumber = 0;
                            resortdataonclick.resort='all';
                            //  console.log(resortfilter);
                            $http.post("/dash/atms/employeescore",resortfilter).success(function(response){
                                // console.log(response)
                                if(response){
                                    $scope.empatmsIndividualReport = response;
                                    $scope.groupallColleaguesFunc($scope.empatmsIndividualReport);
                                }
                            });
                            $http.post("/dash/atms/employeescorecount",resortfilter).success(function(response){
                                if(response){
                                    // console.log("count funct" + response.length);
                                    $scope.groupallColleaguescountFunc(response);
                                }
                            });
                            $http.post("/dash/allGoals/resorts",resortfilter).success(function(response){
                                // console.log(response);
                                if(response){
                                    $scope.resortbuttons=response;
                                    if($scope.user.sellerObject){
                                        for(var i=0; i<$scope.resortbuttons.length; i++){
                                            if($scope.resortbuttons[i] == $scope.user.sellerObject.Resort){
                                                $scope.getResortCount($scope.resortbuttons[i], i)
                                                $scope.loggedInResort = $scope.resortbuttons[i];
                                            }
                                        }
                                    }
                                }
                            });
                            $http.post("/dash/atms/dashboard/department",resortfilter).success(function (response) {
                                // console.log("Show department goals" + response.length);
                                $scope.department_perf_groups = response;
                            });
                        }
                        if(goals_pendingcount.length) {
                            for (var i = 0; i < goals_pendingcount.length; i++) {
                                $scope.atmsDashboardData[i].pendingCircle = (100 * goals_pendingcount[i].pending_goals) / $scope.atmsDashboardData[i].total_goals;
                                $scope.atmsDashboardData[i].NcCircle = goals_pendingcount[i].nc_goals ? ((100 * goals_pendingcount[i].nc_goals) / $scope.atmsDashboardData[i].total_goals) : 0;
                            }
                        }
                    }
                });
                //$scope.tempInsertUsersInEvaluatedData();
                break;
            }
            case 38 : {
                $scope.fetchAsset('All');
                if($scope.sellers && !($scope.miscellaneousReceiptAsset.branchCode)){
                    $scope.branchSellerUser = $scope.sellers;
                }
                $http.post("/dash/allBranches",sellerObj1)
                    .success(function(branches){
                        // console.log("all branches"+branches.length)
                        $scope.branches = branches;
                        // console.log()
                        if($scope.user){
                            if($scope.user.sellerObject){
                                if($scope.user.sellerObject.branchCode[0]){
                                    $scope.getBranchName($scope.user.sellerObject.branchCode[0]);
                                }
                            }
                        }
                    });
                break;
            }
            default:
                console.log("Changed default *******" + tab);
                break;
        }
    }
    /* $scope.getDeparmentgoals=function(department,index){
     $scope.selectedDepartment = department;
     $scope.department_perf_groups =[];
     if(department){
     // console.log(index)
     $scope.pageNumber=index;
     for(var i=0;i< $scope.groupeddepartment.length;i++){
     // console.log($scope.department_perf_groups[i])
     if( $scope.groupeddepartment[i].DEPARTMENT==department && $scope.groupeddepartment[i].RESORT==$scope.resortname )
     {
     $scope.department_perf_groups.push($scope.groupeddepartment[i])
     }
     }
     }
     }*/
    $scope.searchColleaguename=function(empname){
        // console.log(empname)
        var temporaryDate =new Date();
        $scope.dashboard_startDate = new Date();
        $scope.dashboard_startDate = new Date($scope.dashboard_startDate.setDate($scope.dashboard_startDate.getDate() - 30));
        $scope.dashboard_todayDate = new Date();
        var start_date = new Date(temporaryDate.setDate(temporaryDate.getDate() - 30));
        var today = new Date();
        today.setHours(0, 0, 0)
        resortfilter.TODAY_DATE = [today.getFullYear(), (today.getMonth() + 1).padLeft(), today.getDate().padLeft()].join('-') + ' '
            + [today.getHours().padLeft(), today.getMinutes().padLeft(), today.getSeconds().padLeft()].join(':');
        start_date.setHours(0,0,0)
        resortforsearch.TODAY_DATE = [today.getFullYear(), (today.getMonth() + 1).padLeft(), today.getDate().padLeft()].join('-') + ' '
            + [today.getHours().padLeft(), today.getMinutes().padLeft(), today.getSeconds().padLeft()].join(':');
        start_date.setHours(0,0,0)
        resortforsearch.START_DATE = [start_date.getFullYear(), (start_date.getMonth() + 1).padLeft(), (start_date.getDate()).padLeft()].join('-') + ' '
            + [start_date.getHours().padLeft(), start_date.getMinutes().padLeft(), start_date.getSeconds().padLeft()].join(':');
        resortforsearch.resortname = $scope.resortname;
        resortforsearch.DEPARTMENT = $scope.departmentValue;
        resortforsearch.employeename=empname; //--- This can be either employee name or employee code
        if(resortforsearch.employeename) {
            $http.post("/dash/atms/employeescore/search",resortforsearch).success(function (response) {
                if(response){
                    // console.log(response)
                    $scope.empatmsIndividualReport = response;
                    $scope.groupColleaguesFunc($scope.empatmsIndividualReport);
                }
            })
        }
        else{
            // console.log("inside else")
            $http.post("/dash/atms/employeescore",resortforsearch).success(function(response){
                if(response){
                    $scope.empatmsIndividualReport = response;
                    $scope.groupallColleaguesFunc($scope.empatmsIndividualReport);
                    // $scope.groupallColleaguescountFunc(($scope.empatmsIndividualReport))
                }
            });
            $http.post("/dash/atms/employeescorecount",resortforsearch).success(function(response){
                if(response){
                    // $scope.empatmsIndividualReport = response;
                    // $scope.groupallColleaguesFunc(response);
                    $scope.groupallColleaguescountFunc(response)
                }
            });
        }
    }
    $scope.getResortCount=function(resort,index,deptIndex,department) {
        console.log("Resort function");
        jQuery.noConflict();
        $('.refresh').css("display", "inline");
        $scope.department_perf_groups = [];
        $scope.showdepartments = false;
        $scope.pageNumber=0;
        $scope.resortnumber = index;
        if(resort){
            $scope.resortname = resort;
            resortfilter.resortname = resort;
            resortdataonclick.resort = resort;
        }
        else{
            resortfilter.resortname = $scope.resortname;
            resortdataonclick.resort = $scope.resortname;
        }
        var start_date = $scope.atmsDasboard.dashboard_startDate;
        var today = $scope.atmsDasboard.dashboard_todayDate;
        today.setHours(0, 0, 0)
        start_date.setHours(0,0,0)
        resortfilter.TODAY_DATE = [today.getFullYear(), (today.getMonth() + 1).padLeft(), today.getDate().padLeft()].join('-') + ' '
            + [today.getHours().padLeft(), today.getMinutes().padLeft(), today.getSeconds().padLeft()].join(':');
        resortfilter.START_DATE = [start_date.getFullYear(), (start_date.getMonth() + 1).padLeft(), (start_date.getDate()).padLeft()].join('-') + ' '
            + [start_date.getHours().padLeft(), start_date.getMinutes().padLeft(), start_date.getSeconds().padLeft()].join(':');
        $scope.atms_Dashboard_filter.TODAY_DATE = resortfilter.TODAY_DATE;
        $scope.atms_Dashboard_filter.START_DATE = resortfilter.START_DATE;
        $http.post("/dash/goals/calculation/weekly", resortfilter).success(function (goals_pendingcount) {
            console.log("Goals Resort Count......." + goals_pendingcount.length);
            // console.log(goals_pendingcount);
            if(goals_pendingcount.length){
                $scope.showNoGoals = false;
                $scope.atmsDashboardData = goals_pendingcount;
                if(department){
                    $scope.departmentValue = department;
                    resortfilter.DEPARTMENT = $scope.departmentValue;
                    $scope.pageNumber=deptIndex;
                }
                else{
                    if($scope.atmsDashboardData[0]){
                        $scope.departmentValue = $scope.atmsDashboardData[0]._id.DEPARTMENT;
                        resortfilter.DEPARTMENT = $scope.departmentValue;
                    }
                    else{
                        $scope.departmentValue = '';
                        resortfilter.DEPARTMENT = $scope.departmentValue;
                    }
                }
                for (var i = 0; i < goals_pendingcount.length; i++) {
                    $scope.atmsDashboardData[i].pendingCircle = (100 * goals_pendingcount[i].pending_goals) / $scope.atmsDashboardData[i].total_goals;
                    $scope.atmsDashboardData[i].NcCircle = (100 * goals_pendingcount[i].nc_goals) / $scope.atmsDashboardData[i].total_goals;
                }
                // console.log(resortfilter)
                if ($scope.resortname && $scope.departmentValue) {
                    $scope.showdepartments = true;
                    resortdataonclick.resort=$scope.resortname;
                    $http.post("/dash/atms/dashboard/department",resortfilter).success(function (response) {
                        console.log("Show department goals" + response.length);
                        if(response){
                            $scope.department_perf_groups = response;
                        }
                    });
                    $http.post("/dash/atms/employeescore",resortfilter).success(function(response){
                        // console.log("colleagues data....1")
                        // console.log(response)
                        if(response){
                            // $scope.empatmsIndividualReport = response;
                            $scope.groupallColleaguesFunc(response);
                        }
                        else{
                            jQuery.noConflict();
                            $('.refresh').css("display", "none");
                        }
                        // console.log($scope.empatmsIndividualReport)
                    });
                    $http.post("/dash/atms/employeescorecount",resortfilter).success(function(response){
                        if(response){
                            $scope.groupallColleaguescountFunc(response);
                        }
                    });
                }
                else{
                    $http.post("/dash/atms/employeescore",resortfilter).success(function(response){
                        // console.log("colleagues data")
                        // console.log(response)
                        if(response){
                            // $scope.empatmsIndividualReport = response;
                            $scope.groupallColleaguesFunc(response);
                        }
                        else{
                            jQuery.noConflict();
                            $('.refresh').css("display", "none");
                        }
                        // console.log($scope.empatmsIndividualReport)
                    });
                    $http.post("/dash/atms/employeescorecount",resortfilter).success(function(response){
                        if(response){
                            $scope.groupallColleaguescountFunc(response);
                        }
                    });
                }
            }
            else{
                $scope.atmsDashboardData ={};
                $scope.colleague_perf_groups = [];
                $scope.department_perf_groups=[];
                $scope.showNoGoals = true;
                $scope.totalcolleagues = 0;
                jQuery.noConflict();
                $('.refresh').css("display", "none");
            }
        });
    }
    $scope.auctionStatus = function(carObject){
        console.log("Changing status for :")
        console.log("Toggle status: " + $scope.carAuctionStatus);
        console.log("Car object :" + carObject.Auction_status)
        var body = {};
        body.itemCode = carObject.itemCode;
        //var newStatus = "OFF";
        //body.status = carObject.Auction_status;
        if($scope.carAuctionStatus == true){
            var newStatus = "OFF";
        }
        if($scope.carAuctionStatus == false){
            var newStatus = "ON";
        }
        $http.post("/dash/update/auctionStatus/"+newStatus,body).success(function(result){
            $scope.auctionStatus = result;
        })
    }
    $scope.getBidshistoy = function(){
        $http.get("/dash/bids").success(function (result) {
            $scope.Bidshistorydetails = result;
        })
    }
    var HighestBidRefresh = []
    $scope.getOneHighestBid = function(itemCode){
        HighestBidRefresh = itemCode;
        var body = {};
        body.itemCode = itemCode;
        $http.post("/dash/bid/highest", body).success(function (result) {
            $scope.Highestbid = result;
        })
    }
    $scope.bidHistorySearchFilter = function(){
        console.log("bid search ....")
        bidHistorySearchObj.viewLength = 0;
        bidHistorySearchObj.viewBy = initialViewBy;
        $scope.viewLength = 0;
        $scope.newViewBy = localViewBy;
        if($scope.allbidHistorySearch.filter){
            bidHistorySearchObj.searchFor = $scope.allbidHistorySearch.filter;
            bidHistorySearchObj.searchBy = bidHistorySearchBy;
        }
        // $http.post("/dash/items", bidHistorySearchObj)
        //     .success(function(res){
        //         console.log("bid serch results here=====");
        //         console.log(res);
        //
        //         $scope.renderBidHistory(res);
        //     });
        //
        // $http.post("/dash/item/count", bidHistorySearchObj)
        //     .success(function(res) {
        //         $scope.transactionCount(res,35);
        //     });
    };
    $scope.getPurchaseSuppliers = function(){
        $http.get("/dash/supplier")
            .success(function(response){
                $scope.getPurchaseSuppliers = response;
                console.log($scope.getPurchaseSuppliers);
            })
    }
    $scope.validatePhone = false;
    $scope.existingLead = false;
    $scope.existingCustomer = false;
    $scope.validateDealerphone = false;
    $scope.dealerPhoneExist = false;
    $scope.phoneNoValidate = function(tab ,flag,temp,type){
        $scope.validateDealerphone = false;
        switch(tab){
            /*customer tab*/
            case 0: {
                if (flag != true) {
                    var body = {
                        phone: temp
                    };
                    $http.post("/dash/enquiry/validate/phone", body).success(function (res) {
                        if(type != 'edit'){
                            if(temp){
                                if(res.length){
                                    $scope.validateDealerphone = true;
                                }else{
                                    $scope.validateDealerphone = false;
                                }
                            }else{
                                $scope.validateDealerphone = false;
                            }
                        }else if(type == 'edit') {
                            if (temp != $scope.oldPhoneNo && temp) {
                                if (res.length) {
                                    $scope.validateDealerphone = true;
                                } else {
                                    $scope.validateDealerphone = false;
                                }
                            } else {
                                $scope.validateDealerphone = false;
                            }
                        }
                    })
                }
                break;
            }
            /*Enquiry tab*/
            case 1:{
                if(flag != true){
                    var body = {
                        phone:temp
                    };
                    $http.post("/dash/enquiry/validate/phone",body).success(function(res){
                        if(res == ''){
                            $scope.validatePhone = true;
                            $scope.existingLead = false;
                            $scope.existingCustomer = false;
                            $scope.newDealercode();
                        }
                        else if(res){
                            $scope.validatePhone = false;
                            if(!res[0].type || res[0].type == 'Lead'){
                                $scope.existingLead = true;
                            }else{
                                $scope.existingLead = false;
                            }
                            if(res[0].type == 'Customer'){
                                $scope.existingCustomer = true;
                            }else{
                                $scope.existingCustomer = false;
                            }
                            $scope.meeting.name = res[0].DealerName;
                            $scope.meeting.email = res[0].email;
                            $scope.meeting.Address = res[0].Address ;
                            $scope.meeting.Area = res[0].Area ;
                            $scope.meeting.City = res[0].City ;
                            $scope.meeting.Dealercode = res[0].Dealercode ;
                            $scope.meeting.dealername = res[0].DealerName;
                            $scope.meeting.dealerphone = res[0].Phone;
                            $scope.meeting.stockist = res[0].Stockist;
                        }
                    })
                }
            }
        }
    }
    $scope.filterRecentOrderTransaction = function()
    {
        var orderDelearCode=[];
        // console.log('recentorder recent',recentorder);
        for(var i=0; i< recentorder.length; i++){
            if(recentorder[i].type[0] == 'Order'){
                orderDelearCode.push({'Dealercode':recentorder[i].dealercode[0]});
            }
        }
        orderDelearCode= Array.from(new Set(orderDelearCode))
        if(orderDelearCode.length){
            $http.post("/dash/stores/dealercode",orderDelearCode)
                .success(function (response) {
                    // console.log('response order',response);
                    $scope.recentDelears = response;
                    // console.log('$scope.recentDelears',$scope.recentDelears);
                })
        }else{
            $scope.recentDelears = [];
        }
    }
    $scope.toggleDashboard = function(index){
        $scope.summaryTab = index;
    }
    $scope.showMaps = function (){
        $scope.showMap = false;
        $scope.mapShow = false;
    }
    $scope.mapShow = false;
    $scope.orderLoader = false;
    $scope.deleteOrders = function (){
        bootbox.confirm("Are you sure?", function(result){
            if(result){
                console.log('orderDetails',$scope.orderDetails);
                var date = new Date();
                var deleted_date = $scope.dateFormate(date);
                var deleteObj = {
                    deletedBy : $scope.user.username?$scope.user.username:'PORTAL',
                    deleted_date : deleted_date
                }
                if($scope.orderDetails.length){
                    $http.put("/dash/orders/delete/"+$scope.orderDetails[0].orderId,deleteObj).success(function (resp){
                        console.log('resp',resp);
                        $scope.clearFilter(1);
                    })
                }
            }
        })
    }
    $scope.showQuotationDetails = function (order) {
        console.log("Show details for quotations" + order.orderId);
        $http.get("/dash/orders/" + order.orderId)
            .success(function (response) {
                $scope.orderDetails = response;
                //console.log(response);
                $scope.cgstTotal = 0;
                $scope.sgstTotal = 0;
                $scope.igstTotal = 0;
                for (var i = 0; i < $scope.orderDetails.length; i++) {
                    //console.log($scope.getCgst($scope.orderDetails[i].itemcode))
                    $scope.cgstTotal += (parseFloat($scope.orderDetails[i].CGST / 100) * parseFloat($scope.orderDetails[i].MRP)) * Number($scope.orderDetails[i].quantity);
                    $scope.sgstTotal += (parseFloat($scope.orderDetails[i].SGST / 100) * parseFloat($scope.orderDetails[i].MRP)) * Number($scope.orderDetails[i].quantity);
                    $scope.igstTotal += (parseFloat($scope.orderDetails[i].IGST / 100) * parseFloat($scope.orderDetails[i].MRP)) * Number($scope.orderDetails[i].quantity);
                }
                $scope.orderDetails.qty = 0;
                //$scope.showDetails(response);
                var temp = 0;
                for (var i = 0; i < response.length; i++) {
                    if (response[i].itemcode != 'VVV' && response[i].itemcode != 'WWW' && response[i].itemcode != 'XXX' && response[i].itemcode != 'YYY' && response[i].itemcode != 'ZZZ')
                        temp += Number(response[i].quantity)
                }
                $scope.orderDetails.qty = temp
            });
    };
    //Get one PurchaseOrders
    $scope.showPurchaseOrderDetails = function(order){
        $scope.order_transactions = [];
        $scope.translated_transactions = [];
        $scope.transaction_summary = [];
        $http.get("/dash/inventory/transaction/purchase/" + order.PurchaseOrderId[0])
            .success(function(response){
                if(response.length) {
                    $scope.order_transactions = response;
                    $scope.getTermsandCondtion();
                    console.log("======$scope.transaction_summary=====");
                    console.log($scope.transaction_summary);
                    var translated_data = [];
                    var balance_summary = [];
                    if(response[0].items){
                        for(var i = 0; i < response.length; i++){
                            var tempObject = {};
                            tempObject.type = 'Received';
                            tempObject.date_time = response[i].date_added;
                            tempObject.id = response[i].transaction_id;
                            tempObject.items = response[i].items;
                            for(var a = 0; a < response[i].items.length; a++){
                                if(!balance_summary[response[i].items[a].itemCode]) {
                                    balance_summary[response[i].items[a].itemCode] = {
                                        'Product' : response[i].items[a].Product,
                                        'quantity' : 0
                                    };
                                    balance_summary[response[i].items[a].itemCode].quantity += response[i].items[a].quantity;
                                } else balance_summary[response[i].items[a].itemCode].quantity += response[i].items[a].quantity;
                            }
                            translated_data.push(tempObject);
                            if(response[i].receive_details){
                                for(var j = 0; j < response[i].receive_details.length; j++){
                                    tempObject = {};
                                    tempObject.type = 'Received';
                                    tempObject.date_time = response[i].receive_details[j].receive_date;
                                    tempObject.id = response[i].receive_details[j].receive_id;
                                    tempObject.items = response[i].receive_details[j].items;
                                    for(var b = 0; b < response[i].receive_details[j].items.length; b++){
                                        if(!balance_summary[response[i].receive_details[j].items[b].itemCode]) {
                                            balance_summary[response[i].receive_details[j].items[b].itemCode] = {
                                                'Product' : response[i].items[a].Product,
                                                'quantity' : 0
                                            };
                                            balance_summary[response[i].receive_details[j].items[b].itemCode].quantity -= response[i].receive_details[j].items[b].quantity;
                                        } else balance_summary[response[i].receive_details[j].items[b].itemCode].quantity -= response[i].receive_details[j].items[b].quantity;
                                    }
                                    translated_data.push(tempObject);
                                }
                            }
                        }
                    }
                    if(response[0].transaction){
                        for(var i = 0; i < response.length; i++){
                            console.log("response[i]");
                            console.log(response[i].transaction);
                            var tempObject = {};
                            tempObject.type = 'Received';
                            tempObject.date_time = response[i].date_added;
                            tempObject.id = response[i].transaction_id;
                            tempObject.transaction = response[i].transaction;
                            console.log("tempObject.transaction");
                            console.log(tempObject.transaction);
                            if(response[i].transaction){
                                for(var a = 0; a < response[i].transaction.length; a++){
                                    if(!balance_summary[response[i].transaction[a].itemCode]) {
                                        balance_summary[response[i].transaction[a].itemCode] = {
                                            'Product' : response[i].transaction[a].Product,
                                            'quantity' : 0
                                        };
                                        balance_summary[response[i].transaction[a].itemCode].quantity += Number(response[i].transaction[a].quantity);
                                    } else balance_summary[response[i].transaction[a].itemCode].quantity += Number(response[i].transaction[a].quantity);
                                }
                                translated_data.push(tempObject);
                            }
                            if(response[i].receive_details){
                                for(var j = 0; j < response[i].receive_details.length; j++){
                                    tempObject = {};
                                    tempObject.type = 'Received';
                                    tempObject.date_time = response[i].receive_details[j].receive_date;
                                    tempObject.id = response[i].receive_details[j].receive_id;
                                    tempObject.transaction = response[i].receive_details[j].transaction;
                                    for(var b = 0; b < response[i].receive_details[j].transaction.length; b++){
                                        if(!balance_summary[response[i].receive_details[j].transaction[b].itemCode]) {
                                            balance_summary[response[i].receive_details[j].transaction[b].itemCode] = {
                                                'Product' : response[i].transaction[a].Product,
                                                'quantity' : 0
                                            };
                                            balance_summary[response[i].receive_details[j].transaction[b].itemCode].quantity -= response[i].receive_details[j].transaction[b].quantity;
                                        } else balance_summary[response[i].receive_details[j].transaction[b].itemCode].quantity -= response[i].receive_details[j].transaction[b].quantity;
                                    }
                                    translated_data.push(tempObject);
                                }
                            }
                        }
                    }
                    console.log(balance_summary);
                    for(var k in balance_summary){
                        if(balance_summary.hasOwnProperty(k)){
                            $scope.transaction_summary.push({
                                'itemCode' : k,
                                'Product' : balance_summary[k].Product,
                                'quantity' : balance_summary[k].quantity
                            })
                        }
                    }
                    console.log("$scope.transaction_summary");
                    console.log($scope.transaction_summary);
                    translated_data.sort(function(a, b) {
                        return new Date(a.date_time) > new Date(b.date_time) ? 1 : -1;
                    });
                    var totalTxnQtys = 0;
                    for(var i=0;i< translated_data.length;i++){
                        if(translated_data[i].transaction){
                            totalTxnQtys = 0;
                            for(var j=0; j<translated_data[i].transaction.length;j++){
                                totalTxnQtys += Number(translated_data[i].transaction[j].quantity);
                            }
                            translated_data[i].itemsRecived = translated_data[i].transaction.length;
                            translated_data[i].totalTxnRecvdQtys = totalTxnQtys;
                        }
                        translated_data[i].recived = response[i].stockist;
                    }
                    $scope.translated_transactions = translated_data;
                }
            });
        $http.get("/dash/purchase/order/details/" + order.PurchaseOrderId)
            .success( function(response) {
                $scope.purOrderDetails = [];
                for (var i = 0; i < response.length; i++) {
                    $scope.objAddr = false;
                    try{
                        response[i].objAddress = JSON.parse(response[i].Address)
                        console.log(response[i].Address);
                        $scope.objAddr = true;
                    }catch(e){};
                    try{
                        response[i].objShipAddress = JSON.parse(response[i].shipping_address)
                        $scope.objAddr = true;
                    }catch(e){};
                    (function (i) {
                        if(response[i].itemcode != "GEN")
                        {
                            if (masterItems.length > 0) {
                                for (var j = 0; j < masterItems.length; j++) {
                                    if (response[i].itemcode == masterItems[j].itemCode) {
                                        response[i].category = masterItems[j].Manufacturer;
                                        $scope.purOrderDetails.push(response[i])
                                    }
                                }
                            }
                            else {
                                $scope.purOrderDetails.push(response[i])
                            }
                        }else{
                            $scope.purOrderDetails.push(response[i])
                        }
                    }(i))
                }
                var transactionDetails = {};
                transactionDetails = $scope.translated_transactions;
                if(response.length) {
                    var itemCodes = [];
                    var totalQty = [];
                    var balanceQty = [];
                    for (var i = 0; i < response.length; i++) {
                        itemCodes[response[i].itemcode] = response[i].itemcode;
                        if (!totalQty[response[i].itemcode]) totalQty[response[i].itemcode] = 0;
                        totalQty[response[i].itemcode] += response[i].quantity;
                        var totalQty1 = 0;
                    }
                    if (transactionDetails.length) {
                        for (var j = 0; j < transactionDetails.length; j++) {
                            for (var k = 0; k < transactionDetails[j].transaction.length; k++) {
                                totalQty[transactionDetails[j].transaction[k].itemCode] -= transactionDetails[j].transaction[k].quantity;
                            }
                        }
                    }
                    for (var i = 0; i < response.length; i++) {
                        response[i].balanceQty = totalQty[response[i].itemcode];
                        response[i].checkQty = totalQty[response[i].itemcode]
                    }
                }
                $scope.purOrderDetails = response;
                $scope.mapTransaction = response[0];
                var stockQty = {};
                $scope.purOrderDetails.qty = 0;
                //$scope.showDetails(response);
                var temp = 0
                for(var i = 0 ; i < response.length ; i++){
                    if(response[i].itemcode != 'VVV' && response[i].itemcode!='WWW' && response[i].itemcode!='XXX' && response[i].itemcode!='YYY' && response[i].itemcode!='ZZZ')
                        temp += Number(response[i].quantity)
                }
                $scope.purOrderDetails.qty = temp
            });
        jQuery.noConflict();
        $("#purchaseorder_fulfiller").val(null);
        $("#purchaseorder_deliveryDate").val(null);
        $("#purchaseorderLine_fulfiller").val(null);
        $("#purchaseorderLine_deliveryDate").val(null);
    };
    $scope.showQuotationDetails = function(order){
        console.log("Show details for quotations" + order.orderId);
        $http.get("/dash/orders/" + order.orderId)
            .success( function(response) {
                $scope.orderDetails =response;
                //console.log(response);
                $scope.cgstTotal=0;
                $scope.sgstTotal=0;
                $scope.igstTotal=0;
                for(var i=0;i<$scope.orderDetails.length;i++) {
                    //console.log($scope.getCgst($scope.orderDetails[i].itemcode))
                    $scope.cgstTotal += (parseFloat($scope.orderDetails[i].CGST/ 100) * parseFloat($scope.orderDetails[i].MRP)) * Number($scope.orderDetails[i].quantity);
                    $scope.sgstTotal += (parseFloat($scope.orderDetails[i].SGST/ 100) * parseFloat($scope.orderDetails[i].MRP)) * Number($scope.orderDetails[i].quantity);
                    $scope.igstTotal += (parseFloat($scope.orderDetails[i].IGST / 100) * parseFloat($scope.orderDetails[i].MRP)) * Number($scope.orderDetails[i].quantity);
                }
                $scope.orderDetails.qty = 0;
                //$scope.showDetails(response);
                var temp = 0;
                for(var i = 0 ; i < response.length ; i++){
                    if(response[i].itemcode != 'VVV' && response[i].itemcode!='WWW' && response[i].itemcode!='XXX' && response[i].itemcode!='YYY' && response[i].itemcode!='ZZZ')
                        temp += Number(response[i].quantity)
                }
                $scope.orderDetails.qty = temp
            });
    };
    $scope.clearSearchItems = function () {
        $scope.itemSearch.filter = '';
        // $http.get("/dash/items")
        //     .success($scope.renderItems);
    };
    $scope.clearSearchOrders = function () {
        $scope.orderSearch.filter = '';
        $scope.orderSearch.date_from = undefined;
        $scope.orderSearch.date_to = undefined;
        $scope.archiveOrders.filter = '';
        $scope.archiveOrders.date = undefined;
        /*$http.get("/dash/orders")
         .success($scope.renderOrders);*/
    };
    $scope.clearSearchPurchaseOrders = function () {
        $scope.PurchaseOrderSearch.filter = '';
        $scope.PurchaseOrderSearch.date_from = undefined;
        $scope.PurchaseOrderSearch.date_to = undefined;
        $scope.archiveOrders.filter = '';
        $scope.archiveOrders.date = undefined;
    };
//for quotations
    $scope.clearSearchQuotation = function () {
        $scope.quotationSearch.filter = '';
        $scope.quotationSearch.date_from = undefined;
        $scope.quotationSearch.date_to = undefined;
        $scope.archiveQuotation.filter = '';
        $scope.archiveQuotation.date = undefined;
    }
    $scope.clearSearchMessage = function () {
        console.log('Clear');
        $scope.messageSearch.filter = '';
    };
    $scope.sortOrderBy = function (sortArray, val) {
        console.log("Sort By: " + sortArray + ", val: " + val + ", in order - " + $scope.sortOrder);
        if (val == 0) val = 'date_added';
        if (val == 1) val = 'orderId';
        if (val == 2) val = 'seller';
        if (val == 3) val = 'dealername';
        if (val == 4) val = 'total';
        if (val == 5) val = 'quantity';
        if (val == 6) val = 'stockist';
        if (val == 7) val = 'total_amount';
        if (val == 8) val = 'status';
        $scope.sortOn = val;
        $scope.sortOrder = !$scope.sortOrder;
        $scope[sortArray].sort(sortOrderByName);
    };
    function sortOrderByName(a, b) {
        var nameA, nameB;
        switch ($scope.sortOn) {
            case 'date_added': {
                var date1 = (new Date(a[$scope.sortOn][0].replace(/-/g, "/")));
                var date2 = (new Date(b[$scope.sortOn][0].replace(/-/g, "/")));
                if ($scope.sortOrder) {
                    return date2 > date1 ? 1 : -1;
                } else {
                    return date2 > date1 ? -1 : 1;
                }
            }
            case 'stockist':
            case 'dealername':
            case 'seller':
            case 'orderId': {
                nameA = a[$scope.sortOn][0].toLowerCase();
                nameB = b[$scope.sortOn][0].toLowerCase();
            }
                break;
            case 'total_amount':
            case 'quantity':
            case 'total': {
                nameA = Number(a[$scope.sortOn]);
                nameB = Number(b[$scope.sortOn]);
            }
                break;
            case 'status': {
                nameA = a[$scope.sortOn].toLowerCase();
                nameB = b[$scope.sortOn].toLowerCase();
            }
                break;
        }
        if ($scope.sortOrder) {
            if (nameA < nameB) {
                return -1;
            }
            if (nameA > nameB) {
                return 1;
            }
        } else {
            if (nameA < nameB) {
                return 1;
            }
            if (nameA > nameB) {
                return -1;
            }
        }
        return 0;
    }
    $scope.sortBy = function (sortArray, data, index) {
        //console.log(data+' ---- '+index);
        var val = $scope.nav[data].cols[index];
        console.log("Sort By: " + sortArray + ", val: " + val + ", in order - " + $scope.sortOrder);
        $scope.sortOn = val;
        $scope.sortOrder = !$scope.sortOrder;
        $scope[sortArray].sort(sortByName);
    };
    //sort contacts by name
    function sortByName(a, b) {
        //... Sort by Number....
        if (Number(a[$scope.sortOn]) && Number(b[$scope.sortOn])) {
            var nameA = Number(a[$scope.sortOn]);
            var nameB = Number(b[$scope.sortOn]);
            if ($scope.sortOrder) {
                if (nameA < nameB) {
                    return -1;
                }
                if (nameA > nameB) {
                    return 1;
                }
            } else {
                if (nameA < nameB) {
                    return 1;
                }
                if (nameA > nameB) {
                    return -1;
                }
            }
            return 0;
        } //... Sort by boolean...
        else if (typeof a[$scope.sortOn] === 'boolean' || typeof b[$scope.sortOn] === 'boolean') {
            if (!a[$scope.sortOn]) a[$scope.sortOn] = '1';
            else a[$scope.sortOn] = '0';
            if (!b[$scope.sortOn]) b[$scope.sortOn] = '1';
            else b[$scope.sortOn] = '0';
            var nameA = a[$scope.sortOn].toLowerCase();
            var nameB = b[$scope.sortOn].toLowerCase();
            if ($scope.sortOrder) {
                if (nameA < nameB) {
                    return -1;
                }
                if (nameA > nameB) {
                    return 1;
                }
            } else {
                if (nameA < nameB) {
                    return 1;
                }
                if (nameA > nameB) {
                    return -1;
                }
            }
            return 0;
        } //... Sort by names...
        else {
            if (!a[$scope.sortOn]) a[$scope.sortOn] = '';
            if (!b[$scope.sortOn]) b[$scope.sortOn] = '';
            var nameA = a[$scope.sortOn].toLowerCase();
            var nameB = b[$scope.sortOn].toLowerCase();
            if ($scope.sortOrder) {
                if (nameA < nameB) {
                    return -1;
                }
                if (nameA > nameB) {
                    return 1;
                }
            } else {
                if (nameA < nameB) {
                    return 1;
                }
                if (nameA > nameB) {
                    return -1;
                }
            }
            return 0;
        }
    }
    $scope.searchItems = function () {
        console.log("Search orders for itemcode = " + $scope.itemSearch.itemcode);
        console.log("Search orders for product = " + $scope.itemSearch.product);
        console.log("Search orders for manufacture = " + $scope.itemSearch.manufacturer);
        if ($scope.itemSearch.itemcode && $scope.itemSearch.itemcode != '') {
            for (var i = $scope.items.length - 1; i >= 0; i--) {
                if ($scope.items[i][$scope.nav[3].cols[0]] == $scope.itemSearch.itemcode)
                    console.log("ItemCode  found " + $scope.items[i].itemCode);
                else
                    $scope.items.splice(i, 1);
            }
        }
        if ($scope.itemSearch.product && $scope.itemSearch.product != '') {
            for (var i = $scope.items.length - 1; i >= 0; i--) {
                if ($scope.items[i][$scope.nav[3].cols[1]].toLowerCase().indexOf($scope.itemSearch.product.toLowerCase()) != -1)
                    console.log("Product name found " + $scope.items[i].Product);
                else
                    $scope.items.splice(i, 1);
            }
        }
        if ($scope.itemSearch.manufacturer && $scope.itemSearch.manufacturer != '') {
            for (var i = $scope.items.length - 1; i >= 0; i--) {
                if ($scope.items[i][$scope.nav[3].cols[3]].toLowerCase().indexOf($scope.itemSearch.manufacturer.toLowerCase()) != -1)
                    console.log("Manufacturer name found " + $scope.items[i].Manufacturer);
                else
                    $scope.items.splice(i, 1);
            }
        }
    }
    $scope.$watch('quotationSearch.date_from', function () {
        $scope.quotations = quotation_allOrders;
        if ($scope.quotations) {
            if ($scope.quotations.length) {
                // $scope.quotationSearch.date_to = '  ';
                if ($scope.quotationSearch.date_from == null) $scope.quotationSearch.date_from = undefined;
                if ($scope.quotationSearch.date_to == null) $scope.quotationSearch.date_to = undefined;
                if ($scope.quotationSearch.date_from) {
                    if ($scope.quotationSearch.date_to) {
                        var quotations = [];
                        for (var i = 0; i < $scope.quotations.length; i++) {
                            // console.log($scope.orders)
                            var date = new Date($scope.formatdate($scope.quotations[i].date_added));
                            // console.log(date)
                            if ($scope.quotationSearch.date_from <= date && $scope.quotationSearch.date_to >= date) {
                                quotations.push($scope.quotations[i])
                            }
                        }
                        // console.log($scope.orders)
                        $scope.quotations = quotations;
                        filteredQuotation = quotations;
                        var d1 = moment($scope.quotationSearch.date_from);
                        var d2 = moment($scope.quotationSearch.date_to);
                        $scope.quotationfilterDuration = moment.duration(d2.diff(d1)).asDays();
                    } else {
                        var quotations = [];
                        for (var i = 0; i < $scope.quotations.length; i++) {
                            var date = new Date($scope.formatdate($scope.quotations[i].date_added));
                            if ($scope.quotationSearch.date_from <= date) {
                                quotations.push($scope.quotations[i])
                            }
                        }
                        $scope.quotations = quotations;
                        filteredQuotation = quotations;
                        var d1 = moment($scope.quotationSearch.date_from);
                        var d2 = moment(new Date());
                        $scope.quotationfilterDuration = moment.duration(d2.diff(d1)).asDays();
                    }
                }
                else {
                    if ($scope.quotationSearch.date_to) {
                        var quotations = [];
                        for (var i = 0; i < $scope.quotations.length; i++) {
                            var date = new Date($scope.formatdate($scope.quotations[i].date_added));
                            if ($scope.quotationSearch.date_to >= date) {
                                quotations.push($scope.quotations[i])
                            }
                        }
                        $scope.quotations = quotations;
                        filteredQuotation = quotations;
                    } else
                        $scope.quotations = quotation_allOrders;
                    filteredQuotation = quotations;
                }
            }
        }
    })
    $scope.$watch('quotationSearch.date_to', function () {
        $scope.quotations = quotation_allOrders;
        //console.log($scope.quotations)
        if ($scope.quotations) {
            if ($scope.quotations.length) {
                $scope.quotationSearch.date_to.setHours(23, 59, 59, 59);
                if ($scope.quotationSearch.date_from == null) $scope.quotationSearch.date_from = undefined;
                if ($scope.quotationSearch.date_to == null) $scope.quotationSearch.date_to = undefined;
                if ($scope.quotationSearch.date_from) {
                    if ($scope.quotationSearch.date_to) {
                        var quotations = [];
                        for (var i = 0; i < $scope.quotations.length; i++) {
                            // console.log($scope.quotations)
                            var date = new Date($scope.quotations[i].date_added);
                            if ($scope.quotationSearch.date_from <= date && $scope.quotationSearch.date_to >= date) {
                                quotations.push($scope.quotations[i])
                            }
                        }
                        $scope.quotations = quotations;
                        filtered_quotation = quotations;
                        var d1 = moment($scope.quotationSearch.date_from);
                        var d2 = moment($scope.quotationSearch.date_to);
                        $scope.quotationfilterDuration = moment.duration(d2.diff(d1)).asDays();
                    } else {
                        var quotations = [];
                        for (var i = 0; i < $scope.quotations.length; i++) {
                            var date = new Date($scope.formatdate($scope.quotations[i].date_added));
                            //console.log(date)
                            if ($scope.quotationSearch.date_from <= date) {
                                quotations.push($scope.quotations[i])
                            }
                        }
                        $scope.quotations = quotations;
                        filtered_quotation = quotations;
                        var d1 = moment($scope.quotationSearch.date_from);
                        var d2 = moment(new Date());
                        $scope.quotationfilterDuration = moment.duration(d2.diff(d1)).asDays();
                    }
                }
                else {
                    if ($scope.quotationSearch.date_to) {
                        var quotations = [];
                        for (var i = 0; i < $scope.quotations.length; i++) {
                            var date = new Date($scope.formatdate($scope.quotations[i].date_added));
                            if ($scope.quotationSearch.date_from <= date) {
                                quotations.push($scope.quotations[i])
                            }
                        }
                        $scope.quotations = quotations;
                        filtered_quotation = quotations;
                    } else
                        $scope.quotations = quotation_allOrders;
                }
            }
        }
    })
    //Complaint search dates
    $scope.$watch('complaintSearch.date_from', function () {
        $scope.serviceComplaints = allComplaints;
        if ($scope.serviceComplaints) {
            if ($scope.serviceComplaints.length) {
                // console.log($scope.orderSearch.date_from)
                // console.log($scope.orderSearch.date_to)
                // $scope.orderSearch.date_to = '  ';
                // $scope.orderSearch.date_to.setHours(23,59,59,59);
                if ($scope.complaintSearch.date_from == null) $scope.complaintSearch.date_from = undefined;
                if ($scope.complaintSearch.date_to == null) $scope.complaintSearch.date_to = undefined;
                if ($scope.complaintSearch.date_from) {
                    if ($scope.complaintSearch.date_to) {
                        if($scope.complaintSearch.customer){
                            var complaints = [];
                            for (var i = 0; i < $scope.serviceComplaints.length; i++) {
                                // console.log($scope.orders)
                                var date = new Date($scope.formatdate($scope.serviceComplaints[i].date_added));
                                // console.log(date)
                                if ($scope.complaintSearch.date_from <= date && $scope.complaintSearch.date_to >= date && $scope.serviceComplaints[i].store.DealerName == $scope.complaintSearch.customer) {
                                    complaints.push($scope.serviceComplaints[i])
                                }
                            }
                            $scope.serviceComplaints = complaints;
                            filteredComplaints = complaints;
                            var d1 = moment($scope.complaintSearch.date_from);
                            var d2 = moment($scope.complaintSearch.date_to);
                            $scope.complaintFilterDuration = moment.duration(d2.diff(d1)).asDays();
                        }
                        else{
                            var complaints = [];
                            for (var i = 0; i < $scope.serviceComplaints.length; i++) {
                                // console.log($scope.orders)
                                var date = new Date($scope.formatdate($scope.serviceComplaints[i].date_added));
                                // console.log(date)
                                if ($scope.complaintSearch.date_from <= date && $scope.complaintSearch.date_to >= date) {
                                    complaints.push($scope.serviceComplaints[i])
                                }
                            }
                            $scope.serviceComplaints = complaints;
                            filteredComplaints = complaints;
                            var d1 = moment($scope.complaintSearch.date_from);
                            var d2 = moment($scope.complaintSearch.date_to);
                            $scope.complaintFilterDuration = moment.duration(d2.diff(d1)).asDays();
                        }
                    } else {
                        if($scope.complaintSearch.customer){
                            var complaints = [];
                            for (var i = 0; i < $scope.serviceComplaints.length; i++) {
                                var date = new Date($scope.formatdate($scope.serviceComplaints[i].date_added));
                                if ($scope.complaintSearch.date_from <= date && $scope.serviceComplaints[i].store.DealerName == $scope.complaintSearch.customer) {
                                    complaints.push($scope.serviceComplaints[i])
                                }
                            }
                            $scope.serviceComplaints = complaints;
                            filteredComplaints = complaints;
                            var d1 = moment($scope.complaintSearch.date_from);
                            var d2 = moment(new Date());
                            $scope.complaintFilterDuration = moment.duration(d2.diff(d1)).asDays();
                        }
                        else{
                            var complaints = [];
                            for (var i = 0; i < $scope.serviceComplaints.length; i++) {
                                var date = new Date($scope.formatdate($scope.serviceComplaints[i].date_added));
                                if ($scope.complaintSearch.date_from <= date) {
                                    complaints.push($scope.serviceComplaints[i])
                                }
                            }
                            $scope.serviceComplaints = complaints;
                            filteredComplaints = complaints;
                            var d1 = moment($scope.complaintSearch.date_from);
                            var d2 = moment(new Date());
                            $scope.complaintFilterDuration = moment.duration(d2.diff(d1)).asDays();
                        }
                    }
                }
                else {
                    if ($scope.complaintSearch.date_to) {
                        if($scope.complaintSearch.customer){
                            var complaints = [];
                            for (var i = 0; i < $scope.serviceComplaints.length; i++) {
                                var date = new Date($scope.formatdate($scope.serviceComplaints[i].date_added));
                                if ($scope.complaintSearch.date_to >= date && $scope.serviceComplaints[i].store.DealerName == $scope.complaintSearch.customer) {
                                    complaints.push($scope.serviceComplaints[i])
                                }
                            }
                            $scope.serviceComplaints = complaints;
                            filteredComplaints = complaints;
                        }
                        else{
                            var complaints = [];
                            for (var i = 0; i < $scope.serviceComplaints.length; i++) {
                                var date = new Date($scope.formatdate($scope.serviceComplaints[i].date_added));
                                if ($scope.complaintSearch.date_to >= date) {
                                    complaints.push($scope.serviceComplaints[i])
                                }
                            }
                            $scope.serviceComplaints = complaints;
                            filteredComplaints = complaints;
                        }
                    }
                    else
                        $scope.serviceComplaints = allComplaints;
                }
            }
        }
    })
    $scope.$watch('complaintSearch.date_to', function () {
        $scope.serviceComplaints = allComplaints;
        if ($scope.serviceComplaints) {
            if ($scope.serviceComplaints.length) {
                //  $scope.complaintSearch.date_to.setHours(23, 59, 59, 59);
                if ($scope.complaintSearch.date_from == null) $scope.complaintSearch.date_from = undefined;
                if ($scope.complaintSearch.date_to == null) $scope.complaintSearch.date_to = undefined;
                if ($scope.complaintSearch.date_from) {
                    if ($scope.complaintSearch.date_to) {
                        if($scope.complaintSearch.customer){
                            var complaints = [];
                            for (var i = 0; i < $scope.serviceComplaints.length; i++) {
                                var date = new Date($scope.formatdate($scope.serviceComplaints[i].date_added));
                                if ($scope.complaintSearch.date_from <= date && $scope.complaintSearch.date_to >= date && $scope.serviceComplaints[i].store.DealerName == $scope.complaintSearch.customer) {
                                    complaints.push($scope.serviceComplaints[i])
                                }
                            }
                            $scope.serviceComplaints = complaints;
                            filteredComplaints = complaints;
                            var d1 = moment($scope.complaintSearch.date_from);
                            var d2 = moment($scope.complaintSearch.date_to);
                            $scope.complaintFilterDuration = moment.duration(d2.diff(d1)).asDays();
                        }
                        else{
                            var complaints = [];
                            for (var i = 0; i < $scope.serviceComplaints.length; i++) {
                                var date = new Date($scope.formatdate($scope.serviceComplaints[i].date_added));
                                if ($scope.complaintSearch.date_from <= date && $scope.complaintSearch.date_to >= date) {
                                    complaints.push($scope.serviceComplaints[i])
                                }
                            }
                            $scope.serviceComplaints = complaints;
                            filteredComplaints = complaints;
                            var d1 = moment($scope.complaintSearch.date_from);
                            var d2 = moment($scope.complaintSearch.date_to);
                            $scope.complaintFilterDuration = moment.duration(d2.diff(d1)).asDays();
                        }
                    } else {
                        if($scope.complaintSearch.customer){
                            var complaints = [];
                            for (var i = 0; i < $scope.serviceComplaints.length; i++) {
                                var date = new Date($scope.formatdate($scope.serviceComplaints[i].date_added));
                                if ($scope.complaintSearch.date_from <= date && $scope.serviceComplaints[i].store.DealerName == $scope.complaintSearch.customer) {
                                    complaints.push($scope.serviceComplaints[i])
                                }
                            }
                            $scope.serviceComplaints = complaints;
                            filteredComplaints = complaints;
                            var d1 = moment($scope.complaintSearch.date_from);
                            var d2 = moment(new Date());
                            $scope.complaintFilterDuration = moment.duration(d2.diff(d1)).asDays();
                        }
                        else{
                            var complaints = [];
                            for (var i = 0; i < $scope.serviceComplaints.length; i++) {
                                var date = new Date($scope.formatdate($scope.serviceComplaints[i].date_added));
                                if ($scope.complaintSearch.date_from <= date) {
                                    complaints.push($scope.serviceComplaints[i])
                                }
                            }
                            $scope.serviceComplaints = complaints;
                            filteredComplaints = complaints;
                            var d1 = moment($scope.complaintSearch.date_from);
                            var d2 = moment(new Date());
                            $scope.complaintFilterDuration = moment.duration(d2.diff(d1)).asDays();
                        }
                    }
                }
                else {
                    if ($scope.complaintSearch.date_to) {
                        if($scope.complaintSearch.customer){
                            var complaints = [];
                            for (var i = 0; i < $scope.serviceComplaints.length; i++) {
                                var date = new Date($scope.formatdate($scope.serviceComplaints[i].date_added));
                                if ($scope.complaintSearch.date_to >= date && $scope.serviceComplaints[i].store.DealerName == $scope.complaintSearch.customer) {
                                    complaints.push($scope.serviceComplaints[i])
                                }
                            }
                            $scope.serviceComplaints = complaints;
                            filteredComplaints = complaints;
                        }
                        else{
                            var complaints = [];
                            for (var i = 0; i < $scope.serviceComplaints.length; i++) {
                                var date = new Date($scope.formatdate($scope.serviceComplaints[i].date_added));
                                if ($scope.complaintSearch.date_to >= date) {
                                    complaints.push($scope.serviceComplaints[i])
                                }
                            }
                            $scope.serviceComplaints = complaints;
                            filteredComplaints = complaints;
                        }
                    }
                    else
                        $scope.serviceComplaints = allComplaints;
                }
            }
        }
    })
    $scope.$watch('complaintSearch.customer',function(){
        $scope.serviceComplaints = allComplaints;
        if ($scope.serviceComplaints) {
            if ($scope.serviceComplaints.length) {
                if($scope.complaintSearch.customer){
                    if($scope.complaintSearch.date_from){
                        if($scope.complaintSearch.date_to){
                            var complaints = [];
                            for(var i = 0;i < $scope.serviceComplaints.length; i++){
                                var date = new Date($scope.formatdate($scope.serviceComplaints[i].date_added));
                                if ($scope.complaintSearch.date_from <= date && $scope.complaintSearch.date_to >= date && $scope.serviceComplaints[i].store.DealerName == $scope.complaintSearch.customer) {
                                    complaints.push($scope.serviceComplaints[i])
                                }
                            }
                            $scope.serviceComplaints = complaints;
                            filteredComplaints = complaints;
                        }
                        else{
                            var complaints = [];
                            for(var i = 0;i < $scope.serviceComplaints.length; i++){
                                var date = new Date($scope.formatdate($scope.serviceComplaints[i].date_added));
                                if ($scope.complaintSearch.date_from <= date && $scope.serviceComplaints[i].store.DealerName == $scope.complaintSearch.customer) {
                                    complaints.push($scope.serviceComplaints[i])
                                }
                            }
                            $scope.serviceComplaints = complaints;
                            filteredComplaints = complaints;
                        }
                    }
                    else{
                        var complaints = [];
                        for(var i = 0;i < $scope.serviceComplaints.length; i++){
                            if ($scope.serviceComplaints[i].store.DealerName == $scope.complaintSearch.customer) {
                                complaints.push($scope.serviceComplaints[i])
                            }
                        }
                        $scope.serviceComplaints = complaints;
                        filteredComplaints = complaints;
                    }
                }
                else{
                    if($scope.complaintSearch.date_from){
                        if($scope.complaintSearch.date_to){
                            var complaints = [];
                            for(var i = 0;i < $scope.serviceComplaints.length; i++){
                                var date = new Date($scope.formatdate($scope.serviceComplaints[i].date_added));
                                if ($scope.complaintSearch.date_from <= date && $scope.complaintSearch.date_to >= date) {
                                    complaints.push($scope.serviceComplaints[i])
                                }
                            }
                            $scope.serviceComplaints = complaints;
                            filteredComplaints = complaints;
                        }
                        else{
                            for(var i = 0;i < $scope.serviceComplaints.length; i++){
                                var date = new Date($scope.formatdate($scope.serviceComplaints[i].date_added));
                                if ($scope.complaintSearch.date_from <= date) {
                                    complaints.push($scope.serviceComplaints[i])
                                }
                            }
                            $scope.serviceComplaints = complaints;
                            filteredComplaints = complaints;
                        }
                    }
                    else{
                        if($scope.complaintSearch.date_to){
                            var complaints = [];
                            for(var i = 0;i < $scope.serviceComplaints.length; i++){
                                var date = new Date($scope.formatdate($scope.serviceComplaints[i].date_added));
                                if ($scope.complaintSearch.date_to >= date) {
                                    complaints.push($scope.serviceComplaints[i])
                                }
                            }
                            $scope.serviceComplaints = complaints;
                            filteredComplaints = complaints;
                        }
                        else{
                            $scope.serviceComplaints = allComplaints;
                        }
                    }
                }
            }
            else{
                $scope.serviceComplaints = allComplaints;
            }
        }
        $scope.serviceComplaints = complaints;
    })
    $scope.changeDealerButton = function (flag) {
        if (flag == 0) {
            $scope.dealerListPage = true ;
            $scope.dealerAddPage = false ;
            $scope.dealerEditPage = false ;
            $scope.dealer = {};
            $scope.dealer.City = '';
            $scope.dealer.Pincode = '';
            $scope.dealer.Area = '';
            $scope.enquiry = [];
            $scope.EnquiryBranch = {};
            $scope.newDevices = [];
            $scope.newStoreImageArray.customerImage = [] ;
            $scope.newStoreImageArray.customerDoc = [] ;
            jQuery.noConflict();
            $(".itemsDropdown").css('display', 'none')
        }
        else if (flag == 1) {
            $scope.dealerListPage = false ;
            $scope.dealerAddPage = true ;
            $scope.dealerEditFlag = true ;
            $scope.addDealerButton = true;
                $scope.validateDealerphone = false;
                $scope.addDealerButton = false;
                $scope.enquiry = [];
                $scope.EnquiryBranch = {};
                $scope.newDevices = [];
                jQuery.noConflict();
                $(".itemsDropdown").css('display', 'none')
                $http.get("/dash/get/recentID/dealer")
                    .success(function(res){
                        if(res.Dealercode){
                            $scope.Dealercodetemp = 1001;
                            $scope.Dealercodetemp = res.Dealercode + 1;
                            $scope.dealer.Dealercode = res.Dealercode + 1;
                        }else{
                            $scope.dealer.Dealercode = 1001;
                        }
                    })
                var latlng = new google.maps.LatLng(20.5937, 78.9629);
                var zoomLevel = 4;
                var myOptions = {
                    zoom: zoomLevel,
                    center: latlng,
                    scaleControl: true,
                    mapTypeId: google.maps.MapTypeId.ROADMAP
                };
                map = new google.maps.Map(document.getElementById("customerAddMap"), myOptions);
            $scope.dealer.customerVariant = "regular"
                $scope.loaded(2);
            }
        else if (flag == 2){
            $scope.dealerListPage = false ;
            $scope.dealerEditPage = true ;
            $scope.dealerEditFlag = true ;
        }
    }
    $scope.dealerEditToggle = function(){
        $scope.dealerEditFlag = !$scope.dealerEditFlag ;
    }
    $scope.getDuplicates = function (type){
        console.log(type)
        jQuery.noConflict();
        $('.refresh').css("display", "inline");
        $http.get("/dash/findDuplicate/"+type)
            .success(function(res){
                jQuery.noConflict();
                $('.refresh').css("display", "none");
                $scope.duplicateStores = res ;
            })
    }
    $scope.duplicateDetails = function (store){
        $scope.duplicates = store.duplicates ;
        jQuery.noConflict();
        $('#duplicateDetails').modal('show');
    }
    //
    // //invoices //
    // $scope.invoiceForm = function(){
    //     $http.get("/dash/items")
    //         .success(function (res) {
    //             $scope.allInvoiceItems = res;
    //         });
    // }
    //Supplier code create//
    $scope.changeSupplierButton = function(flag, type) {
        if (type == 'add') {
            if (flag) {
                $scope.addSupplierButton = true;
                $scope.supplier = {};
                $scope.enquiry = [];
                $scope.EnquiryBranch = {};
                $scope.newDevices = [];
                $scope.newSupplierImageArray.supplierImage = [] ;
                jQuery.noConflict();
                $(".itemsDropdown").css('display', 'none')
            }
            else {
                $scope.addSupplierButton = false;
                $http.get("/dash/get/recentID/supplier")
                    .success(function (res) {
                        console.log("generating supplier code");
                        console.log(res);
                        console.log(res[0].SupplierCode)
                        if (res) {
                            $scope.Suppliercodetemp = 1001;
                            $scope.Suppliercodetemp = res[0].SupplierCode + 1;
                            $scope.supplier.SupplierCode = res[0].SupplierCode + 1;
                        } else {
                            $scope.supplier.Suppliercode = 1001;
                        }
                        console.log($scope.supplier.SupplierCode);
                    })
                var latlng = new google.maps.LatLng(20.5937, 78.9629);
                var zoomLevel = 4;
                var myOptions = {
                    zoom: zoomLevel,
                    center: latlng,
                    scaleControl: true,
                    mapTypeId: google.maps.MapTypeId.ROADMAP
                };
                map = new google.maps.Map(document.getElementById("customerAddMap1"), myOptions);
            }
        }
        else if (type == 'transaction') {
            if (flag) {
                $scope.showSupplierTransactions = true;
            }
            else {
                $scope.showSupplierTransactions = false;
            }
        }
    }
    $scope.formItem= {};
    $scope.changeItemButton = function (flag) {
        if (flag == 0) {
            console.log('back') ;
            $scope.itemListPage = true ;
            $scope.itemAddPage = false ;
            $scope.itemEditPage = false ;
            // $scope.newItem = {};
            // $scope.newItem.Area = '';
            // $scope.newItem.City  = '';
            // $scope.newItemImageArray.itemImage = [];
            // $scope.subCategoriesDropDown = [];
            // $scope.itemEdit = false ;
            // $scope.itemEdit = false ;
            // $scope.addItemButton = true;
        }
        else if (flag == 1){
            var temp = {
                _id: "DEFAULT"
            };
            $scope.itemListPage = false ;
            $scope.itemAddPage = true ;
            $scope.newItem = {};
            $scope.newItem.MRP = '';
            $scope.newItem.Qty = '';
            $scope.newItem.Specials = '';
            $scope.newItem.gst = defaultTaxObj;
            $scope.newItem.Manufacturer = 'DEFAULT';
            $scope.newItem.subCategory = 'DEFAULT';
            $scope.newItem.subSubCategory = '';
            $scope.addItemSubCategory = [];
            $scope.addItemSubSubCategory = [];
            $scope.subCategoriesDropDown.push(temp);
            $scope.subSubCategoriesDropDown.push(temp);
            // $scope.itemEdit = true ;
            $scope.newItem.looseQty =  true;
            $scope.addItemButton = false;
            // $scope.formItem.addItem.$setPristine();
            // $scope.formItem.addItem.$setUntouched();
            // console.log($scope.subCategoriesDropDown)
            // $http.post("/dash/items",itemSearchObj)
            //     .success(function(response) {
            //
            //         $scope.renderItems(response);
            //     });
            // $http.post('/dash/item/count', itemSearchObj)
            //     .success(function(response){
            //         $scope.transactionCount(response,2)
            //     });
            $scope.getAllCategories(true,'category');
            $scope.getAllSubCategories(true,'subCategory');
            $scope.getAllSubSubCategories(true,'subSubCategory');
            $http.get("/dash/get/recentID/item")
                .success(function (res) {
                    console.log(res);
                    if(res.itemCode){
                        $scope.itemcodetemp = 1001;
                        $scope.itemcodetemp = res.itemCode + 1;
                        $scope.newItem.itemCode = res.itemCode + 1;
                    }else{
                        $scope.newItem.itemCode = 1001;
                    }
                })
        }
        else if (flag == 2){
            console.log('edit')
            $scope.itemListPage = false ;
            $scope.itemEditPage = true ;
        }
    }
    $scope.inventoryNewItem = function (flag) {
        if (flag) {
            $scope.getAllCategories(true,'category');
            $scope.getAllSubCategories(true,'subCategory');
            $scope.getAllSubSubCategories(true,'subSubCategory');
            $http.get("/dash/get/recentID/item")
                .success(function (res) {
                    if(res.itemCode){
                        $scope.itemcodetemp = 1001;
                        $scope.itemcodetemp = res.itemCode + 1;
                        $scope.newItem.itemCode = res.itemCode + 1;
                    }else{
                        $scope.newItem.itemCode = 1001;
                    }
                })
        }
    }
    $scope.changeComplaintButton = function (flag) {
        $scope.complaint = {};
        $scope.complaint.ticketComment = [];
        $scope.addComplaintButton = true;
        $scope.complaint.dueDate = '';
        $scope.complaint.store = '';
        $scope.complaint.name = '';
        $scope.complaint.Phone = '';
        $scope.complaint.AlPhone = '';
        $scope.complaint.category = '';
        $scope.complaint.description = '';
        $scope.complaint.priority = 1;
        $scope.complaint.type = '';
        $scope.complaint.email = '';
        if (flag) {
            $scope.addComplaintButton = true;
            $scope.complaint = {};
        }
        else {
            $scope.addComplaintButton = false;
            $scope.complaint.ticketId = $scope.generateOrderId();
            if (dealerComplaintPhone)
                $scope.complaint.Phone = dealerComplaintPhone;
        }
    };
    $scope.addLeaveTab = function (flag) {
        if (flag) {
            if ($scope.user) {
                if ($scope.user.sellerphone) {
                    $scope.leaveRecord = {};
                    $scope.addLeave = false;
                    $scope.userLeave = {};
                    $scope.leaveDays = 0;
                    $scope.leaveRecord.from_session = '1';
                    $scope.leaveRecord.to_session = '2';
                    $http.get("/dash/getsellerDetails/" + $scope.user.sellerphone)
                        .success(function (res) {
                            $scope.userLeave = res.leave;
                        })
                }
                else {
                    bootbox.alert({
                        title: 'ERROR',
                        message: 'Please login with a role to apply leave',
                        className: 'text-center'
                    })
                }
            }
            else {
                bootbox.alert({
                    title: 'ERROR',
                    message: 'Please login with a role to apply leave',
                    className: 'text-center'
                })
            }
        }
        else {
            $scope.leaveRecord = {};
            $scope.addLeave = true;
        }
    }
    $scope.$watchGroup(['leaveRecord.date_from', 'leaveRecord.date_to', 'leaveRecord.from_session', 'leaveRecord.to_session'], function () {
        if ($scope.leaveRecord.date_from && $scope.leaveRecord.date_to) {
            $scope.leaveDays = 0;
            var d1 = moment($scope.leaveRecord.date_from);
            var d2 = moment($scope.leaveRecord.date_to);
            var numberOfDays = moment.duration(d2.diff(d1)).asDays() + 1;
            if ($scope.leaveRecord.from_session == 1 && $scope.leaveRecord.to_session == 1) {
                numberOfDays -= 0.5;
            }
            else if ($scope.leaveRecord.from_session == 1 && $scope.leaveRecord.to_session == 2) {
            }
            else if ($scope.leaveRecord.from_session == 2 && $scope.leaveRecord.to_session == 1) {
                numberOfDays -= 1;
            }
            else if ($scope.leaveRecord.from_session == 2 && $scope.leaveRecord.to_session == 2) {
                numberOfDays -= 0.5;
            }
            $scope.leaveDays = numberOfDays;
        }
    })
    $scope.submitLeave = function () {
        var accept = false;
        bootbox.confirm({
            title: 'CONFIRM',
            message: 'Are you sure?',
            className: 'text-center',
            callback: function (res) {
                if (res) {
                    if ($scope.leaveRecord.halfDay) {
                        if ($scope.leaveRecord.type && $scope.leaveRecord.date_from && $scope.leaveRecord.date_to && $scope.leaveRecord.from_session && $scope.leaveRecord.to_session) {
                            if ($scope.leaveDays > 0) {
                                for (var i = 0; i < $scope.userLeave.length; i++) {
                                    if ($scope.userLeave[i].type == $scope.leaveRecord.type.type && $scope.userLeave[i].balance >= $scope.leaveDays) {
                                        accept = true;
                                    }
                                }
                                checkAndPostLeave(accept);
                            }
                            else {
                                bootbox.alert({
                                    title: 'ERROR',
                                    message: 'Please select a valid date range.',
                                    className: 'text-center'
                                })
                            }
                        }
                        else {
                            bootbox.alert({
                                title: 'ERROR',
                                message: 'Please enter all mandatory fields',
                                className: 'text-center'
                            })
                        }
                    }
                    else {
                        if ($scope.leaveRecord.type && $scope.leaveRecord.date_from && $scope.leaveRecord.date_to) {
                            if ($scope.leaveDays > 0) {
                                for (var i = 0; i < $scope.userLeave.length; i++) {
                                    if ($scope.userLeave[i].type == $scope.leaveRecord.type.type && $scope.userLeave[i].balance >= $scope.leaveDays) {
                                        accept = true;
                                    }
                                }
                                checkAndPostLeave(accept);
                            }
                            else {
                                bootbox.alert({
                                    title: 'ERROR',
                                    message: 'Please select a valid date range.',
                                    className: 'text-center'
                                })
                            }
                        }
                        else {
                            bootbox.alert({
                                title: 'ERROR',
                                message: 'Please enter all mandatory fields',
                                className: 'text-center'
                            })
                        }
                    }
                    function checkAndPostLeave(flag) {
                        if (flag) {
                            var leaveObj = {};
                            var date = new Date();
                            leaveObj.leaveId = $scope.generateOrderId();
                            leaveObj.status = 'new';
                            leaveObj.date_added = [date.getFullYear(), (date.getMonth() + 1).padLeft(), date.getDate().padLeft()].join('-') + ' '
                                + [date.getHours().padLeft(), date.getMinutes().padLeft(), date.getSeconds().padLeft()].join(':');
                            leaveObj.sellerName = $scope.user.username ? $scope.user.username : 'PORTAL';
                            leaveObj.seller = $scope.user.sellerphone ? $scope.user.sellerphone : 0;
                            var date1 = $scope.leaveRecord.date_from;
                            var datefrom = [date1.getFullYear(), (date1.getMonth() + 1).padLeft(), date1.getDate().padLeft()].join('-');
                            leaveObj.date_from = datefrom;
                            //console.log("date is :" + datefrom);
                            var date2 = $scope.leaveRecord.date_to;
                            var dateto = [date2.getFullYear(), (date2.getMonth() + 1).padLeft(), date2.getDate().padLeft()].join('-');
                            leaveObj.date_to = dateto;
                            //console.log("date is :" + dateto);
                            //leaveObj.date_to = new Date($scope.leaveRecord.date_to);
                            leaveObj.from_session = $scope.leaveRecord.from_session;
                            leaveObj.to_session = $scope.leaveRecord.to_session;
                            leaveObj.days = $scope.leaveDays;
                            leaveObj.leaveType = $scope.leaveRecord.type.type;
                            leaveObj.leaveName = $scope.leaveRecord.type.name;
                            leaveObj.reason = $scope.leaveRecord.reason ? $scope.leaveRecord.reason : '';
                            $http.post("/dash/leave/insert", leaveObj)
                                .success(function (res) {
                                    if (res) {
                                        $scope.addLeaveTab(0);
                                        bootbox.alert({
                                            title: 'SUCCESS',
                                            message: "Successfully submitted your leave request.",
                                            className: 'text-center'
                                        })
                                        $scope.renderLeaveReport();
                                    }
                                    else {
                                        bootbox.alert({
                                            title: 'ERROR',
                                            message: "Couldn't submit your leave request. Please try again after a while or contact your Admin.",
                                            className: 'text-center'
                                        })
                                    }
                                })
                        }
                        else {
                            bootbox.alert({
                                title: 'ERROR',
                                message: 'You have insufficient leave balance',
                                className: 'text-center'
                            })
                        }
                    }
                }
            }
        })
    }
    $scope.renderLeaveReport = function () {
        if ($scope.leaveRecords.startDate && $scope.leaveRecords.endDate) {
            if (($scope.leaveRecords.startDate - $scope.leaveRecords.endDate) > 0) {
                bootbox.alert({
                    title: 'WARNING',
                    message: 'Start date cannot be greater than End date.',
                    className: 'text-center'
                })
                return;
            }
        }
        var tempObj = {};
        tempObj.startDate = $scope.DateTimeFormat($scope.leaveRecords.startDate, 'start');
        tempObj.endDate = $scope.DateTimeFormat($scope.leaveRecords.endDate, 'end');
        $http.post("/dash/leave", tempObj)
            .success(function (res) {
                $scope.leaveReport = res;
                $scope.items40 = $scope.leaveReport;
                $scope.viewby = 10;
                $scope.totalItems = $scope.leaveReport.length;
                $scope.currentPage = 1;
                $scope.itemsPerPage = $scope.viewby;
                $scope.maxSize = 5;
            });
    }
    $scope.updateLeaveStatus = function (leave) {
        if (leave.status == 'accept') {
            bootbox.confirm({
                title: 'CONFIRM',
                message: 'Accept leave request?',
                className: 'text-center',
                buttons: {
                    confirm: {
                        label: 'Ok',
                        className: 'btn-success'
                    },
                    cancel: {
                        label: 'Cancel',
                        className: 'btn-danger'
                    }
                },
                callback: function (result) {
                    if (result) {
                        $http.put("/dash/leave/update/status", leave)
                            .success(function (res) {
                                console.log(res);
                            })
                    }
                    else {
                        $scope.refreshTransactions(11)
                    }
                }
            })
        }
        else if (leave.status == 'reject') {
            bootbox.confirm({
                title: 'CONFIRM',
                message: 'Reject leave request?',
                className: 'text-center',
                buttons: {
                    confirm: {
                        label: 'Ok',
                        className: 'btn-success'
                    },
                    cancel: {
                        label: 'Cancel',
                        className: 'btn-danger'
                    }
                },
                callback: function (result) {
                    if (result) {
                        $http.put("/dash/leave/update/status", leave)
                            .success(function (res) {
                                console.log(res);
                            })
                    }
                    else {
                        $scope.refreshTransactions(11)
                    }
                }
            })
        }
    }
    //Change Leave balances for a user from user tab...
    $scope.changeLeaveBalance = function (dir, leaveType) {
        /*...
         Change leave balance for a user
         ... */
        function updateLeaveApiCall() {
            $http.put("/dash/user/leaveBalanceUpdate", $scope.sellerDetails)
        }
        for (var i = 0; i < $scope.sellerDetails.leave.length; i++) {
            if ($scope.sellerDetails.leave[i].type == leaveType) {
                if (dir == 'add') {
                    $scope.sellerDetails.leave[i].balance += 1;
                    updateLeaveApiCall();
                }
                else if (dir == 'minus') {
                    if (($scope.sellerDetails.leave[i].balance - 1) >= 0) {
                        $scope.sellerDetails.leave[i].balance -= 1;
                        updateLeaveApiCall();
                    }
                    else {
                        bootbox.alert({
                            title: "ERROR",
                            message: "Leave balance cannot be negative",
                            className: "text-center"
                        })
                    }
                }
            }
        }
    }
    $scope.addMeetingTab = function (flag) {
        if (flag) {
            $scope.newItemMeeting = [];
            $scope.meeting = {};
            $scope.validatePhone = false;
            $scope.existingLead = false;
            $scope.existingCustomer = false;
            $scope.meeting.email = "";
            $scope.addMeeting = false;
            $scope.occname = false ;
            $scope.text = false ;
            $scope.dd = false ;
            $scope.meeting.status = 'Pending'
            setTimeout(function()
            {
                $(".selectpicker").selectpicker('refresh',true)
            }, 500);
        }
        else {
            $scope.addMeeting = true;
        }
    }
    $scope.updateleadsource = function (value) {
        $scope.text = value.text;
        $scope.dd = value.date;
    };
    $scope.updateoccupation = function (value) {
        $scope.occname = value.text;
    };
    $scope.updateEnquiryStatus = function(details,status){
        var temp ={} ;
        temp.id = details.orderId[0];
        temp.status = status;
        $http.put("/dash/enquiry/status", temp)
            .success(function(response){
                console.log(response.nModified)
                toastr.success("Enquiry Status Changed Successfully");
            });
    };
    $scope.openCommentModal = function(details){
        $scope.details = details;
    }
    $scope.clearEnquiryCommentModal = function(){
        $scope.details.comment = '';
    }
    $scope.goto = function(page) {
        $scope.currentNavItem = page;
        $scope.dealerOrderView = false;
        $scope.dealerPaymentView = false;
        $scope.dealerVisitView = false;
        $scope.dealerMeetingView = false;
        $scope.dealerEnquiryView = false;
        $scope.dealerInvoiceView = false;
        $scope.itemEditInfo = false;
        $scope.itemCustomPriceInfo = false;
        $scope.itemInventoryInfo = false;
        if(page == 'Orders'){
            $scope.dealerOrderView = true;
        }else if(page == 'Payment'){
            $scope.dealerPaymentView = true;
        }else if(page == 'Visit'){
            $scope.dealerVisitView = true;
        }else if(page == 'Meeting'){
            $scope.dealerMeetingView = true;
        }else if (page == 'Enquires'){
            $scope.dealerEnquiryView = true;
        }else if (page == 'Invoices'){
            $scope.dealerInvoiceView = true;
        }else if (page == 'itemInfo'){
            $scope.itemEditInfo = true;
        }else if (page == 'itemInventoryInfo'){
            $scope.itemInventoryInfo = true;
        }
        else if (page == 'itemCustomPriceInfo'){
            $scope.itemCustomPriceInfo = true;
        }
        //$scope.status = "Goto " + page;
    };
    //Enquiry Address
    //add Dealer auto fill address
    $scope.addNewDealerAddress = function () {
        var input = document.getElementById('address');
        var editDealerAddress_autocomplete = new google.maps.places.Autocomplete(input);
        editDealerAddress_autocomplete.addListener('place_changed', function () {
            var newplace = editDealerAddress_autocomplete.getPlace();
            var lat=newplace.geometry.location.lat();
            var long = newplace.geometry.location.lng();
            for(var i=0; i<newplace.address_components.length; i++){
                if(newplace.address_components[i].types[0]=="locality"){
                    var jcity = newplace.address_components[i].long_name;
                    var jaddress= newplace.formatted_address;
                }
                if(newplace.address_components[i].types[1]=="sublocality")
                    var jarea = newplace.address_components[i].long_name;
                if(newplace.address_components[i].types[0] == "postal_code")
                    var jpostalCode = newplace.address_components[i].long_name;
            }
            var scope = angular.element(document.getElementById('address')).scope();
            scope.dealer.City = jcity;
            scope.dealer.Area = jarea;
            scope.dealer.Pincode = jpostalCode;
            scope.dealer.Address = jaddress;
            scope.dealer.latitude = lat;
            scope.dealer.longitude = long;
            $('#newDealerArea').val(jarea);
            $('#newDealerCity').val(jcity);
            $('#newDealerPincode').val(jpostalCode);
            var latlng = new google.maps.LatLng(lat, long);
            var mapCanvas = document.getElementById("customerAddMap");
            var mapOptions = {center: latlng, zoom: 15};
            var map = new google.maps.Map(mapCanvas, mapOptions);
            var marker = new google.maps.Marker({position:latlng});
            marker.setMap(map);
        })
    }
    $scope.mapAddress = false;
    $scope.recordAddress = function (type,page) {
        if(page == 'meeting'){
            if (type == 'new') {
                var input = document.getElementById('meetingAddress');
                var autocomplete = new google.maps.places.Autocomplete(input);
                autocomplete.addListener('place_changed', function () {
                    var place = autocomplete.getPlace();
                    // console.log(place);
                    $scope.meeting.latitude = place.geometry.location.lat();
                    $scope.meeting.longitude = place.geometry.location.lng();
                    for (var i = 0; i < place.address_components.length; i++) {
                        if (place.address_components[i].types[0] == "locality") {
                            $scope.meeting.City = place.address_components[i].long_name || '';
                            $scope.meeting.Address = place.formatted_address || '';
                        }
                        if (place.address_components[i].types[1] == "sublocality")
                            $scope.meeting.Area = place.address_components[i].long_name || '';
                        if (place.address_components[i].types[0] == "administrative_area_level_1")
                            $scope.meeting.state = place.address_components[i].long_name || '';
                        if (place.address_components[i].types[0] == "country")
                            $scope.meeting.country = place.address_components[i].long_name || '';
                        if (place.address_components[i].types[0] == "postal_code")
                            $scope.meeting.pincode = place.address_components[i].long_name || '';
                    }
                })
            }
        }
        if(page == 'supplier'){
            if (type == 'new') {
                var input = document.getElementById('supplierAddress');
                var autocomplete = new google.maps.places.Autocomplete(input);
                autocomplete.addListener('place_changed', function () {
                    var place = autocomplete.getPlace();
                    //console.log(place);
                    var lat = place.geometry.location.lat();
                    var long = place.geometry.location.lng();
                    for (var i = 0; i < place.address_components.length; i++) {
                        if (place.address_components[i].types[0] == "locality") {
                            var jcity = place.address_components[i].long_name;
                            var jaddress = place.formatted_address;
                        }
                        if (place.address_components[i].types[1] == "sublocality")
                            var jarea = place.address_components[i].long_name;
                    }
                    console.log("lat and long" + lat, long);
                    //console.log("city "+jcity);
                    //console.log("area "+jarea);
                    //console.log("address "+jaddress);
                    var scope = angular.element(document.getElementById('supplierAddress')).scope();
                    scope.supplier.City = jcity;
                    scope.supplier.Area = jarea;
                    scope.supplier.Address = jaddress;
                    scope.supplier.latitude = lat;
                    scope.supplier.longitude = long;
                    $('#newSupplierArea').val(jarea);
                    $('#newSupplierCity').val(jcity);
                    var latlng = new google.maps.LatLng(lat, long);
                    var mapCanvas = document.getElementById("customerAddMap1");
                    var mapOptions = {center: latlng, zoom: 15};
                    var map = new google.maps.Map(mapCanvas, mapOptions);
                    var marker = new google.maps.Marker({position:latlng});
                    marker.setMap(map);
                })
                if($scope.supplier.Address == '' || $scope.supplier.Address == undefined ){
                    $scope.supplier.Area ='';
                    $scope.supplier.City='';
                }
            }
            if(type == 'edit'){
                console.log("supplier edit");
                var newSupplierAddress_input = document.getElementById('newSupplierAddress');
                var newSupplierrAddress_autocomplete = new google.maps.places.Autocomplete(newSupplierAddress_input);
                newSupplierrAddress_autocomplete.addListener('place_changed', function () {
                    var newplace = newSupplierrAddress_autocomplete.getPlace();
                    var lat=newplace.geometry.location.lat();
                    var long = newplace.geometry.location.lng();
                    for(var i=0; i<newplace.address_components.length; i++){
                        if(newplace.address_components[i].types[0]=="locality"){
                            var jcity = newplace.address_components[i].long_name;
                            var jaddress= newplace.formatted_address;
                        }
                        if(newplace.address_components[i].types[1]=="sublocality")
                            var jarea = newplace.address_components[i].long_name;
                    }
                    console.log("lat and long"+lat, long);
                    //console.log("city "+jcity);
                    //console.log("area "+jarea);
                    //console.log("address "+jaddress);
                    var scope = angular.element(document.getElementById('newSupplierAddress')).scope();
                    scope.editSupplierAddress.City = jcity;
                    scope.editSupplierAddress.Area = jarea;
                    scope.editSupplierAddress.Address = jaddress;
                    scope.editSupplierAddress.latitude = lat;
                    scope.editSupplierAddress.longitude = long;
                })
            }
        }
        if(page == 'order'){
            if (type == 'new') {
                var input = document.getElementById('shippingAddress');
                console.log('input',input);
                var autocomplete = new google.maps.places.Autocomplete(input);
                autocomplete.addListener('place_changed', function () {
                    var newplace = autocomplete.getPlace();
                    // console.log(place);
                    for(var i=0; i<newplace.address_components.length; i++){
                        if(newplace.address_components[i].types[0]=="locality"){
                            var jcity = newplace.address_components[i].long_name;
                            var jaddress= newplace.formatted_address;
                        }
                        if(newplace.address_components[i].types[1]=="sublocality")
                            var jarea = newplace.address_components[i].long_name;
                        if(newplace.address_components[i].types[0]=="administrative_area_level_1"){
                            var jstate = newplace.address_components[i].long_name;
                            $scope.mapAddress = true;
                        }
                    }
                    // console.log("lat and long"+lat, long);
                    var scope = angular.element(document.getElementById('shippingAddress')).scope();
                    console.log("jcity", jcity);
                    scope.data.tempnewOrderShipping_address = jaddress;
                    scope.data.tempCity = jcity;
                    scope.data.tempState = jstate;
                    // scope.editSupplierAddress.Area = jarea;
                    // scope.editSupplierAddress.Address = jaddress;
                    // scope.editSupplierAddress.latitude = lat;
                    // scope.editSupplierAddress.longitude = long;
                    $('#shippingCity').val(jcity);
                })
            }
        }
        if(page == 'pos'){
            var input = document.getElementById('posAddress');
            var autocomplete = new google.maps.places.Autocomplete(input);
            autocomplete.addListener('place_changed', function () {
                var newplace = autocomplete.getPlace();
                console.log('newplace',newplace);
                for(var i=0; i<newplace.address_components.length; i++){
                    if(newplace.address_components[i].types[0]=="locality"){
                        var jcity = newplace.address_components[i].long_name;
                        var jaddress= newplace.formatted_address;
                    }
                    if(newplace.address_components[i].types[1]=="sublocality")
                        var jarea = newplace.address_components[i].long_name;
                    if(newplace.address_components[i].types[0]=="administrative_area_level_1"){
                        var jstate = newplace.address_components[i].long_name;
                        $scope.mapAddress = true;
                    }
                    if(newplace.address_components[i].types[0] == "postal_code")
                        var jpostalCode = newplace.address_components[i].long_name;
                }
                // console.log("lat and long"+lat, long);
                var scope = angular.element(document.getElementById('posAddress')).scope();
                scope.PosDealer.City = jcity;
                scope.PosDealer.Area = jarea;
                scope.PosDealer.Pincode = jpostalCode;
                scope.PosDealer.Address = jaddress;
            })
        }
    }
//    unique dealer code for enquiry
    $scope.newDealercode = function(){
        $http.get("/dash/get/recentID/dealer")
            .success(function(res){
                if(res.Dealercode){
                    $scope.Dealercodetemp = 1001;
                    $scope.Dealercodetemp = res.Dealercode + 1;
                    $scope.meeting.Dealercode = res.Dealercode + 1;
                }else{
                    $scope.meeting.Dealercode = 1001;
                }
            })
    }
    /* search city , state , country*/
    $scope.searchByCity = function(text,type){
        if(type == 'city'){
            if(text.length > 0){
                $http.get("/dash/enquiry/search/city/"+type+"/"+text).success(function(res){
                    // console.log("api =====",res)
                    $scope.newCity = res.unique('city');
                    jQuery.noConflict();
                    $(".cityDropdown").css('display', 'block')
                })
            }
            else{
                $scope.newCity = [];
                jQuery.noConflict();
                $(".cityDropdown").css('display', 'none')
            }
        }else  if(type == 'state'){
            if(text.length > 0){
                $http.get("/dash/enquiry/search/city/"+type+"/"+text).success(function(res){
                    $scope.newState = res.unique('state');
                    jQuery.noConflict();
                    $(".stateDropdown").css('display', 'block')
                })
            }
            else{
                $scope.newState = [];
                jQuery.noConflict();
                $(".stateDropdown").css('display', 'none')
            }
        }else  if(type == 'country'){
            if(text.length > 0){
                $http.get("/dash/enquiry/search/city/"+type+"/"+text).success(function(res){
                    $scope.newCountry = res.unique('country');
                    jQuery.noConflict();
                    $(".countryDropdown").css('display', 'block')
                })
            }
            else{
                $scope.newCountry = [];
                jQuery.noConflict();
                $(".countryDropdown").css('display', 'none')
            }
        }
    };
    $scope.addressSelectedFromTypeahead = function(temp,type){
        // console.log("item=====",temp);
        // console.log(type)
        if(type == 'city'){
            $scope.meeting.City = temp.city;
            jQuery.noConflict();
            $(".cityDropdown").css("display", "none");
        }else if(type == 'state'){
            $scope.meeting.state = temp.state;
            jQuery.noConflict();
            $(".stateDropdown").css("display", "none");
        }else if(type == 'country'){
            $scope.meeting.country = temp.country;
            jQuery.noConflict();
            $(".countryDropdown").css("display", "none");
        }
    }
//end enquiry address
    $scope.submitMeeting = function () {
        if($scope.settings.invoice){
            if ($scope.meeting.name != '' && $scope.meeting.name != null && $scope.meeting.name != undefined) {
                if ($scope.meeting.phone != '' && $scope.meeting.phone != null && $scope.meeting.phone != undefined) {
                    if ($scope.meeting.leadsource != '' && $scope.meeting.leadsource != null && $scope.meeting.leadsource != undefined) {
                        var tempObj = {};
                        var date = new Date();
                        if ($scope.meeting.followupdate) {
                            var d1 = moment(date);
                            var d2 = moment($scope.meeting.followupdate);
                            var numberOfDays = moment.duration(d2.diff(d1)).asDays();
                            if (numberOfDays >= -1) {
                                if ($scope.meeting.title) {
                                    tempObj.contactname = $scope.meeting.title + " " + $scope.meeting.name;
                                    tempObj.Initial = $scope.meeting.Initial;
                                }
                                if (!$scope.meeting.title) {
                                    tempObj.contactname = $scope.meeting.name;
                                    tempObj.Initial = $scope.meeting.Initial;
                                }
                                if ($scope.meeting.countryCode) {
                                    tempObj.contactphone = $scope.meeting.countryCode + " " + $scope.meeting.phone;
                                }
                                if (!$scope.meeting.countryCode) {
                                    tempObj.contactphone = $scope.meeting.phone;
                                }
                                if ($scope.meeting.altcountryCode) {
                                    tempObj.alternatePhone = $scope.meeting.altcountryCode + " " + $scope.meeting.alternatePhone;
                                }
                                if (!$scope.meeting.altcountryCode) {
                                    tempObj.alternatePhone = $scope.meeting.alternatePhone;
                                }
                                tempObj.contactmail = $scope.meeting.email;
                                tempObj.alternateEmail = $scope.meeting.alternateEmail;
                                tempObj.dob = $scope.meeting.dob;
                                tempObj.age = $scope.meeting.age;
                                tempObj.gender = $scope.meeting.gender;
                                tempObj.anniversary = $scope.meeting.anniversary;
                                tempObj.meetingAddress = $scope.meeting.Address;
                                tempObj.area = $scope.meeting.Area;
                                tempObj.city = $scope.meeting.City;
                                tempObj.pincode = $scope.meeting.pincode;
                                tempObj.state = $scope.meeting.state;
                                tempObj.country = $scope.meeting.country;
                                if($scope.meeting.seller){
                                    tempObj.sellername = $scope.meeting.seller.sellername;
                                    tempObj.seller =  $scope.meeting.seller.sellerphone;
                                }
                                if($scope.meeting.annualIncome){
                                    tempObj.income = $scope.meeting.annualIncome.type ;
                                }
                                tempObj.propertyType = $scope.meeting.propertyType;
                                tempObj.propertyInterest = $scope.meeting.propertyInterest;
                                if($scope.newItemMeeting.length > 0){
                                    tempObj.medicine = $scope.newItemMeeting;
                                }
                                if($scope.meeting.budget){
                                    tempObj.budget = $scope.meeting.budget.type;
                                }
                                tempObj.leadsource = {};
                                tempObj.leadsource.type = $scope.meeting.leadsource.type;
                                tempObj.leadsource.leadTypeName = $scope.meeting.leadName;
                                tempObj.leadsource.activityTypeName = $scope.meeting.activityName || '';
                                if($scope.meeting.leadDate){
                                    tempObj.leadsource.leadDate = $scope.meeting.leadDate+"" ;
                                }
                                if($scope.meeting.occupation){
                                    tempObj.occupation = {} ;
                                    tempObj.occupation.name = $scope.meeting.occupation.type ;
                                    tempObj.occupation.occupationTypeName = $scope.meeting.occupationName ;
                                }
                                tempObj.NRI = $scope.meeting.NRIY || $scope.meeting.NRIN;
                                tempObj.rating = $scope.meeting.rating;
                                if($scope.meeting.visitdate){
                                    tempObj.visitdate = $scope.meeting.visitdate+"" ;
                                }
                                tempObj.description = $scope.meeting.description;
                                if($scope.meeting.comment){
                                    tempObj.comment = [];
                                    tempObj.comment.push({
                                        'comment': $scope.meeting.comment,
                                        'date': [date.getFullYear(), (date.getMonth() + 1).padLeft(), date.getDate().padLeft()].join('-') + ' '
                                        + [date.getHours().padLeft(), date.getMinutes().padLeft(), date.getSeconds().padLeft()].join(':'),
                                        'username': (($scope.user.role) ? $scope.user.username : "Portal Admin"),
                                        'userphone': ($scope.user.role ? $scope.user.sellerphone : '')
                                    });
                                }
                                tempObj.onHold = $scope.meeting.onHold;
                                tempObj.otherLocation = $scope.meeting.otherLocation;
                                tempObj.leadType = $scope.meeting.leadType;
                                tempObj.enquiryAge = $scope.meeting.enquiryAge;
                                if($scope.meeting.plotsize){
                                    tempObj.plotsize = $scope.meeting.plotsize.type ;
                                }
                                if($scope.meeting.facing){
                                    tempObj.facing = $scope.meeting.facing.type ;
                                }
                                tempObj.visitIncharge = $scope.meeting.visitIncharge;
                                tempObj.followuptime = $scope.meeting.followuptime;
                                tempObj.status = $scope.meeting.status;
                                tempObj.vehicle = $scope.meeting.vehicle;
                                if($scope.meeting.followupcomment){
                                    tempObj.followupcomment = [];
                                    tempObj.followupcomment.push({
                                        'comment': $scope.meeting.followupcomment,
                                        'date': [date.getFullYear(), (date.getMonth() + 1).padLeft(), date.getDate().padLeft()].join('-') + ' '
                                        + [date.getHours().padLeft(), date.getMinutes().padLeft(), date.getSeconds().padLeft()].join(':'),
                                        'username': (($scope.user.role) ? $scope.user.username : "Portal Admin"),
                                        'userphone': ($scope.user.role ? $scope.user.sellerphone : '')
                                    });
                                }
                                tempObj.followup = [];
                                tempObj.followup.push({
                                    'previousFollowupdate': new Date() + "",
                                    'NextFollowUpDate': $scope.meeting.followupdate + "",
                                    'username': $scope.user.username,
                                    'userphone': $scope.user.sellerphone,
                                    'followupcomment': $scope.meeting.followupcomment
                                });
                                tempObj.followupcount = tempObj.followup.length;
                                tempObj.Dealercode = $scope.meeting.Dealercode ;
                                tempObj.dealername = $scope.meeting.dealername ;
                                tempObj.dealerphone = $scope.meeting.dealerphone ;
                                tempObj.address = $scope.meeting.Address ;
                                tempObj.stockist = $scope.meeting.stockist ;
                                tempObj.itemcode = 'WWW';
                                tempObj.addedBy = $scope.user.username || 'PORTAL';
                                tempObj.latitude = 0;
                                tempObj.longitude = 0;
                                tempObj.type = "Meeting";
                                tempObj.date = date + "";
                                tempObj.orderId = $scope.generateOrderId();
                                tempObj.date_added = [date.getFullYear(), (date.getMonth() + 1).padLeft(), date.getDate().padLeft()].join('-') + ' '
                                    + [date.getHours().padLeft(), date.getMinutes().padLeft(), date.getSeconds().padLeft()].join(':');
                                if($scope.validatePhone == true){
                                    var temp = {};
                                    temp.DealerName = $scope.meeting.name;
                                    temp.Phone = $scope.meeting.phone;
                                    temp.Dealercode = $scope.meeting.Dealercode;
                                    temp.Address = $scope.meeting.Address;
                                    temp.Area = $scope.meeting.Area;
                                    temp.City = $scope.meeting.City;
                                    if($scope.meeting.seller){
                                        temp.Sellername = $scope.meeting.seller.sellername;
                                        temp.Seller =  $scope.meeting.seller.sellerphone;
                                    }
                                    temp.email = $scope.meeting.email;
                                    temp.latitude = 0;
                                    temp.longitude = 0;
                                    temp.type = "Lead";
                                }
                                var meeting = [];
                                meeting.push(tempObj);
                                $http.post("/dash/orders/" + tempObj.orderId, meeting)
                                    .success(function (response) {
                                        if (response == 'OK') {
                                            $scope.addMeetingTab(0);
                                            $scope.renderMeetingReport();
                                            bootbox.alert({
                                                title: "SUCCESS",
                                                message: "Successfully submitted",
                                                className: 'text-center'
                                            })
                                        }
                                    })
                                if($scope.validatePhone == true){
                                    $http.post("/dash/enquiry/new/customer", temp)
                                        .success(function (response) {
                                            console.log(response)
                                            if (response == 'OK') {
                                                $scope.addMeetingTab(0);
                                                $scope.renderMeetingReport();
                                                bootbox.alert({
                                                    title: "SUCCESS",
                                                    message: "Successfully submitted",
                                                    className: 'text-center'
                                                })
                                            }
                                        })
                                }
                            }
                            else {
                                bootbox.alert({
                                    title: "ERROR",
                                    message: "Please Enter a valid followup date",
                                    className: 'text-center'
                                })
                            }
                        }
                        else {
                            var d = new Date();
                            var temp = d.setDate(d.getDate() + 3);
                            if ($scope.meeting.title) {
                                tempObj.contactname = $scope.meeting.title + " " + $scope.meeting.name;
                                tempObj.Initial = $scope.meeting.Initial;
                            }
                            if (!$scope.meeting.title) {
                                tempObj.contactname = $scope.meeting.name;
                                tempObj.Initial = $scope.meeting.Initial;
                            }
                            if ($scope.meeting.countryCode) {
                                tempObj.contactphone = $scope.meeting.countryCode + " " + $scope.meeting.phone;
                            }
                            if (!$scope.meeting.countryCode) {
                                tempObj.contactphone = $scope.meeting.phone;
                            }
                            if ($scope.meeting.altcountryCode) {
                                tempObj.alternatePhone = $scope.meeting.altcountryCode + " " + $scope.meeting.alternatePhone;
                            }
                            if (!$scope.meeting.altcountryCode) {
                                tempObj.alternatePhone = $scope.meeting.alternatePhone;
                            }
                            tempObj.contactmail = $scope.meeting.email;
                            tempObj.alternateEmail = $scope.meeting.alternateEmail;
                            tempObj.dob = $scope.meeting.dob;
                            tempObj.age = $scope.meeting.age;
                            tempObj.gender = $scope.meeting.gender;
                            tempObj.anniversary = $scope.meeting.anniversary;
                            tempObj.meetingAddress = $scope.meeting.Address;
                            tempObj.area = $scope.meeting.Area;
                            tempObj.city = $scope.meeting.City;
                            tempObj.pincode = $scope.meeting.pincode;
                            tempObj.state = $scope.meeting.state;
                            tempObj.country = $scope.meeting.country;
                            if($scope.meeting.seller){
                                tempObj.sellername = $scope.meeting.seller.sellername;
                                tempObj.seller =  $scope.meeting.seller.sellerphone;
                            }
                            if($scope.meeting.annualIncome){
                                tempObj.income = $scope.meeting.annualIncome.type ;
                            }
                            tempObj.propertyType = $scope.meeting.propertyType;
                            tempObj.propertyInterest = $scope.meeting.propertyInterest;
                            if($scope.newItemMeeting.length > 0){
                                tempObj.medicine = $scope.newItemMeeting;
                            }
                            if($scope.meeting.budget){
                                tempObj.budget = $scope.meeting.budget.type ;
                            }
                            tempObj.leadsource = {} ;
                            tempObj.leadsource.type = $scope.meeting.leadsource.type ;
                            tempObj.leadsource.leadTypeName = $scope.meeting.leadName ;
                            tempObj.leadsource.activityTypeName = $scope.meeting.activityName || '';
                            if($scope.meeting.leadDate){
                                tempObj.leadsource.leadDate = $scope.meeting.leadDate +"" ;
                            }
                            if($scope.meeting.occupation){
                                tempObj.occupation = {} ;
                                tempObj.occupation.name = $scope.meeting.occupation.type ;
                                tempObj.occupation.occupationTypeName = $scope.meeting.occupationName ;
                            }
                            tempObj.NRI = $scope.meeting.NRIY || $scope.meeting.NRIN;
                            tempObj.rating = $scope.meeting.rating;
                            if($scope.meeting.visitdate){
                                tempObj.visitdate = $scope.meeting.visitdate+"" ;
                            }
                            tempObj.description = $scope.meeting.description;
                            if($scope.meeting.comment) {
                                tempObj.comment = [];
                                tempObj.comment.push({
                                    'comment': $scope.meeting.comment,
                                    'date': [date.getFullYear(), (date.getMonth() + 1).padLeft(), date.getDate().padLeft()].join('-') + ' '
                                    + [date.getHours().padLeft(), date.getMinutes().padLeft(), date.getSeconds().padLeft()].join(':'),
                                    'username': (($scope.user.role) ? $scope.user.username : "Portal Admin"),
                                    'userphone': ($scope.user.role ? $scope.user.sellerphone : '')
                                });
                            }
                            tempObj.onHold = $scope.meeting.onHold;
                            tempObj.otherLocation = $scope.meeting.otherLocation;
                            tempObj.leadType = $scope.meeting.leadType;
                            tempObj.enquiryAge = $scope.meeting.enquiryAge;
                            tempObj.visitIncharge = $scope.meeting.visitIncharge;
                            if($scope.meeting.plotsize){
                                tempObj.plotsize = $scope.meeting.plotsize.type ;
                            }
                            if($scope.meeting.facing){
                                tempObj.facing = $scope.meeting.facing.type ;
                            }
                            tempObj.followuptime = $scope.meeting.followuptime;
                            tempObj.status = $scope.meeting.status ;
                            tempObj.vehicle = $scope.meeting.vehicle;
                            if($scope.meeting.followupcomment) {
                                tempObj.followupcomment = [];
                                tempObj.followupcomment.push({
                                    'comment': $scope.meeting.followupcomment,
                                    'date': [date.getFullYear(), (date.getMonth() + 1).padLeft(), date.getDate().padLeft()].join('-') + ' '
                                    + [date.getHours().padLeft(), date.getMinutes().padLeft(), date.getSeconds().padLeft()].join(':'),
                                    'username': (($scope.user.role) ? $scope.user.username : "Portal Admin"),
                                    'userphone': ($scope.user.role ? $scope.user.sellerphone : '')
                                });
                            }
                            tempObj.followup = [];
                            tempObj.followup.push({
                                'previousFollowupdate': new Date() + "",
                                'NextFollowUpDate': new Date(temp) + "",
                                'username': $scope.user.username,
                                'userphone': $scope.user.sellerphone,
                                'followupcomment': $scope.meeting.followupcomment
                            });
                            tempObj.followupcount = tempObj.followup.length;
                            tempObj.Dealercode = $scope.meeting.Dealercode ;
                            tempObj.dealername = $scope.meeting.dealername ;
                            tempObj.dealerphone = $scope.meeting.dealerphone ;
                            tempObj.address = $scope.meeting.Address ;
                            tempObj.stockist = $scope.meeting.stockist ;
                            tempObj.itemcode = 'WWW';
                            tempObj.addedBy = $scope.user.username || 'PORTAL';
                            tempObj.latitude = 0;
                            tempObj.longitude = 0;
                            tempObj.type = 'Meeting';
                            tempObj.date = date + "";
                            tempObj.orderId = $scope.generateOrderId();
                            tempObj.date_added = [date.getFullYear(), (date.getMonth() + 1).padLeft(), date.getDate().padLeft()].join('-') + ' '
                                + [date.getHours().padLeft(), date.getMinutes().padLeft(), date.getSeconds().padLeft()].join(':');
                            if($scope.validatePhone == true){
                                var temp = {};
                                temp.DealerName = $scope.meeting.name;
                                temp.Phone = $scope.meeting.phone;
                                temp.Dealercode = $scope.meeting.Dealercode;
                                temp.Address = $scope.meeting.Address;
                                temp.Area = $scope.meeting.Area;
                                temp.City = $scope.meeting.City;
                                if($scope.meeting.seller){
                                    temp.Sellername = $scope.meeting.seller.sellername;
                                    temp.Seller =  $scope.meeting.seller.sellerphone;
                                }
                                temp.email = $scope.meeting.email;
                                temp.latitude = 0;
                                temp.longitude = 0;
                                temp.type = "Lead";
                            }
                            var meeting = [];
                            meeting.push(tempObj);
                            $http.post("/dash/orders/" + tempObj.orderId, meeting)
                                .success(function (response) {
                                    if (response == 'OK') {
                                        $scope.addMeetingTab(0);
                                        $scope.renderMeetingReport();
                                        bootbox.alert({
                                            title: "SUCCESS",
                                            message: "Successfully submitted",
                                            className: 'text-center'
                                        })
                                    }
                                })
                            if($scope.validatePhone == true){
                                $http.post("/dash/enquiry/new/customer", temp)
                                    .success(function (response) {
                                        console.log(response)
                                        if (response == 'OK') {
                                            $scope.addMeetingTab(0);
                                            $scope.renderMeetingReport();
                                            bootbox.alert({
                                                title: "SUCCESS",
                                                message: "Successfully submitted",
                                                className: 'text-center'
                                            })
                                        }
                                    })
                            }
                        }
                    }
                    else {
                        bootbox.alert({
                            title: "ERROR",
                            message: "Please Enter Lead Source",
                            className: 'text-center'
                        })
                    }
                }
                else {
                    bootbox.alert({
                        title: "ERROR",
                        message: "Please Enter phone number",
                        className: 'text-center'
                    })
                }
            }
            else {
                bootbox.alert({
                    title: "ERROR",
                    message: "Please Enter contact name",
                    className: 'text-center'
                })
            }
        }
        else{
            if ($scope.newItemMeeting!= undefined && $scope.newItemMeeting != '') {
                if ($scope.meeting.seller != undefined && $scope.meeting.seller != null) {
                    if ($scope.meeting.rating != undefined && $scope.meeting.rating != '') {
                        if ($scope.meeting.name != '' && $scope.meeting.name != null && $scope.meeting.name != undefined){
                            if($scope.meeting.phone != '' && $scope.meeting.phone != null && $scope.meeting.phone != undefined){
                                var tempObj = {};
                                var date = new Date();
                                if($scope.meeting.followupdate){
                                    var d1 = moment(date) ;
                                    var d2 = moment($scope.meeting.followupdate) ;
                                    var numberOfDays = moment.duration(d2.diff(d1)).asDays();
                                    if(numberOfDays >= -1){
                                        tempObj.contactname=$scope.meeting.name;
                                        tempObj.contactphone=$scope.meeting.phone;
                                        tempObj.alternatePhone = $scope.meeting.alternatePhone ;
                                        tempObj.contactmail=$scope.meeting.email;
                                        tempObj.alternateEmail = $scope.meeting.alternateEmail ;
                                        tempObj.dob = $scope.meeting.dob ;
                                        tempObj.gender =$scope.meeting.gender ;
                                        tempObj.meetingAddress = $scope.meeting.Address;
                                        tempObj.area = $scope.meeting.Area;
                                        tempObj.city = $scope.meeting.City;
                                        tempObj.pincode = $scope.meeting.pincode;
                                        tempObj.state = $scope.meeting.state;
                                        tempObj.country = $scope.meeting.country;
                                        if($scope.meeting.occupation){
                                            tempObj.occupation = {} ;
                                            tempObj.occupation.name = $scope.meeting.occupation.type ;
                                            tempObj.occupation.occupationTypeName = $scope.meeting.occupationName ;
                                        }
                                        if($scope.meeting.annualIncome){
                                            tempObj.income = $scope.meeting.annualIncome.type ;
                                        }
                                        tempObj.leadsource = {} ;
                                        tempObj.leadsource.type = $scope.meeting.leadsource.type ;
                                        tempObj.leadsource.leadTypeName = $scope.meeting.leadName ;
                                        tempObj.leadsource.activityTypeName = $scope.meeting.activityName || '';
                                        if($scope.meeting.leadDate){
                                            tempObj.leadsource.leadDate = $scope.meeting.leadDate +"" ;
                                        }
                                        if($scope.meeting.budget){
                                            tempObj.budget = $scope.meeting.budget.type ;
                                        }
                                        tempObj.propertyType = $scope.meeting.propertyType;
                                        tempObj.propertyInterest = $scope.meeting.propertyInterest ;
                                        if($scope.newItemMeeting.length > 0){
                                            tempObj.medicine = $scope.newItemMeeting;
                                        }
                                        tempObj.visitdate = $scope.meeting.visitdate ;
                                        tempObj.description = $scope.meeting.description;
                                        tempObj.rating = $scope.meeting.rating;
                                        tempObj.leadType = $scope.meeting.leadType ;
                                        tempObj.enquiryAge = $scope.meeting.enquiryAge ;
                                        tempObj.visitIncharge = $scope.meeting.visitIncharge ;
                                        tempObj.dealercode = $scope.meeting.Dealercode;
                                        tempObj.dealerphone = $scope.meeting.Phone;
                                        tempObj.stockist = $scope.meeting.Stockist;
                                        tempObj.itemcode = 'WWW';
                                        tempObj.salespersonAssigned = $scope.meeting.seller ;
                                        tempObj.sellername = $scope.meeting.seller.sellername;
                                        tempObj.seller =  $scope.meeting.seller.sellerphone;
                                        // tempObj.seller = $scope.meeting.seller.sellerid + "";
                                        tempObj.latitude = 0;
                                        tempObj.longitude = 0;
                                        tempObj.type = 'Meeting';
                                        tempObj.date = date + "";
                                        tempObj.followuptime = $scope.meeting.followuptime ;
                                        tempObj.status = $scope.meeting.status ;
                                        if($scope.meeting.followupcomment){
                                            tempObj.followupcomment = [];
                                            tempObj.followupcomment.push({
                                                'comment': $scope.meeting.followupcomment,
                                                'date': [date.getFullYear(), (date.getMonth() + 1).padLeft(), date.getDate().padLeft()].join('-') + ' '
                                                + [date.getHours().padLeft(), date.getMinutes().padLeft(), date.getSeconds().padLeft()].join(':'),
                                                'username': (($scope.user.role) ? $scope.user.username : "Portal Admin"),
                                                'userphone': ($scope.user.role ? $scope.user.sellerphone : '')
                                            });
                                        }
                                        tempObj.followup = [];
                                        tempObj.followup.push({
                                            'previousFollowupdate': new Date() + "",
                                            'NextFollowUpDate': $scope.meeting.followupdate + "",
                                            'username': $scope.user.username,
                                            'userphone': $scope.user.sellerphone,
                                            'followupcomment': $scope.meeting.followupcomment
                                        });
                                        tempObj.followupcount = tempObj.followup.length;
                                        tempObj.orderId = $scope.generateOrderId();
                                        tempObj.date_added = [date.getFullYear(), (date.getMonth() + 1).padLeft(), date.getDate().padLeft()].join('-') + ' '
                                            + [date.getHours().padLeft(), date.getMinutes().padLeft(), date.getSeconds().padLeft()].join(':');
                                        tempObj.dealername = $scope.meeting.DealerName;
                                        if($scope.meeting.comment){
                                            tempObj.comment = [];
                                            tempObj.comment.push({
                                                'comment': $scope.meeting.comment,
                                                'date': [date.getFullYear(), (date.getMonth() + 1).padLeft(), date.getDate().padLeft()].join('-') + ' '
                                                + [date.getHours().padLeft(), date.getMinutes().padLeft(), date.getSeconds().padLeft()].join(':'),
                                                'username': (($scope.user.role) ? $scope.user.username : "Portal Admin"),
                                                'userphone': ($scope.user.role ? $scope.user.sellerphone : '')
                                            });
                                        }
                                        if($scope.validatePhone == true){
                                            var temp = {};
                                            temp.DealerName = $scope.meeting.name;
                                            temp.Phone = $scope.meeting.phone;
                                            temp.Dealercode = $scope.meeting.Dealercode;
                                            temp.Address = $scope.meeting.Address;
                                            temp.Area = $scope.meeting.Area;
                                            temp.City = $scope.meeting.City;
                                            if($scope.meeting.seller){
                                                temp.Sellername = $scope.meeting.seller.sellername;
                                                temp.Seller =  $scope.meeting.seller.sellerphone;
                                            }
                                            temp.email = $scope.meeting.email;
                                            temp.latitude = 0;
                                            temp.longitude = 0;
                                            temp.type = "Lead";
                                        }
                                        var meeting = [];
                                        meeting.push(tempObj);
                                        $http.post("/dash/orders/" + tempObj.orderId, meeting)
                                            .success(function (response) {
                                                if (response == 'OK') {
                                                    $scope.addMeetingTab(0);
                                                    $scope.renderMeetingReport();
                                                    bootbox.alert({
                                                        title: "SUCCESS",
                                                        message: "Successfully submitted",
                                                        className: 'text-center'
                                                    })
                                                }
                                            })
                                        if($scope.validatePhone == true){
                                            $http.post("/dash/enquiry/new/customer", temp)
                                                .success(function (response) {
                                                    console.log(response)
                                                    if (response == 'OK') {
                                                        $scope.addMeetingTab(0);
                                                        $scope.renderMeetingReport();
                                                        bootbox.alert({
                                                            title: "SUCCESS",
                                                            message: "Successfully submitted",
                                                            className: 'text-center'
                                                        })
                                                    }
                                                })
                                        }
                                    }
                                    else{
                                        bootbox.alert({
                                            title: "ERROR",
                                            message: "Please Enter a valid followup date",
                                            className: 'text-center'
                                        })
                                    }
                                }
                                else{
                                    var d = new Date();
                                    var temp = d.setDate(d.getDate() + 3);
                                    tempObj.contactname=$scope.meeting.name;
                                    tempObj.contactphone=$scope.meeting.phone;
                                    tempObj.alternatePhone = $scope.meeting.alternatePhone ;
                                    tempObj.contactmail=$scope.meeting.email;
                                    tempObj.alternateEmail = $scope.meeting.alternateEmail ;
                                    tempObj.dob = $scope.meeting.dob ;
                                    tempObj.gender =$scope.meeting.gender ;
                                    tempObj.meetingAddress = $scope.meeting.Address;
                                    tempObj.area = $scope.meeting.Area;
                                    tempObj.city = $scope.meeting.City;
                                    tempObj.pincode = $scope.meeting.pincode;
                                    tempObj.state = $scope.meeting.state;
                                    tempObj.country = $scope.meeting.country;
                                    if($scope.meeting.occupation){
                                        tempObj.occupation = {} ;
                                        tempObj.occupation.name = $scope.meeting.occupation.type ;
                                        tempObj.occupation.occupationTypeName = $scope.meeting.occupationName ;
                                    }
                                    if($scope.meeting.annualIncome){
                                        tempObj.income = $scope.meeting.annualIncome.type ;
                                    }
                                    tempObj.leadsource = {} ;
                                    tempObj.leadsource.type = $scope.meeting.leadsource.type ;
                                    tempObj.leadsource.leadTypeName = $scope.meeting.leadName ;
                                    tempObj.leadsource.activityTypeName = $scope.meeting.activityName || '';
                                    if($scope.meeting.leadDate){
                                        tempObj.leadsource.leadDate = $scope.meeting.leadDate +"" ;
                                    }
                                    if($scope.meeting.budget){
                                        tempObj.budget = $scope.meeting.budget.type ;
                                    }
                                    tempObj.propertyType = $scope.meeting.propertyType;
                                    tempObj.propertyInterest = $scope.meeting.propertyInterest ;
                                    if($scope.newItemMeeting.length > 0){
                                        tempObj.medicine = $scope.newItemMeeting;
                                    }
                                    tempObj.visitdate = $scope.meeting.visitdate ;
                                    tempObj.description = $scope.meeting.description;
                                    tempObj.rating = $scope.meeting.rating;
                                    tempObj.leadType = $scope.meeting.leadType ;
                                    tempObj.enquiryAge = $scope.meeting.enquiryAge ;
                                    tempObj.visitIncharge = $scope.meeting.visitIncharge ;
                                    tempObj.dealercode = $scope.meeting.Dealercode;
                                    tempObj.dealerphone = $scope.meeting.Phone;
                                    tempObj.stockist = $scope.meeting.Stockist;
                                    tempObj.itemcode = 'WWW';
                                    tempObj.salespersonAssigned = $scope.meeting.seller ;
                                    tempObj.sellername = $scope.meeting.seller.sellername;
                                    tempObj.seller =  $scope.meeting.seller.sellerphone;
                                    // tempObj.seller = $scope.meeting.seller.sellerid + "";
                                    tempObj.latitude = 0;
                                    tempObj.longitude = 0;
                                    tempObj.type = 'Meeting';
                                    tempObj.date = date + "";
                                    tempObj.followuptime = $scope.meeting.followuptime ;
                                    tempObj.status = $scope.meeting.status ;
                                    if($scope.meeting.followupcomment) {
                                        tempObj.followupcomment = [];
                                        tempObj.followupcomment.push({
                                            'comment': $scope.meeting.followupcomment,
                                            'date': [date.getFullYear(), (date.getMonth() + 1).padLeft(), date.getDate().padLeft()].join('-') + ' '
                                            + [date.getHours().padLeft(), date.getMinutes().padLeft(), date.getSeconds().padLeft()].join(':'),
                                            'username': (($scope.user.role) ? $scope.user.username : "Portal Admin"),
                                            'userphone': ($scope.user.role ? $scope.user.sellerphone : '')
                                        });
                                    }
                                    tempObj.followup = [];
                                    tempObj.followup.push({
                                        'previousFollowupdate': new Date() + "",
                                        'NextFollowUpDate': new Date(temp) + "",
                                        'username': $scope.user.username,
                                        'userphone': $scope.user.sellerphone,
                                        'followupcomment': $scope.meeting.followupcomment
                                    });
                                    tempObj.orderId = $scope.generateOrderId();
                                    tempObj.date_added = [date.getFullYear(), (date.getMonth() + 1).padLeft(), date.getDate().padLeft()].join('-') + ' '
                                        + [date.getHours().padLeft(), date.getMinutes().padLeft(), date.getSeconds().padLeft()].join(':');
                                    tempObj.dealername = $scope.meeting.DealerName;
                                    if($scope.meeting.comment){
                                        tempObj.comment = [];
                                        tempObj.comment.push({
                                            'comment': $scope.meeting.comment,
                                            'date': [date.getFullYear(), (date.getMonth() + 1).padLeft(), date.getDate().padLeft()].join('-') + ' '
                                            + [date.getHours().padLeft(), date.getMinutes().padLeft(), date.getSeconds().padLeft()].join(':'),
                                            'username': (($scope.user.role) ? $scope.user.username : "Portal Admin"),
                                            'userphone': ($scope.user.role ? $scope.user.sellerphone : '')
                                        });
                                    }
                                    if($scope.validatePhone == true){
                                        var temp = {};
                                        temp.DealerName = $scope.meeting.name;
                                        temp.Phone = $scope.meeting.phone;
                                        temp.Dealercode = $scope.meeting.Dealercode;
                                        temp.Address = $scope.meeting.Address;
                                        temp.Area = $scope.meeting.Area;
                                        temp.City = $scope.meeting.City;
                                        if($scope.meeting.seller){
                                            temp.Sellername = $scope.meeting.seller.sellername;
                                            temp.Seller =  $scope.meeting.seller.sellerphone;
                                        }
                                        temp.email = $scope.meeting.email;
                                        temp.latitude = 0;
                                        temp.longitude = 0;
                                        temp.type = "Lead";
                                    }
                                    var meeting = [];
                                    meeting.push(tempObj);
                                    $http.post("/dash/orders/" + tempObj.orderId, meeting)
                                        .success(function (response) {
                                            if (response == 'OK') {
                                                $scope.addMeetingTab(0);
                                                $scope.renderMeetingReport();
                                                bootbox.alert({
                                                    title: "SUCCESS",
                                                    message: "Successfully submitted",
                                                    className: 'text-center'
                                                })
                                            }
                                        })
                                    if($scope.validatePhone == true){
                                        $http.post("/dash/enquiry/new/customer", temp)
                                            .success(function (response) {
                                                console.log(response)
                                                if (response == 'OK') {
                                                    $scope.addMeetingTab(0);
                                                    $scope.renderMeetingReport();
                                                    bootbox.alert({
                                                        title: "SUCCESS",
                                                        message: "Successfully submitted",
                                                        className: 'text-center'
                                                    })
                                                }
                                            })
                                    }
                                }
                            }
                            else {
                                bootbox.alert({
                                    title: "ERROR",
                                    message: "Please Enter phone number",
                                    className: 'text-center'
                                })
                            }
                        }
                        else{
                            bootbox.alert({
                                title: "ERROR",
                                message: "Please Enter contact name",
                                className: 'text-center'
                            })
                        }
                    }
                    else {
                        bootbox.alert({
                            title: "ERROR",
                            message: "Please select a rating value",
                            className: 'text-center'
                        })
                    }
                }
                else {
                    bootbox.alert({
                        title: "ERROR",
                        message: "Please select a Salesperson",
                        className: 'text-center'
                    })
                }
            }
            else {
                bootbox.alert({
                    title: "ERROR",
                    message: "Please select a valid " + $scope.nav[18].display[3],
                    className: 'text-center'
                })
            }
        }
    }
    $scope.clearModalvalues = function(){
        $('#myModalAddVisit').on('hidden.bs.modal', function (e) {
            $(this)
                .find("input,textarea,select")
                .val('')
                .end()
                .find("input[type=checkbox], input[type=radio]")
                .prop("checked", "")
                .end();
        })
        $('#duplicates').on('hidden.bs.modal', function (e) {
            $(this)
                .find("input,textarea,select")
                .val('')
                .end()
                .find("input[type=checkbox], input[type=radio]")
                .prop("checked", "")
                .end();
        })
        $scope.duplicateStores = [] ;
        $scope.duplicateType.type = '' ;
    }
    $scope.visit = {} ;
    $scope.SaveVisit = function(data, cmt){
        // console.log(visit)
        if($scope.visit.date != undefined && $scope.visit.date != null && $scope.visit.date != '' ){
            if($scope.visit.SalesPerson != undefined && $scope.visit.SalesPerson != null && $scope.visit.SalesPerson != '' ){
                if($scope.visit.Project != undefined && $scope.visit.Project != null ){
                    if($scope.visit.custqueries != undefined && $scope.visit.custqueries != null && $scope.visit.custqueries != ''){
                        var tempobj = {};
                        var date = new Date() ;
                        console.log(cmt)
                        tempobj.visitdate = [date.getFullYear(), (date.getMonth() + 1).padLeft(), date.getDate().padLeft()].join('-') + ' '
                            + [date.getHours().padLeft(), date.getMinutes().padLeft(), date.getSeconds().padLeft()].join(':');
                        if(cmt){
                            tempobj.comment = [];
                            var object = {comment: cmt, date_added: tempobj.visitdate,added_by:$scope.user.role?$scope.user.username:"PORTAL"}
                            tempobj.comment.push(object)
                        }
                        tempobj.id = new Date().getTime()+'' ;
                        tempobj.uniqueid = $scope.enquirydetails.orderId;
                        tempobj.salesperson = data.SalesPerson.sellername;
                        tempobj.project = data.Project;
                        tempobj.bbfeedback = data.bandbRepfeedback;
                        tempobj.sprequirement = data.sprequirement;
                        tempobj.custqueries = data.custqueries;
                        tempobj.added_by = $scope.user.role?$scope.user.username:"PORTAL";
                        console.log(tempobj)
                        $http.post("/dash/createvisit",tempobj).success(function(response){
                            console.log("**CREATED VISIT SUCCESSFULLY");
                            $scope.enquirydetails.visit.push(tempobj)
                            toastr.success("Visit Successfully Added")
                            $(function () {
                                $('#myModalAddVisit').modal('toggle');
                            });
                        })
                    }
                    else{
                        bootbox.alert({
                            title: "ERROR",
                            message: "Please Enter Customer Queries",
                            className: 'text-center'
                        })
                    }
                }
                else{
                    bootbox.alert({
                        title: "ERROR",
                        message: "Please select a Project",
                        className: 'text-center'
                    })
                }
            }
            else{
                bootbox.alert({
                    title: "ERROR",
                    message: "Please select a Salesperson",
                    className: 'text-center'
                })
            }
        }
        else{
            bootbox.alert({
                title: "ERROR",
                message: "Please Enter valid date",
                className: 'text-center'
            })
        }
    }
    $scope.additonalVisitComment = function(visit,i){
        var date = new Date() ;
        var addCmt = {comment: visit.newComment,date_added:[date.getFullYear(), (date.getMonth() + 1).padLeft(), date.getDate().padLeft()].join('-') + ' '
        + [date.getHours().padLeft(), date.getMinutes().padLeft(), date.getSeconds().padLeft()].join(':'),added_by:$scope.user.role?$scope.user.username:"PORTAL"};
        if(visit.comment){
            visit.comment.push(addCmt)
        }
        else{
            visit.comment = [];
            visit.comment.push(addCmt)
        }
        $http.post("/dash/additionalvisitcomment",visit).success(function(response){
            if(response){
                $scope.enquirydetails.visit[i].newComment = '' ;
                // console.log($scope.enquiry.visit[i].newComment)
            }
        })
    }
    $scope.saveEnquiryComment = function(details,comment){
        var body = {};
        body.id = details.orderId[0];
        body.comment = comment;
        body.date = new Date() + "";
        body.user = $scope.user;
        $http.put("/dash/equiry/update/comment",body).success(function(response){
            console.log(response.nModified);
            toastr.success("Comment Added Successfully");
        })
    }
    $scope.saveFollowupDate = function(details,date ,comment){
        var d1 = moment(new Date()) ;
        var d2 = moment(date) ;
        console.log("d1",d1);
        console.log("d2",d2);
        var numberOfDays = moment.duration(d2.diff(d1)).asDays();
        console.log("numberOfDays",numberOfDays);
        if (numberOfDays >= -1){
            console.log("inside if")
            var body = {} ;
            body.followup = details.followup;
            console.log(details.followup);
            body.id = details.orderId ;
            body.NextFollowUpDate = date + "";
            body.previousFollowupdate = new Date() + "";
            body.followupcomment = comment;
            body.user = $scope.user;
            body.followupcount = $scope.enquirydetails.followup.length + 1;
            //..... Enquiry Update....
            $http.put("/dash/orders/followup",body).success(function(response){
                if(response.nModified >= 1){
                    toastr.success("Followup date updated")
                    details.followup.push(body)
                    jQuery.noConflict();
                    $("#showAddfollowupDate").collapse('hide');
                }
                else{
                    toastr.error("Update failed please try again")
                }
            })
            $http.put("/dash/orders/followup/count", body).success(function (response) {
                $scope.renderMeetingReport();
            })
        }
        else{
            bootbox.alert({
                title: "ERROR",
                message: "Please Enter a valid followup date",
                className: 'text-center'
            })
        }
    }
    $scope.cleardateValue = function(){
        $scope.meeting.followupdate = '' ;
        $scope.meeting.followupcomment = '';
    }
    $scope.fetchenquirydata=function(id){
        var body={};
        body.id = id;
        $http.post("/dash/fetchenquiry",body).success(function(response){
            $scope.enquirydetails = response;
        })
    };
    $scope.filterComplaintStatus = function(status){
        $scope.complaintStatusFilter = status;
        if(filteredComplaints)
            $scope.serviceComplaints = filteredComplaints;
        else
            $scope.serviceComplaints = allComplaints;
        if(status != 'allComplaints'){
            var tempOrders = [];
            for(var i = 0; i < $scope.serviceComplaints.length; i++){
                if($scope.serviceComplaints[i].status == status)
                    tempOrders.push($scope.serviceComplaints[i])
            }
            $scope.serviceComplaints = tempOrders;
            $scope.totalItems = $scope.serviceComplaints.length;
        }else{
            if(filteredComplaints){
                $scope.serviceComplaints = filteredComplaints;
                $scope.totalItems = $scope.serviceComplaints.length;
            }
            else{
                $scope.serviceComplaints = allComplaints;
                $scope.totalItems = $scope.serviceComplaints.length;
            }
        }
        $scope.viewLength = 0;
        $scope.newViewBy = viewBy.complaints;
        $scope.transactionCount($scope.serviceComplaints.length, 10);
    }
    //    $scope.$watch('orderSearch.date_from', function() {
    //   //console.log("Dynamic searching");
    //   $scope.orders = allOrders;
    //   if($scope.orderSearch.date_from == null) $scope.orderSearch.date_from = undefined;
    //   if($scope.orderSearch.date_from){
    // 	  var orders = [];
    // 	  for(var i=0; i<$scope.orders.length;i++){
    // 	  	var date = new Date($scope.orders[i].date_added[0]);
    // 	  	if($scope.orderSearch.date.toDateString() == date.toDateString()){
    // 	  		orders.push($scope.orders[i])
    // 		}
    // 	  }
    // 	  $scope.orders = orders;
    //   }
    //   else
    //          $scope.orders = allOrders;
    // })
    //
    //    $scope.$watch('orderSearch.date_to  ', function() {
    //        //console.log("Dynamic searching");
    //        $scope.orders = allOrders;
    //        if($scope.orderSearch.date_to == null) $scope.orderSearch.date_to = undefined;
    //        if($scope.orderSearch.date_to){
    //            var orders = [];
    //            for(var i=0; i<$scope.orders.length;i++){
    //                var date = new Date($scope.orders[i].date_added[0]);
    //                if($scope.orderSearch.date.toDateString() == date.toDateString()){
    //                    orders.push($scope.orders[i])
    //                }
    //            }
    //            $scope.orders = orders;
    //        }
    //        else
    //            $scope.orders = allOrders;
    //    })
    // $scope.getLastSeen = function(id){
    //     $http.get("/dash/devices/views/"+id)
    //         .success(function(response){
    //             if(response == null){
    //                 $scope.lastseen = "Not logged in";
    //             }
    //             else
    //                 var last = response.lastaccessdate;
    //             console.log("last "+last);
    //         });
    // }
    var oldUser;
    var presentNumber;
    $scope.$watch('orderAttendance.date', function() {
        //console.log($scope.attendancereport)
        if(allAttendance){
            if(allAttendance.length){
                $scope.attendancereport = allAttendance;
                if($scope.orderAttendance.date == null) $scope.orderAttendance.date = undefined;
                if($scope.orderAttendance.date){
                    var orders = [];
                    for(var i=0; i<$scope.attendancereport.length;i++){
                        var date = new Date($scope.attendancereport[i].date_added[0]);
                        if($scope.orderAttendance.date.toDateString() == date.toDateString()){
                            orders.push($scope.attendancereport[i])
                        }
                    }
                    $scope.attendancereport = orders;
                }
                else
                    $scope.attendancereport = allAttendance;
            }
        }
    })
    $scope.showDetails =  function(response){
        //	        var dialog = $("#displayOrderDetails").clone();
        //	        dialog.removeAttr("id");
        var html = '<a href="javascript: window.print();" id="muteUnmute">Print</a><br/><br/>';
        html+="Order ID: " + response[0].orderId +"<br/>";
        html+="Name: " + response[0].dealername +"<br/>";
        html+="Address: " + response[0].Address +"<br/>";
        html+="<br/>";
        html+="<table border='1'><thead><tr><th>Date</th><th>Item</th><th>Quantity</th><th>Seller</th><th>Name</th></tr></thead><tbody>";
        for (var i =0; i < response.length; i++){
            html += "<tr>";
            html += "<td>" + response[i].date_added + "</td>";
            html += "<td>" + response[i].medicine + "</td>";
            html += "<td>" + response[i].quantity + "</td>";
            html += "<td>" + response[i].seller + "</td>";
            html += "<td>" + response[i].dealername + "</td>";
            html += "</tr>";
        }
        html+="</tbody></table>";
        var win = window.open("", "Order Details", "toolbar=no, location=no, directories=no, status=no, menubar=no, scrollbars=yes, resizable=yes, width=780, height=500, top="+(screen.height-400)+", left="+(screen.width-840));
        win.document.body.innerHTML = html;
        //	        dialog.find(".message").html(html);
        //	        dialog.addClass("black");
        //
        //	        $("body").append(dialog);
        //
        //	        var dialogHeight = dialog.height(),
        //	            dialogWidth = dialog.width();
        //
        //	        dialog.css({
        //	            "height":300,
        //	            "width":dialogWidth
        //	        });
        //
        //	        $("#overlay").fadeIn();
        //	        dialog.fadeIn();
    }
    $scope.renderOrderDetails = function (response) {
        console.log("GetAll Order for one order-->" + response);
    };
    var mainID;
    $scope.selectAllTabs = false;
    $(document).on("click", ".viewid", function () {
        mainID = $(this).data('id');
        $scope.$apply(function(){
            $scope.seller = {};
        })
        if(mainID == "add-user") {
            document.getElementById("addUpdateButton").innerHTML = "Add";
            document.getElementById("addRemoveName").innerHTML = "Add";
            $scope.selectAllTabs = true;
            $scope.selectAllPortalTabs();
        }
        else if(mainID == "update-user") {
            document.getElementById("addUpdateButton").innerHTML = "Update";
            document.getElementById("addRemoveName").innerHTML = "Update";
            $scope.selectAllPortalTab = false;
            $scope.selectAllAppTab = false;
        }
    });
    $scope.selectAllPortalTab = false;
    $scope.selectAllAppTab = false;
    $scope.selectAllPortalTabs = function() {
        var tabs = {};
        var app_tabs = [];
        var p_tabs = [];
        if($scope.selectAllTabs){
            $scope.seller.p_tabs = {};
            for (var i = 0; i < $scope.newNav.length; i++) {
                tabs[i] = {
                    "active": true
                }
                $scope.seller.p_tabs[i] = tabs[i];
            }
            $scope.seller.app_tabs = {};
            for(var i=0; i < $scope.appTabs.length; i++) {
                tabs[i] = {
                    "active": true
                }
                $scope.seller.app_tabs[i] = tabs[i];
            }
            $scope.selectAllPortalTab = true;
            $scope.selectAllAppTab = true;
        }
        $scope.selectAllTabs = false
    }
    $scope.AllPortalTab = function(portal) {
        var tabs = {};
        $scope.seller.p_tabs = {};
        if(portal){
            for (var i = 0; i < $scope.newNav.length; i++) {
                tabs[i] = {
                    "active": true
                }
                $scope.seller.p_tabs[i] = tabs[i];
            }
        }else{
            for (var i = 0; i < $scope.newNav.length; i++) {
                tabs[i] = {
                    "active": false
                }
                $scope.seller.p_tabs[i] = tabs[i];
            }
        }
    }
    $scope.AllAppTab = function(appTab) {
        var tabs = {};
        $scope.seller.app_tabs = {};
        if(appTab){
            for(var i=0; i < $scope.appTabs.length; i++) {
                tabs[i] = {
                    "active": true
                }
                $scope.seller.app_tabs[i] = tabs[i];
            }
        }else{
            for(var i=0; i < $scope.appTabs.length; i++) {
                tabs[i] = {
                    "active": false
                }
                $scope.seller.app_tabs[i] = tabs[i];
            }
        }
    }
    $scope.getDataType = function(data) { return typeof data };
    $scope.selectSeller = function(id){
        console.log("User ID : " + id);
        $http.get("/dash/sellers/" + id)
            .success( function(response) {
                $scope.sellerDetails = response;
                $scope.seller = response;
                /*       if($scope.seller.Manager_Name){
                 $scope.ATMSmanagers.tempManager = $scope.seller.Manager_Name;
                 }
                 console.log($scope.ATMSmanagers.tempManager);*/
                oldUser = response;
                // if($scope.sellerDetails.managerid){
                //    $scope.managerName = $scope.getSellerName($scope.sellerDetails.managerid);
                // }
                // else
                //     $scope.managerName = "Not Assigned";
                $scope.userDevice = $scope.viewDeviceDetails($scope.sellerDetails.sellerphone);
                jQuery.noConflict();
                $('#userDetails').modal('show');
            });
    };
    $scope.uploadImage = function(){
        var image = document.getElementById('userImage').files;
        if((image[0].size / 1024) <= 200){
            jQuery.noConflict();
            $('.refresh').css("display", "inline");
            var reader = new FileReader();
            reader.onloadend = function() {
                var tempObj = {};
                tempObj.image = reader.result;
                if($scope.applicationType == 'Atmosphere'){
                    if($scope.sellerDetails.EMPLOYEE_ID){
                        tempObj.EMPLOYEE_ID = $scope.sellerDetails.EMPLOYEE_ID
                        $http.put("/dash/upload/user/image", tempObj)
                            .success(function(res){
                                console.log(res);
                                if(res){
                                    jQuery.noConflict()
                                    $('#uploadImage').modal('hide')
                                    $('.refresh').css("display", "none");
                                    bootbox.alert({
                                        title : 'SUCCESS',
                                        message : 'Successfully uploaded image.',
                                        className : 'text-center'
                                    })
                                    var sellerSearchObj = {};
                                    sellerSearchObj.viewLength = 0;
                                    sellerSearchObj.viewBy = initialUserViewBy;
                                    sellerSearchObj.searchFor = '';
                                    sellerSearchObj.statusFilter = 'allUsers';
                                    sellerSearchObj.searchBy = [];
                                    sellerSearchObj.userLoginDetails = $scope.user ;
                                    if($scope.user.sellerObject) {
                                        sellerSearchObj.resort = $scope.user.sellerObject.Resort;
                                    }
                                    $scope.viewLength = 0;
                                    $scope.newViewBy = viewBy.sellers;
                                    $scope.userSearch.filter = '';
                                    $scope.sellers = [];
                                    $http.post("/dash/users/list", sellerSearchObj)
                                        .success($scope.renderSellers)
                                    $http.post("/dash/users/count", sellerSearchObj)
                                        .success(function(res){
                                            $scope.sellers_count = res;
                                            $scope.transactionCount(res,5);
                                        });
                                    $scope.userFilterStatus = 'allUsers';
                                    $scope.userSearch.filter = '';
                                    $scope.statusFilter = '';
                                    $scope.userRoles.Roles = true;
                                    for(var i = 0 ;i < $scope.userRole.length; i++){
                                        console.log($scope.userRole[i].status);
                                        $scope.userRole[i].status = true;
                                    }
                                    $scope.showSellerFilter = false;
                                }
                                else{
                                    jQuery.noConflict()
                                    $('.refresh').css("display", "none");
                                    bootbox.alert({
                                        title : 'ERROR',
                                        message : 'Failed to upload. Please try after sometime.',
                                        className : 'text-center'
                                    })
                                }
                            })
                    }
                    else{
                        bootbox.alert({
                            title : 'ERROR',
                            message : 'Failed to upload. No Employee code.',
                            className : 'text-center'
                        })
                    }
                }
                else{
                    tempObj.seller = $scope.sellerDetails.sellerphone;
                    $http.put("/dash/upload/user/image", tempObj)
                        .success(function(res){
                            console.log(res);
                            if(res){
                                jQuery.noConflict()
                                $('#uploadImage').modal('hide')
                                $('.refresh').css("display", "none");
                                bootbox.alert({
                                    title : 'SUCCESS',
                                    message : 'Successfully uploaded image.',
                                    className : 'text-center'
                                })
                            }
                            else{
                                jQuery.noConflict()
                                $('.refresh').css("display", "none");
                                bootbox.alert({
                                    title : 'ERROR',
                                    message : 'Failed to upload. Please try after sometime.',
                                    className : 'text-center'
                                })
                            }
                        })
                }
            }
            reader.readAsDataURL(image[0]);
        }
        else{
            jQuery.noConflict();
            $('.uploadSizeError').css('display' , 'block');
        }
    }
    $scope.uploadLogo = function(){
        var image = document.getElementById('logo-input_upload').files;
        var reader = new FileReader();
        reader.onloadend = function() {
            var tempObj = {};
            tempObj.image = reader.result;
            $http.post("/dash/upload/logo", tempObj)
                .success(function(err, logo){
                    //console.log(logo);
                    if(logo){
                        // $scope.logo_url = logo.url;
                        //$scope.$apply();
                        bootbox.alert({
                            title : 'SUCCESS',
                            message : 'Logo successfully uploaded. Please refresh.',
                            className : 'text-center'
                        })
                    }
                    else{
                        bootbox.alert({
                            title : 'ERROR',
                            message : 'Failed to upload. Please try after sometime.',
                            className : 'text-center'
                        })
                    }
                })
        }
        reader.readAsDataURL(image[0]);
    }
    $scope.uploadItemImagelist = function(index){
        var temp = 'uploadItemListImage'+index ;
        var image = document.getElementById(temp).files;
        if(image.length){
            jQuery.noConflict();
            $('.refresh').css("display", "inline");
            var reader = new FileReader();
            reader.onloadend = function() {
                var tempObj = {};
                tempObj.itemCode = $scope.itemDetails.itemCode;
                tempObj.image = reader.result;
                tempObj.username = ($scope.user.username ? $scope.user.username : "Portal Admin");
                tempObj.userphone = ($scope.user.sellerphone ? $scope.user.sellerphone : null);
                tempObj.date_added = new Date()+"";
                var imageObj = [];
                if ($scope.itemDetails.cloudinaryURL) {
                    if($scope.itemDetails.cloudinaryURL.length > 0){
                        for(var i=0; i< $scope.itemDetails.cloudinaryURL.length; i++){
                            imageObj.push($scope.itemDetails.cloudinaryURL[i]);
                        }
                    }
                }
                imageObj.push(tempObj);
                // console.log(imageObj)
                $http.put("/dash/items/image/upload", imageObj)
                    .success(function(res){
                        console.log(res);
                        setTimeout(function(){
                            $('.refresh').css("display", "none");
                        }, 500);
                        if(res){
                            $scope.itemDetails.cloudinaryURL = res;
                            toastr.success('Successfully uploaded image.')
                            jQuery.noConflict();
                            $('#uploadItemListImage'+index).val('');
                        }
                        else{
                            bootbox.alert({
                                title : 'ERROR',
                                message : 'Failed to upload. Please try after sometime.',
                                className : 'text-center'
                            })
                        }
                        // jQuery.noConflict();
                        // $('#newItemImage').val(null);
                    })
            }
            reader.readAsDataURL(image[0]);
        } else{
            bootbox.alert({
                title : 'ERROR',
                message : 'Please select an image.',
                className : 'text-center'
            })
        }
    }
    $scope.uploadItemImage = function(){
        var image = document.getElementById('uploadItemImage').files;
        if(image.length){
            jQuery.noConflict();
            $('.refresh').css("display", "inline");
            var reader = new FileReader();
            reader.onloadend = function() {
                var tempObj = {};
                tempObj.itemCode = $scope.itemsDisp.itemCode;
                tempObj.image = reader.result;
                tempObj.username = ($scope.user.username ? $scope.user.username : "Portal Admin");
                tempObj.userphone = ($scope.user.sellerphone ? $scope.user.sellerphone : null);
                tempObj.date_added = new Date()+"";
                var imageObj = [];
                if ($scope.itemsDisp.cloudinaryURL) {
                    if($scope.itemsDisp.cloudinaryURL.length > 0){
                        for(var i=0; i< $scope.itemsDisp.cloudinaryURL.length; i++){
                            imageObj.push($scope.itemsDisp.cloudinaryURL[i]);
                        }
                    }
                }
                imageObj.push(tempObj);
                $http.put("/dash/items/image/upload", imageObj)
                    .success(function(res){
                        console.log(res);
                        setTimeout(function(){
                            $('.refresh').css("display", "none");
                        }, 500);
                        if(res){
                            $scope.itemsDisp.cloudinaryURL = res;
                            toastr.success('Successfully uploaded image.')
                            jQuery.noConflict();
                            $('#uploadItemImage').val(null);
                            $('#upload-itemImage').css("display", "none");
                            $('#upload-button').css("display", "none");
                        }
                        else{
                            bootbox.alert({
                                title : 'ERROR',
                                message : 'Failed to upload. Please try after sometime.',
                                className : 'text-center'
                            })
                        }
                        jQuery.noConflict();
                        $('#newItemImage').val(null);
                    })
            }
            reader.readAsDataURL(image[0]);
        } else{
            bootbox.alert({
                title : 'ERROR',
                message : 'Please select an image.',
                className : 'text-center'
            })
        }
    }
    $scope.UploadCategoryImage = function(){
        var image = document.getElementById('categoryImage').files;
        if(image.length){
            jQuery.noConflict();
            $('.refresh').css("display", "inline");
            var reader = new FileReader();
            reader.onloadend = function() {
                var tempObj = {};
                tempObj.image = reader.result;
                tempObj.username = ($scope.user.username ? $scope.user.username : "Portal Admin");
                tempObj.userphone = ($scope.user.sellerphone ? $scope.user.sellerphone : null);
                tempObj.date_added = new Date()+"";
                tempObj.categoryId = $scope.categoryDetails.categoryId ? $scope.categoryDetails.categoryId : Math.floor(1000000000 + Math.random() * 9000000000);
                tempObj.type = $scope.categoryType;
                tempObj.categoryName = $scope.categoryDetails.categoryName;
                //console.log(tempObj);
                $http.put("/dash/items/category/image/upload", tempObj)
                    .success(function(res){
                        //console.log(res);
                        //$scope.getItemsCategories();
                        setTimeout(function(){
                            $('.refresh').css("display", "none");
                        }, 500);
                        if(res){
                            toastr.success('Successfully uploaded image.')
                            jQuery.noConflict();
                            $('#uploadCategoryImage').modal('hide');
                            $('#categoryImage').val(null);
                        }
                        else{
                            bootbox.alert({
                                title : 'ERROR',
                                message : 'Failed to upload. Please try after sometime.',
                                className : 'text-center'
                            })
                        }
                    })
            }
            reader.readAsDataURL(image[0]);
        }
        else{
            bootbox.alert({
                title : 'ERROR',
                message : 'Please select an image.',
                className : 'text-center'
            })
        }
    }
    $scope.uploadStoreImage = function(type){
        if(type == 'img'){
            var image = document.getElementById('uploadStoreImage').files;
            if(image.length){
                jQuery.noConflict();
                $('.refresh').css("display", "inline");
                var reader = new FileReader();
                reader.onloadend = function () {
                    var tempObj = {};
                    tempObj.Dealercode = (($scope.storesDisp) ? $scope.storesDisp.Dealercode : $scope.dealer.Dealercode);
                    tempObj.image = reader.result;
                    tempObj.date_added = new Date() + "" ;
                    tempObj.username = ($scope.user.username ? $scope.user.username : "Portal Admin");
                    tempObj.userphone = ($scope.user.sellerphone ? $scope.user.sellerphone : null);
                    var imageObj = [];
                    if ($scope.storesDisp.cloudinaryURL) {
                        if ($scope.storesDisp.cloudinaryURL.length > 0) {
                            for (var i = 0; i < $scope.storesDisp.cloudinaryURL.length; i++) {
                                imageObj.push($scope.storesDisp.cloudinaryURL[i]);
                            }
                        }
                    }
                    var type = 'img' ;
                    imageObj.push(tempObj);
                    $http.put("/dash/stores/image/upload/"+type, imageObj)
                        .success(function (res) {
                            console.log("res is :");
                            console.log(res);
                            setTimeout(function () {
                                $('.refresh').css("display", "none");
                            }, 500);
                            if (res) {
                                $scope.storesDisp.cloudinaryURL = res;
                                // bootbox.alert({
                                //     title: 'SUCCESS',
                                //     message: 'Successfully uploaded image.',
                                //     className: 'text-center'
                                // })
                                toastr.success('Successfully uploaded image.')
                                jQuery.noConflict();
                                $('#uploadStoreImage').val(null);
                                $('#upload-storeImage').css("display", "none");
                                $('#upload-storeButton').css("display", "none");
                            }
                            else {
                                bootbox.alert({
                                    title: 'ERROR',
                                    message: 'Failed to upload. Please try after sometime.',
                                    className: 'text-center'
                                })
                            }
                        })
                }
                reader.readAsDataURL(image[0]);
            }
        }
        if(type == 'doc'){
            var image = document.getElementById('uploadStoreDoc').files;
            if(image.length){
                jQuery.noConflict();
                $('.refresh').css("display", "inline");
                var reader = new FileReader();
                reader.onloadend = function () {
                    var tempObj = {};
                    tempObj.Dealercode = (($scope.storesDisp) ? $scope.storesDisp.Dealercode : $scope.dealer.Dealercode);
                    tempObj.image = reader.result;
                    tempObj.date_added = new Date() + "" ;
                    tempObj.username = ($scope.user.username ? $scope.user.username : "Portal Admin");
                    tempObj.userphone = ($scope.user.sellerphone ? $scope.user.sellerphone : null);
                    tempObj.type = 'doc';
                    var imageObj = [];
                    if ($scope.storesDisp.doccloudinaryURL) {
                        if ($scope.storesDisp.doccloudinaryURL.length > 0) {
                            for (var i = 0; i < $scope.storesDisp.doccloudinaryURL.length; i++) {
                                imageObj.push($scope.storesDisp.doccloudinaryURL[i]);
                            }
                        }
                    }
                    var type = 'doc' ;
                    imageObj.push(tempObj);
                    $http.put("/dash/stores/image/upload/"+type, imageObj)
                        .success(function (res) {
                            console.log("res is :");
                            console.log(res);
                            setTimeout(function () {
                                $('.refresh').css("display", "none");
                            }, 500);
                            if (res) {
                                $scope.storesDisp.doccloudinaryURL = res;
                                toastr.success('Successfully uploaded image.')
                                jQuery.noConflict();
                                $('#uploadStoreDoc').val(null);
                                $('#upload-storeDoc').css("display", "none");
                                $('#upload-storeDocButton').css("display", "none");
                            }
                            else {
                                bootbox.alert({
                                    title: 'ERROR',
                                    message: 'Failed to upload. Please try after sometime.',
                                    className: 'text-center'
                                })
                            }
                        })
                }
                reader.readAsDataURL(image[0]);
            }
        }
    }
    $scope.uploadSupplierImage = function(){
        console.log("suppliers images=====")
        var image = document.getElementById('uploadSupplierImage').files;
        if(image.length){
            jQuery.noConflict();
            $('.refresh').css("display", "inline");
            var reader = new FileReader();
            reader.onloadend = function () {
                var tempObj = {};
                tempObj.SupplierCode = (($scope.supplierDisp) ? $scope.supplierDisp.SupplierCode : $scope.supplier.SupplierCode);
                tempObj.image = reader.result;
                tempObj.date_added = new Date() + "" ;
                tempObj.username = ($scope.user.username ? $scope.user.username : "Portal Admin");
                tempObj.userphone = ($scope.user.sellerphone ? $scope.user.sellerphone : null);
                var imageObj = [];
                if ($scope.supplierDisp.cloudinaryURL) {
                    if ($scope.supplierDisp.cloudinaryURL.length > 0) {
                        for (var i = 0; i < $scope.supplierDisp.cloudinaryURL.length; i++) {
                            imageObj.push($scope.supplierDisp.cloudinaryURL[i]);
                        }
                    }
                }
                imageObj.push(tempObj);
                $http.put("/dash/supplier/image/upload", imageObj)
                    .success(function (res) {
                        console.log("res is :");
                        console.log(res);
                        setTimeout(function () {
                            $('.refresh').css("display", "none");
                        }, 500);
                        if (res) {
                            $scope.supplierDisp.cloudinaryURL = res;
                            // bootbox.alert({
                            //     title: 'SUCCESS',
                            //     message: 'Successfully uploaded image.',
                            //     className: 'text-center'
                            // })
                            toastr.success('Successfully uploaded image.')
                            jQuery.noConflict();
                            $('#upload-supplierImage').css("display", "none");
                            $('#upload-supplierButton').css("display", "none");
                        }
                        else {
                            bootbox.alert({
                                title: 'ERROR',
                                message: 'Failed to upload. Please try after sometime.',
                                className: 'text-center'
                            })
                        }
                    })
            }
            reader.readAsDataURL(image[0]);
        }
    }
    $scope.appendImageToStore = function(type, operation, index){
        /*
         Function to upload or remove an image of customer or customer document while adding it from portal
         type = Customer image or customer document image
         operation = add or remove an image
         index = used while removing an image from array
         */
        if(operation == 'add'){
            var image = ( (type == 'store') ? (document.getElementById('newStoresImage').files) : (document.getElementById('newStoreDocumentImage').files) );
            if(image[0]){
                var reader = new FileReader();
                reader.onloadend = function() {
                    var tempObj = {};
                    tempObj.Dealercode = (($scope.storesDisp) ? $scope.storesDisp.Dealercode : $scope.dealer.Dealercode);
                    tempObj.image = reader.result;
                    tempObj.date = new Date()+"";
                    tempObj.username = ($scope.user.username ? $scope.user.username : "Portal Admin");
                    tempObj.userphone = ($scope.user.sellerphone ? $scope.user.sellerphone : null);
                    if(type == 'store'){
                        tempObj.name = image[0].name ? image[0].name : "Customer Image";
                        $scope.newStoreImageArray.customerImage.push(tempObj);
                    }
                    else if(type == 'doc'){
                        tempObj.name = image[0].name ? image[0].name : "Document Image";
                        $scope.newStoreImageArray.customerDoc.push(tempObj)
                    }
                    // if($scope.itemsDisp.cloudinary){
                    //     if($scope.itemsDisp.cloudinaryURL.length > 0){
                    //         for(var i=0; i< $scope.itemsDisp.cloudinaryURL.length; i++){
                    //             imageObj.push($scope.itemsDisp.cloudinaryURL[0]);
                    //         }
                    //     }
                    // }
                    jQuery.noConflict();
                    $('#newStoresImage').val(null);
                    $('#newStoreDocumentImage').val(null);
                    jQuery.noConflict();
                    $scope.$apply();
                }
                reader.readAsDataURL(image[0]);
            }
            else{
                bootbox.alert({
                    title : "ERROR",
                    message : "Please select an image",
                    className : "text-center"
                })
            }
        }
        else if(operation == 'del'){
            if(type == 'store'){
                for(var i=0; i< $scope.newStoreImageArray.customerImage.length ; i++){
                    if(i == index){
                        $scope.newStoreImageArray.customerImage.splice(index, 1);
                    }
                }
            }
            else if(type == 'doc'){
                for(var i=0; i< $scope.newStoreImageArray.customerDoc.length ; i++){
                    if(i == index){
                        $scope.newStoreImageArray.customerDoc.splice(index, 1);
                    }
                }
            }
        }
    }
    $scope.appendImageToSupplier = function(type, operation, index){
        console.log("supplier image is...")
        /*
         Function to upload or remove an image of customer or customer document while adding it from portal
         type = Customer image or customer document image
         operation = add or remove an image
         index = used while removing an image from array
         */
        if(operation == 'add'){
            var image = ( (type == 'supplier') ? (document.getElementById('newSupplierImage').files) : (document.getElementById('newSupplierDocumentImage').files) );
            if(image[0]){
                var reader = new FileReader();
                reader.onloadend = function() {
                    var tempObj = {};
                    tempObj.SupplierCode = (($scope.supplierDisp) ? $scope.supplierDisp.SupplierCode : $scope.supplier.SupplierCode);
                    tempObj.image = reader.result;
                    tempObj.date = new Date()+"";
                    tempObj.username = ($scope.user.username ? $scope.user.username : "Portal Admin");
                    tempObj.userphone = ($scope.user.sellerphone ? $scope.user.sellerphone : null);
                    if(type == 'supplier'){
                        tempObj.name = image[0].name ? image[0].name : "Customer Image";
                        $scope.newSupplierImageArray.supplierImage.push(tempObj);
                    }
                    else if(type == 'doc'){
                        tempObj.name = image[0].name ? image[0].name : "Document Image";
                        $scope.newSupplierImageArray.supplierDoc.push(tempObj)
                    }
                    // if($scope.itemsDisp.cloudinary){
                    //     if($scope.itemsDisp.cloudinaryURL.length > 0){
                    //         for(var i=0; i< $scope.itemsDisp.cloudinaryURL.length; i++){
                    //             imageObj.push($scope.itemsDisp.cloudinaryURL[0]);
                    //         }
                    //     }
                    // }
                    jQuery.noConflict();
                    $('#newSupplierImage').val(null);
                    $('#newSupplierDocumentImage').val(null);
                    jQuery.noConflict();
                    $scope.$apply();
                }
                reader.readAsDataURL(image[0]);
            }
            else{
                bootbox.alert({
                    title : "ERROR",
                    message : "Please select an image",
                    className : "text-center"
                })
            }
        }
        else if(operation == 'del'){
            if(type == 'supplier'){
                for(var i=0; i< $scope.newSupplierImageArray.supplierImage.length ; i++){
                    if(i == index){
                        $scope.newSupplierImageArray.supplierImage.splice(index, 1);
                    }
                }
            }
            else if(type == 'doc'){
                for(var i=0; i< $scope.newSupplierImageArray.supplierDoc.length ; i++){
                    if(i == index){
                        $scope.newSupplierImageArray.supplierDoc.splice(index, 1);
                    }
                }
            }
        }
    }
    $scope.enlargeImage = function(image){
        $scope.storeImageToDisplay = '';
        // console.log(image)
        $scope.storeImageToDisplay = image;
        jQuery.noConflict();
        $('.showStoreImages').css('display', 'block');
    }
    $scope.enlargeListImage = function(image){
        $scope.storeListImageToDisplay = '';
        //console.log(image)
        $scope.storeListImageToDisplay = image;
        jQuery.noConflict();
        $('.showListStoreImages').css('display', 'block');
    }
    $scope.enlargeItemImage = function(image){
        $scope.itemListImageToDisplay = '';
        //console.log(image)
        $scope.itemListImageToDisplay = image;
        jQuery.noConflict();
        $('.showListItemImages').css('display', 'block');
    }
    $scope.dealerListImageClose = function(){
        //console.log("closing");
        jQuery.noConflict();
        $('.showListStoreImages').css('display', 'none');
    }
    $scope.itemListImageClose = function(){
        //console.log("closing");
        jQuery.noConflict();
        $('.showListItemImages').css('display', 'none');
    }
    $scope.enlargesupplierImage = function(image){
        $scope.supplierImageToDisplay = '';
        // console.log(image)
        $scope.supplierImageToDisplay = image;
        jQuery.noConflict();
        $('.showSupplierImages').css('display', 'block');
    }
    $scope.enlargeItemImage = function (image) {
        $scope.itemImageToDisplay = '' ;
        //console.log(image)
        $scope.itemImageToDisplay = image ;
        jQuery.noConflict();
        $('.showItemImages').css('display', 'block');
    }
    $scope.validateOTP = function(id, otp){
        $http.get("/dash/sellers/OTP/" + id + "/" + otp)
            .success( function(response) {
                console.log("Select -->" + response);
            });
    };
    $scope.changeClassName = function(i) {
        $("*").removeClass('abc');
        $("#"+i).addClass('abc');
    };
    //Stores - serviceClient is store
    $scope.create = function(){
        console.log($scope.serviceClient);
        if ($scope.serviceClient && $scope.serviceClient._id != null)
            $scope.serviceClient._id=null;
        $http.post("/dash/stores", $scope.serviceClient)
            .success(function (response) {
                console.log("Create -->" + response);
                $scope.all();
            });
    };
    $scope.editItemListView =  function(j,item){
        if(j == 'edit'){
            // console.log(item)
            $scope.editedItem.itemCode = item.itemCode ;
            $scope.editedItem.Product = item.Product;
            $scope.editedItem.Manufacturer = item.Manufacturer;
            $scope.editedItem.subCategory = item.subCategory;
            $scope.editedItem.subSubCategory = item.subSubCategory;
            $scope.editedItem.MRP = item.MRP;
            $scope.editedItem.Specials = item.Specials;
            $scope.editedItem.Pack = item.Pack;
            $scope.editedItem.Qty = item.Qty;
            $scope.editedItem.unit = item.unit ;
            $scope.editedItem.BulkPrice = item.BulkPrice;
            $scope.editedItem.looseQty = item.looseQty;
            $scope.editedItem.DealerPrice = item.DealerPrice;
            if(item.gst){
                $scope.editedItem.gst = item.gst ;
            }else{
                $scope.editedItem.gst = {};
                $scope.editedItem.gst.cgst = item.CGST;
                $scope.editedItem.gst.sgst = item.SGST;
                $scope.editedItem.gst.igst = item.IGST;
            }
            $scope.itemEdit = false ;
            jQuery.noConflict();
            $('#uploadItemListImage').val(null);
        }
        if(j == 'close'){
            $scope.fetchOnlySubCatDropDown($scope.itemDetails,'add');
            $scope.filterBasedOnCategory($scope.itemDetails.Manufacturer,'add') ;
            $scope.itemEdit = true ;
        }
    };
    $scope.getInventoryForItem = function(item){
        //console.log(masterInventory)
        for(var i=0; i<masterInventory.length;i++){
            if(masterInventory[i].itemCode == item.itemCode){
                return masterInventory[i].Qty;
            }
        }
    }
    $scope.getInventoryForReciveItem = function(item){
        console.log("master inventory....")
        console.log(item)
        for(var i=0; i<masterInventory.length;i++){
            if(masterInventory[i].itemCode == item.itemcode){
                console.log(masterInventory[i].Qty)
                return masterInventory[i].Qty;
            }
        }
    }
    $scope.checkReciveQuantity = function(orderQuantity, balanceQty, itemName, invQty, shipQty){
        if(shipQty){
            if(orderQuantity < shipQty){
                bootbox.alert({
                    title: 'WARNING',
                    message: 'Enter Valid Quantity for' + ' '+itemName,
                    className: 'text-center'
                })
            }else if(balanceQty < shipQty){
                bootbox.alert({
                    title: 'WARNING',
                    message: 'Enter Valid Quantity for' + ' '+itemName,
                    className: 'text-center'
                })
            }
        }
    }
    $scope.generateTransactionForReciveItem = function(order){
        var obj = {};
        obj.transaction = [];
        if(order){
            $scope.generatePurchaseTransactionNumber(function(num){
                console.log(num);
                obj.transaction_id = num;
                obj.PurchaseOrderId = order[0].PurchaseOrderId;
                obj.stockist = $scope.warehouseRole;
                obj.stockist = $scope.stockist;
                obj.stockist = order[0].seller;
                obj.stockistname = order[0].stockistname;
                obj.supplierphone = order[0].supplierphone;
                obj.type = 'receive_inventory';
                var date1 = new Date();
                var dformat = [date1.getFullYear(), (date1.getMonth() + 1) < 10 ? ('0' + (date1.getMonth() + 1)) : (date1.getMonth() + 1), date1.getDate() < 10 ? '0' + date1.getDate() : date1.getDate()].join('-') + ' '
                    + [date1.getHours(), date1.getMinutes(), date1.getSeconds()].join(':');
                obj.date_added = dformat;
                var invQty = 0;
                var flag = 0;
                var shipCount = 0;
                for(var i=0;i<order.length;i++){
                    invQty = $scope.getInventoryForReciveItem(order[i])
                    if(order[i].shipQty){
                        shipCount++;
                    }
                    // checkErrors();
                    // function checkErrors() {
                    if(order[i].shipQty){
                        if(order[i].balanceQty < order[i].shipQty) {
                            flag++;
                            bootbox.alert({
                                title: 'WARNING',
                                message: 'Enter Valid Quantity for' + ' ' + order[i].medicine,
                                className: 'text-center'
                            })
                        }
                    }
                }
                if(shipCount == 0){
                    bootbox.alert({
                        title: 'WARNING',
                        message: 'Please Enter Shipping Quantity!!',
                        className: 'text-center'
                    })
                }
                if(flag == 0 && shipCount > 0) {
                    for(var i=0;i< order.length;i++){
                        if(order[i].shipQty){
                            obj.transaction.push({
                                'itemCode' : order[i].itemcode,
                                'quantity' : order[i].shipQty,
                                'Product' : order[i].medicine,
                                'date' : order[i].date_added,
                                'suppliername':order[i].suppliername
                            })
                        }
                    }
                    $http.put("/dash/purchase/receive/item/transaction", obj)
                        .success(function(res){
                            console.log("res is :");
                            console.log(res);
                            $http.get("/dash/stockist/inventory")
                                .success($scope.renderInventory);
                        })
                    jQuery.noConflict();
                    $('#ReciveItem').modal('hide');
                    jQuery.noConflict();
                    $('#myOrderModal1').modal('hide');
                    toastr.success("Received Successfully")
                }
            })
        }
    }
    $scope.editedDealer.searchSellerName = '';
    $scope.editedDealer.searchStocklist = '';
    $scope.oldPhoneNo = '';
    $scope.storesColname = function (i,j) {
        $scope.edit = {};
        // $scope.editedDealer = j ;
        $scope.editedDealer.Dealercode = j.Dealercode ;
        $scope.editedDealer.DealerName = j.DealerName ;
        $scope.editedDealer.Address = j.Address ;
        $scope.editedDealer.Phone = j.Phone ;
        $scope.oldPhoneNo = j.Phone ;
        $scope.editedDealer.Stockist = j.Stockist ;
        $scope.editedDealer.GST = j.GST ;
        $scope.editedDealer.email = j.email ;
        $scope.editedDealer.Area = j.Area ;
        $scope.editedDealer.City = j.City ;
        $scope.editedDealer.Pincode = j.Pincode ;
        $scope.editedDealer.paymentMode = j.paymentMode || '';
        $scope.editedDealer.customerVariant = j.customerVariant ? j.customerVariant : "regular" ;
        $scope.editedDealer.Seller = j.Seller ;
        $scope.editedDealer.contactPerson = j.contactPerson ;
        $scope.storeEntryshowMap=false;
        $scope.editDealer.Seller = false;
        $scope.editDealer.Stockist = false;
        $scope.validateDealerphone = false;
        jQuery.noConflict();
        $('#uploadStoreImage').val(null);
        $('#upload-storeImage').css("display", "none");
        $('#upload-storeButton').css("display", "none");
        jQuery.noConflict();
        $('#uploadStoreDoc').val(null);
        $('#upload-storeDocButton').css("display", "none");
        $('#upload-storeDoc').css("display", "none");
        if(i == 'Dealercode') {
            $scope.storesDisp = j;
            $scope.selected_customer = [];
            if(j.cloudinaryURL){
                if(typeof(j.cloudinaryURL) == 'string'){
                    var url = j.cloudinaryURL;
                    $scope.storesDisp.cloudinaryURL = [];
                    $scope.storesDisp.cloudinaryURL = [{'image' : url}];
                }
            }
            if(j.doccloudinaryURL){
                if(typeof(j.doccloudinaryURL) == 'string'){
                    var url = j.doccloudinaryURL;
                    $scope.storesDisp.doccloudinaryURL = [];
                    $scope.storesDisp.doccloudinaryURL = [{'image' : url}];
                }
            }
            jQuery.noConflict();
            $('#storeModal').modal('show');
            for(var i = 0; i < $scope.allShippingAddress.length; i++){
                if(j.Dealercode == $scope.allShippingAddress[i].Dealercode){
                    $scope.selected_customer.push($scope.allShippingAddress[i]);
                }
            }
        }
    };
    $scope.editdealer = function(){
        $scope.edit.dealer = true
    }
    //Edit Bid vehicle details
    $scope.editBidVehicleDetails={};
    $scope.editBidVehicle = function(Bidhistory){
        $scope.editBidVehicleDetails=Bidhistory;
        $scope.editBidsVehicleflag = true;
    }
    $scope.editedBidVehicleDetails = function(Bidhistory){
        var body = {};
        body.editedVehicle = Bidhistory;
        console.log(body)
        $http.put("/dash/bid/edit/vehicle/"+ $scope.Bidhistory.itemCode, body)
            .success(function(res){
                if(res){
                    toastr.success("Successfully Updated.");
                }
                $scope.editBidsVehicleflag = false;
            })
    }
    $scope.suplierColname = function (i,j) {
        $scope.editSupplier.Seller = false;
        $scope.editSupplier.Stockist = false;
        jQuery.noConflict();
        $('#supplierModal').modal('show');
        if(i == 'SupplierCode') {
            $scope.supplierDisp = j;
            console.log("checking supplierdisp");
            console.log($scope.supplierDisp)
            $scope.selected_customer = [];
            if(j.cloudinaryURL){
                if(typeof(j.cloudinaryURL) == 'string'){
                    var url = j.cloudinaryURL;
                    $scope.supplierDisp.cloudinaryURL = [];
                    $scope.supplierDisp.cloudinaryURL = [{'image' : url}];
                }
            }
            if(j.doccloudinaryURL){
                if(typeof(j.doccloudinaryURL) == 'string'){
                    var url = j.doccloudinaryURL;
                    $scope.supplierDisp.doccloudinaryURL = [];
                    $scope.supplierDisp.doccloudinaryURL = [{'image' : url}];
                }
            }
            for(var i = 0; i < $scope.allShippingAddress.length; i++){
                if(j.Suppliercode == $scope.allShippingAddress[i].Suppliercode){
                    $scope.selected_customer.push($scope.allShippingAddress[i]);
                }
            }
        }
    };
    $scope.remove = function(id) {
        $http.delete("/dash/stores/" + id)
            .success(function (response) {
                console.log("Delete -->" + response);
                $scope.all();
            });
    };
    $scope.select = function(id) {
        console.log(id);
        $http.get("/dash/stores/" + id)
            .success( function(response) {
                console.log("Select -->" + response);
                $scope.serviceClient = response;
            });
    };
    $scope.update = function(id) {
        console.log($scope.serviceClient);
        $http.put("/dash/stores/" + $scope.serviceClient._id, $scope.serviceClient)
            .success(function (response) {
                console.log("Update -->" + response);
                $scope.all();
            });
    };
    $scope.removeOrders = function(id) {
        //$http.delete("/serviceClients/" + id)
        $http.delete("/dash/orders/" + id)
            .success(function (response) {
                console.log("Delete -->" + response);
                $scope.all();
            });
    };
    $scope.archiveQuotation = function(id) {
        //$http.delete("/serviceClients/" + id)
        $http.delete("/dash/quotation/" + id)
            .success(function (response) {
                console.log("Archive -->" + response);
                $scope.all();
            });
    }
    $scope.downloadcsv = function(){
        //$http.get("/dash/items/download")
        $http.get("/dash/items/refresh")
            .success(function(){
                console.log('Downloaded');
                alert("Download Complete! Please refresh with F5.");
            });
    }
    $scope.downloadSellerscsv = function(){
        //$http.get("/dash/items/download")
        $http.get("/dash/sellersrefresh")
            .success(function(){
                console.log('Downloaded');
                alert("Download Complete! Please refresh with F5.");
            });
    }
    $scope.multipleUsers = function(response,type){
        // console.log(response.length)
        var obj = [];
        // $scope.serviceClients = [];
        if($scope.filter.branch == 'All')
            $scope.allStockistFromDealer = [];
        var allStockist = [];
        // check for seller name by searching it in number
        for(var i=0;i<response.length;i++){
            response[i].multipleSeller = false;
            response[i].multipleStockist = false;
            if((typeof(response[i].Seller) == 'string' || typeof(response[i].Seller == 'number')) && !angular.isObject(response[i].Seller)){
                //console.log(response[i].Dealercode)
                response[i].SellerName = $scope.getSellerName(response[i].Seller) ?  $scope.getSellerName(response[i].Seller) : response[i].SellerName;
            }
            else if(angular.isObject(response[i].Seller)){
                response[i].SellerName = '';
                response[i].multipleSeller = true;
                for(var j=0; j< response[i].Seller.length; j++){
                    if(j < response[i].Seller.length - 1)
                        response[i].SellerName += $scope.getSellerName(response[i].Seller[j])+", ";
                    else
                        response[i].SellerName += $scope.getSellerName(response[i].Seller[j]);
                }
            }
            if(typeof(response[i].Stockist) == 'string' || typeof(response[i].Stockist) == 'number'){
                // if(response[i].StockistName )
                //     allStockist.push({Stockist : response[i].Stockist, StockistName : response[i].StockistName});
                // else allStockist.push({Stockist : response[i].Stockist, StockistName : 'No Name'});
                // response[i].StockistName = response ? $scope.getSellerName(response[i].Stockist) : 'No Name';
            }
            else if(response[i].Stockist){
                response[i].multipleStockist = true;
                /*for(var j=0; j< response[i].Stockist.length; j++){
                 if(response[i].StockistName[j])
                 allStockist.push({Stockist : response[i].Stockist[j], StockistName : response[i].StockistName[j]});
                 else allStockist.push({Stockist : response[i].Stockist[j], StockistName : 'No Name'});
                 // if(j < response[i].Stockist.length - 1)
                 //     response[i].StockistName += $scope.getSellerName(response[i].Stockist[j]) ? $scope.getSellerName(response[i].Stockist[j]) : 'No Name'+", ";
                 // else
                 //     response[i].StockistName += $scope.getSellerName(response[i].Stockist[j]) ? $scope.getSellerName(response[i].Stockist[j]) : 'No Name';
                 }*/
            }
            $scope.serviceClients.push(response[i]);
            if(response[i].Area){
                obj.push(response[i]);
            }
        }
        if(type=='City'){
            $scope.dealer_area = [];
            $scope.dealer_area = obj.unique('Area');
            $scope.dealer_area.map(function (dealer) {
                if($scope.dealerSelectAll.city){
                    dealer.selected_area = true;
                }else{
                    dealer.selected_area = true
                }
                return dealer;
            })
        }
        $scope.serviceClients = $filter('orderBy')( $scope.serviceClients, 'DealerName');
        if($scope.filter.branch == 'All'){
            $http.get("/dash/stores/stockist").success(function(response){
                // console.log("stockist=====",response);
                allStockist = response;
                $scope.allStockistFromDealer = allStockist.unique('_id');
                for(var i = 0; i < response.length; i++)
                    $scope.sellerNames[response[i].Stockist[0]] = response[i]._id;
            })
        }
    }
    var masterSupplier = [];
    $scope.allSupplier = [];
    $scope.renderServiceSupplier = function (response) {
        if($scope.filter.supplierbranch == 'All')
            $scope.allStockistFromSupplier = [];
        var allStockist = [];
        //check for seller name by searching it in number
        for(var i=0;i<response.length;i++){
            response[i].multipleSeller = false;
            response[i].multipleStockist = false;
            if((typeof(response[i].Seller) == 'string' || typeof(response[i].Seller == 'number')) && !angular.isObject(response[i].Seller)){
                //console.log(response[i].Dealercode)
                response[i].SellerName = $scope.getSellerName(response[i].Seller) ?  $scope.getSellerName(response[i].Seller) : response[i].SellerName;
            }
            else if(angular.isObject(response[i].Seller)){
                response[i].SellerName = '';
                response[i].multipleSeller = true;
                for(var j=0; j< response[i].Seller.length; j++){
                    if(j < response[i].Seller.length - 1)
                        response[i].SellerName += $scope.getSellerName(response[i].Seller[j])+", ";
                    else
                        response[i].SellerName += $scope.getSellerName(response[i].Seller[j]);
                }
            }
            if(typeof(response[i].Stockist) == 'string' || typeof(response[i].Stockist == 'number')){
                if(response[i].StockistName )
                    allStockist.push({Stockist : response[i].Stockist, StockistName : response[i].StockistName});
                else allStockist.push({Stockist : response[i].Stockist, StockistName : 'No Name'});
                // response[i].StockistName = response ? $scope.getSellerName(response[i].Stockist) : 'No Name';
            }
            else if(response[i].Stockist){
                response[i].multipleStockist = true;
                for(var j=0; j< response[i].Stockist.length; j++){
                    if(response[i].StockistName[j])
                        allStockist.push({Stockist : response[i].Stockist[j], StockistName : response[i].StockistName[j]});
                    else allStockist.push({Stockist : response[i].Stockist[j], StockistName : 'No Name'});
                    // if(j < response[i].Stockist.length - 1)
                    //     response[i].StockistName += $scope.getSellerName(response[i].Stockist[j]) ? $scope.getSellerName(response[i].Stockist[j]) : 'No Name'+", ";
                    // else
                    //     response[i].StockistName += $scope.getSellerName(response[i].Stockist[j]) ? $scope.getSellerName(response[i].Stockist[j]) : 'No Name';
                }
            }
            $scope.suppliers.push(response[i]);
        }
        $scope.suppliers = $filter('orderBy')( $scope.suppliers, 'SupplierName');
        if($scope.filter.supplierbranch== 'All')
            $scope.allStockistFromSupplier = allStockist.unique('StockistName');
        $http.get("/dash/supplier/branches").then(function(response){
            if(response.data.length){
                for(var i = 0; i < response.data.length; i++){
                    if(response.data[i].branchCode[0] && response.data[i].branchName[0])
                        $scope.branches.push({'branchCode' : response.data[i].branchCode[0], 'branchName' : response.data[i].branchName[0]});
                }
            }
        })
        if(response.length == 1){
            $scope.data.newPurchaseOrderSuppliers = response[0];
            $scope.a.selectedSuppliers = response[0];
            $scope.data.newpurchaseOrderShipping_address = response[0].Address;
            $http.get("/dash/purchaseOrderAddress-list/" + $scope.data.newPurchaseOrderSuppliers.SupplierCode)
                .success(function(response){
                    $scope.shipping_addresses = response;
                });
            //console.log($scope.newOrderShipping_address)
        }
        /*if(response.length < 50)
         $scope.totalStoresDisplayed = response.length;*/
        $scope.getRewardPoints(1);
        //Set checkboxes for CITY and AREA filter as true
    };
    /*....
     Fetch dealers from DB based on branch code
     ... */
    $scope.fetchDealersByBranch = function(branch){
        if(branch.branchCode){
            $http.get("/dash/stores/branches/"+branch.branchCode)
                .success(function(res){
                    console.log(res);
                    $scope.addDealerToBeatByCategory({'dealer' : res});
                })
        }
    }
    $scope.notEmptyOrNull = function(item){
        return !(item._id === null || item._id.trim().length === 0)
    }
    $scope.filterSupplierByCriteria = function(type, all) {
        $scope.suppliers = [];
        if(type == 'city') {
            if (all) {
                if ($scope.supplierSelectAll.city) {
                    //Get all cities and areas from masterdealer array and mark them true
                    $scope.supplier_city = masterSupplier.unique('City');
                    $scope.supplier_area = masterSupplier.unique('Area');
                    $scope.supplier_city.map(function (supplier) {
                        supplier.selected_city = true;
                        return supplier;
                    })
                    $scope.supplier_area.map(function (supplier) {
                        supplier.selected_area = true;
                        return supplier;
                    })
                    $scope.viewLength = 0;
                    $scope.newViewBy = viewBy.suppliers;
                    $scope.transactionCount(masterSupplier.length, 31);
                    $scope.renderServiceSupplier(masterSupplier);
                }
                else {
                    // $scope.suppliers = [];
                    $scope.supplier_city = masterSupplier.unique('City');
                    $scope.supplier_area = masterSupplier.unique('Area');
                    $scope.supplier_city.map(function (supplier) {
                        supplier.selected_city = false;
                        return supplier;
                    })
                    $scope.supplier_area.map(function (supplier) {
                        supplier.selected_area = false;
                        return supplier;
                    })
                    $scope.viewLength = 0;
                    $scope.newViewBy = viewBy.suppliers;
                    $scope.transactionCount(0, 31);
                    // $scope.supplierSelectAll.area = false;
                }
            } else {
                var tempSupplier = [];
                var count = 0;
                var suppliercount = $scope.supplier_city.length;
                for (var i = 0; i < $scope.supplier_city.length; i++) {
                    if ($scope.supplier_city[i].selected_city) {
                        count++;
                    }
                    if ($scope.supplier_city[i].selected_city) {
                        for (var j = 0; j < masterSupplier.length; j++) {
                            if (masterSupplier[j].City == $scope.supplier_city[i].City)
                                tempSupplier.push(masterSupplier[j]);
                        }
                    }
                }
                $scope.viewLength = 0;
                $scope.newViewBy = viewBy.suppliers;
                $scope.transactionCount(tempSupplier.length, 31);
                $scope.renderServiceSupplier(tempSupplier);
                $scope.supplier_area = [];
                $scope.supplier_area = tempSupplier.unique('Area');
                $scope.supplier_area.map(function (supplier) {
                    supplier.selected_area = true;
                    if (suppliercount == count) {
                        $scope.supplierSelectAll.city = true;
                    }
                    else {
                        $scope.supplierSelectAll.city = false;
                    }
                    return supplier;
                })
            }
        }
        else{
            console.log("area")
            var tempSupplier = [];
            for(var i=0; i< $scope.supplier_area.length; i++){
                if($scope.supplier_area[i].selected_area){
                    for(var j=0; j< masterSupplier.length; j++){
                        if(masterSupplier[j].Area == $scope.supplier_area[i].Area)
                            tempSupplier.push(masterSupplier[j]);
                    }
                }
            }
            $scope.viewLength = 0;
            $scope.newViewBy = viewBy.suppliers;
            $scope.transactionCount(tempSupplier.length, 31);
            $scope.renderServiceSupplier(tempSupplier);
        }
    }
    $scope.getBranchName = function(branchId){
        /*  console.log("branch func");
         console.log(branchId);*/
        for(var i = 0; i < $scope.branches.length; i++){
            if(branchId == $scope.branches[i].branchCode){
                if($scope.applicationType == "Atmosphere"){
                    /*  console.log($scope.branches[i]);
                     console.log($scope.branches[i].branchName);*/
                    $scope.branchName = $scope.branches[i].branchName;
                    $scope.seller.Resort = $scope.branches[i].branchName;
                    // console.log($scope.branchName);
                }
                if($scope.applicationType == "StoreJini"){
                    return $scope.branches[i].branchName;
                }
                else{
                    return (branchId + " - " + $scope.branches[i].branchName);
                }
            }
        }
    }
    $scope.approveCustomer = function(id, status){
        bootbox.confirm({
            title: 'CONFIRM',
            message: "Are you sure?",
            className: 'text-center',
            callback: function (result) {
                if(result){
                    $scope.storesDisp.status = status;
                    //console.log($scope.storesDisp)
                    $http.put("/dash/store/status/approval", $scope.storesDisp)
                        .success(function(response){
                            console.log(response)
                            //.... Refresh Customers...
                        })
                }
            }
        });
    };
    $scope.approveSite = function(id, status){
        bootbox.confirm({
            title: 'CONFIRM',
            message: "Are you sure?",
            className: 'text-center',
            callback: function (result) {
                if(result){
                    var body = {
                        status : status
                    };
                    $http.put("/dash/site/status/" + id, body)
                        .success(function(response){
                            console.log(response);
                            for(var i = 0; i < $scope.selected_customer.length; i++){
                                if(id == $scope.selected_customer[i]._id) {
                                    $scope.selected_customer[i].status = status;
                                }
                            }
                        })
                }
            }
        });
    };
    //Render Nav
    $scope.renderNav = function (response) {
        console.log("GetAll Nav-->" + response.length);
        $scope.enabledReports = [];
        $scope.atmsTabs = [];
        //Condition to update report columns in NAV
        //If not present, API is called to update the below object.
        if(response[8].cols){
            for(var l=0;l<response[8].cols.length;l++) {
                if(response[8].cols[l]){
                    if (response[8].cols[l].enabled == true) {
                        $scope.enabledReports.push(response[8].cols[l]);
                    }
                    response[8].cols[l].reportTab = l + 1;
                }
            }
        }
        $scope.nav = response;
        $scope.reportTab = $scope.nav[8].cols;
        var temp = false;
        for(var i=0;i<$scope.nav.length;i++){
            if(!$scope.nav[i].hasOwnProperty('flag')){
                $scope.nav[i].flag = $scope.nav[i].activated;
                temp = true;
            }
            if($scope.nav[i].flag == true){
                $scope.newNav.push($scope.nav[i]);
            }
        }
        //.... We can add custom statuses / linestatuses for orders based on NAV File....
        if($scope.nav[1].status){
            if($scope.nav[1].status.length){
                //.... For the status drop-down selection.....
                $scope.orderStatus = $scope.nav[1].status;
                $scope.orderStatusSel = $scope.nav[1].status[0];
                //.... For the line status drop-down selection.....
                if($scope.nav[1].lineStatus){
                    $scope.orderLineStatus = $scope.nav[1].lineStatus;
                    $scope.lineStatusSel = $scope.nav[1].lineStatus[0];
                }else{
                    $scope.nav[1].lineStatus = $scope.nav[1].status;
                    $scope.orderLineStatus = $scope.nav[1].status;
                    $scope.lineStatusSel = $scope.nav[1].status[0];
                }
            }
        }
        if($scope.nav[32].status){
            if($scope.nav[32].status.length){
                //.... For the status drop-down selection.....
                $scope.purchaseorderStatus = $scope.nav[32].status;
                $scope.purchaseorderStatusSel = $scope.nav[32].status[0];
                //.... For the line status drop-down selection.....
                if($scope.nav[32].lineStatus){
                    $scope.purchaseorderLineStatus = $scope.nav[32].lineStatus;
                    $scope.lineStatusSel = $scope.nav[32].lineStatus[0];
                }else{
                    $scope.nav[32].lineStatus = $scope.nav[32].status;
                    $scope.purchaseorderLineStatus = $scope.nav[32].status;
                    $scope.lineStatusSel = $scope.nav[32].status[0];
                }
            }
        }
        //Complaint status from NAV file
        if($scope.nav[10]){
            if($scope.nav[10].status){
                if($scope.nav[10].status.length){
                    $scope.complaintStatus = $scope.nav[10].status;
                }
            }
        }
        //Complaint types from NAV file
        if($scope.nav[10]){
            if($scope.nav[10].type){
                if($scope.nav[10].type.length){
                    $scope.complaintTypes = $scope.nav[10].type;
                }
            }
            if($scope.nav[10].issueType)
                if($scope.nav[10].issueType.length){
                    $scope.issueType = $scope.nav[10].issueType;
                }
        }
        if ($scope.nav[18]) {
            if ($scope.nav[18].status) {
                if ($scope.nav[18].status.length) {
                    $scope.EnquiryStatus = $scope.nav[18].status;
                }
            }
        }
        //Roles from nav
        if($scope.nav[4]){
            if($scope.nav[4].roles){
                if($scope.nav[4].roles.length){
                    $scope.allRoles = [];
                    $scope.userRole = $scope.nav[4].roles;
                    for(var j=0;j<$scope.userRole.length;j++){
                        $scope.allRoles.push({
                            name :$scope.userRole[j].name,
                            role :$scope.userRole[j].role
                        })
                    }
                }
                else{
                    $scope.userRole=[
                        {
                            name:"Admin",
                            role:"Admin",
                            status:true
                        },
                        {
                            name:"Salesperson",
                            role:"Salesperson",
                            status:true
                        },
                        {
                            name:"Stockist",
                            role:"Stockist",
                            status:true
                        },
                        {
                            name:"Dealer",
                            role:"Dealer",
                            status:true
                        },
                        {
                            name:"Portal Access",
                            role:"Portal",
                            status:true
                        },
                        {
                            name:"Fulfiller",
                            role:"Fulfiller",
                            status:true
                        },
                        {
                            name:"Manager",
                            role:"Manager",
                            status:true
                        },
                        {
                            name:"Branch Role",
                            role:"BranchManager",
                            status:true
                        }
                    ];
                    $scope.allRoles = [];
                    for(var m=0;m<$scope.userRole.length;m++){
                        $scope.allRoles.push({
                            role :$scope.userRole[m].name
                        })
                    }
                    $scope.nav[4].roles = $scope.userRole;
                }
            }else{
                $scope.userRole=[
                    {
                        name:"Admin",
                        role:"Admin",
                        status:true
                    },
                    {
                        name:"Salesperson",
                        role:"Salesperson",
                        status:true
                    },
                    {
                        name:"Stockist",
                        role:"Stockist",
                        status:true
                    },
                    {
                        name:"Dealer",
                        role:"Dealer",
                        status:true
                    },
                    {
                        name:"Portal Access",
                        role:"Portal",
                        status:true
                    },
                    {
                        name:"Fulfiller",
                        role:"Fulfiller",
                        status:true
                    },
                    {
                        name:"Manager",
                        role:"Manager",
                        status:true
                    },
                    {
                        name:"Branch Role",
                        role:"BranchManager",
                        status:true
                    }
                ];
                $scope.allRoles = [];
                for(var m=0;m<$scope.userRole.length;m++){
                    $scope.allRoles.push({
                        role :$scope.userRole[m].name
                    })
                }
                $scope.nav[4].roles = $scope.userRole;
            }
        }
    };
    $scope.DelandEditPurchaseOrders = function (type,purchaseOrderId){
        if(type == 'delete'){
            bootbox.confirm("Are you sure, you want to delete the Purchase Order?", function(result){
                if(result) {
                    $http.put("/dash/purchase/order/delete/" + purchaseOrderId)
                        .success(function (response) {
                            console.log("Update results of deleted -->" + response);
                            // $http.post("/dash/purchase/orders")
                            //     .success(function (response) {
                            //         $scope.purchaseOrder = response;
                            //
                            //     })
                        });
                }
                else {
                    console.log("Seller deletion cancelled")
                }
            });
        }
        else if(type == 'edit') {
            bootbox.confirm("Are you sure, you want to edit the Purchase Order?", function(result){
                if(result) {
                    $http.put("/dash/purchase/order/delete/" + purchaseOrderId)
                        .success(function (response) {
                            console.log("Update results of deleted -->" + response);
                            // $http.post("/dash/purchase/orders")
                            //     .success(function (response) {
                            //         $scope.purchaseOrder = response;
                            //
                            //     })
                        });
                    $http.put("/dash/purchase/order/edit/" + purchaseOrderId)
                        .success(function (response) {
                            jQuery.noConflict();
                            $('#deletedorder').modal('hide');
                            setTimeout(function () {
                                $('.refresh').css("display", "none");
                            }, 1000);
                            console.log("Update results of updated -->" + response);
                        });
                }
                else {
                    console.log("Order updated.")
                }
            });
        }
        $scope.deletbut = true;
    }
    //Render Nav for quotations
    $scope.renderQuotationNav = function (response) {
        console.log("GetAll -->" + response);
        $scope.quotationnav = response;
        //.... We can custom statuses for orders based on NAV File....
        if($scope.quotationnav[1].status.length){
            $scope.quotationStatus = $scope.quotationnav[1].status;
            $scope.quotationStatusSel = $scope.quotationnav[1].status[0];
        }
    };
    //......Render Email ......
    $scope.renderEmail=function(response){
        console.log(response)
        console.log("GetAll Email -->");
        $scope.emailDetail=response;
    };
    //.... Render all the db values to display on portal...
    /*...................................
     These configurations are very important since they are used to customize the portal, parameterize all the functionalities..
     ............................*/
    $scope.renderInstanceDetails = function (response) {
        console.log("Instance Details -->");
        //console.log(response);
        if(response.shopifyProperties){
            $scope.shopifyArray = response.shopifyProperties;
        }
        $scope.coID = response.coID || '';
        $scope.api_key = response.api_key || '';
        if($scope.coID == 'TEST' || $scope.coID == 'MUSI'){
            $scope.loaded(20);
        }
        else if($scope.coID == 'GOLO'){
            $scope.loaded(23);
        }
        else if($scope.coID == 'ATOM' || $scope.coID == 'ATMS'){
            $http.get("/dash/user/role/access")
                .success(function(res){
                    // console.log(res)
                    $scope.user=res;
                    // console.log($scope.user)
                    if($scope.user.sellerObject) {
                        if ($scope.user.sellerObject.Designation == 'Team Leader') {
                            // console.log("Inside if")
                            $scope.loaded(29);
                        }
                        else {
                            // console.log("Inside else first")
                            $scope.loaded(37);
                        }
                    }
                    else{
                        // console.log("Inside else second")
                        $scope.loaded(37);
                    }
                })
            $scope.loaded(37);
        }
        $scope.items_csv_upload_date = response.items_csv_upload_date || '';
        $scope.stores_csv_upload_date = response.stores_csv_upload_date || '';
        $scope.inventory_csv_upload_date = response.inventory_csv_upload_date || '';
        $scope.country.name = response.country || 'India';
        $scope.tempCountryName = $scope.country.name.toLowerCase();
        $scope.companyEmail = response.companyEmail;
        $scope.companyQtnEmail = response.companyQtnEmail;
        $scope.fullName = response.full_name;
        $scope.logo_url = response.logo_url;
        $scope.lockOrderInventory = response.orderInvlock;
        $scope.shipmentEnable = response.orderShipment;
        //.... All the email configuration is set here....!!!
        $scope.email.company_name = response.company_name;
        $scope.email.from = response.from;
        // $scope.email.subject=response.subject;
        $scope.email.cc = response.cc;
        $scope.email.contact_number = response.support_contact_number;
        $scope.email.support_email = response.support_email;
        $scope.email.company_logo_url = response.company_logo_url;
        $scope.email.company_description = response.company_description;
        $scope.email.company_website_url = response.company_website_url;
        instanceCryptoPass = response.cryptoPass;
        $scope.settings.invoice = response.invoice;
        $scope.smsCount = response.smsCount;
        $scope.notificationConfig = response.notification;
        $scope.editByRoles = response.dealerEdit;
        $scope.sendSms = response.sendSms;
        $scope.taxSetup = response.taxSetup? (response.taxSetup.activate == false? false : true) : true;
        $scope.taxExclusive = response.tax? (response.taxExclusive ? response.taxExclusive : false) : false;
        $scope.goalsConfigArray = response.goalsConfig ? response.goalsConfig : {};
        $scope.tax = response.tax ? response.tax : [];
        $scope.otherTax = response.otherTax ? response.otherTax : [];
        $scope.otherTaxDefault = {};
        if($scope.otherTax.length){
            for(var j=0; j< $scope.otherTax.length; j++){
                if($scope.otherTax[j].default){
                    $scope.otherTaxDefault = $scope.otherTax[j];
                }
            }
        }
        $scope.otherTaxDefalt = response.other
        $scope.taxObj = response.taxObj ? response.taxObj : [];
        if($scope.taxObj){
            if($scope.taxObj.setupType == 'india'){
                $scope.taxSetups.indiaSetup = 'india';
            }else if($scope.taxObj.setupType == 'other'){
                $scope.taxSetups.otherSetup = 'other';
            }
        }
        for(var i=0; i< $scope.tax.length;i++){
            if($scope.tax[i].default)
                defaultTaxObj = $scope.tax[i];
        }
        $scope.uploadIds = response.csv_upload_date ? response.csv_upload_date : [];
        $scope.leaveType = response.leave.leaveType;
        $scope.leaveEnabled = []
        for(var i=0; i< response.leave.leaveType.length; i++){
            $scope.leaveEnabled[response.leave.leaveType[i].type] = {'name' :response.leave.leaveType[i].name, 'enable' : response.leave.leaveType[i].enable};
        }
        $scope.orderEditForStatus = response.orderEdit ? response.orderEdit : [];
        $scope.inventoryType = response.inventoryType ? response.inventoryType : '';
        $scope.applicationType = response.applicationType ? response.applicationType : 'B2BOMS';
        $scope.paytm = response.paytm ;
        $scope.freight = response.freight ? response.freight :[] ;
        $scope.freightChargeType = response.freightChargeType ? response.freightChargeType :[];
        $scope.mopMargin = response.mopMargin ? response.mopMargin : 0 ;
        //order DeliveryDate
        $scope.deliveryDate = response.deliveryDate;
        $scope.delivery_date_Enable = $scope.deliveryDate.delivery_date_Enable;
        $scope.deliveryOrderDate = $scope.deliveryDate.orderDeliveryDate ? $scope.deliveryDate.orderDeliveryDate : '0';
        // $scope.quickbooks.companyid = response.quickbooks_company_id ? response.quickbooks_company_id :'';
        var itemUpdateDate = new Date(response.items_update);
        var inventoryUpdateDate = new Date(response.inventory_update);
        var storesUpdateDate = new Date(response.stores_update);
        var itemsUpdate = moment(itemUpdateDate);
        var inventoryUpdate = moment(inventoryUpdateDate);
        var storesUpdate = moment(storesUpdateDate);
        var now = moment(new Date());
        var itemUpdate2 = moment.duration(now.diff(itemsUpdate));
        var inventoryUpdate2 = moment.duration(now.diff(inventoryUpdate));
        var storesUpdate2 = moment.duration(now.diff(storesUpdate));
        $scope.itemUpdateTime = itemUpdate2.asDays();
        $scope.inventoryUpdateTime = inventoryUpdate2.asDays();
        $scope.storesUpdateTime = storesUpdate2.asDays();
        //.... We can enable to add new items from the mobile app, by setting true / false...
        if(response.token != undefined)
            $scope.token = response.token;
        else
            $scope.token = false;
        //.... We can enable to add new items from the mobile app, by setting true / false...
        if(response.addItems != undefined)
            $scope.addItems = response.addItems;
        else $scope.addItems = false;
        if(response.attendance != undefined)
            $scope.attendance = response.attendance;
        else
            $scope.attendance = false;
        if(response.enableStocks != undefined)
            $scope.enableStocks = response.enableStocks;
        else
            $scope.enableStocks = false;
        if(response.enableFulfiller != undefined)
            $scope.enableFulfiller = response.enableFulfiller;
        else
            $scope.enableFulfiller = false;
        if(response.enableQuotations != undefined)
            $scope.enableQuotations = response.enableQuotations;
        else
            $scope.enableQuotations = false;
        if(response.enableOrdersEmail != undefined)
            $scope.enableOrdersEmail = response.enableOrdersEmail;
        else
            $scope.enableOrdersEmail = false;
        if(response.enableQuotationsEmail != undefined)
            $scope.enableQuotationsEmail = response.enableQuotationsEmail;
        else
            $scope.enableQuotationsEmail = false;
        if(response.discount){
            $scope.discountList = response.discount;
        }else{
            $scope.discountList = [];
        }
        // if(response.UOM)
        //     $scope.UOM = response.UOM;
        // else
        //     $scope.UOM = '';
        if(response.stepQuantity) {
            $scope.stepQuantity = response.stepQuantity;
        }
        else {
            $scope.stepQuantity = 1;
        }
        //for Vahan18
        $scope.enableAuction = true;
        //..... We can parameterize / customize / enable, disable the status changing on the portal..
        //... By default we set to true (i.e. enabled)..
        if(response.statusChange)
            $scope.settings.statusChange = response.statusChange;
        else $scope.settings.statusChange = false;
        //..... We can parameterize / customize / enable, disable the status changing on the portal..
        //... By default we set to true (i.e. enabled)..
        if(response.lineStatusChange)
            $scope.settings.lineStatusChange = response.lineStatusChange;
        else $scope.settings.lineStatusChange = false;
        if(response.editItemPrice)
            $scope.settings.editItemPrice = response.editItemPrice;
        else $scope.settings.editItemPrice = false;
        if(response.dealerClass){
            $scope.dealerClasses = response.dealerClass ;
            function onlyUnique(value, index, self) {
                return self.indexOf(value) === index;
            }
            for(var i =0 ; i< $scope.dealerClasses.length;i++){
                $scope.priceListName.push($scope.dealerClasses[i].priceList)
            }
            var unique = $scope.priceListName.filter( onlyUnique );
            $scope.priceListName = unique ;
        }
        if(response.masterPriceList){
            $scope.masterPriceList = response.masterPriceList;
        }
    };
    //supplier create
    $scope.addSupplier = function () {
        console.log("creating suppliers....");
        console.log($scope.supplier.SupplierName);
        if($scope.supplier.SupplierName && $scope.supplier.Phone){
            if ($scope.applicationType == 'StoreJini'){
                $scope.supplier.SellerName = $scope.user.username;
                $scope.supplier.Seller = $scope.supplier.Seller ? Number($scope.supplier.Seller) : $scope.supplier.sellerphone;
                $scope.supplier.Stockist = $scope.supplier.Stockist ? Number($scope.supplier.Stockist) : "";
                $scope.supplier.cloudinaryURL = ($scope.newSupplierImageArray.supplierImage.length > 0) ? $scope.newSupplierImageArray.supplierImage : [];
                $scope.supplier.doccloudinaryURL = ($scope.newSupplierImageArray.supplierDoc.length > 0) ? $scope.newSupplierImageArray.supplierDoc : [];
                $scope.supplier.enquiry = $scope.enquiry;
                $scope.supplier.customerType = "lead";
                $scope.supplier.addedBy = $scope.user.username;
                $scope.supplier.branchCode = parseInt($scope.EnquiryBranch.branchSelectedForEnquiry);
                $scope.supplier.date_added = $scope.formatFullDealerDate(new Date());
                $scope.supplier.SupplierCode = $scope.supplier.SupplierCode != '' ? $scope.supplier.SupplierCode : '';
                $scope.supplier.SupplierID = $scope.supplier.SupplierCode != '' ? $scope.supplier.SupplierCode : '';
                $scope.supplier.dob = $scope.formatYYMMDDrDate($scope.supplier.dob) ;
                $scope.supplier.anniversary = $scope.formatYYMMDDrDate($scope.supplier.anniversary);
                $scope.supplier.SupplierName = $scope.supplier.SupplierName.substr(0,1).toUpperCase() + $scope.supplier.SupplierName.substr(1);
                $scope.postNewSupplier();
            }
            else{
                $http.get("/dash/get/recentID/"+$scope.supplier.SupplierCode).success(function(result){
                    if(result !=""){
                        console.log("not unique");
                        $scope.suppliercodeUnique = "";
                    } else {
                        console.log("--------unique suppliercode-------");
                        $scope.suppliercodeUnique = "unique";
                    }
                    if($scope.suppliercodeUnique == "unique"){
                        $scope.supplier.SupplierCode = $scope.supplier.SupplierCode != '' ? $scope.supplier.SupplierCode : '';
                        var suppliercodes = $scope.supplier.SupplierCode;
                        if (isNaN(suppliercodes)) {
                            console.log(suppliercodes);
                        } else {
                            $scope.supplier.SupplierCode = parseInt($scope.supplier.SupplierCode);
                            console.log($scope.supplier.SupplierCode);
                        }
                        $scope.supplier.Phone = parseInt($scope.supplier.Phone);
                        $scope.supplier.Seller = $scope.supplier.Seller ? Number($scope.supplier.Seller) : '';
                        $scope.supplier.Stockist = $scope.supplier.Stockist ? Number($scope.supplier.Stockist) : null;
                        $scope.supplier.cloudinaryURL = ($scope.newSupplierImageArray.supplierImage.length > 0) ? $scope.newSupplierImageArray.supplierImage : [];
                        $scope.supplier.doccloudinaryURL = ($scope.newSupplierImageArray.supplierDoc.length > 0) ? $scope.newSupplierImageArray.supplierDoc : [];
                        $scope.postNewSupplier();
                    }
                    else if(result[0]!= undefined){
                        if($scope.Suppliercodetemp==undefined){
                            $scope.Suppliercodetemp = 1001;
                        }
                        bootbox.alert({
                            title : 'ERROR',
                            message : 'This SupplierCode already exists. Please use SupplierCode : '+$scope.Suppliercodetemp,
                            className : 'text-center'
                        })
                    }
                })
            }
        }
        else if ($scope.supplier.Phone == undefined) {
            bootbox.alert({
                title : 'ERROR',
                message : 'Please enter a valid phone number',
                className : 'text-center'
            })
        } else{
            bootbox.alert({
                title : 'ERROR',
                message : 'Please enter all mandatory details',
                className : 'text-center'
            })
        }
    }
    $scope.postNewSupplier = function(){
        $scope.supplier.supplierStatus = "Active";
        jQuery.noConflict();
        $('.refresh').css("display", "inline");
        $http.post("/dash/supplier/create", $scope.supplier)
            .success(function (res) {
                //console.log(res);
                if (!res.imageStatus) {
                    bootbox.alert({
                        title: 'ERROR',
                        message: 'Your image data could not be uploaded',
                        className: 'text-center'
                    })
                }
                $scope.refreshTransactions(31);
                toastr.success("Successfully added.");
                $scope.supplier = {};
                $scope.supplier.email = '';
                $scope.showStockist = false;
                $scope.showSalesperson = false;
                $scope.newSupplierImageArray = {};
                $scope.newSupplierImageArray.supplierImage = [];
                $scope.newSupplierImageArray.supplierDoc = [];
                jQuery.noConflict();
                $('#addSupplierFromMeetings').modal('hide');
                setTimeout(function () {
                    $('.refresh').css("display", "none");
                }, 1000);
                $scope.addSupplierButton = true;
            })
    }
    //end suppliercreate
    $scope.postNewDealer = function(flag){
        jQuery.noConflict();
        $('.refresh').css("display", "inline");
        $http.post("/dash/stores/add/new", $scope.dealer)
            .success(function (res) {
                //console.log(res);
                if (!res.imageStatus) {
                    bootbox.alert({
                        title: 'ERROR',
                        message: 'Your image data could not be uploaded',
                        className: 'text-center'
                    })
                }
                $scope.refreshTransactions(4);
                if(!flag){
                    toastr.success("Successfully added.");
                }
                $scope.dealerAddPage = false;
                $scope.dealer = {};
                $scope.dealer.email = '';
                $scope.showStockist = false;
                $scope.showSalesperson = false;
                $scope.newStoreImageArray = {};
                $scope.newStoreImageArray.customerImage = [];
                $scope.newStoreImageArray.customerDoc = [];
                // jQuery.noConflict();
                // $('#addDealerFromMeetings').modal('hide');
                //
                // setTimeout(function () {
                //     $('.refresh').css("display", "none");
                // }, 1000);
                $scope.addDealerButton = true;
            })
    }
    // Create Supplier//
    // $scope.addSupplier = function(supplier) {
    //     if(supplier.SupplierName && supplier.Phone) {
    //
    //         console.log(" Getting all supplier");
    //         console.log(supplier);
    //
    //         var body = {};
    //
    //         body.supplier = supplier;
    //
    //         console.log(" Getting all supplier body");
    //         console.log(body);
    //         $http.post('/dash/suppliers/addnewSupplier', body).success(function (res) {
    //             console.log("calling suppliers function");
    //
    //             $scope.getSuppliers();
    //
    //         });
    //     }
    //     else if (supplier.Phone == undefined) {
    //         bootbox.alert({
    //             title : 'ERROR',
    //             message : 'Please enter a valid phone number',
    //             className : 'text-center'
    //         })
    //     } else{
    //         bootbox.alert({
    //             title : 'ERROR',
    //             message : 'Please enter all mandatory details',
    //             className : 'text-center'
    //         })
    //     }
    //
    // }
    // $scope.getSuppliers = function(){
    //     console.log("getting suppliers results")
    //     $http.get('/dash/getSuppliers').success(function (result) {
    //         console.log("getting  results")
    //         console.log(result);
    //         $scope.suppliers = result;
    //
    //     })
    // }
    //.... When a new stockist is added / updated in the modal...
    $scope.addStockist = function(){
        console.log($scope.dealer.StockistName ,  $scope.dealer.Stockist, $scope.dealer.StockistArea)
        $scope.showStockist = true;
    }
    //... Fetch Stockist Details when add new stockist is selected.....
    $scope.getStockistDetails = function(){
        //... A stockist is selected....
        if(!($scope.dealer.Stockist == 'add' || $scope.dealer.Stockist == '') ){
            for (var i = 0; i < $scope.serviceClients.length; i++) {
                if ($scope.serviceClients[i].Stockist == $scope.dealer.Stockist) {
                    $scope.dealer.StockistName = $scope.serviceClients[i].StockistName;
                    $scope.dealer.StockistArea = $scope.serviceClients[i].Area;
                }
                $scope.showStockist = true;  //... Show stockist details....
            }
        }//.... If add new stockist is selected....
        else if($scope.dealer.Stockist == 'add'){
            $scope.dealer.Stockist = '';
            $scope.dealer.StockistName = '';
            $scope.dealer.StockistArea = '';
            //... Open the modal...
            jQuery.noConflict();
            $('#newStockist').modal('show');
            $scope.showStockist = false;
        }
        else
            $scope.showStockist = false;
    }
    $scope.getSupplierStockistDetails = function(){
        //... A stockist is selected....
        if(!($scope.supplier.Stockist == 'add' || $scope.supplier.Stockist == '') ){
            for (var i = 0; i < $scope.serviceClients.length; i++) {
                if ($scope.suppliers[i].Stockist == $scope.supplier.Stockist) {
                    $scope.supplier.StockistName = $scope.suppliers[i].StockistName;
                    $scope.supplier.StockistArea = $scope.suppliers[i].Area;
                }
                $scope.showStockist = true;  //... Show stockist details....
            }
        }//.... If add new stockist is selected....
        else if($scope.supplier.Stockist == 'add'){
            $scope.supplier.Stockist = '';
            $scope.supplier.StockistName = '';
            $scope.supplier.StockistArea = '';
            //... Open the modal...
            jQuery.noConflict();
            $('#newStockist1').modal('show');
            $scope.showStockist = false;
        }
        else
            $scope.showStockist = false;
    }
    //... Fetch the salesperson details....
    $scope.getSalesperson = function(){
        if($scope.dealer.Seller){
            for (var i = 0; i < $scope.roleSalesrep.length; i++){
                if($scope.roleSalesrep[i].sellerphone == $scope.dealer.Seller){
                    $scope.dealer.SellerName = $scope.roleSalesrep[i].sellername;
                }
            }
            //console.log("nithish "+$scope.dealer.SellerName)
            $scope.showSalesperson = true;
        }
        else
            $scope.showSalesperson = false;
    }
    //.... Last seen calculation.....
    $scope.lastSeen = function(id){
        for(var i=0; i<$scope.devices.length; i++){
            if($scope.devices[i].sellerid == id){
                var accessDate = $scope.devices[i].lastaccessdate;
                var now = new Date();
                var diff = moment.duration((moment(now)).diff((moment(accessDate)))).asDays();
                if(diff < 1)
                    return "Last seen today";
                else if(diff < 2)
                    return "Last seen 1 day ago";
                else{
                    var str = "Last seen ";
                    var end_str = " days ago";
                    str += Math.floor(diff);
                    str += end_str;
                    return str;
                }
            }
        }
        return "Not logged in yet";
    }
    $scope.toggleFilter = function(flag, tab){
        switch(tab){
            case 1 :
                if(flag)
                    $scope.openFilter1 = true;
                else
                    $scope.openFilter1 = false;
                break;
            case 2:
                if(flag)
                    $scope.openFilter2 = true;
                else
                    $scope.openFilter2 = false;
                break;
            case 3:
                if(flag)
                    $scope.openFilter3 = true;
                else
                    $scope.openFilter3 = false;
                break;
            case 4:
                if(flag)
                    $scope.openFilter4 = true;
                else
                    $scope.openFilter4 = false;
                break;
            case 5:
                if(flag)
                    $scope.openFilter5 = true;
                else
                    $scope.openFilter5 = false;
                break;
            case 6:
                if(flag)
                    $scope.openFilter6 = true;
                else
                    $scope.openFilter6 = false;
                break;
            case 7:
                if(flag)
                    $scope.openFilter7 = true;
                else
                    $scope.openFilter7 = false;
                break;
            case 8:
                if(flag)
                    $scope.openFilter8 = true;
                else
                    $scope.openFilter8 = false;
                break;
            case 9:
                if(flag)
                    $scope.openFilter9 = true;
                else
                    $scope.openFilter9 = false;
                break;
            case 10:
                if(flag)
                    $scope.openFilter10 = true;
                else
                    $scope.openFilter10 = false;
                break;
            case 11:
                if(flag)
                    $scope.openFilter11 = true;
                else
                    $scope.openFilter11 = false;
                break;
            case 12:
                if(flag)
                    $scope.orderFilter = true;
                else
                    $scope.orderFilter = false;
                break;
            case 13:
                if(flag)
                    $scope.quotationFilter = true;
                else
                    $scope.quotationFilter = false;
                break;
            case 14:
                if(flag){
                    $scope.complaintFilter = true;
                    $scope.complaintSearch.date_to = '';
                    $scope.complaintSearch.date_from = '';
                    $scope.complaintSearch.customer = '';
                    // fetching company //
                    $http.get("/dash/complaint/company")
                        .success(function(response){
                            console.log(response);
                        })
                }
                else
                    $scope.complaintFilter = false;
                break;
            case 15 :
                if(flag)
                    $scope.leaveFilter = true;
                else $scope.leaveFilter = false;
                break;
            case 16 :
                if(flag)
                    $scope.inventoryFilter = true;
                else
                    $scope.inventoryFilter = false;
                break;
            case 17 :
                if(flag)
                    $scope.openFilter12 = true;
                else
                    $scope.openFilter12 = false;
                break;
            case 18 :
                if(flag)
                    $scope.openFilter13 = true;
                else
                    $scope.openFilter13 = false;
                break;
        }
    }
    //Weekly Dashboard data
    var renderWeeklyDashboard = function(){
        var todayDate = new Date(); // ... Assuming date is 18 - Apr....
        var week_firstDay = (new Date()).setDate((new Date()).getDate() -7); ///.... 18-7 = 11 - Apr
        var prev_week_firstDay = (new Date()).setDate((new Date()).getDate() - 14); ///.... 18-14 = 4 - Apr
        var present_firstDay = new Date(todayDate.getFullYear(), todayDate.getMonth(), 1); //.... 1 - Apr
        var lastDay = todayDate; //...... 18 - Apr ....
        var last_firstDay = new Date(todayDate.getFullYear(), todayDate.getMonth() - 1, 1); //..... 1 - Mar
        var prev_last_firstDay = new Date(todayDate.getFullYear(), todayDate.getMonth() - 2, 1); //..... 1 - Feb
        var last_lastDay = new Date(todayDate.getFullYear(), todayDate.getMonth(), 0); //.... 31 - Mar
        var prev_last_lastDay = new Date(todayDate.getFullYear(), todayDate.getMonth() - 1, 0); //.... 31 - Feb
        var last_orders = 0;
        var last_ordersAmount = 0;
        var last_order_quantities = 0;
        var two_month_last_ordersAmount = 0;
        var two_month_last_quantities = 0
        var week_totalAmount = 0;
        var prev_week_totalAmount = 0;
        var prev_week_quantities = 0;
        var week_numberOfOrders = 0;
        var week_total_quantities = 0;
        var present_totalAmountMonth = 0;
        var present_numberOfOrdersMonth = 0;
        var present_total_quantities = 0;
        var numberOfOrdersMonth = 0;
        var totalAmountMonth = 0;
        var monthNames = ["January", "February", "March", "April", "May", "June",
            "July", "August", "September", "October", "November", "December"
        ];
        if(todayDate.getMonth() == 0){
            $scope.last_monthName = monthNames[11];
            $scope.last_yearName = todayDate.getFullYear() - 1;
        }
        else{
            $scope.last_monthName = monthNames[todayDate.getMonth() - 1];
            $scope.last_yearName = todayDate.getFullYear();
        }
        $scope.monthName = monthNames[todayDate.getMonth()];
        $scope.yearName = todayDate.getFullYear();
        //Previous month
        $http.get("/dash/reports/orders/"+$scope.DateTimeFormat(last_firstDay, 'start')+"/"+$scope.DateTimeFormat(last_lastDay, 'end'))
            .success(function(response){
                $scope.lastWeeklyDashboard = response;
                for( var i=0; i< response.length; i++){
                    last_orders += $scope.lastWeeklyDashboard[i].orders;
                    last_ordersAmount += $scope.lastWeeklyDashboard[i].orderTotal;
                    last_order_quantities += $scope.lastWeeklyDashboard[i].quantity;
                }
                $scope.lastWeeklyDashboardOrders = last_orders;
                $scope.lastWeeklyDashboardOrderAmount = last_ordersAmount;
                $scope.lastWeeklyDashboardOrderQty = last_order_quantities
                $scope.lastWeeklyDashboardOrdersPercent = (numberOfOrdersMonth/last_orders) * 100;
                $scope.lastWeeklyDashboardOrderAmountPercent = (totalAmountMonth/last_ordersAmount) * 100;
            });
        //.... Two Months Back, for comparison....
        $http.get("/dash/reports/orders/"+$scope.DateTimeFormat(prev_last_firstDay, 'start')+"/"+$scope.DateTimeFormat(prev_last_lastDay, 'end'))
            .success(function(response){
                for( var i=0; i< response.length; i++){
                    two_month_last_ordersAmount += response[i].orderTotal;
                    two_month_last_quantities += response[i].quantity;
                }
                $scope.twoMonthsOrdersAmount = two_month_last_ordersAmount;
                $scope.twoMonthsOrdersQty = two_month_last_quantities;
            });
        //Present month
        $http.get("/dash/reports/orders/"+$scope.DateTimeFormat(present_firstDay, 'start')+"/"+$scope.DateTimeFormat(lastDay, 'end'))
            .success(function(response){
                $scope.weeklyDashboard = response;
                for(var i=0; i<response.length; i++){
                    present_totalAmountMonth += response[i].orderTotal;
                    present_numberOfOrdersMonth += response[i].orders;
                    present_total_quantities += response[i].quantity;
                }
                $scope.weeklyDashboardOrderAmountMonth = present_totalAmountMonth;
                $scope.weeklyDashboardOrdersMonth = present_numberOfOrdersMonth;
                $scope.weeklyDashboardOrderQtyMonth = present_total_quantities;
            });
        //Present week
        $http.get("/dash/reports/orders/"+$scope.DateTimeFormat(week_firstDay, 'start')+"/"+$scope.DateTimeFormat(lastDay, 'end'))
            .success(function(response){
                $scope.weeklyDashboard = response;
                for(var i=0; i<response.length; i++){
                    week_totalAmount += response[i].orderTotal;
                    week_numberOfOrders += response[i].orders;
                    week_total_quantities += response[i].quantity;
                }
                $scope.weeklyDashboardOrderAmount = week_totalAmount;
                $scope.weeklyDashboardOrderQuantity = week_total_quantities;
                $scope.weeklyDashboardOrders = week_numberOfOrders;
            });
        //Two weeks back
        $http.get("/dash/reports/orders/"+$scope.DateTimeFormat(prev_week_firstDay, 'start')+"/"+$scope.DateTimeFormat(week_firstDay, 'end'))
            .success(function(response){
                for(var i = 0; i < response.length; i++){
                    prev_week_totalAmount += response[i].orderTotal;
                    prev_week_quantities += response[i].quantity;
                }
                $scope.prevWeekDashboardOrderAmount = prev_week_totalAmount;
                $scope.prevWeekDashboardOrderQty = prev_week_quantities;
            });
    };
    //renderWeeklyDashboard();
    //Render Quotations
    $scope.renderQuotations = function (response) {
        console.log("GetAll Quotations-->");
        for(var i=0; i<response.length;i++){
            if(response[i].deliveryDate)
                if(response[i].deliveryDate[0])
                    response[i].delivery = new Date(response[i].deliveryDate[0]);
        }
        response.sort(function(a, b) {
            return new Date(a.date_added[0]) < new Date(b.date_added[0]) ? 1 : -1;
        });
        //console.log(response);
        $scope.quotationDisplay = response;
        $scope.quotationresponse = response;
        $scope.quotations= response;
        $scope.items14 = $scope.quotations;
        $scope.viewby = 10;
        $scope.totalquotationItems = $scope.quotations.length;
        $scope.currentPage = 1;
        $scope.itemsPerPage = $scope.viewby;
        $scope.maxSize = 5;
        $scope.case14Length = $scope.quotations.length;
        quotation_allOrders = response;
        //console.log(quotation_allOrders )
        $scope.allOrdersTotalAmount = 0;
        var temp = '';
        $scope.masterorders = response;
        for (var i =0; i < $scope.quotationresponse.length; i++){
            //console.log("Value - " + i + ", " + $scope.orders[i].seller[0]);
            if (
                (!$scope.quotationresponse[i].status)
                || ($scope.quotationresponse[i].status == "")
                || ($scope.quotationresponse[i].status[0] == "")
            )
                $scope.quotationresponse[i].status = $scope.orderStatusSel;
            else
                $scope.quotationresponse[i].status = $scope.quotationresponse[i].status[0];
            //Index of seller name from seller list
            for (var j=0; j < $scope.sellers.length; j++){
                if ($scope.quotationresponse[i].seller[0] == $scope.sellers[j].sellerid){
                    $scope.quotationresponse[i].seller[0] = $scope.sellers[j].sellername;
                }
            }
            if($scope.quotationresponse[i].total_amount[0] && $scope.quotationresponse[i].total_amount[0]!='NaN'){
                $scope.allOrdersTotalAmount += Number($scope.quotationresponse[i].total_amount[0]);
            }
            if(i==$scope.quotationresponse.length-1){
                temp = $scope.allOrdersTotalAmount+"";
                if(temp.length == 6 || temp.length == 7){
                    console.log("Total is over 1Lakh");
                    $scope.allOrdersTotalAmount = ($scope.allOrdersTotalAmount/100000).toFixed(2) + 'L';
                }
                else if(temp.length >= 8){
                    console.log("Total is over 1Crore");
                    $scope.allOrdersTotalAmount = ($scope.allOrdersTotalAmount/10000000).toFixed(2) + 'Cr';
                }
            }
        }
        //$scope.sortOrderBy('orders', 0)//sort by date as soon as logged in
    };
    $scope.renderPurchaseOrders = function (response) {
        console.log("GetAll render purchase orders-->", response);
        if(response && response.length){
            for(var i = 0; i < response.length; i++){
                if(response[i].deliveryDate)
                    if(response[i].deliveryDate[0])
                        response[i].delivery = new Date(response[i].deliveryDate[0]);
            }
            response.sort(function(a, b) {
                return new Date(a.date_added[0]) < new Date(b.date_added[0]) ? 1 : -1;
            });
        }
        $scope.purchaseorderDisplay = response;
        $scope.purchaseorderresponse = response;
        $scope.purchaseorder= response;
        $scope.items14 = $scope.purchaseorder;
        $scope.viewby = 10;
        $scope.totalpurchaseorderItems = $scope.purchaseorder.length;
        $scope.currentPage = 1;
        $scope.itemsPerPage = $scope.viewby;
        $scope.maxSize = 5;
        $scope.case14Length = $scope.purchaseorder.length;
        purchaseorder_allOrders = response;
        $scope.allOrdersTotalAmount = 0;
        var temp = '';
        $scope.masterorders = response;
        for (var i =0; i < $scope.purchaseorderresponse.length; i++){
            if (
                (!$scope.purchaseorderresponse[i].status)
                || ($scope.purchaseorderresponse[i].status == "")
                || ($scope.purchaseorderresponse[i].status[0] == "")
            )
                $scope.purchaseorderresponse[i].status = $scope.orderStatusSel;
            else
                $scope.purchaseorderresponse[i].status = $scope.purchaseorderresponse[i].status[0];
            //Index of seller name from seller list
            for (var j=0; j < $scope.sellers.length; j++){
                if ($scope.purchaseorderresponse[i].seller[0] == $scope.sellers[j].sellerid){
                    $scope.purchaseorderresponse[i].seller[0] = $scope.sellers[j].sellername;
                }
            }
            if($scope.purchaseorderresponse[i].total_amount[0] && $scope.purchaseorderresponse[i].total_amount[0]!='NaN'){
                $scope.allOrdersTotalAmount += Number($scope.purchaseorderresponse[i].total_amount[0]);
            }
            if(i==$scope.purchaseorderresponse.length-1){
                temp = $scope.allOrdersTotalAmount+"";
                if(temp.length == 6 || temp.length == 7){
                    $scope.allOrdersTotalAmount = ($scope.allOrdersTotalAmount/100000).toFixed(2) + 'L';
                }
                else if(temp.length >= 8){
                    $scope.allOrdersTotalAmount = ($scope.allOrdersTotalAmount/10000000).toFixed(2) + 'Cr';
                }
            }
        }
        $scope.purchaseOrder = $scope.purchaseorderresponse;
        $scope.transactionCount($scope.purchaseOrder.length,32);
        //$scope.sortOrderBy('orders', 0)//sort by date as soon as logged in
    };
    $scope.refreshQuotations = function(){
        $http.get("/dash/quotations")
            .success($scope.renderQuotations);
        //$scope.sortOrder = false;
    }
    $scope.refreshOrders = function(){
        $http.post("/dash/orders", searchObj)
            .success($scope.renderOrders);
        //$scope.sortOrder = false;
    }
    // $scope.refreshPurchaseOrders = function(){
    //     $http.post("/dash/purchase/orders", purchaseordersearchObj)
    //         .success($scope.renderPurchaseOrders);
    //     //$scope.sortOrder = false;
    // }
    var newOrderSelectedStore = {};
    $scope.getloggedUserDetails = function(){
        if($scope.user.role == 'Dealer'){
            $http.get("/dash/store/details/"+$scope.user.sellerphone)
                .success(function(response){
                    console.log("Dealer Login!!")
                    //console.log(response);
                    newOrderSelectedStore = response[0];
                    newOrderSelectedStore = response[0];
                    $scope.complaintSelectedStore = response[0];
                    $scope.complaint.store = response[0];
                    dealerComplaintPhone = response[0];
                })
        }
    };
    //Getting Custom prices
    var dealerItemsCount = 0;
    var dealerNewViewBy = 0;
    var masterItems = [];
    $scope.itemSelectAll = {};
    $scope.itemSelectAll.category = true;
    $scope.itemSelectAll.subCategory = true;
    $scope.itemSelectAll.subSubCategory = true;
    $scope.renderItems = function (items_list,type) {
        var obj = [];
        if($scope.itemSelectAll.category)
            $scope.itemSelectAll.category = true;
        else
            $scope.itemSelectAll.category = false;
        if($scope.itemSelectAll.category)
            $scope.itemSelectAll.subCategory = true;
        else
            $scope.itemSelectAll.subCategory = false;
        if($scope.itemSelectAll.category && $scope.itemSelectAll.subCategory)
            $scope.itemSelectAll.subSubCategory = true;
        else
            $scope.itemSelectAll.subSubCategory = false;
        if($scope.user.role == 'Dealer'){
            $http.get("/dash/store/details/"+$scope.user.sellerphone)
                .success(function(dealer){
                    $http.get('dash/customprice/'+dealer[0].Dealercode)
                        .success(function(pricelist){
                            console.log("Custom prices : "+pricelist.length)
                            $scope.items_count = pricelist.length;
                            dealerItemsCount = pricelist.length;
                            if(pricelist.length < $scope.newViewBy){
                                $scope.newViewBy = pricelist.length;
                                dealerNewViewBy = pricelist.length;
                            }
                            $scope.customPrices = pricelist;
                            if(pricelist.length > 0){
                                console.log("Populating Custom price list")
                                for(var i=0; i< pricelist.length; i++){
                                    $scope.items.push(pricelist[i])
                                }
                                $scope.itemsInModal=$scope.items;
                                $scope.renderItemsMrp();
                            }
                            else{
                                console.log("Showing all items")
                                for(var i=0; i< items_list.length; i++){
                                    items_list[i].inventory.forEach( function(item) {
                                        items_list[i].totalInventory += item.Qty;
                                    });
                                    $scope.items.push(items_list[i])
                                }
                                $scope.itemsInModal=$scope.items;
                                $scope.renderItemsMrp();
                            }
                        })
                });
        }
        else{
            for(var i=0; i< items_list.length; i++){
                items_list[i].customPricelist = [];
                items_list[i].totalInventory = 0;
                items_list[i].inventory.forEach( function(item) {
                    items_list[i].totalInventory += item.Qty;
                });
                if($scope.priceListName){
                    for(var k = 0;k < $scope.priceListName.length;k++ ){
                        if($scope.priceListName[k] != 'master'){
                            if ( typeof items_list[i][$scope.priceListName[k]] !== 'undefined' &&  items_list[i][$scope.priceListName[k]] != null) {
                                if( typeof items_list[i][$scope.priceListName[k]] == "string"){
                                    items_list[i].customPricelist.push({
                                        itemCode:items_list[i].itemCode,
                                        name:$scope.priceListName[k],
                                        price: null ,
                                        status: false
                                    })
                                }
                                else{
                                    items_list[i].customPricelist.push({
                                        itemCode:items_list[i].itemCode,
                                        name:$scope.priceListName[k],
                                        price: items_list[i][$scope.priceListName[k]],
                                        status: true
                                    })
                                }
                            }
                            else{
                                items_list[i].customPricelist.push({
                                    itemCode:items_list[i].itemCode,
                                    name:$scope.priceListName[k],
                                    price: null ,
                                    status: false
                                })
                            }
                        }
                    }
                }
                $scope.items.push(items_list[i])
                if(items_list[i].subCategory){
                    obj.push(items_list[i]);
                }
            }
            $scope.itemsInModal=$scope.items;
            $scope.renderItemsMrp();
        }
        if(type=='Manufacturer'){
            $scope.itemSubCategories = [];
            $scope.itemSubCategories = obj.unique('subCategory');
            // console.log($scope.itemSubCategories)
            $scope.itemSubCategories.map(function (item) {
                // console.log( item.subCategory)
                if($scope.itemSelectAll.category){
                    item.selected_subCategory = true;
                }else{
                    item.selected_subCategory = true;
                }
                return item;
            })
        }
        if(type=='subCategory'){
            $scope.itemSubSubCategories = [];
            $scope.itemSubSubCategories = obj.unique('subSubCategory');
            if($scope.itemSubSubCategories && $scope.itemSubSubCategories.length){
                for(var i=0; i< $scope.itemSubSubCategories.length ; i++){
                    if((!$scope.itemSubSubCategories[i].subSubCategory) || $scope.itemSubSubCategories[i].subSubCategory == ''){
                        $scope.itemSubSubCategories.splice(i, 1);
                    }
                }
            }
            $scope.itemSubSubCategories.map(function (item) {
                // console.log( item.subSubCategory)
                if($scope.itemSelectAll.subCategory){
                    item.selected_subSubCategory = true;
                }else{
                    item.selected_subSubCategory = true;
                }
                return item;
            })
        }
        // $scope.itemSelectAll.subCategory = true;
    };
    /*........  catalog upload  .............*/
    var categoryFilterObj ={};
    categoryFilterObj.viewBy = 0;
    categoryFilterObj.searchBy = [];
    $scope.catalogLoad = function (type) {
        categoryFilterObj.viewBy += 50;
        if (type == 'category') {
            $http.post("/dash/items/filter/" + type, categoryFilterObj)
                .success(function (category) {
                    if (!category.selected_category)
                        category.selected_category = false;
                    for (var i = 0; i < category.length; i++) {
                        if ($scope.itemSelectAll.category)
                            category[i].selected_category = true;
                        $scope.itemCategories.push(category[i]);
                    }
                    $scope.itemCategories.map(function (item) {
                        if ($scope.itemSelectAll.category) {
                            if (!item.selected_category)
                                item.selected_category = false;
                            else
                                item.selected_category = true;
                        } else {
                            if (item.selected_category)
                                item.selected_category = true;
                            else
                                item.selected_category = false;
                        }
                        item.itemCategories = true;
                        return item;
                    })
                })
        } else if (type == 'subCategory') {
            $http.post("/dash/items/filter/" + type, categoryFilterObj)
                .success(function (subCategory) {
                    // console.log("Aggregate Function");
                    if (!subCategory.selected_subCategory)
                        subCategory.selected_subCategory = false;
                    for (var i = 0; i < subCategory.length; i++){
                        if ($scope.itemSelectAll.category)
                            subCategory[i].selected_subCategory = true;
                        $scope.itemSubCategories.push(subCategory[i]);
                    }
                    $scope.itemSubCategories.map(function (item) {
                        if ($scope.itemSelectAll.category)
                            if ($scope.itemSelectAll.category) {
                                if (!item.selected_subCategory)
                                    item.selected_subCategory = false;
                                else
                                    item.selected_subCategory = true    ;
                            } else {
                                if (item.selected_subCategory)
                                    item.selected_subCategory = true;
                                else
                                    item.selected_subCategory = false;
                            }
                        item.itemSubCategories = true;
                        return item;
                    })
                })
        }
    }
    $scope.getAllCategories = function(param,type){
        $http.post("/dash/items/filter/"+type, {viewBy : 0})
            .success(function(category){
                $scope.itemFilterCategories = category ;
                $scope.itemCategories = category;
                $scope.itemCategories = $scope.itemCategories.filter(function( obj ) {
                    return obj._id !== 'DEFAULT';
                });
                // $scope.itemCategories.map(function (item) {
                //
                //     if($scope.itemSelectAll.category){
                //         item.selected_category = param;
                //     }else{
                //         item.itemCategories = true;
                // }
                //     return item;
                // })
            })
    }
    $scope.getAllSubCategories = function(param,type){
        $http.post("/dash/items/filter/"+type, {viewBy : 0})
            .success(function(subCategory){
                $scope.itemSubCategories = subCategory;
                $scope.itemFilterSubCategories = subCategory;
                $scope.itemSubCategories = $scope.itemSubCategories.filter(function( obj ) {
                    return obj._id !== 'DEFAULT';
                });
                // $scope.itemSubCategories.map(function (item) {
                //
                //     if($scope.itemSelectAll.category){
                //         item.selected_subCategory = false;
                //
                //     }else{
                //         item.itemSubCategories = false;
                //         $scope.itemSubCategories = [];
                //     }
                //     return item;
                // })
            })
    }
    $scope.getAllSubSubCategories = function(param,type){
        $http.post("/dash/items/filter/"+type, {viewBy : 0})
            .success(function(subSubCategory){
                $scope.itemSubSubCategories = subSubCategory;
                $scope.itemFilterSubSubCategories = subSubCategory;
                $scope.itemSubSubCategories = $scope.itemSubSubCategories.filter(function( obj ) {
                    return obj._id !== 'DEFAULT';
                });
                if($scope.itemSubSubCategories.length ==1){
                    if($scope.itemSubSubCategories[0]._id == null){
                        $scope.itemSubSubCategories = [];
                    }
                }
                // $scope.itemSubSubCategories.map(function (item) {
                //
                //     if($scope.itemSelectAll.category && $scope.itemSelectAll.subCategory){
                //         item.selected_subSubCategory = false;
                //
                //     }else{
                //         item.itemSubSubCategories = true
                //         $scope.itemSubSubCategories = [];
                //     }
                //     return item;
                // })
            })
    }
    // $scope.fetchCategories =function(itemSearchObj){
    //     $http.post("/dash/items", itemSearchObj)
    //         .success(function (response) {
    //
    //             $scope.renderItems(response, 'Manufacturer');
    //
    //             $http.post("/dash/item/count", itemSearchObj)
    //                 .success(function (res) {
    //                     $scope.transactionCount(res, 2);
    //                 });
    //             $scope.getAllSubCategories(false, 'subCategory');
    //         });
    // }
    // $scope.fetchSubCategories =function(itemSearchObj){
    //     $http.post("/dash/items", itemSearchObj)
    //         .success(function (response) {
    //
    //             $scope.renderItems(response, 'subCategory');
    //             $http.post("/dash/item/count", itemSearchObj)
    //                 .success(function (res) {
    //                     $scope.transactionCount(res, 2);
    //                 });
    //         });
    // }
    // $scope.fetchSubSubCategories =function(itemSearchObj){
    //     $http.post("/dash/items", itemSearchObj)
    //         .success(function (response) {
    //             $scope.renderItems(response, 'subSubCategory');
    //             $http.post("/dash/item/count", itemSearchObj)
    //                 .success(function (res) {
    //                     $scope.transactionCount(res, 2);
    //                 });
    //         });
    // }
    //dropdown for subcat
    $scope.fetchOnlySubCatDropDown = function(data,type, subtype){
        // console.log(data)
        // console.log(type)
        var tempObj = {};
        tempObj = data;
        $http.post("/dash/items/category/sub", tempObj).success(function(res) {
            // console.log("res of subcat======",res);
            // $scope.subCategoriesDropDown = [];
            if(type == 'add'){
                $scope.subCategoriesDropDown =  res;
                $scope.subCategoriesDropDown = $scope.subCategoriesDropDown.filter(function( obj ) {
                    return obj._id !== 'DEFAULT';
                });
                $scope.newItem.subCategory = "DEFAULT" ;
                $scope.newItem.subSubCategory = "DEFAULT";
                $scope.subSubCategoriesDropDown = [];
            }
            else if (type == 'edit'){
                $scope.subCategoriesDropDown =  res;
                $scope.subCategoriesDropDown = $scope.subCategoriesDropDown.filter(function( obj ) {
                    return obj._id !== 'DEFAULT';
                });
                $scope.subSubCategoriesDropDown = [];
                if(subtype == 'editView'){
                    $scope.editedItem.subCategory = tempObj.subCategory || 'DEFAULT';
                }else{
                $scope.editedItem.subCategory = "DEFAULT" ;
            }
                // $scope.editedItem.subSubCategory = "" ;
            }
            // console.log($scope.editedItem.subCategory)
        })
    }
    $scope.fetchOnlySubSubCatDropDown = function(data,type, subType){
        var tempObj = {};
        tempObj = data;
        $http.post("/dash/items/category/sub/sub", tempObj).success(function(res) {
            // $scope.subCategoriesDropDown = [];
            if(type == 'add'){
                $scope.subSubCategoriesDropDown =  res;
                $scope.subSubCategoriesDropDown = $scope.subSubCategoriesDropDown.filter(function( obj ) {
                    return obj._id !== 'DEFAULT';
                });
                $scope.newItem.subSubCategory = "DEFAULT" ;
            }
            else if (type == 'edit'){
                $scope.subSubCategoriesDropDown = res;
                $scope.subSubCategoriesDropDown = $scope.subSubCategoriesDropDown.filter(function( obj ) {
                    return obj._id !== 'DEFAULT';
                });
                if(subType == 'editView'){
                    $scope.editedItem.subSubCategory = tempObj.subSubCategory || 'DEFAULT';
                }else{
                    $scope.editedItem.subSubCategory = 'DEFAULT';
                }
            }
        })
    }
    /*.........  end catalog upload   .......*/
    /*... Get Item/Product MRP...*/
    $scope.getItemsMRP = function(itemcode){
        for(var i = 0; i < $scope.items.length; i++){
            if($scope.items[i].itemCode == itemcode){
                return Number($scope.items[i].MRP);
            }else{
                if(i == $scope.items.length-1) return 'N/A';
            }
        }
    }
    $scope.getCgst = function(itemcode){
        for(var i = 0; i < $scope.items.length; i++){
            if(!$scope.items[i].CGST)
                return 0;
            else
                console.log($scope.items[i].CGST)
            return Number($scope.items[i].CGST);
        }
    }
    $scope.getSgst = function(itemcode){
        for(var i=0; i<$scope.items.length; i++){
            if(!$scope.items[i].SGST)
                return 0;
            else
            //console.log($scope.items[i].SGST)
                return Number($scope.items[i].SGST);
        }
    }
    $scope.getIgst = function(itemcode){
        for(var i=0; i<$scope.items.length; i++){
            if(!$scope.items[i].IGST)
                return 0;
            else
            //console.log($scope.items[i].IGST)
                return Number($scope.items[i].IGST);
        }
    }
    $scope.getQuotationTotalAmount = function(order){
        //console.log(order);
        //console.log((order.orderMRP) - ((order.orderMRP) * ($scope.getItemsDiscount(order.itemcode) / 100)));
        var ordertotal = 0;
        if(order.quantity && order.MRP){
            ordertotal = order.quantity * (Number(order.orderMRP));
            //console.log(ordertotal);
        }
        return ordertotal;
    }
    //.... Filter users by role / category .....
    $scope.changeSmsCategory = function(index){
        $scope.smsRole = '';
        if(index == 1)
            $scope.smsRole = 'dealer';
        else if(index == 2)
            $scope.smsRole = 'admin';
        else if(index == 3)
            $scope.smsRole = 'manager';
        else if(index == 4)
            $scope.smsRole = 'salesperson';
        else if(index == 5)
            $scope.smsRole = 'stockist';
        else
            $scope.smsRole = 'fulfiller';
    }
    //Render Sellers
    $scope.renderSellers = function (response) {
        // console.log(response)
        console.log("GetAll Sellers and Branches--> "+response.length);
        /*
         Response has 2 arrays
         - response.seller has list of users in the instance
         - response.branch has list of branches in the instance
         */
        $scope.activeUsers = [];
        if(response.seller || response.branch){
            $scope.sellers = response.seller;
            masterUsers = response.seller;
            if($scope.sellers.length == 0){
                $scope.uploadFiles.sellers = true;
            }
            $scope.sellersMasterList = response.seller;
            for(var i=0; i< response.seller.length; i++){
                if(response.seller[i].userStatus == 'Active')
                    $scope.activeUsers.push(response.seller[i]);
            }
            $scope.branches = response.branch;
        }else{
            for(var i = 0;i<response.length;i++) {
                if ($scope.user.role == "" || $scope.user.role == "Admin" || $scope.user.role == "Manager") {
                    $scope.sellers.push(response[i])
                }
                else if($scope.applicationType == 'Atmosphere') {
                    $scope.sellers.push(response[i])
                }
            }
        }
        //$scope.sellers_count = $scope.allUserLength;
        //console.log(response.length)
        $scope.roleSalesrep = [];
        $scope.locSeller =[];
        $scope.roleAdmin = [];
        $scope.roleStockist = [];
        $scope.roleDealerPortalApp = [];
        $scope.roleManager = [];
        if ($scope.sellers[0])
            $scope.selectedSeller = $scope.sellers[0];
        // console.log($scope.sellers);
        //create fulfillers list
        for(var i = 0; i < $scope.sellers.length; i++){
            if($scope.sellers[i].salesrep){
                $scope.roleSalesrep.push($scope.sellers[i]);
                if($scope.sellers[i].latitude)
                    $scope.locSeller.push($scope.sellers[i]);
            }
            //Admin list
            if($scope.sellers[i].admin){
                $scope.roleAdmin.push($scope.sellers[i]);
            }
            //Stockist list
            if($scope.sellers[i].stockist){
                $scope.roleStockist.push($scope.sellers[i]);
            }
            //Dealer list in sellers collection
            if($scope.sellers[i].dealer)
                $scope.roleDealerPortalApp.push($scope.sellers[i]);
        }
        //$scope.transactionCount($scope.sellers_count,5);
    };
    $scope.downloadAllColleagues = function(){
        var sellerObj = {}
        if($scope.user.sellerObject){
            if($scope.user.sellerObject.Resort){
                sellerObj.resort = $scope.user.sellerObject.Resort;
            }
            else{
                sellerObj.resort = ''
            }
        }
        else{
            sellerObj.resort = ''
        }
        $http.post('/dash/sellers/atms/download',sellerObj)
            .success(function(res){
                // console.log(res);
                var output = "EMPLOYEE_ID  , sellername , countryCode  , sellerphone ,  sellerid , DEPARTMENT  , role , user_role , Designation , email ,  Resort , manager , managerid, Supervisor_Code , Supervisor_Name , Supervisor_Designation , Supervisor_Phone_Number, Assistant_Manager_Code , Assistant_Manager_Name , Assistant_Manager_Designation , Assistant_Manager_Phone_Number , Manager_Code , Manager_Name , Manager_Designation , Manager_Phone_Number , last_updated ,last_updated_by, userStatus\n";
                for(var i=0; i< res.length; i++){
// console.log(res[i])
                    output += res[i].EMPLOYEE_ID;
                    output += ',';
                    output += res[i].sellername;
                    output += ',';
                    if(res[i].countryCode){
                        output += res[i].countryCode;
                        output += ',';
                    }
                    else{
                        res[i].countryCode = '';
                        output += res[i].countryCode;
                        output += ',';
                    }
                    if(res[i].sellerphone){
                        output += res[i].sellerphone;
                        output += ',';
                    }
                    else{
                        res[i].sellerphone = '';
                        output += res[i].sellerphone;
                        output += ',';
                    }
                    if(res[i].sellerid){
                        output += res[i].sellerid;
                        output += ',';
                    }
                    else{
                        res[i].sellerid = '';
                        output += res[i].sellerid;
                        output += ',';
                    }
                    if(res[i].DEPARTMENT){
                        if (res[i].DEPARTMENT.toString().indexOf(',') != -1) {
                            var quotesWrapped = '"' + res[i].DEPARTMENT + '"';
                            res[i].DEPARTMENT = quotesWrapped;
                        }
                        if (res[i].DEPARTMENT.toString().indexOf('\n') != -1) {
                            var quotesWrapped = res[i].DEPARTMENT.replace('\n', ' ');
                            res[i].DEPARTMENT = quotesWrapped;
                        }
                        if (res[i].DEPARTMENT.toString().indexOf('\t') != -1) {
                            var quotesWrapped = res[i].DEPARTMENT.replace('\t', ' ');
                            res[i].DEPARTMENT = quotesWrapped;
                        }
                        output += res[i].DEPARTMENT;
                        output += ',';
                    }else
                        output += ',';
                    if(res[i].role){
                        if (res[i].role.toString().indexOf(',') != -1) {
                            var quotesWrapped = '"' + res[i].role + '"';
                            res[i].role = quotesWrapped;
                        }
                        if (res[i].role.toString().indexOf('\n') != -1) {
                            var quotesWrapped = res[i].role.replace('\n', ' ');
                            res[i].role = quotesWrapped;
                        }
                        if (res[i].role.toString().indexOf('\t') != -1) {
                            var quotesWrapped = res[i].role.replace('\t', ' ');
                            res[i].role = quotesWrapped;
                        }
                        output += res[i].role;
                        output += ',';
                    }else
                        output += ',';
                    if(res[i].user_role){
                        output += res[i].user_role;
                        output += ',';
                    }
                    else{
                        res[i].user_role = '';
                        output += res[i].user_role;
                        output += ',';
                    }
                    if(res[i].Designation){
                        if (res[i].Designation.toString().indexOf(',') != -1) {
                            var quotesWrapped = '"' + res[i].Designation + '"';
                            res[i].Designation = quotesWrapped;
                        }
                        if (res[i].Designation.toString().indexOf('\n') != -1) {
                            var quotesWrapped = res[i].Designation.replace('\n', ' ');
                            res[i].Designation = quotesWrapped;
                        }
                        if (res[i].Designation.toString().indexOf('\t') != -1) {
                            var quotesWrapped = res[i].Designation.replace('\t', ' ');
                            res[i].Designation = quotesWrapped;
                        }
                        output += res[i].Designation;
                        output += ',';
                    }else{
                        output += res[i].Designation;
                        output += ',';
                    }
                    if(res[i].email){
                        output += res[i].email;
                        output += ',';
                    }
                    else{
                        res[i].email = '';
                        output += res[i].email;
                        output += ',';
                    }
                    if(res[i].Resort){
                        output += res[i].Resort;
                        output += ',';
                    }
                    else{
                        res[i].Resort = '';
                        output += res[i].Resort;
                        output += ',';
                    }
                    if(res[i].manager){
                        output += res[i].manager;
                        output += ',';
                    }
                    else{
                        res[i].manager = '';
                        output += res[i].manager;
                        output += ',';
                    }
                    if (res[i].managerid.length)
                    {
                        for(var k=0; k<res[i].managerid.length; k++)
                        {
                            output += res[i].managerid[k];
                            output += ' ';
                        }
                        output += ',';
                    }
                    else {
                        output += ',';
                    }
                    if(res[i].Supervisor_Code){
                        output += res[i].Supervisor_Code;
                        output += ',';
                    }
                    else{
                        res[i].Supervisor_Code = '';
                        output += res[i].Supervisor_Code;
                        output += ',';
                    }
                    if(res[i].Supervisor_Name){
                        output += res[i].Supervisor_Name;
                        output += ',';
                    }
                    else{
                        res[i].Supervisor_Name = '';
                        output += res[i].Supervisor_Name;
                        output += ',';
                    }
                    if(res[i].Supervisor_Designation) {
                        if (res[i].Supervisor_Designation.toString().indexOf(',') != -1) {
                            var quotesWrapped = '"' + res[i].Supervisor_Designation + '"';
                            res[i].Supervisor_Designation = quotesWrapped;
                        }
                        if (res[i].Supervisor_Designation.toString().indexOf('\n') != -1) {
                            var quotesWrapped = res[i].Supervisor_Designation.replace('\n', ' ');
                            res[i].Supervisor_Designation = quotesWrapped;
                        }
                        if (res[i].Supervisor_Designation.toString().indexOf('\t') != -1) {
                            var quotesWrapped = res[i].Supervisor_Designation.replace('\t', ' ');
                            res[i].Supervisor_Designation = quotesWrapped;
                        }
                        output += res[i].Supervisor_Designation
                        output += ',';
                    }else
                        output += ',';
                    if(res[i].Supervisor_Phone_Number){
                        output += res[i].Supervisor_Phone_Number;
                        output += ',';
                    }
                    else{
                        res[i].Supervisor_Phone_Number = '';
                        output += res[i].Supervisor_Phone_Number;
                        output += ',';
                    }
                    if(res[i].Assistant_Manager_Code){
                        output += res[i].Assistant_Manager_Code;
                        output += ',';
                    }
                    else{
                        res[i].Assistant_Manager_Code = '';
                        output += res[i].Assistant_Manager_Code;
                        output += ',';
                    }
                    if(res[i].Assistant_Manager_Name){
                        output += res[i].Assistant_Manager_Name;
                        output += ',';
                    }
                    else{
                        res[i].Assistant_Manager_Name = '';
                        output += res[i].Assistant_Manager_Name;
                        output += ',';
                    }
                    if(res[i].Assistant_Manager_Designation) {
                        if (res[i].Assistant_Manager_Designation.toString().indexOf(',') != -1) {
                            var quotesWrapped = '"' + res[i].Assistant_Manager_Designation + '"';
                            res[i].Assistant_Manager_Designation = quotesWrapped;
                        }
                        if (res[i].Assistant_Manager_Designation.toString().indexOf('\n') != -1) {
                            var quotesWrapped = res[i].Assistant_Manager_Designation.replace('\n', ' ');
                            res[i].Assistant_Manager_Designation = quotesWrapped;
                        }
                        if (res[i].Assistant_Manager_Designation.toString().indexOf('\t') != -1) {
                            var quotesWrapped = res[i].Assistant_Manager_Designation.replace('\t', ' ');
                            res[i].Assistant_Manager_Designation = quotesWrapped;
                        }
                        output += res[i].Assistant_Manager_Designation;
                        output += ',';
                    }else
                        output += ',';
                    if(res[i].Assistant_Manager_Phone_Number){
                        output += res[i].Assistant_Manager_Phone_Number;
                        output += ',';
                    }
                    else{
                        res[i].Assistant_Manager_Phone_Number = '';
                        output += res[i].Assistant_Manager_Phone_Number;
                        output += ',';
                    }
                    if(res[i].Manager_Code){
                        output += res[i].Manager_Code;
                        output += ',';
                    }
                    else{
                        res[i].Manager_Code = '';
                        output += res[i].Manager_Code;
                        output += ',';
                    }
                    if(res[i].Manager_Name){
                        output += res[i].Manager_Name;
                        output += ',';
                    }
                    else{
                        res[i].Manager_Name = '';
                        output += res[i].Manager_Name;
                        output += ',';
                    }
                    if(res[i].Manager_Designation) {
                        if (res[i].Manager_Designation.toString().indexOf(',') != -1) {
                            var quotesWrapped = '"' + res[i].Manager_Designation + '"';
                            result[i].Manager_Designation = quotesWrapped;
                        }
                        if (res[i].Manager_Designation.toString().indexOf('\n') != -1) {
                            var quotesWrapped = res[i].Manager_Designation.replace('\n', ' ');
                            res[i].Manager_Designation = quotesWrapped;
                        }
                        if (res[i].Manager_Designation.toString().indexOf('\t') != -1) {
                            var quotesWrapped = res[i].Manager_Designation.replace('\t', ' ');
                            res[i].Manager_Designation = quotesWrapped;
                        }
                        output += res[i].Manager_Designation;
                        output += ',';
                    }else
                        output += ',';
                    if(res[i].Manager_Phone_Number){
                        output += res[i].Manager_Phone_Number;
                        output += ',';
                    }
                    else{
                        res[i].Manager_Phone_Number = '';
                        output += res[i].Manager_Phone_Number;
                        output += ',';
                    }
                    if(res[i].last_updated) {
                        output += $scope.atmsFormatedDate(res[i].last_updated);
                        output += ',';
                    }
                    else{
                        res[i].last_updated = '';
                        output += ',';
                    }
                    if(res[i].last_updated_by) {
                        output += res[i].last_updated_by;
                        output += ',';
                    }
                    else{
                        output[i].last_updated_by = '';
                        output += ',';
                    }
                    if(res[i].userStatus) {
                        output += res[i].userStatus;
                        output += ',';
                    }
                    else{
                        output[i].userStatus = '';
                        output += ',';
                    }
                    output += '\n';
                }
                var blob = new Blob([output], {type : "text/csv;charset=UTF-8"});
                //console.log(blob);
                window.URL = window.webkitURL || window.URL;
                var url = window.URL.createObjectURL(blob);
                var d = new Date();
                var anchor = angular.element('<a/>');
                anchor.attr({
                    href: url,
                    target: '_blank',
                    download: 'Colleauges_Reports_'+d.getDate()+'/'+(d.getMonth()+1)+'/'+d.getFullYear()+'.csv'
                })[0].click();
            });
    }
    $scope.AddToUsers = [];
    $scope.addToUsersList = function(seller){
        if(seller){
            $scope.AddToUsers.push(seller);
            var indexInCatalogue = $scope.doesItemExistsInArray($scope.sellers,"sellername",seller)
            $scope.sellers[indexInCatalogue].userAdd = true;
            $scope.sellers[indexInCatalogue].added = $scope.AddToUsers.length-1;
            return $scope.AddToUsers.length;
        }
    }
    $scope.removeFromList = function(seller,index){
        var indexInCatalogue = $scope.doesItemExistsInArray($scope.sellers,"sellername",seller)
        $scope.sellers[indexInCatalogue].userAdd = false;
        $scope.sellers[indexInCatalogue].added =-1;
        $scope.AddToUsers.splice(index,1);
    }
    $scope.showgrouplist=function(name,data){
        $scope.checkgroup=true;
        if(data == false)
        {
            $scope.filterByRole('',true);
            $scope.showgroupdetails=false;
        }
        else {
            $scope.showgroupdetails=true;
            $scope.grouplistarray = [];
            var groupNameListArrayobj = {};
            $scope.sellers = [];
            if (data) {
                for (var i = 0; i < $scope.groupallarray.length; i++) {
                    if ($scope.groupallarray[i].Name === name) {
                        groupNameListArrayobj = $scope.groupallarray[i].nameList;
                        $scope.grouplistarray.push($scope.groupallarray[i]);
                    }
                }
                for (var j = 0; j < groupNameListArrayobj.length; j++) {
                    $scope.sellers.push(groupNameListArrayobj[j]);
                }
            }
            $scope.transactionCount($scope.sellers.length, 5);
        }
        jQuery.noConflict();
        $('input.chk').on('change', function() {
            $('input.chk').not(this).prop('checked', false);
        });
    }
    $scope.cleargroup=function(){
        $scope.group.Phone = '' ;
        $scope.group.Name = '' ;
        $scope.group.Email = '' ;
        $scope.group.SubCat='' ;
        $scope.AddToUsers = [];
        $scope.checkgroup = false;
        $scope.showgroupdetails = false;
        $scope.all.AllNewCategory='';
        $scope.sellers=masterUsers;
        for(var i=0;i<$scope.sellers.length;i++){
            $scope.sellers[i].added=-1;
        }
        if($scope.applicationType != 'Atmosphere') $scope.filterByRole('',true);
        else $scope.managerSelectedList = []
    }
    $scope.addsubcat=function(textadd){
        if(!textadd){
            console.log("empty string");
            alert("Please Enter Category Name.....");
            return;
        }
        else{
            var temObj=textadd.toUpperCase();
            if($scope.groupsubcategory.indexOf(temObj) == -1){
                $scope.group.SubCat = textadd.toUpperCase();
                $scope.groupsubcategory.push((textadd).toUpperCase());
                $scope.all.AllNewCategory='';
                jQuery.noConflict();
                $('#newGroupSubCategory').modal('hide');
                $scope.group.SubCat=textadd.toUpperCase();
            }
            else{
                bootbox.alert({
                    title : 'ERROR',
                    message : "Category Already Exists",
                    className : "text-center"
                });
                $scope.all.AllNewCategory = '';
            }
        }
    }
    $scope.assignComplaint = function(comp, seller){
        for(var i=0;i<$scope.groupallarray.length;i++){
            if($scope.groupallarray[i].Name==$scope.modalComplaint.assignedTo){
                comp.groupemail=$scope.groupallarray[i].Email;
            }
        }
        comp.assignedTo = seller;
        console.log(comp);
        $http.put("/dash/complaint/assignSeller", comp)
            .success(function(response){
                jQuery.noConflict();
                $("#complaintAssigned").fadeIn(1000,function(){
                    $("#complaintAssigned").fadeOut(3000);
                })
            })
        $scope.modalComplaint.assignedTo = seller;
        $scope.modalComplaint.assignnew = '';
    }
    $scope.renderComplaints = function(response){
        console.log("GetAll Complaints------>");
        console.log(response);
        $scope.complaintprojects = [];
        $scope.complaintCompanies = [];
        var temp = response.unique('category') ;
        for(var i = 0;i < temp.length ; i++){
            if(temp[i].category) {
                $scope.complaintprojects.push(temp[i].category)
            }
        }
        var companyarray = [];
        for(var i =0;i<response.length;i++){
            companyarray.push(response[i].store.DealerName);
        }
        for(var j = 0;j<companyarray.length;j++){
            if($scope.Complaintcompany.indexOf(companyarray[j])==-1){
                $scope.Complaintcompany.push(companyarray[j]);
            }
        }
        allComplaints = response;
        $scope.serviceComplaints = response;
        $scope.complaintItems = response;
        //$scope.case18length = response.length;
        $scope.totalItems = response.length;
        $scope.complaintStatusFilter = '';
        $scope.viewby = 10;
        $scope.totalItems = $scope.serviceComplaints.length;
        $scope.currentPage = 1;
        $scope.itemsPerPage = $scope.viewby;
        $scope.maxSize = 5;
        $scope.transactionCount($scope.serviceComplaints.length,10);
    };
    $scope.renderGroups = function(res){
        $scope.groupallarray=[];
        $scope.groupallarray=res;
        var grouparray=[];
        var subcat=[];
        console.log($scope.groupallarray);
        console.log($scope.groupallarray.length);
        for(var i=0;i<$scope.groupallarray.length;i++)
        {
            grouparray.push($scope.groupallarray[i].Name);
            subcat.push($scope.groupallarray[i].SubCat);
        }
        for(var i=0;i<grouparray.length;i++){
            if($scope.groupnamearray.indexOf(grouparray[i])==-1){
                $scope.groupnamearray.push(grouparray[i])
            }
        }
        for(var i=0;i<subcat.length;i++){
            if($scope.groupsubcategory.indexOf(subcat[i])==-1){
                $scope.groupsubcategory.push(subcat[i]);
            }
        }
    }
    $scope.resetComplaint = function(){
        $scope.complaint = {};
        $scope.complaint.ticketId = $scope.generateOrderId();
        if(dealerComplaintPhone)
            $scope.complaint.Phone = dealerComplaintPhone;
    };
    $scope.addproject=function(project){
        if(project == '' || project == undefined){
            bootbox.alert({
                title : 'ERROR',
                message : "Please Enter Project Name",
                className : "text-center"
            });
        }
        else{
            var temObj = project.toUpperCase();
            if($scope.complaintprojects.indexOf(temObj) == -1){
                $scope.complaintprojects.push(temObj);
                console.log($scope.complaintprojects);
                $scope.all.newProjectAdded = '';
                $scope.complaint.category = temObj ;
                jQuery.noConflict();
                $('#newComplaintProject').modal('hide');
            }
            else{
                bootbox.alert({
                    title : 'ERROR',
                    message : "Project Name Already Exists",
                    className : "text-center"
                });
                $scope.all.newProjectAdded = '';
            }
        }
    };
    $scope.editEnabled = false;
    $scope.enableComplaintEdit =function(){
        $scope.editEnabled = true;
    }
    $scope.resEnabled = false;
    $scope.resetDownload = function(){
        $scope.complaintSearch.date_from = '';
        $scope.complaintSearch.date_to = '';
        $scope.complaintSearch.customer = '';
    }
    $scope.deleteComplaint = function(id){
        //  console.log(id);
        bootbox.confirm({
            title: "Service Complaint Deletion",
            message: "Are you sure?",
            buttons: {
                confirm: {
                    label: 'Yes',
                    className: 'btn-success'
                },
                cancel: {
                    label: 'No',
                    className: 'btn-danger'
                }
            },
            callback: function(result){
                if (result == true){
                    $http.delete("/dash/complaint/remove/" + id)
                        .success(function(response){
                            if(response == true){
                                toastr.success("Complaint Deleted Successfully");
                                $scope.refreshTransactions(9);
                            }
                            else{
                                toastr.error("Unable To Delete Complaint");
                            }
                        })
                }
                else if(result == false){
                    $scope.refreshTransactions(9);
                }
            }
        })
    }
    $scope.saveComplaint = function(){
        bootbox.confirm({
            title: "Service Complaint Submission",
            message: "Are you sure?",
            buttons: {
                confirm: {
                    label: 'Yes',
                    className: 'btn-success'
                },
                cancel: {
                    label: 'No',
                    className: 'btn-danger'
                }
            },
            callback: function(result){
                if(result){
                    if(!$scope.complaint.store){
                        if(!$scope.complaint.searchDeviceBox){
                            console.log("Atleast Enter Any Name Of Customer");
                            bootbox.alert({
                                title : 'ERROR',
                                message : "Please Enter Atleast Customer's Name Manually",
                                className : "text-center"
                            });
                            return false;
                        }
                        else{
                            $scope.complaint.store = {DealerName : $scope.complaint.searchDeviceBox,
                                contactPerson : $scope.complaint.customercontperson,Phone : $scope.complaint.customercontnumber,
                                email : $scope.complaint.customercontemail};
                        }
                    }
                    if(typeof($scope.complaint.priority)== "number"){
                        bootbox.alert({
                            title : 'ERROR',
                            message : "Please Select Priority",
                            className : "text-center"
                        });
                        return false;
                    }
                    if(!$scope.complaint.description){
                        bootbox.alert({
                            title : 'ERROR',
                            message : "Please Enter Complaint Description",
                            className : "text-center"
                        });
                        return false;
                    }
                    if(!$scope.complaint.type){
                        bootbox.alert({
                            title : 'ERROR',
                            message : "Please Select Complaint Type",
                            className : "text-center"
                        });
                        return false;
                    }
                    if(!$scope.complaint.searchUserBox){
                        bootbox.alert({
                            title : 'ERROR',
                            message : "Please Enter Contact Person Name",
                            className : "text-center"
                        });
                        return false;
                    }
                    // if($scope.complaint.category=='' || $scope.complaint.category==undefined){
                    //     bootbox.alert({
                    //         title : 'ERROR',
                    //         message : "Please Select Project Category",
                    //         className : 'text-center'
                    //     });
                    //     return false;
                    // }
                    if($scope.complaint.category=='' || $scope.complaint.category==undefined){
                        $scope.complaint.category='';
                    }
                    var date = new Date();
                    $scope.complaint.date_added= [date.getFullYear(),(date.getMonth()+1).padLeft(), date.getDate().padLeft() ].join('-') + ' '
                        + [date.getHours().padLeft(), date.getMinutes().padLeft(), date.getSeconds().padLeft()].join (':');
                    $scope.complaint.status = $scope.complaintStatus[0];
                    $scope.complaint.owner = ($scope.user.username ? $scope.user.username : "Portal Admin");
                    $scope.complaint.ownerPhone = ($scope.user.sellerphone ? $scope.user.sellerphone : 0);
                    $scope.complaint.name = $scope.complaint.searchUserBox;
                    $scope.complaint.store.contactPerson = $scope.complaint.customercontperson;
                    $scope.complaint.store.Phone = $scope.complaint.customercontnumber;
                    $scope.complaint.store.email = $scope.complaint.customercontemail;
                    delete $scope.complaint.searchDeviceBox;
                    delete $scope.complaint.customercontperson;
                    delete $scope.complaint.customercontnumber;
                    delete $scope.complaint.customercontemail;
                    delete $scope.complaint.searchUserBox;
                    $http.post("/dash/postComplaint", $scope.complaint)
                        .success(function(response){
                            $scope.changeComplaintButton(0);
                            $http.get("/dash/getComplaint")
                                .success($scope.renderComplaints);
                            $scope.addComplaintButton = true;
                            toastr.success("Complaint Added Successfully")
                        })
                }
                else
                    toastr.error("Error Please try Again ")
                console.log("Not Submitted");
                //  $scope.changeComplaintButton(0);
            }
        });
    }
    $scope.updateDueDate = function(complaint, date){
        complaint.dueDate = $scope.formatDate(date);
        //console.log(complaint);
        $http.put("/dash/complaint/dueDate", complaint)
            .success(function(response){
                //console.log(response);
                toastr.success("Due Date Updated Successfully")
            });
    };
    $scope.updateComplaintStatus = function(complaint, status){
        if(status == "Closed"){
            if($scope.modalComplaint.resolution){
                complaint.status = status;
                console.log(complaint);
                $http.put("/dash/complaint/status", complaint)
                    .success(function(response){
                        toastr.success("Complaint Status Changed Successfully")
                    });
            }
            else{
                toastr.error("No Resolution Present,Please Add Some Resolution To Close Complaint");
                $scope.refreshTransactions(9);
            }
        }
        else{
            complaint.status = status;
            console.log(complaint);
            $http.put("/dash/complaint/status", complaint)
                .success(function(response){
                    toastr.success("Complaint Status Changed Successfully")
                });
        }
    };
    $scope.openComplaintModal = function(comp){
        $scope.editEnabled = false;
        if(comp){
            $scope.modalComplaint = comp;
        }
        else{
            $scope.modalComplaint = {};
        }
    }
    $scope.editComplaintDetails = function(){
        var body = {};
        body.category = $scope.modalComplaint.category;
        body.type = $scope.modalComplaint.type;
        body.priority = $scope.modalComplaint.priority;
        body.description = $scope.modalComplaint.description;
        body.resolution = $scope.modalComplaint.resolution;
        body.issueType = $scope.modalComplaint.issueType;
        body.name = $scope.modalComplaint.name;
        body.id = $scope.modalComplaint.ticketId;
        body.resoltuion = $scope.modalComplaint.resolution;
        $http.post("/dash/complaint/edit",body)
            .success(function(response){
                toastr.success("Complaint Details Successfully Edited");
            })
    }
    $scope.openassigningmodal = function(value){
        if(value == 'Group'){
            jQuery.noConflict();
            $('#assignTicketGroup').modal('show');
        }
        else if (value == 'Individual'){
            jQuery.noConflict();
            $('#assignTicketIndividual').modal('show');
        }
    }
    $scope.viewComplaintToCustomer = function(){
        //console.log($scope.complaintCustomer)
        $scope.complaintCustomer = !$scope.complaintCustomer;
    }
    $scope.saveComment = function(comp){
        if(comp.latestComment){
            var addComment = {};
            var cDate = new Date();
            addComment.commentDate = DateTimeStampFormat(cDate);
            addComment.comment = comp.latestComment;
            addComment.reportedBy = ($scope.user.username ? $scope.user.username : "Portal Admin");
            addComment.customerVisible = $scope.complaintCustomer;
            comp.ticketComment.push(addComment);
            console.log(comp.ticketComment);
            $http.put("/dash/complaint/comment", comp)
                .success(function(response){
                    $scope.modalComplaint.latestComment = '';
                    toastr.success("Comment Added Successfully");
                })
        }
        else {
            bootbox.alert({
                title : 'ERROR',
                message : "Please enter a comment and save.",
                className : 'text-center'
            });
        }
    }
    $scope.selectStoreMeeting = function(store){
        $scope.validatePhone = false;
        if(!store.type || store.type == 'Lead'){
            $scope.existingLead = true;
        }else{
            $scope.existingLead = false;
        }
        if(store.type == 'Customer'){
            $scope.existingCustomer = true;
        }else{
            $scope.existingCustomer = false;
        }
        $scope.meeting.phone = Number(store.Phone);
        $scope.meeting.name = store.DealerName;
        $scope.meeting.email = store.email;
        $scope.meeting.Address = store.Address ;
        $scope.meeting.Area = store.Area ;
        $scope.meeting.City = store.City ;
        $scope.meeting.Dealercode = store.Dealercode ;
        $scope.meeting.dealername = store.DealerName;
        $scope.meeting.dealerphone = store.Phone;
        $scope.meeting.stockist = store.Stockist;
        $scope.meeting.dealername = store.DealerName;
        jQuery.noConflict();
        $(".dealerDropdown").css('display', 'none')
        $('#customerSearch').val("");
        $('#BBdeviceSearchBar').val('');
    };
    /*payment type in others*/
    $scope.PaymentsType = function(res){
        $scope.payment.type = res;
    }
    $scope.addItemForm = function(){
        console.log($scope.userLabel);
        $scope.formLabels.push($scope.userLabel)
        $scope.userLabel = {}
    };
    /*====hide and show purchase order====*/
    $scope.showPurchaseOrder = function () {
        $scope.invoicePurchaseOrderValue = !$scope.invoicePurchaseOrderValue;
    }
    /*====hide and show tax setup====*/
    $scope.showInvoiceTaxsetup = function () {
        $scope.invoiceTaxSetup = !$scope.invoiceTaxSetup;
    };
    $scope.renderDealers = function(response){
        console.log("GetAll Dealers--> " + response.length);
        $scope.dealers = [];
        localAllDealers = [];
        for(var i = 0 ; i < response.length; i ++){
            if(response[i].Phone[0]!=''||response[i].Phone[0]!=undefined){
                if(response[i].DealerName[0]){
                    $scope.dealers.push(response[i]);
                    localAllDealers.push(response[i]);
                }
                else if(response[i].CustomerName[0]){
                    $scope.dealers.push({DealerName: response[i].CustomerName[0], Phone: response[i].Phone[0], Dealercode : response[i].Customercode[0]})
                }
            }
        }
        $scope.beatPlanLoadMore();
    };
    $scope.getImageUrl = function(obj){
        if(obj){
            if(obj.cloudinaryURL){
                if(angular.isObject(obj.cloudinaryURL) && obj.cloudinaryURL.length > 0){
                    return obj.cloudinaryURL[0].image;
                }
                else if(angular.isObject(obj.cloudinaryURL) && obj.cloudinaryURL.length == 0){
                    return '../appimages/image_not_available.jpg';
                }
                else if(obj.cloudinaryURL!="[object Object]"){
                    return obj.cloudinaryURL;
                }else return '../appimages/image_not_available.jpg';
            }
            else{
                return '../appimages/image_not_available.jpg';
            }
        }
    }
    $scope.renderSupplier = function(response){
        $scope.suppliers = [];
        for(var i = 0 ; i < response.length; i ++){
            if(response[0].stockiNumber){
                for(var i=0;i<response.length;i++){
                    if(response[0].stockiNumber==response[i].Stockist){
                        $scope.warehouseRole = response[0].stockiNumber;
                        $scope.suppliers.push(response[i]);
                    }
                }
            }else if(response[i].Phone!=''||response[i].Phone!=undefined){
                if(response[i].SupplierName){
                    $scope.suppliers.push(response[i]);
                }
                else if(response[i].CustomerName[0]){
                    $scope.suppliers.push({SupplierName: response[i].CustomerName[0], Phone: response[i].Phone[0], SupplierCode : response[i].Customercode[0]})
                }
            }
        }
        $scope.transactionCount($scope.suppliers.length, 31);
    };
    //render bidhistory
    $scope.renderBidHistory = function (response) {
        $scope.bidhistory = response;
    };
    $scope.renderTransactionHistory = function (response) {
        console.log(response)
        $scope.inventoryTransaction = response;
    };
    $scope.refreshProcessData = function()
    {
        $scope.displayTypeProcess = [];
        for(var i=0; i<$scope.nav[26].cols.length; i++)
        {
            if($scope.processSearch.type == $scope.nav[26].cols[i].type)
            {
                $scope.displayTypeProcess.push($scope.nav[26].cols[i].category);
            }
        }
        console.log("!!! Refreshing Process Data");
        //console.log($scope.nav[26].cols);
        var processFilter = {};
        console.log($scope.processSearch.type + " - " + $scope.processSearch.process);
        if($scope.processSearch.type)
            processFilter.type = $scope.processSearch.type;
        if($scope.processSearch.process)
            processFilter.process = $scope.processSearch.process;
        $http.post("/dash/process/inventory", processFilter).then(function (response)
        {
            $scope.processes = response.data;
            $scope.totalItems = response.data.length;
            $scope.viewby = 10;
            $scope.currentPage = 1;
            $scope.maxSize = 5;
            $scope.itemsPerPage = $scope.viewby;
        })
    };
    $scope.renderDashboardOrdersReport = function(){
        $http.get("/dash/reports/orders")
            .success(function(response) {
                console.log("GetAll Dashboard Order Summary reports-->");
                $scope.dashboardorderreport = response;
                if($scope.nav[24] && $scope.nav[24].tab) {
                    ordersDuroflexSummaryChart($scope, response, $scope.nav[1].tab);
                }else {
                    ordersSummaryChart($scope, response, $scope.nav[1].tab);
                }
            })
    };
    // $scope.dashboardPjp = [];
    // $scope.renderDashboardPjp = function(){
    //     var body = {
    //         date:new Date()
    //     }
    //     $http.post("/dash/pjp/reports",body).success(function(response) {
    //         console.log('Pjp Reports',response);
    //         $scope.dashboardPjp = response.pjp
    //     });
    // }
    $scope.renderDashboardQuotationsReport = function(){
        $http.get("/dash/reports/quotation")
            .success(function(response) {
                console.log("GetAll Dashboard Quotation Summary reports-->");
                $scope.dashboardquotationreport = response;
            })
    };
    $scope.renderDashboardPurchaseOrdersReport = function(){
        $http.get("/dash/reports/purchase/orders")
            .success(function(response) {
                console.log("GetAll Dashboard Purchase Order Summary reports-->");
                $scope.dashboardpurchaseorderreport = response;
            })
    };
    $scope.IndiaTime = function(D){
        D= D || new Date();
        D.setUTCMinutes(D.getUTCMinutes()+330);
        var A= [D.getUTCDate(), D.getUTCMonth(), D.getUTCFullYear()];
        if(A[1]<10) A[1]= '0'+A[1];
        if(A[2]<10) A[2]= '0'+A[2];
        A = A.join('/');
        var B = [D.getUTCHours(), D.getUTCMinutes(), D.getUTCSeconds()]
        B = B.join(':');
        return A + "  " + B;
    };
    var dealerOrderCount = 0;
    $scope.allUserLength = 0;
    $scope.transactionCount = function(response, tab){
        switch(tab){
            //Orders Total Count
            case 1:
                //console.log("Orders "+response);
                if(response){
                    if(response > localViewBy){
                        $scope.order_count = response;
                    }
                    else if(response <= localViewBy){
                        $scope.order_count = response;
                        dealerOrderCount = response;
                        $scope.orderNewViewBy = response;
                    }
                    else{
                        $scope.orders = [];
                        $scope.orderNewViewBy = 1;
                        $scope.order_count = 0;
                        $scope.orderViewLength = -1;
                    }
                }
                else{
                    $scope.orders = [];
                    $scope.orderNewViewBy = 1;
                    $scope.order_count = 0;
                    $scope.orderViewLength = -1;
                }
                break;
            //Items Total Count
            case 2:
                //console.log(response);
                if(response){
                    if(response > viewBy.items){
                        $scope.items_count = response;
                        $scope.viewLength = 0;
                        $scope.newViewBy = viewBy.items;
                    }
                    else if(response <= viewBy.items){
                        $scope.items_count = response;
                        $scope.newViewBy = response;
                    }
                    else{
                        $scope.items = [];
                        $scope.newViewBy = 1;
                        $scope.items_count = 0;
                        $scope.viewLength = -1;
                    }
                }
                else{
                    $scope.items = [];
                    $scope.newViewBy = 1;
                    $scope.items_count = 0;
                    $scope.viewLength = -1;
                }
                break;
            // Sellers Total Count
            case 5:
                if(response){
                    if(response > viewBy.sellers){
                        $scope.sellers_count = response;
                        $scope.viewLength = 0;
                    }
                    else if(response <= viewBy.sellers){
                        $scope.sellers_count = response;
                        $scope.newViewBy = response;
                        $scope.viewLength = 0;
                    }
                    else{
                        $scope.sellers = [];
                        $scope.newViewBy = 1;
                        $scope.sellers_count = 0;
                        $scope.viewLength = -1;
                    }
                }
                else{
                    $scope.sellers = [];
                    $scope.newViewBy = 1;
                    $scope.sellers_count = 0;
                    $scope.viewLength = -1;
                }
                break;
            //Service complaint total count
            case 10:
                if(response){
                    if(response > viewBy.complaints){
                        $scope.serviceComplaints.length = response;
                        $scope.newViewBy = viewBy.complaints;
                        $scope.viewLength = 0;
                    }
                    else if(response <= viewBy.complaints){
                        $scope.serviceComplaints.length = response;
                        $scope.newViewBy = response;
                    }
                    else{
                        $scope.serviceComplaints = [];
                        $scope.newViewBy = 1;
                        $scope.serviceComplaints.length = 0;
                        $scope.viewLength = -1;
                    }
                }
                else{
                    $scope.serviceComplaints = [];
                    $scope.newViewBy = 1;
                    $scope.serviceComplaints.length = 0;
                    $scope.viewLength = -1;
                }
                break;
            //Stocks total count
            case 12:
                break;
            case 28:
                break;
            case 29:
                console.log("response goals : count:");
                console.log(response);
                if(response){
                    if(response > viewBy.goals){
                        $scope.allGoals_count = response;
                    }
                    else if(response <= viewBy.goals){
                        $scope.allGoals_count = response;
                        $scope.newViewBy = response;
                    }
                    else{
                        $scope.allGoals = [];
                        $scope.reportGoals = [];
                        //     $scope.tempGoals = [];
                        $scope.newViewBy = 1;
                        $scope.allGoals_count = 0;
                        $scope.viewLength = -1;
                    }
                }
                else{
                    $scope.allGoals = [];
                    $scope.reportGoals = [];
                    //   $scope.tempGoals = [];
                    $scope.newViewBy = 1;
                    $scope.allGoals_count = 0;
                    $scope.viewLength = -1;
                }
                break;
            case 31:
                if(response){
                    console.log("response tab..");
                    if(response > viewBy.suppliers){
                        $scope.newViewBy = 12;
                        $scope.supplier_count = response;
                    }
                    else if(response <= viewBy.suppliers){
                        $scope.viewLength = 0;
                        $scope.supplier_count = response;
                        $scope.newViewBy = response;
                    }
                    else{
                        $scope.suppliers = [];
                        $scope.newViewBy = 1;
                        $scope.supplier_count = 0;
                        $scope.viewLength = -1;
                    }
                }
                else{
                    $scope.suppliers = [];
                    $scope.newViewBy = 1;
                    $scope.supplier_count = 0;
                    $scope.viewLength = -1;
                }
                break;
            case 32:
                if(response){
                    if(response > viewBy.purchaseorder){
                        $scope.purchaseOrder.length = response;
                        $scope.newViewBy = viewBy.purchaseorder;
                        $scope.viewLength = 0;
                    }
                    else if(response <= viewBy.purchaseorder){
                        //$scope.purchaseOrder = response;
                        $scope.newViewBy = response;
                    }
                    else{
                        $scope.purchaseOrder = [];
                        $scope.newViewBy = 1;
                        $scope.purchaseOrder.length = 0;
                        $scope.viewLength = -1;
                    }
                }
                else{
                    $scope.purchaseOrder = [];
                    $scope.newViewBy = 1;
                    $scope.purchaseOrder.length = 0;
                    $scope.viewLength = -1;
                }
                break;
            case 35:
                if(response){
                    if(response > viewBy.allbidHistory){
                        $scope.bidhistory_count = response;
                        $scope.newViewBy = viewBy.allbidHistory;
                        $scope.viewLength = 0;
                    }
                    else if(response <= viewBy.allbidHistory){
                        $scope.bidhistory_count = response;
                        $scope.newViewBy = response;
                        $scope.viewLength = 0;
                    }
                    else{
                        $scope.bidhistory = [];
                        $scope.newViewBy = 1;
                        $scope.bidhistory_count = 0;
                        $scope.viewLength = -1;
                    }
                }
                else{
                    $scope.bidhistory = [];
                    $scope.newViewBy = 1;
                    $scope.bidhistory_count = 0;
                    $scope.viewLength = -1;
                }
                break;
            // .........Inventory Transaction History......
            case 36:
                break;
            // .........Inventory......
            case 37:
                break;
            // .........Inventory for B&B ......
            case 38:
                break;
                // ....... Asset ... ///
            case 39:
                if(response){
                    if(response > viewBy.items){
                        $scope.asset_count = response;
                        $scope.viewLength = 0;
                        $scope.newViewBy = viewBy.items;
                    }
                    else if(response <= viewBy.items){
                        $scope.asset_count = response;
                        $scope.newViewBy = response;
                        $scope.viewLength = 0;
                    }
                    else{
                        $scope.assets = [];
                        $scope.newViewBy = 1;
                        $scope.asset_count = 0;
                        $scope.viewLength = -1;
                    }
                }
                else{
                    $scope.assets = [];
                    $scope.newViewBy = 1;
                    $scope.asset_count = 0;
                    $scope.viewLength = -1;
                }
                break;
            case 40:
                if(response){
                    if(response > viewBy.items){
                        $scope.assetTransactionHistory_count = response;
                        $scope.viewLength = 0;
                        $scope.newViewBy = viewBy.items;
                    }
                    else if(response <= viewBy.items){
                        $scope.assetTransactionHistory_count = response;
                        $scope.newViewBy = response;
                        $scope.viewLength = 0;
                    }
                    else{
                        $scope.assetTransaction = [];
                        $scope.newViewBy = 1;
                        $scope.assetTransactionHistory_count = 0;
                        $scope.viewLength = -1;
                    }
                }
                else{
                    $scope.assetTransaction = [];
                    $scope.newViewBy = 1;
                    $scope.assetTransactionHistory_count = 0;
                    $scope.viewLength = -1;
                }
                break;
        }
    }
    // $scope.renderPjp = function(response){
    //     //console.log("Render PJP ----->")
    //     // console.log(response)
    //     $scope.allPjp = response;
    // }
    // $scope.renderPjpBeat = function(response){
    //     //console.log("Render Beat ---->")
    //     //console.log(response)
    //     $scope.displayBeat = response;
    //     $scope.beats = response;
    // }
    //Render Playlists
    $scope.renderPlaylists = function (response) {
        console.log("GetAll Playlists-->" + response.length);
        $scope.allPlaylists = response;
        $scope.tempPlaylistDet = response;
        if(response.length != 0){
            $scope.getPlaylistByID(response[0].playlist_id)
        }
    };
    $scope.allSellers = [];
    $scope.renderPortal = function(){
        // sellerSearchObj.viewLength = 0;
        // sellerSearchObj.viewBy = initialUserViewBy;
        // sellerSearchObj.searchFor = '';
        // sellerSearchObj.searchBy = [];
        // sellerSearchObj.userLoginDetails = $scope.user ;
        // if($scope.applicationType == 'Atmosphere' && $scope.user.sellerObject) {
        //     sellerSearchObj.resort = $scope.user.sellerObject.Resort;
        // }
        $http.get("/dash/role/sellers/Salesperson")
            .success(function (salesperson) {
                if(salesperson && salesperson.length){
                    $scope.roleSalesrep = [];
                    for(var i = 0; i < salesperson.length; i++){
                        $scope.roleSalesrep.push({sellername : salesperson[i].sellername, sellerphone : salesperson[i].sellerphone});
                    }
                    $scope.salespersonLength = $scope.roleSalesrep.length;
                }
            });
        if($scope.applicationType == 'Atmosphere'){
            console.log("ATMS application");
            return;
        }
        $http.get("/dash/groupDetails")
            .success($scope.renderGroups);
        renderWeeklyDashboard();
        // if($scope.coID == 'TEST' || $scope.coID == 'MUSI'){
        //     $http.get("/dash/playlist")
        //         .success($scope.renderPlaylists);
        //     $http.get("/dash/songs/")
        //         .success(function(res){
        //             //      console.log(res);
        //             $scope.allSongs = res;
        //         });
        // }
        // if($scope.coID == 'GOLO' || $scope.coID == 'GOLC'){
        //     $http.get("/dash/locations")
        //         .success(function(res){
        //             console.log(res);
        //             $scope.partnerLocations = res;
        //         });
        //     return;
        // }
        $http.get("/dash/labels")
            .success(function(res){
                /* console.log("labels got")
                 console.log(res);*/
                $scope.allLabels = res;
                console.log("All labels---->>")
                console.log($scope.allLabels)
            });
        // $http.get("/dash/addresses")
        //     .success(function(addresses){
        //         $scope.allShippingAddress = addresses;
        //     });
        // $http.get("/dash/settings/details/DealerTabs")
        //     .then(pincode => {
        //         if(pincode.data){
        //             $scope.pinCodeMadatory = pincode.data.PinCodeMadatory;
        //         }else{
        //             $scope.pinCodeMadatory = false;
        //         }
        //     })
        //     .catch((error, status) => {
        //         console.log(error, status);
        //         if(status){
        //             if(status >= 400 && status < 404)
        //                 $window.location.href = '/404';
        //             else if(status >= 500)
        //                 $window.location.href = '/500';
        //         }else if(error.status){
        //             if(error.status >= 400 && error.status < 404)
        //                 $window.location.href = '/404';
        //             else if(error.status >= 500)
        //                 $window.location.href = '/500';
        //         }
        //         else
        //             $window.location.href = '/404';
        //     });
        $scope.renderDashboardOrdersReport();
        // $scope.renderDashboardQuotationsReport();
        // $scope.renderDashboardPjp();
        // bidHistorySearchObj.viewLength = 0;
        // bidHistorySearchObj.viewBy = bidHistoryinitialViewBy;
        // bidHistorySearchObj.searchFor = '';
        // bidHistorySearchObj.seller = '';
        // bidHistorySearchObj.stockist = '';
        // bidHistorySearchObj.searchBy = [];
        // $http.post("/dash/items", bidHistorySearchObj)
        //     .success(function(res){
        //         $scope.renderBidHistory(res);
        //     });
        // $http.post("/dash/item/count", bidHistorySearchObj)
        //     .success(function(res) {
        //         $scope.transactionCount(res,35);
        //     });
        // supplierSearchBy.viewLength = 0;
        // supplierSearchBy.viewBy = initialViewBy;
        // supplierSearchBy.searchFor = '';
        // supplierSearchBy.seller = '';
        // supplierSearchBy.stockist = '';
        // supplierSearchBy.searchBy = [];
        // $http.post("/dash/suppliers/count", supplierSearchBy)
        //     .success(function(res){
        //         $scope.transactionCount(res,31);
        //     })
        // $http.get("/dash/quotations")
        //     .success($scope.renderQuotations);
        // itemSearchObj.viewLength = 0;
        // itemSearchObj.viewBy = initialViewBy;
        // itemSearchObj.searchBy = [];
        // itemSearchObj.searchFor = '';
        // $http.post("/dash/items", itemSearchObj)
        //     .success($scope.renderItems);
        //
        // $http.post("/dash/item/count", itemSearchObj)
        //     .success(function(response){
        //         $scope.transactionCount(response,2)
        //     })
        // $http.get("/dash/getAllPjp")
        //     .success($scope.renderPjp);
        // $http.get("/dash/pjp/get/beats")
        //     .success($scope.renderPjpBeat);
        // $http.get('/dash/enforce/credit/fetch')
        //     .success(function (response){
        //         if(response.length){
        //             $scope.enforceCredit = response[0].enforceCredit;
        //         }
        //     })
        // $http.get('/dash/enforce/orderInventory/fetch')
        //     .success(function (response){
        //         if(response.length){
        //             $scope.enforceInventoryOrder = response[0].enforceInventoryOrder;
        //         }
        //     })
        // $http.get('/dash/recordPayment/fetch')
        //     .success(function (response){
        //         if(response.length){
        //             $scope.recordPaymentFlag = response[0].recordPayment;
        //         }
        //     })
        // $http.get('/dash/multipleStockist/fetch')
        //     .success(function (response){
        //         if(response.length){
        //             $scope.multipleStockistFlag = response[0].multipleStockist;
        //         }
        //     })
        // $http.get('/dash/settings/app/update/status')
        //     .success(function (response){
        //         if(response.length){
        //             $scope.updateNotificationEnable = response[0].updateNotification;
        //             $scope.forceUpdateEnable = response[0].enforceUpdate;
        //             // $scope.enforceCredit = response[0].enforceCredit;
        //         }else{
        //             var appUpdateBody = {};
        //             appUpdateBody.type = 'AppForceUpdate'
        //             appUpdateBody.updateNotification = true;
        //             appUpdateBody.enforceUpdate = false;
        //             $http.put("/dash/settings/app/update/status", appUpdateBody)
        //                 .success(function(res){
        //                     //console.log(res);
        //                 })
        //         }
        //     })
        $http.get('/dash/settings/van/sales/status')
            .success(function (response){
                if(response.length){
                    $scope.vanSalesEnable = response[0].vanSalesEnable;
                }else{
                    var body = {};
                    body.value = false;
                    $http.put("/dash/settings/van/sales/status/update", body)
                        .success(function(res){
                            //console.log(res);
                        })
                }
            })
        // searchObj.viewLength = 0;
        // searchObj.newViewBy = initialViewBy;
        // searchObj.from_date = $scope.DateTimeFormat($scope.orderSearch.date_from, 'start') || 0;
        // searchObj.to_date = $scope.DateTimeFormat($scope.orderSearch.date_to, 'end') || 0;
        // searchObj.searchBy = [];
        // searchObj.searchFor = '';
        // $http.post("/dash/orders/count", searchObj)
        //     .success(function(res){
        //         $scope.transactionCount(res,1);
        //     });
        // purchaseordersearchObj.viewLength = 0;
        // purchaseordersearchObj.newViewBy = initialViewBy;
        // purchaseordersearchObj.from_date = $scope.DateTimeFormat($scope.PurchaseOrderSearch.date_from, 'start') || 0;
        // purchaseordersearchObj.to_date = $scope.DateTimeFormat($scope.PurchaseOrderSearch.date_to, 'end') || 0;
        // purchaseordersearchObj.searchBy = [];
        // purchaseordersearchObj.searchFor = '';
        //$scope.intitializeNewPurchaseOrder();
        //$scope.intitializeNewQuotation();
        // $scope.getShopifyCreds();
        // $scope.renderFirebaseCredential();
        if ($scope.user.role == 'Dealer') {
            $scope.loaded(1);
        }
    }
    $scope.all = function() {
        // $http.get("/dash/instanceDetails")
        //     .success($scope.renderInstanceDetails);
        var topUserSearchObj = {};
        topUserSearchObj.viewLength = 0;
        topUserSearchObj.viewBy = 10;
        topUserSearchObj.searchFor = [];
        topUserSearchObj.searchBy = [];
        topUserSearchObj.eDate = $scope.DateTimeFormat(new Date().setHours(23, 59, 59, 59), 'end');
        topUserSearchObj.sDate = $scope.DateTimeFormat((new Date()).setDate((new Date()).getDate() -7), 'start');
        // $http.post("/dash/reports/sellers", topUserSearchObj)
        //     .success(function(response){
        //         console.log("Top 10 Performance report --->");
        //         $scope.sellerreport = response;
        //     })
        //     .catch(function(error, status){
        //         console.log(error, status);
        //         if(status >= 400 && status < 500)
        //             $window.location.href = '/404';
        //         else if(status >= 500)
        //             $window.location.href = '/500';
        //     });
        if($scope.nav[24] && $scope.nav[24].tab) {
            $http.get("/dash/user/role/access")
                .success(function(res) {
                    console.log(res);
                    console.log("Top 10 Performance report --->", res);
                    if(res.role == 'Factory')
                    topUserSearchObj.plant_code = res.sellerObject.plant_code;
                    $http.post("/dash/reports/durosellers", topUserSearchObj)
                        .success(function (response) {
                            $scope.sellerreport = response;
                            $scope.sellerreport = $filter('orderBy')($scope.sellerreport, 'orderQuantity_count');
                        })
                        .catch(function (error, status) {
                            console.log(error, status);
                            if (status >= 400 && status < 500)
                                $window.location.href = '/404';
                            else if (status >= 500)
                                $window.location.href = '/500';
                        });
                });
        }else {
            $http.post("/dash/reports/sellers", topUserSearchObj)
                .success(function (response) {
                    console.log("Top 10 Performance report --->");
                    $scope.sellerreport = response;
                })
                .catch(function (error, status) {
                    console.log(error, status);
                    if (status >= 400 && status < 500)
                        $window.location.href = '/404';
                    else if (status >= 500)
                        $window.location.href = '/500';
                });
        }
        //$scope.renderPortalRoleAccess();
        console.log("Get Non Admin Access Role -->");
        $http.get("/dash/user/role/access")
            .success(function(res){
                console.log(res);
                var onesignal_app_id = '';
                if(res.role){
                    $scope.user = res;
                    // console.log($scope.user)
                    if(res.onesignal_app_id) onesignal_app_id = res.onesignal_app_id;
                    if($scope.user.role != 'Portal Access'){
                        $scope.renderPortal();
                    }
                    // else{
                    //     $scope.renderFirebaseCredential();
                    // }
                }else{
                    $scope.renderPortal();
                }
                /*....
                 OneSignal Desktop Notification Enabling....
                 Needed for Ahuja Chat On Desktop...
                 ..... */
                //.... This will be enabled based on the project...
                if(onesignal_app_id){
                    OneSignal.push(function () {
                        OneSignal.init({
                            appId: onesignal_app_id,
                            autoRegister: false,
                            notifyButton: {
                                enable: true
                            }
                        });
                        OneSignal.getUserId(function (userId) {
                            console.log("OneSignal User ID:", userId);
                            // (Output) OneSignal User ID: 270a35cd-4dda-4b3f-b04e-41d7463a2316
                            if (userId) {
                                var onesignal_player = {};
                                onesignal_player.player_id = userId;
                                onesignal_player.app_id = onesignal_app_id;
                                $scope.user.onesignal_player_id = userId;
                                $http.post("/dash/settings/onesignal/portal", onesignal_player);
                            }
                        });
                    });
                }else{
                    OneSignal.push(function () {
                        OneSignal.init({
                            appId: "52fc93cf-00e5-4f13-be71-eabeed41d6e6",
                            autoRegister: false,
                            notifyButton: {
                                enable: true
                            }
                        });
                        OneSignal.getUserId(function (userId) {
                            console.log("OneSignal User ID:", userId);
                            // (Output) OneSignal User ID: 270a35cd-4dda-4b3f-b04e-41d7463a2316
                            if (userId) {
                                var onesignal_player = {};
                                onesignal_player.player_id = userId;
                                onesignal_player.app_id = "52fc93cf-00e5-4f13-be71-eabeed41d6e6";
                                $scope.user.onesignal_player_id = userId;
                                $http.post("/dash/settings/onesignal/portal", onesignal_player);
                            }
                        });
                    });
                };
                // ....... Submit NC goals on refresh for atmosphere.......
                if(($scope.coID == 'ATMS' || $scope.coID == 'ATOM')) {
                    $scope.distinctperformance=[];
                    $http.get("/dash/performance/distinctPerformanceId")
                        .success(function(response){
                            if(response){
                                // console.log("Distinct response")
                                $scope.distinctperformance=response;
                                // console.log($scope.distinctperformance)
                            }
                        })
                    $http.get("/dash/atms/members/nc")
                        .success(function(nc){
                            console.log('----- nc -----' + nc)
                            if(!nc){
                                $scope.submitNcGoals();
                                $http.put("/dash/atms/update/members/nc/"+true)
                                    .success(function(data){
                                        // console.log(data)
                                    })
                            }
                        })
                }
            })
            .catch(function(error, status){
                console.log(error, status);
                if(status >= 400 && status < 500)
                    $window.location.href = '/404';
                else if(status >= 500)
                    $window.location.href = '/500';
            });
    }
    $scope.all();
    $scope.submitNcGoals = function(){
        // $http.get("/dash/atms/goals/ncCount")
        //     .success(function(goalsCount) {
        //         console.log('Total NC response count -------->>>' + goalsCount);
        //     })
        $http.get("/dash/atms/goals/nc")
            .success(function (goals) {
                console.log('Get NC goals -------->>>' + goals.length);
                // console.log(goals)
                if (goals.length) {
                    var ncGoals = [];
                    var performance_data = [];
                    for (var i = 0; i < goals.length; i++) {
                        goals[i].COMMENT = '';
                        goals[i].NOTRATED = false;
                        goals[i].NOT_COMPLETED = true;
                        goals[i].RATING = '';
                        goals[i].ID = goals[i]._id;
                        ncGoals.push(goals[i]);
                        if (i == goals.length - 1) {
                            updateAndPostPerformance(0, ncGoals)
                        }
                    }
                    function updateAndPostPerformance(index, evaluatedGoals) {
                        var date = new Date();
                        var monthNames = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12];
                        var year = date.getUTCFullYear();
                        var month = (date.getMonth() < 9) ? '0' + monthNames[date.getMonth()] : monthNames[date.getMonth()];
                        var d = (date.getDate() < 10) ? '0' + date.getDate() : date.getDate();
                        var hour = (date.getHours() < 10) ? '0' + date.getHours() : date.getHours();
                        var minute = (date.getMinutes() < 10) ? '0' + date.getMinutes() : date.getMinutes();
                        var seconds = (date.getSeconds() < 10) ? '0' + date.getSeconds() : date.getSeconds();
                        var dateformat = year + '-' + month + '-' + d + ' ' + hour + ':' + minute + ':' + seconds;
                        evaluatedGoals[index].PERFORMANCE_DATE = dateformat;
                        if (!(checkIfAdded(evaluatedGoals[index]))) {
                            //console.log(evaluatedGoals[index])
                            $scope.performance = {};
                            $scope.performance.GOALS = [];
                            $http.get("/dash/atms/sellers/" + evaluatedGoals[index].EVALUATION).success(function (employee) {
                                // console.log('------ employee -------')
                                // console.log(employee)
                                if (employee) {
                                    $http.get("/dash/atms/sellers/" + evaluatedGoals[index].EVALUATOR).success(function (evaluator) {
                                        // console.log('------ evaluator -------')
                                        // console.log(evaluator)
                                        if (evaluator) {
                                            $scope.performance.portalNC = true;
                                            $scope.performance.EVALUATOR = evaluator.sellerid;
                                            $scope.performance.EVALUATOR_ID = evaluator.EMPLOYEE_ID;
                                            $scope.performance.EVALUATOR_NAME = evaluator.sellername;
                                            $scope.performance.EVALUATOR_DEPARTMENT = evaluator.DEPARTMENT;
                                            $scope.performance.EVALUATOR_RESORT = evaluator.Resort;
                                            $scope.performance.EVALUATOR_DESIGNATION = evaluator.Designation;
                                            $scope.performance.PERFORMANCE_ID = generatePerformanceId();
                                            // $scope.performance.PERFORMANCE_ID="1190930162311408"
                                            $scope.performance.PERFORMANCE_DATE = dateformat;
                                            $scope.performance.TODAY_DATE = getFormatedDate(new Date());
                                            $scope.performance.DEPARTMENT = employee.DEPARTMENT;
                                            $scope.performance.EVALUATION_ID = employee.EMPLOYEE_ID;
                                            $scope.performance.EVALUATION = employee.sellerid;
                                            $scope.performance.DESIGNATION = employee.Designation;
                                            $scope.performance.Assistant_Manager_Code = employee.Assistant_Manager_Code;
                                            $scope.performance.Assistant_Manager_Designation = employee.Assistant_Manager_Designation;
                                            $scope.performance.Assistant_Manager_Name = employee.Assistant_Manager_Name;
                                            $scope.performance.Assistant_Manager_Phone_Number = employee.Assistant_Manager_Phone_Number;
                                            $scope.performance.Manager_Code = employee.Manager_Code;
                                            $scope.performance.Manager_Designation = employee.Manager_Designation;
                                            $scope.performance.Manager_Name = employee.Manager_Name;
                                            $scope.performance.Manager_Phone_Number = employee.Manager_Phone_Number;
                                            $scope.performance.Resort = employee.Resort;
                                            $scope.performance.Supervisor_Code = employee.Supervisor_Code;
                                            $scope.performance.Supervisor_Designation = employee.Supervisor_Designation;
                                            $scope.performance.Supervisor_Name = employee.Supervisor_Name;
                                            $scope.performance.Supervisor_Phone_Number = employee.Supervisor_Phone_Number;
                                            $scope.performance.role = employee.role;
                                            $scope.performance.EVALUATION_NAME = employee.sellername;
                                            $scope.performance.GOALS.push(evaluatedGoals[index]);
                                            //
                                            // console.log($scope.performance.PERFORMANCE_ID)
                                            // console.log($scope.performance)
                                            // performance_data.push($scope.performance);
                                            if ($scope.distinctperformance.includes($scope.performance.PERFORMANCE_ID)) {
                                                console.log("data already exists");
                                            }
                                            else {
                                                console.log("Inside else")
                                                performance_data.push($scope.performance);
                                                if (index == evaluatedGoals.length - 1) {
                                                    console.log(performance_data)
                                                    $http.post("/dash/add/performance", performance_data).success(function (response) {
                                                        console.log('/dash/add/performance  response --------')
                                                        console.log(response);
                                                    })
                                                } else {
                                                    updateAndPostPerformance(index + 1, evaluatedGoals)
                                                }
                                            }
                                        }
                                        else {
                                            if (index == evaluatedGoals.length - 1) {
                                                console.log(performance_data)
                                                $http.post("/dash/add/performance", performance_data).success(function (response) {
                                                    console.log('/dash/add/performance  response --------')
                                                    console.log(response);
                                                })
                                            } else {
                                                updateAndPostPerformance(index + 1, evaluatedGoals)
                                            }
                                        }
                                    })
                                }
                                else {
                                    if (index == evaluatedGoals.length - 1) {
                                        console.log(performance_data)
                                        $http.post("/dash/add/performance", performance_data).success(function (response) {
                                            console.log('/dash/add/performance  response --------')
                                            console.log(response);
                                        })
                                    } else {
                                        updateAndPostPerformance(index + 1, evaluatedGoals)
                                    }
                                }
                            })
                        }
                        else {
                            if (index == evaluatedGoals.length - 1) {
                                console.log(performance_data)
                                $http.post("/dash/add/performance", performance_data).success(function (response) {
                                    console.log('/dash/add/performance  response --------')
                                    console.log(response);
                                })
                            } else {
                                updateAndPostPerformance(index + 1, evaluatedGoals)
                            }
                        }
                    }
                    function checkIfAdded(goal) {
                        // console.log('checkIfAdded')
                        // console.log(performance_data)
                        // console.log(goal)
                        if (performance_data.length) {
                            for (var i = 0; i < performance_data.length; i++) {
                                if (performance_data[i].EVALUATION_ID == goal.EVALUATION || performance_data[i].EVALUATION == goal.EVALUATION) {
                                    performance_data[i].GOALS.push(goal);
                                    return true;
                                }
                                else {
                                    if (i == performance_data.length - 1) {
                                        return false;
                                    }
                                }
                            }
                        } else
                            return false;
                    }
                    function generatePerformanceId() {
                        var date = new Date();
                        var components = [
                            date.getFullYear() - 1900,
                            (date.getMonth() < 10) ? '0' + date.getMonth() : date.getMonth(),
                            (date.getDate() < 10) ? '0' + date.getDate() : date.getDate(),
                            (date.getHours() < 10) ? '0' + date.getHours() : date.getHours(),
                            (date.getMinutes() < 10) ? '0' + date.getMinutes() : date.getMinutes(),
                            (date.getSeconds() < 10) ? '0' + date.getSeconds() : date.getSeconds(),
                            (date.getMilliseconds() < 10) ? '00' + date.getMilliseconds() : (date.getMilliseconds() < 100) ? '0' + date.getMilliseconds() : date.getMilliseconds()
                        ];
                        var id = components.join("");
                        return id;
                    }
                    function getFormatedDate(x) {
                        var date = new Date(x);
                        var monthNames = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12];
                        var year = date.getUTCFullYear();
                        var month = (date.getMonth() < 9) ? '0' + monthNames[date.getMonth()] : monthNames[date.getMonth()];
                        var d = (date.getDate() < 10) ? '0' + date.getDate() : date.getDate();
                        var hour = '00';
                        var minute = '00';
                        var seconds = '00';
                        var dateformat = year + '-' + month + '-' + d + ' ' + hour + ':' + minute + ':' + seconds;
                        return dateformat;
                    }
                }
                else {
                    $http.put("/dash/atms/update/members/nc/" + false)
                        .success(function (data) {
                            // console.log(data)
                        })
                }
            })
    }
    var inventoryObj = {};
    var  assetObj = {};
    $scope.displayDealerRefresh = true;
    $scope.displayStocksRefresh = true;
    $scope.refreshTransactions = function(tab){
        $scope.displayDealerRefresh = false;
        jQuery.noConflict();
        $('.refresh').css("display", "inline");
        switch(tab){
            case 1:
                // searchObj.viewLength = 0;
                // searchObj.viewBy = initialViewBy;
                // searchObj.from_date = 0;
                // searchObj.to_date = 0;
                // searchObj.filter = '';
                // searchObj.searchFor = '';
                // searchObj.source = '';
                // //searchObj.searchBy = getColumnName();
                // $scope.filterStatusSelect = '';
                // $scope.orderSearch.date_to = '';
                // $scope.orderSearch.date_from = '';
                // $scope.orderViewLength = 0;
                // $scope.orderSearch.filter = '';
                // $scope.orderSearch.source = '';
                // $scope.orderNewViewBy = localViewBy;
                // $scope.orders = [];
                // $http.post("/dash/orders/count", searchObj)
                //     .success(function(res){
                //         $scope.transactionCount(res,1);
                //     });
                // $scope.showOrderFilter = false;
                break;
            case 2:
                break;
            case 3:
                break;
            case 4:
                $scope.clearFilter(4);
                break;
            case 5:
                if($scope.applicationType == 'Atmosphere') {
                    $scope.clearFilter(29);
                    $scope.goalEmployeecode.all_Colleague_Code='';
                    $scope.showevaluatorgoals=[];
                    $scope.goalsevaluation=[];
                    $scope.showsearchedgoals=false;
                    // console.log($scope.goalssearch)
                    $scope.goalssearch.evaluation='';
                    $scope.goalssearchwithemployee={};
                    $http.post("/dash/mastergoals",goalSearchObj)
                        .success(function(response){
                            // console.log(response);
                            $scope.renderGoals(response);
                            //
                            // if(viewLength + viewBy > $scope.allGoals_count){
                            //     a = viewLength + viewBy - $scope.allGoals_count;
                            //     viewBy -= a;
                            //     $scope.newViewBy = viewBy;
                            // }
                            // $scope.viewLength = viewLength;
                        })
                }
                else $scope.clearFilter(2);
                break;
            case 6:
                break;
            case 7:
                $scope.renderLocationTrackerMaps();
                break;
            case 8:
                // $scope.refreshQuotations();
                break;
            case 9:
                // $http.get("/dash/getComplaint")
                //     .success($scope.renderComplaints);
                break;
            case 10:
                $scope.clearFilter(3);
                break;
            case 11:
                $scope.renderLeaveReport();
                break;
            case 12:
                // $http.get("/dash/getAllPjp")
                //     .success($scope.renderPjp);
                //
                // $http.get("/dash/pjp/get/beats")
                //     .success($scope.renderPjpBeat);
                break;
            case 28:
                break;
            case 31:
                $http.get("/dash/supplier")
                    .success($scope.renderSupplier);
                break;
            case 32:
                // purchaseordersearchObj.viewLength = 0;
                // purchaseordersearchObj.viewBy = initialViewBy;
                // purchaseordersearchObj.from_date = 0;
                // purchaseordersearchObj.to_date = 0;
                // purchaseordersearchObj.filter = '';
                // purchaseordersearchObj.searchFor = '';
                //searchObj.searchBy = getColumnName();
                // $scope.filterStatusSelect = '';
                // $scope.PurchaseOrderSearch.date_to = '';
                // $scope.PurchaseOrderSearch.date_from = '';
                // $scope.viewLength = 0;
                // $scope.PurchaseOrderSearch.filter = '';
                // $scope.newViewBy = localViewBy;
                // $scope.purchaseOrder = [];
                // $http.post("/dash/purchase/orders/count", purchaseordersearchObj)
                //     .success(function(res){
                //
                //         $scope.transactionCount(res,32);
                //     });
                // $http.post("/dash/purchase/orders")
                //     .success($scope.renderPurchaseOrders);
                //$scope.showPurchaseOrderFilter = false;
                break;
            case 34:
                break;
            //user refresh
            case 35:
                $scope.clearFilter(5);
                break;
            case 36:
                // bidHistorySearchObj.viewLength = 0;
                // bidHistorySearchObj.viewBy = bidHistoryinitialViewBy;
                // bidHistorySearchObj.searchFor = '';
                // bidHistorySearchObj.seller = '';
                // bidHistorySearchObj.stockist = '';
                // bidHistorySearchObj.searchBy = [];
                // $http.post("/dash/items", bidHistorySearchObj)
                //     .success(function(res){
                //         $scope.renderBidHistory(res);
                //     });
                // $http.post("/dash/item/count", bidHistorySearchObj)
                //     .success(function(res) {
                //         $scope.transactionCount(res,35);
                //     });
                //
                // $http.get("/dash/items").success(function (result) {
                //     console.log(result);
                //     $scope.bidhistory = result;
                // })
                // $http.get("/dash/bids").success(function (result) {
                //     console.log(result)
                //     $scope.Bidshistorydetails = result;
                // })
                break;
            case 37:
                break;
            case 38:
                break;
            // B&B invenetory refresh
            case 39:
                break;
                // Asset refresh
            case 40:
                $scope.assets=[];
                assetObj.viewLength = 0;
                assetObj.viewBy =  initialViewBy;
                assetObj.searchFor = '';
                assetObj.searchBy = [];
                assetObj.filter = '';
                $scope.assetSearch.filter = '';
                $scope.miscellaneousReceipt.location = 'All';
                //1s$scope.inventoryStatusSelect = 'all'
                $http.post('/dash/asset/view',assetObj).success(function(res){
                    $scope.assets = res;
                }).catch(function(err){
                    console.log(err)
                })
                $http.post('/dash/asset/count',assetObj)
                    .success(function(response){
                        //console.log(response)
                        $scope.transactionCount(response,39)
                    });
                break;
            // Asset transaction refresh
            case 41:
                $scope.assetTransaction=[];
                assetObj.viewLength = 0;
                assetObj.viewBy =  initialViewBy;
                assetObj.searchFor = '';
                assetObj.searchBy = [];
                assetObj.filter = '';
                $scope.assetSearch.filter = '';
                $scope.miscellaneousReceipt.location = 'All';
                //1s$scope.inventoryStatusSelect = 'all'
                $http.post('/dash/getAsset/transactionHistory',assetObj).success(function(res){
                    $scope.assetTransaction = res;
                }).catch(function(err){
                    console.log(err)
                })
                $http.post('/dash/asset/transactionHistory/count',assetObj)
                    .success(function(response){
                        //console.log(response)
                        $scope.transactionCount(response,40)
                    });
                break;
        }
        setTimeout(function(){
            $('.refresh').css("display", "none");
        }, 2000);
    }
    //Auto Refresh for Bidhistory
    $scope.refreshBidhistory = function(tab) {
        // $http.get("/dash/items").success(function (result) {
        //
        //     $scope.bidhistory = result;
        //
        //     if(bidRefreshData){
        //         var RemarksRefreshFlag = angular.copy($scope.displayremarks);
        //         var BidHistoryFlag = angular.copy($scope.showBidhistory);
        //         var BidEditedDetailsFlag = angular.copy($scope.editBidsVehicleflag);
        //         $scope.getBidDetails(bidRefreshData);
        //         $scope.displayremarks = RemarksRefreshFlag;
        //         $scope.showBidhistory = BidHistoryFlag;
        //         $scope.editBidsVehicleflag = BidEditedDetailsFlag;
        //         if(!$scope.bidhistory_count){
        //             $scope.showBidhistory=false;
        //         }
        //     }
        //     if(RefreshMap){
        //         $scope.renderBidHistoryMap(RefreshMap);
        //         // $scope.getOneHighestBid();
        //         $scope.getOneHighestBid(HighestBidRefresh)
        //     }
        //
        // })
    }
    /*---Add new order methods ---*/
    //add new order
    $scope.newOrderVisibility = true;
    var MIN_ORDER = 1;
    var MIN_QUOTATION=0;
    var DOESNT_EXIST = -1;
    //Catalogue to cart
    $scope.CTOCT = 1;
    //Cart to catalogue
    $scope.CTTOC = 2;
    $scope.calculateQuotationIGST = false;
    $scope.calculateIGST = false;
    $scope.states = ['Andhra Pradesh', 'Arunachal Pradesh', 'Assam', 'Bihar', 'Chandigarh', 'New Delhi', 'Goa', 'Gujarat', 'Haryana', 'Himachal Pradesh', 'Jammu & Kashmir', 'Karnataka', 'Kerala', 'Madhya Pradesh', 'Maharashtra', 'Manipur', 'Meghalaya', 'Mizoram', 'Nagaland', 'Orissa', 'Punjab', 'Puducherry', 'Rajasthan', 'Sikkim', 'Tamil Nadu', 'Tripura', 'Uttar Pradesh', 'West Bengal', 'Chhattisgarh', 'Uttarakhand', 'Jharkhand', 'Telangana'];
    $scope.quotationstates = ['Andhra Pradesh', 'Arunachal Pradesh', 'Assam', 'Bihar', 'Chandigarh', 'New Delhi', 'Goa', 'Gujarat', 'Haryana', 'Himachal Pradesh', 'Jammu & Kashmir', 'Karnataka', 'Kerala', 'Madhya Pradesh', 'Maharashtra', 'Manipur', 'Meghalaya', 'Mizoram', 'Nagaland', 'Orissa', 'Punjab', 'Puducherry', 'Rajasthan', 'Sikkim', 'Tamil Nadu', 'Tripura', 'Uttar Pradesh', 'West Bengal', 'Chhattisgarh', 'Uttarakhand', 'Jharkhand', 'Telangana'];
    //Function to see if order already exists in the list.
    // $scope.doesItemExistsInCart = function (objectList, key, object) {
    //     for (var i = 0; i < objectList.length; i++) {
    //         if (objectList[i].itemDetails[key] === object[key]) {
    //             return i;
    //         }
    //     }
    //     return -1;
    // }//End of function doesItemExistsInCart
    //Function to see if order already exists in the list.
    // $scope.doesItemExistsInArray = function (objectList, key, object) {
    //     for (var i = 0; i < objectList.length; i++) {
    //         if (objectList[i][key] === object[key]) {
    //             return i;
    //         }
    //     }
    //     return -1;
    // }//End of function doesItemExistsInArray
    var current_customer_code = '';
    var current_site_code = '';
    $scope.invoice_order = [];
    // $scope.createInvoice = function(order){
    //     console.log("Add order id : " + order.orderId + " to the invoice creation list");
    //     $scope.create_invoice = [];
    //     $scope.invoice_details.total = 0;
    //     $scope.invoice_details.total_quantity = 0;
    //     $scope.invoice_details.invoice_date = new Date();
    //     $scope.invoiceTax = {};
    //     var total = 0;
    //     $http.get("/dash/orders/" + order.orderId)
    //         .success(function(details){
    //             console.log(details);
    //             for(var i = 0; i < details.length; i++){
    //                 if(details[i].lineStatus == 'closed' && !details[i].invoice_number){
    //                     if(details[i].transaction_id){
    //                         (function(i){
    //                             //console.log(i);
    //                             $http.get("/dash/inventory/transaction/details/" + details[i].transaction_id)
    //                                 .success(function(transaction){
    //                                     if(transaction.transaction_id){
    //                                         for(var k = 0; k < transaction.items.length; k++){
    //                                             if(transaction.items[k].itemCode+"" == details[i].itemcode+""){
    //                                                 if(transaction.items[k].quantity < details[i].quantity)
    //                                                     details[i].quantity = transaction.items[k].quantity;
    //                                                 details[i].quantity = details[i].issuedQty > 0 ? details[i].issuedQty : details[i].quantity;
    //                                                 if(details[i].duration && details[i].orderMRP && details[i].quantity){
    //                                                     total += details[i].duration * parseInt(details[i].quantity) * parseFloat(details[i].orderMRP);
    //                                                     if(details[i].siteCode){
    //                                                         for(var j = 0; j < $scope.allShippingAddress.length; j++){
    //                                                             if(($scope.allShippingAddress[j].siteCode == details[i].siteCode) && ($scope.allShippingAddress[j].Dealercode+"" == details[i].dealercode+"")){
    //                                                                 //console.log($scope.allShippingAddress[j]);
    //                                                                 details[i].siteName = $scope.allShippingAddress[j].siteName;
    //                                                                 details[i].siteAddress = $scope.allShippingAddress[j].siteAddress;
    //                                                                 break;
    //                                                             }
    //                                                         }
    //                                                     }
    //                                                     $scope.invoice_details.total_quantity += details[i].quantity;
    //                                                     details[i].invoice_date = $scope.invoice_details.invoice_date;
    //                                                     $scope.invoice_details.total = total;
    //                                                     $scope.create_invoice.push(details[i]);
    //                                                 }
    //                                                 // else{
    //                                                 //     total += Number(details[i].orderTotal);
    //                                                 //   if(details[i].siteCode){
    //                                                 //         for(var j = 0; j < $scope.allShippingAddress.length; j++){
    //                                                 //
    //                                                 //               if(($scope.allShippingAddress[j].siteCode == details[i].siteCode) && ($scope.allShippingAddress[j].Dealercode+"" == details[i].dealercode+"")){
    //                                                 //                 //console.log($scope.allShippingAddress[j]);
    //                                                 //                 details[i].siteName = $scope.allShippingAddress[j].siteName;
    //                                                 //                 details[i].siteAddress = $scope.allShippingAddress[j].siteAddress;
    //                                                 //                 break;
    //                                                 //             }
    //                                                 //         }
    //                                                 //     }
    //                                                 //
    //                                                 //     $scope.invoice_details.total_quantity += details[i].quantity;
    //                                                 //     details[i].invoice_date = $scope.invoice_details.invoice_date;
    //                                                 //     $scope.invoice_details.total = total;
    //                                                 //     $scope.create_invoice.push(details[i]);
    //                                                 // }
    //                                             }
    //                                         }
    //                                     }
    //                                 })
    //                         })(i);
    //                     }
    //                 }
    //             }
    //             for(var i=0; i< $scope.tax.length; i++){
    //                 if($scope.tax[i].default){
    //                     $scope.invoiceTax = $scope.tax[i];
    //                     $scope.invoice_details.cgst = $scope.tax[i].cgst;
    //                     $scope.invoice_details.sgst = $scope.tax[i].sgst;
    //                     $scope.invoice_details.igst = $scope.tax[i].igst;
    //                 }
    //             }
    //             current_customer_code = order.dealercode[0];
    //             current_site_code = order.siteCode[0];
    //         });
    // };
    // $scope.printInvoice = function(id){
    //     if(masterDealers.length == 0){
    //         $http.get("/dash/stores/sorted")
    //             .success(function(res){
    //                 //console.log(res);
    //                 masterDealers = res;
    //                 showInvoice();
    //             })
    //     }
    //     else{
    //         showInvoice();
    //     }
    //     function showInvoice(){
    //         if(id){
    //             $http.get("/dash/invoice-details/" + id)
    //                 .success(function(orders){
    //                     if(orders.length){
    //                         console.log(orders);
    //                         for(var i = 0; i < orders.length; i++){
    //                             if(orders[i].siteCode){
    //                                 for(var j = 0; j < $scope.allShippingAddress.length; j++){
    //                                     if(($scope.allShippingAddress[j].siteCode == orders[i].siteCode) &&
    //                                         ((Number($scope.allShippingAddress[j].Dealercode) == Number(orders[i].dealercode)) || ($scope.allShippingAddress[j].Dealercode+"" == orders[i].dealercode+""))
    //                                     ){
    //                                         orders[i].siteName = $scope.allShippingAddress[j].siteName;
    //                                         orders[i].siteAddress = $scope.allShippingAddress[j].siteAddress;
    //                                         break;
    //                                     }
    //                                 }
    //                             }
    //                             (function(i){
    //                                 if(orders[i].transaction_id){
    //                                     $http.get("/dash/inventory/transaction/details/" + orders[i].transaction_id)
    //                                         .success(function (transaction) {
    //                                             for (var k = 0; k < transaction.items.length; k++) {
    //                                                 if(transaction.items[k].itemCode+"" == orders[i].itemcode+"") {
    //                                                     if (transaction.items[k].quantity < orders[i].quantity)
    //                                                         orders[i].quantity = transaction.items[k].quantity;
    //                                                 }
    //                                             }
    //                                             $scope.invoiceDetails = orders;
    //                                         })
    //                                 }
    //                             })(i);
    //                         };
    //                         $scope.invoiceDetails = orders;
    //                         jQuery.noConflict();
    //                         $("#invoiceConfirm").modal('show');
    //                     }
    //                 })
    //         }
    //     }
    // };
    // $scope.addOtherOrders = function(){
    //     $scope.filtered_customers_invoice = [];
    //     var body = {
    //         'dealercode' : current_customer_code,
    //         'siteCode' : current_site_code
    //     };
    //     $http.post("/dash/order/lines", body)
    //         .success(function(response){
    //             if($scope.create_invoice.length){
    //                 for(var i = 0; i < response.length; i++){
    //                     for(var j = 0; j < $scope.create_invoice.length; j++){
    //                         if(!response[i].invoice_number && response[i].transaction_id){
    //                             if(response[i].fromDate){
    //                                 var stdate = new Date(response[i].fromDate);
    //                                 var today = new Date();
    //                                 if(stdate < today){
    //                                     if(response[i]._id == $scope.create_invoice[j]._id){
    //                                         break;
    //                                     }else{
    //                                         if(j == $scope.create_invoice.length - 1)
    //                                             $scope.filtered_customers_invoice.push(response[i]);
    //                                     }
    //                                 }
    //                             }
    //                         }
    //                     }
    //                 }
    //             }else{
    //                 for(var i = 0; i < response.length; i++){
    //                     if(!response[i].invoice_number && response[i].transaction_id){
    //                         if(response[i].fromDate) {
    //                             var stdate = new Date(response[i].fromDate);
    //                             var today = new Date();
    //                             if(stdate < today){
    //                                 $scope.filtered_customers_invoice.push(response[i]);
    //                             }
    //                         }
    //                     }
    //                 }
    //             }
    //         });
    //     jQuery.noConflict();
    //     $("#addToInvoiceModal").modal('show');
    //     $scope.invoice_order = [];
    // };
    $scope.Integer = function(num) { return parseInt(num)};
    // $scope.selectAllOrdersForInvoice = function(flag){
    //     $scope.invoice_order = [];
    //     if(flag){
    //         if($scope.filtered_customers_invoice.length){
    //             for(var i=0; i< $scope.filtered_customers_invoice.length; i++){
    //                 $scope.invoice_order[i] = true;
    //             }
    //         }
    //     }
    // }
    // $scope.allSelectOrdersForInvoice = function(flag){
    //     $scope.counts = 0;
    //     for(var i=0; i< $scope.translated_transactions.length; i++){
    //         $scope.translated_transactions[i].select = false;
    //         $scope.showBtn = false;
    //     }
    //     $scope.ordersInvoiceSelAll = [];
    //     if(flag){
    //         if($scope.translated_transactions.length){
    //             for(var i=0; i< $scope.translated_transactions.length; i++){
    //                 if(!$scope.translated_transactions[i].invoiceNo){
    //                     $scope.translated_transactions[i].select = true;
    //                     $scope.showBtn = true;
    //                     $scope.counts++;
    //                 }
    //             }
    //         }
    //     }
    // }
    // $scope.invoiceAdditional = {};
    // $scope.confirmAddToInvoice = function(selectAll){
    //     $scope.invoiceAdditional = {};
    //     for(var i = 0; i < $scope.filtered_customers_invoice.length; i++){
    //         (function(i){
    //             if($scope.invoice_order[i]){
    //                 $scope.filtered_customers_invoice[i].invoice_date = new Date();
    //                 $scope.filtered_customers_invoice[i]['toDate'] = $scope.filtered_customers_invoice[i]['toDate']+"";
    //                 var end_date = moment($scope.filtered_customers_invoice[i]['toDate']);
    //                 var start_date = moment($scope.filtered_customers_invoice[i].fromDate);
    //                 var duration = end_date.diff(start_date, 'days');
    //                 $scope.filtered_customers_invoice[i].duration = duration + 1;
    //                 (function(i){
    //                     $http.get("/dash/inventory/transaction/details/" + $scope.filtered_customers_invoice[i].transaction_id)
    //                         .success(function(transaction){
    //                             for(var k = 0; k < transaction.items.length; k++){
    //                                 if(transaction.items[k].itemCode+"" == $scope.filtered_customers_invoice[i].itemcode+""){
    //                                     //.... If the issued quantity is less than the ordered quantity....
    //                                     //.... Then add the issued quantity inplace of the ordered quantity...
    //                                     if(transaction.items[k].quantity < $scope.filtered_customers_invoice[i].quantity)
    //                                         $scope.filtered_customers_invoice[i].quantity = transaction.items[k].quantity;
    //                                     $scope.filtered_customers_invoice[i].quantity = ($scope.filtered_customers_invoice[i].issuedQty != '' ? $scope.filtered_customers_invoice[i].issuedQty : $scope.filtered_customers_invoice[i].quantity);
    //                                     if($scope.filtered_customers_invoice[i].duration && $scope.filtered_customers_invoice[i].orderMRP && $scope.filtered_customers_invoice[i].quantity){
    //                                         $scope.invoice_details.total += $scope.filtered_customers_invoice[i].duration * parseInt($scope.filtered_customers_invoice[i].quantity) * parseFloat($scope.filtered_customers_invoice[i].orderMRP);
    //                                         if($scope.filtered_customers_invoice[i].siteCode){
    //                                             for(var j = 0; j < $scope.allShippingAddress.length; j++){
    //                                                 if(($scope.allShippingAddress[j].siteCode == $scope.filtered_customers_invoice[i].siteCode) &&
    //                                                     ($scope.allShippingAddress[j].Dealercode+'' == $scope.filtered_customers_invoice[i].dealercode+'')
    //                                                 ){
    //                                                     $scope.filtered_customers_invoice[i].siteName = $scope.allShippingAddress[j].siteName;
    //                                                     $scope.filtered_customers_invoice[i].siteAddress = $scope.allShippingAddress[j].siteAddress;
    //                                                     break;
    //                                                 }
    //                                             }
    //                                         }
    //                                         $scope.create_invoice.push($scope.filtered_customers_invoice[i]);
    //                                     }
    //                                     if(i == $scope.filtered_customers_invoice.length-1){
    //                                         $scope.invoice_order = [];
    //                                     }
    //                                 }else{
    //                                     if(i == $scope.filtered_customers_invoice.length-1){
    //                                         $scope.invoice_order = [];
    //                                     }
    //                                 }
    //                             }
    //                         })
    //                 })(i);
    //             }
    //         })(i);
    //     }
    //     console.log($scope.create_invoice);
    //     jQuery.noConflict();
    //     $("#invoiceModal").modal('show');
    // };
    // $scope.confirmInovice = function(){
    //     console.log("Confirm Invoice")
    //     if($scope.create_invoice.length){
    //         bootbox.confirm({
    //             title: "Click Yes to confirm creating invoice",
    //             message: "Are you sure?",
    //             buttons: {
    //                 confirm: {
    //                     label: 'Yes',
    //                     className: 'btn-success'
    //                 },
    //                 cancel: {
    //                     label: 'No',
    //                     className: 'btn-danger'
    //                 }
    //             },
    //             callback: function (result) {
    //                 if (result) {
    //                     jQuery.noConflict();
    //                     $("#invoiceModal").modal('hide');
    //                     var body = {};
    //                     body.items = $scope.create_invoice;
    //                     body.invoice_date = new Date();
    //                     body.invoice_amount = $scope.invoice_details.total;
    //                     body.additionalComment = $scope.invoiceAdditional.comment ? $scope.invoiceAdditional.comment : '';
    //                     body.additionalAmount = $scope.invoiceAdditional.cost ? $scope.invoiceAdditional.cost : 0;
    //                     body.discount = $scope.invoiceAdditional.discount ? Number($scope.invoiceAdditional.discount) : 0;
    //                     body.cgst = $scope.invoice_details.cgst;
    //                     body.sgst = $scope.invoice_details.sgst;
    //                     body.igst = $scope.invoice_details.igst;
    //                     $scope.generateInvoiceNumber(function(id){
    //                         body.invoice_number = id;
    //                         $http.put("/dash/invoice-details/update/bbfw", body)
    //                             .success(function(response){
    //                                 $scope.invoiceDetails = [];
    //                                 for(var i = 0; i < $scope.create_invoice.length; i++){
    //                                     $scope.create_invoice[i].invoice_date = body.invoice_date;
    //                                     $scope.create_invoice[i].invoice_amount = body.invoice_amount;
    //                                     $scope.create_invoice[i].invoice_number = body.invoice_number;
    //                                     $scope.create_invoice[i].additionalComment = body.additionalComment;
    //                                     $scope.create_invoice[i].additionalCharges = body.additionalAmount;
    //                                     $scope.create_invoice[i].discount = body.discount;
    //                                     $scope.create_invoice[i].cgst = body.cgst;
    //                                     $scope.create_invoice[i].sgst = body.sgst;
    //                                     $scope.create_invoice[i].igst = body.igst;
    //                                     $scope.invoiceDetails.push($scope.create_invoice[i]);
    //                                 }
    //                                 jQuery.noConflict();
    //                                 $("#invoiceConfirm").modal('show');
    //                             })
    //                     });
    //                 }
    //             }
    //         })
    //     }else{
    //         bootbox.alert("No Record(s) available for creating invoice");
    //     }
    // };
    // $scope.getIssuedQty = function(transactionId, itemCode){
    //     for(var i = 0 ; i < $scope.order_transactions.length; i++){
    //         if($scope.order_transactions[i].transaction_id == transactionId){
    //             if($scope.order_transactions[i].items){
    //                 for(var j = 0; j < $scope.order_transactions[i].items.length; j++){
    //                     if($scope.order_transactions[i].items[j].itemCode == itemCode){
    //                         return $scope.order_transactions[i].items[j].quantity;
    //                     }
    //                 }
    //             }else{
    //                 for(var j = 0; j < $scope.order_transactions[i].items.length; j++){
    //                     if($scope.order_transactions[i].transaction[j].itemCode == itemCode){
    //                         return $scope.order_transactions[i].transaction[j].quantity;
    //                     }
    //                 }
    //             }
    //         }
    //     }
    // };
    // $scope.getReceivedQty = function(transactionId, receiveId, itemCode){
    //     for(var i = 0; i < $scope.order_transactions.length; i++){
    //         if($scope.order_transactions[i].transaction_id == transactionId){
    //             for(var j = 0; j < $scope.order_transactions[i].receive_details.length; j++){
    //                 if($scope.order_transactions[i].receive_details[j].receive_id == receiveId){
    //                     for(var k = 0; k < $scope.order_transactions[i].receive_details[j].items.length; k++){
    //                         if($scope.order_transactions[i].receive_details[j].items[k].itemCode == itemCode){
    //                             return $scope.order_transactions[i].receive_details[j].items[k].quantity;
    //                         }
    //                     }
    //                 }
    //             }
    //         }
    //     }
    // };
    // //Function to invoke an alert message
    // $scope.alertMsg = function(alertType, alertHeading, alertMessage){
    //     return	$modal.open({
    //         templateUrl: 'alert.html',
    //         controller: "alertController",
    //         resolve: {
    //             alertMessage: function(){ return alertMessage; },
    //             alertHeading: function(){ return alertHeading; },
    //             alertType: 	  function(){ return alertType; }
    //         }
    //     });
    // };//End of function alert Message
    // $scope.toggleAddOrder = function(){
    //     if(!$scope.newOrderVisibility)
    //         $scope.newOrderVisibility = 'visible';
    //     else
    //         $scope.newOrderVisibility = '';
    //     //$scope.$apply();
    // }
    // //clear Shipping Address
    // $scope.clearShippingAddress = function(){
    //     $scope.data.tempName = '';
    //     $scope.data.tempnewOrderShipping_address = '';
    //     $scope.data.tempCity = '';
    //     $scope.data.tempState = '';
    //     $scope.editShippingAddress.flag = true
    // }
    //New Order Shipping Address for edit
    // $scope.changeInShippingAddress = function( )
    // {
    //     //console.log($scope.data);
    //     if( !$scope.data.tempnewOrderShipping_address){
    //         bootbox.alert("Enter a valid Address");
    //         return;
    //     }else if(!$scope.data.tempState){
    //         bootbox.alert("Choose a valid State");
    //         return;
    //     }else if(!$scope.data.tempCity){
    //         bootbox.alert("Enter a valid City");
    //         return;
    //     }else if(!$scope.data.tempName){
    //         bootbox.alert("Enter a valid Address Name");
    //         return;
    //     }
    //     //console.log($scope.data);
    //     for(var i=0 ; i < $scope.shipping_addresses.length; i++){
    //         console.log($scope.shipping_addresses[i].AddressName);
    //         if($scope.data.tempName == $scope.shipping_addresses[i].AddressName){
    //             bootbox.alert("Address Name already exists. Please choose a different Name");
    //             return;
    //         }
    //     }
    //     if($scope.data.newOrderStore.StockistState && $scope.data.tempState){
    //         if($scope.data.newOrderStore.StockistState != $scope.data.tempState)
    //             $scope.calculateIGST = true;
    //         else
    //             $scope.calculateIGST = false;
    //     }else $scope.calculateIGST = false;
    //     $scope.data.newOrderShipping_address = $scope.data.tempnewOrderShipping_address ;
    //     $scope.data.shippingAddress = $scope.data.tempName;
    //     //console.log($scope.data.newOrderStore);
    //     if($scope.data.newOrderStore.Dealercode){
    //         var temp = new Date().getTime();
    //         var Id = 'ID'+temp;
    //         var newAddress = {
    //             'Dealercode' : $scope.data.newOrderStore.Dealercode,
    //             'AddressName' : $scope.data.tempName,
    //             'Address' : $scope.data.tempnewOrderShipping_address,
    //             'City' : $scope.data.tempCity,
    //             'State' : $scope.data.tempState,
    //             'Id': Id
    //         }
    //         console.log(newAddress);
    //         $scope.shipping_addresses.push(newAddress);
    //         $scope.data.shippingAddress = newAddress;
    //         //POST New shipping address to mongo..
    //         $http.post("/dash/new-address", newAddress)
    //             .success(function(response){
    //                 $scope.mapAddress = false;
    //                 $scope.editShippingAddress.flag = false;
    //                 toastr.success("New address "+$scope.data.tempName+" added successfully")
    //                 console.log("New Shipping Address is added to the list ------>");
    //             })
    //     }else
    //         bootbox.alert("Please select a Customer from the search above");
    // }//End of function changeInShippingAddress
    // $scope.changeInpurchaseShippingAddress = function( )
    // {
    //     if( !$scope.data.tempnewpurchaseOrderShipping_address){
    //         bootbox.alert("Enter a valid Address");
    //         return;
    //     }else if(!$scope.data.tempState){
    //         bootbox.alert("Choose a valid State");
    //         return;
    //     }else if(!$scope.data.tempCity){
    //         bootbox.alert("Enter a valid City");
    //         return;
    //     }else if(!$scope.data.tempName){
    //         bootbox.alert("Enter a valid Address Name");
    //         return;
    //     }
    //     //console.log($scope.data);
    //     for(var i=0 ; i < $scope.shipping_addresses.length; i++){
    //         console.log($scope.shipping_addresses[i].AddressName);
    //         if($scope.data.tempName == $scope.shipping_addresses[i].AddressName){
    //             bootbox.alert("Address Name already exists. Please choose a different Name");
    //             return;
    //         }
    //     }
    //     if($scope.data.newPurchaseOrderSuppliers.StockistState && $scope.data.tempState){
    //         if($scope.data.newPurchaseOrderSuppliers.StockistState != $scope.data.tempState)
    //             $scope.calculateIGST = true;
    //         else
    //             $scope.calculateIGST = false;
    //     }else $scope.calculateIGST = false;
    //     $scope.data.newpurchaseOrderShipping_address = $scope.data.tempnewpurchaseOrderShipping_address + ", " + $scope.data.tempCity + ", " + $scope.data.tempState;
    //     //console.log($scope.data.newOrderStore);
    //     if($scope.data.newPurchaseOrderSuppliers.SupplierCode){
    //         var newAddress = {
    //             'Suppliercode' : $scope.data.newPurchaseOrderSuppliers.SupplierCode,
    //             'AddressName' : $scope.data.tempName,
    //             'Address' : $scope.data.tempnewpurchaseOrderShipping_address,
    //             'City' : $scope.data.tempCity,
    //             'State' : $scope.data.tempState,
    //             'Stockist' : $scope.data.newPurchaseOrderSuppliers.Stockist,
    //             'Stockistname' : $scope.data.newPurchaseOrderSuppliers.StockistName,
    //         }
    //         $scope.shipping_addresses.push(newAddress);
    //         //POST New shipping address to mongo..
    //         $http.post("/dash/new-purchaseorderaddress", newAddress)
    //             .success(function(response){
    //             })
    //     }else
    //         bootbox.alert("Please select a Customer from the search above");
    // }
    //End of function changeInShippingAddress
    /* $scope.convertToOrder = function (quotationObject) {
     console.log(quotationObject)
     bootbox.confirm("Are you sure?", function(result){
     if(result){
     $http.post("/dash/converttoorder/" +quotationObject)
     .success(function (response) {
     console.log(response)
     })
     }
     })
     }*/
    //Change in any of the items calls for change in total amount of order
    // $scope.$watch('newQuotationItemList', function(){
    //     // $scope.newQuotationTotalAmount = $scope.newQuotationItemList.reduce( function(a, b){
    //     //     if(!b.itemDetails.CGST)b.itemDetails.CGST=0;
    //     //     if(!b.itemDetails.SGST) b.itemDetails.SGST= 0;
    //     //     if(!b.itemDetails.IGST) b.itemDetails.IGST = 0;
    //     //     //console.log(b.itemDetails.MRP +""+b.itemDetails.CGST+""+b.quantity)
    //     //     if($scope.calculateQuotationIGST)
    //     //         return a + ((b.itemDetails.MRP +(b.itemDetails.MRP * (b.itemDetails.IGST/100))) * (b.quantity));
    //     //     else
    //     //         return a + ((b.itemDetails.MRP +((b.itemDetails.MRP * (b.itemDetails.CGST/100))+(b.itemDetails.MRP *(b.itemDetails.SGST/100)))) * (b.quantity));
    //     // }, $scope.data.newOrderfreight);
    //     // console.log($scope.newOrderItemList)
    //     $scope.newQuotationTaxAmount = 0;
    //     $scope.newQuotationExcTaxAmount = 0;
    //     $scope.quotationTotalQuantity = 0;
    //     $scope.newQuotationTotalAmount = 0;
    //     var gst = 0;
    //     if($scope.newQuotationItemList){
    //         for(var i=0; i<$scope.newQuotationItemList.length; i++){
    //             if(!$scope.newQuotationItemList[i].itemDetails.CGST) $scope.newQuotationItemList[i].itemDetails.CGST=0;
    //             if(!$scope.newQuotationItemList[i].itemDetails.SGST) $scope.newQuotationItemList[i].itemDetails.SGST=0;
    //             if(!$scope.newQuotationItemList[i].itemDetails.IGST) $scope.newQuotationItemList[i].itemDetails.IGST=0;
    //             if($scope.calculateQuotationIGST)
    //                 $scope.newQuotationTotalAmount += (($scope.newQuotationItemList[i].itemDetails.MRP +($scope.newQuotationItemList[i].itemDetails.MRP * ($scope.newQuotationItemList[i].itemDetails.IGST/100))) * ($scope.newQuotationItemList[i].quantity));
    //             else
    //                 $scope.newQuotationTotalAmount += (($scope.newQuotationItemList[i].itemDetails.MRP +(($scope.newQuotationItemList[i].itemDetails.MRP * ($scope.newQuotationItemList[i].itemDetails.CGST/100))+($scope.newQuotationItemList[i].itemDetails.MRP *($scope.newQuotationItemList[i].itemDetails.SGST/100)))) * ($scope.newQuotationItemList[i].quantity))
    //             gst +=  (parseFloat($scope.newQuotationItemList[i].CGST/100) * parseFloat($scope.newQuotationItemList[i].itemDetails.MRP)) * Number($scope.newQuotationItemList[i].quantity) + (parseFloat($scope.newQuotationItemList[i].SGST/100) * parseFloat($scope.newQuotationItemList[i].itemDetails.MRP)) * Number($scope.newQuotationItemList[i].quantity) + (parseFloat($scope.newQuotationItemList[i].IGST/100) * parseFloat($scope.newQuotationItemList[i].itemDetails.MRP)) * Number($scope.newQuotationItemList[i].quantity);
    //             var quotation_orderTotal = Number($scope.newQuotationItemList[i].quantity) * (parseFloat($scope.newQuotationItemList[i].itemDetails.MRP) - (parseFloat($scope.newQuotationItemList[i].itemDetails.MRP) * ($scope.getItemsDiscount($scope.newQuotationItemList[i].itemDetails.itemcode) / 100)));
    //             $scope.newQuotationExcTaxAmount +=   quotation_orderTotal
    //         }
    //     }
    //     if($scope.newQuotationItemList){
    //         $scope.quotationTotalQuantity = $scope.newQuotationItemList.length;
    //     }
    // }, true);
    // $scope.quotationTaxtotal = function(){
    //     $scope.quotationGST = {};
    //     $scope.quotationGST.CSGSTTotal = 0;
    //     $scope.quotationGST.SGSTTotal = 0;
    //     $scope.quotationGST.IGSTTotal = 0;
    //     $scope.quotationGST.listTotal = [];
    //     $scope.quotationGST.orderTotal = [];
    //     $scope.quotationGST.Quantity = 0;
    //     //console.log($scope.newOrderItemList)
    //     for(var i=0;i<$scope.newQuotationItemList.length;i++){
    //         $scope.quotationGST.CSGSTTotal += (parseFloat($scope.newQuotationItemList[i].CGST/100) * parseFloat($scope.newQuotationItemList[i].itemDetails.MRP)) * Number($scope.newQuotationItemList[i].quantity) ;
    //         $scope.quotationGST.SGSTTotal += (parseFloat($scope.newQuotationItemList[i].SGST/100) * parseFloat($scope.newQuotationItemList[i].itemDetails.MRP)) * Number($scope.newQuotationItemList[i].quantity) ;
    //         $scope.quotationGST.IGSTTotal += (parseFloat($scope.newQuotationItemList[i].IGST/100) * parseFloat($scope.newQuotationItemList[i].itemDetails.MRP)) * Number($scope.newQuotationItemList[i].quantity) ;
    //         $scope.quotationGST.listTotal[i] = Number($scope.newQuotationItemList[i].quantity) * (parseFloat($scope.newQuotationItemList[i].itemDetails.MRP) - (parseFloat($scope.newQuotationItemList[i].itemDetails.MRP) * ($scope.getItemsDiscount($scope.newQuotationItemList[i].itemDetails.itemcode) / 100)));
    //         $scope.quotationGST.orderTotal[i] = Number($scope.newQuotationItemList[i].quantity) * (parseFloat($scope.newQuotationItemList[i].itemDetails.MRP) - (parseFloat($scope.newQuotationItemList[i].itemDetails.MRP) * ($scope.getItemsDiscount($scope.newQuotationItemList[i].itemDetails.itemcode) / 100)));
    //         $scope.quotationGST.Quantity += Number($scope.newQuotationItemList[i].quantity);
    //     }
    // }
    // $scope.$watch('data.newQuotationfreight', function(){
    //
    //     //remove the old freight charges from the total amount
    //     $scope.newQuotationTotalAmount -= $scope.data.oldQuotationfreight;
    //
    //     //update the total amount
    //     $scope.newQuotationTotalAmount += $scope.data.newQuotationfreight;
    //
    //     //Now new will be old during next change if at all
    //     $scope.data.oldQuotationfreight = $scope.data.newQuotationfreight;
    //
    // });
    // $scope.updateQuotationBillingAddress = function(newStoreUpdated){
    //     var tempOldQuotationBillingAddress = $scope.data.newQuotationBilling_address;
    //     //Display the Billing address - Store address is the billing address
    //     $scope.data.newQuotationBilling_address =  newStoreUpdated.Address;
    //     if(	tempOldQuotationBillingAddress !== $scope.data.newQuotationShipping_address
    //         &&	$scope.data.newQuotationShipping_address != ""
    //         && 	typeof $scope.data.newQuotationShipping_address != "undefined" )
    //     {
    //         var confirmChange =
    //             confirm("You have edited shipping address different from billing address.\n" +
    //                 "Want to retain it ? Now you have changed Store ") ;
    //         if(confirmChange) return;
    //     }
    //     //Ask for shipping address - Its better to take it from html than prompt may be
    //     $scope.data.newQuotationShipping_address  = $scope.data.newQuotationBilling_address;
    // };
    // //New Quotation Shipping Address for edit
    // $scope.changeInQuotationShippingAddress = function( )
    // {
    //     //console.log($scope.data);
    //     if( !$scope.data.tempnewQuotationShipping_address){
    //         bootbox.alert("Enter a valid Address");
    //         return;
    //     }else if(!$scope.data.quotationtempState){
    //         bootbox.alert("Choose a valid State");
    //         return;
    //     }else if(!$scope.data.quotationtempCity){
    //         bootbox.alert("Enter a valid City");
    //         return;
    //     }else if(!$scope.data.quotationtempName){
    //         bootbox.alert("Enter a valid Address Name");
    //         return;
    //     }
    //     //console.log($scope.data);
    //     for(var i=0 ; i < $scope.shipping_addresses.length; i++){
    //         console.log($scope.shipping_addresses[i].AddressName);
    //         if($scope.data.tempName == $scope.shipping_addresses[i].AddressName){
    //             bootbox.alert("Address Name already exists. Please choose a different Name");
    //             return;
    //         }
    //     }
    //     if($scope.data.newQuotationStore.StockistState && $scope.data.quotationtempState){
    //         if($scope.data.newQuotationStore.StockistState != $scope.data.quotationtempState)
    //             $scope.calculateQuotationIGST = true;
    //         else
    //             $scope.calculateQuotationIGST = false;
    //     }else $scope.calculateQuotationIGST = false;
    //     $scope.data.newQuotationShipping_address = $scope.data.tempnewQuotationShipping_address + ", " + $scope.data.quotationtempCity + ", " + $scope.data.quotationtempState;
    //     //console.log($scope.data.newOrderStore);
    //     if($scope.data.newQuotationStore.Dealercode){
    //         var newAddress = {
    //             'Dealercode' : $scope.data.newQuotationStore.Dealercode,
    //             'AddressName' : $scope.data.quotationtempName,
    //             'Address' : $scope.data.tempnewQuotationShipping_address,
    //             'City' : $scope.data.quotationtempCity,
    //             'State' : $scope.data.quotationtempState
    //         }
    //         console.log(newAddress);
    //         $scope.quotationshipping_addresses.push(newAddress);
    //         //POST New shipping address to mongo..
    //         $http.post("/dash/new-address", newAddress)
    //             .success(function(response){
    //                 console.log("New Shipping Address is added to the list ------>");
    //             })
    //     }else
    //         bootbox.alert("Please select a Customer from the search above");
    // }//End of function changeInQuotationShippingAddress
    //function to display address such that each , comma separated portions are displayed on
    //different lines
    $scope.getAddress = function( address ){   return address.replace(/,/g, ',\n'); 	}
    $scope.discountCalculate = function(arg){
        $scope.discountMrp =  Number($scope.newOrderMRPTotalAmount) - (Number($scope.newOrderMRPTotalAmount) * Number(arg) / 100);
    }
    //Change in any of the items calls for change in total amount of order
    // $scope.$watch('newOrderItemList', function () {
    //     $scope.newOrderTaxAmount = {};
    //     $scope.newOrderTaxAmount.totalTax = 0;
    //     $scope.newOrderTaxAmount.totalCGST = 0;
    //     $scope.newOrderTaxAmount.totalSGST = 0;
    //     $scope.newOrderTaxAmount.totalIGST = 0;
    //     $scope.newOrderExcTaxAmount = 0;
    //     $scope.newOrderTotalAmount = 0;
    //     $scope.newOrderMRPTotalAmount = 0;
    //     $scope.newOrderTaxAmount.totalOtherTaxes = [];
    //     $scope.newOrderOtherTaxesNames = [];
    //     var totalOtherTaxes = [];
    //     if ($scope.tempCountryName == 'ghana') {
    //         // $scope.nhil = (orderTotal * tax.nhil)/100;
    //         for (var i = 0; i < $scope.newOrderItemList.length; i++) {
    //             if ($scope.data.newOrderStore.customerVariant == 'bulk' && $scope.newOrderItemList[i].itemDetails.BulkPrice) {
    //                 var cgst = 0;
    //                 var sgst = 0;
    //                 var igst = 0;
    //                 cgst = $scope.newOrderItemList[i].CGST;
    //                 sgst = $scope.newOrderItemList[i].SGST;
    //                 igst = $scope.newOrderItemList[i].IGST;
    //                 var mrp = parseFloat($scope.newOrderItemList[i].itemDetails.MRP);
    //                 var BulkPrice = parseFloat($scope.newOrderItemList[i].itemDetails.BulkPrice);
    //                 var taxableMrp = parseFloat(BulkPrice / (100 + cgst + sgst + igst) * 100);
    //                 var listTexableMrp = parseFloat(mrp);
    //                 if ($scope.taxExclusive) {
    //                     var taxableMrp = parseFloat(BulkPrice);
    //                 } else {
    //                     var taxableMrp = parseFloat(BulkPrice / (100 + cgst + sgst + igst) * 100);
    //                 }
    //                 if ($scope.calculateIGST) {
    //                     $scope.newOrderMRPTotalAmount += ((taxableMrp + (taxableMrp * (igst / 100))) * ($scope.newOrderItemList[i].quantity));
    //                     $scope.newOrderTotalAmount += ((listTexableMrp ) * ($scope.newOrderItemList[i].quantity));
    //                 }
    //                 else {
    //                     $scope.newOrderMRPTotalAmount += ((taxableMrp + ( (taxableMrp * (cgst / 100)) + (taxableMrp * (sgst / 100)) + (taxableMrp * (igst / 100)))) * ($scope.newOrderItemList[i].quantity));
    //                     $scope.newOrderTotalAmount += ((listTexableMrp ) * ($scope.newOrderItemList[i].quantity));
    //                 }
    //                 $scope.newOrderTaxAmount.totalTax += (parseFloat(cgst / 100) * taxableMrp) * Number($scope.newOrderItemList[i].quantity) + (parseFloat(sgst / 100) * taxableMrp) * Number($scope.newOrderItemList[i].quantity) + (parseFloat(igst / 100) * taxableMrp) * Number($scope.newOrderItemList[i].quantity);
    //                 $scope.newOrderTaxAmount.totalCGST += (parseFloat(cgst / 100) * taxableMrp) * Number($scope.newOrderItemList[i].quantity);
    //                 $scope.newOrderTaxAmount.totalSGST += (parseFloat(sgst / 100) * taxableMrp) * Number($scope.newOrderItemList[i].quantity);
    //                 $scope.newOrderTaxAmount.totalIGST += (parseFloat(igst / 100) * taxableMrp) * Number($scope.newOrderItemList[i].quantity);
    //                 $scope.orderTotal = Number($scope.newOrderItemList[i].quantity) * taxableMrp;
    //                 $scope.newOrderExcTaxAmount += $scope.orderTotal;
    //             } else {
    //                 if (!$scope.taxSetups.otherSetup) {
    //                     var cgst = 0;
    //                     var sgst = 0;
    //                     var igst = 0;
    //                     cgst = $scope.newOrderItemList[i].CGST;
    //                     sgst = $scope.newOrderItemList[i].SGST;
    //                     igst = $scope.newOrderItemList[i].IGST;
    //                     var mrp = parseFloat($scope.newOrderItemList[i].itemDetails.MRP);
    //                     var orderMrp = parseFloat($scope.newOrderItemList[i].itemDetails.orderMRP);
    //                     var taxableMrp = parseFloat(orderMrp / (100 + cgst + sgst + igst) * 100);
    //                     var listTexableMrp = parseFloat(mrp);
    //                     if ($scope.taxExclusive) {
    //                         var taxableMrp = parseFloat(orderMrp);
    //                     } else {
    //                         var taxableMrp = parseFloat(orderMrp / (100 + cgst + sgst + igst) * 100);
    //                     }
    //                     if ($scope.calculateIGST) {
    //                         $scope.newOrderMRPTotalAmount += ((taxableMrp + (taxableMrp * (igst / 100))) * ($scope.newOrderItemList[i].quantity));
    //                         $scope.newOrderTotalAmount += ((listTexableMrp ) * ($scope.newOrderItemList[i].quantity));
    //                     }
    //                     else {
    //                         $scope.newOrderMRPTotalAmount += ((taxableMrp + ( (taxableMrp * (cgst / 100)) + (taxableMrp * (sgst / 100)) + (taxableMrp * (igst / 100)))) * ($scope.newOrderItemList[i].quantity));
    //                         $scope.newOrderTotalAmount += ((listTexableMrp ) * ($scope.newOrderItemList[i].quantity));
    //                     }
    //                     $scope.newOrderTaxAmount.totalTax += (parseFloat(cgst / 100) * taxableMrp) * Number($scope.newOrderItemList[i].quantity) + (parseFloat(sgst / 100) * taxableMrp) * Number($scope.newOrderItemList[i].quantity) + (parseFloat(igst / 100) * taxableMrp) * Number($scope.newOrderItemList[i].quantity);
    //                     $scope.newOrderTaxAmount.totalCGST += (parseFloat(cgst / 100) * taxableMrp) * Number($scope.newOrderItemList[i].quantity);
    //                     $scope.newOrderTaxAmount.totalSGST += (parseFloat(sgst / 100) * taxableMrp) * Number($scope.newOrderItemList[i].quantity);
    //                     $scope.newOrderTaxAmount.totalIGST += (parseFloat(igst / 100) * taxableMrp) * Number($scope.newOrderItemList[i].quantity);
    //                     $scope.orderTotal = Number($scope.newOrderItemList[i].quantity) * taxableMrp;
    //                     $scope.newOrderExcTaxAmount += $scope.orderTotal;
    //                 } else if ($scope.newOrderItemList[i].otherTaxes && $scope.newOrderItemList[i].otherTaxes.length) {
    //                     var sumOfTax = 0;
    //                     if (!$scope.newOrderOtherTaxesNames.length && $scope.newOrderItemList[i].otherTaxes) {
    //                         $scope.newOrderOtherTaxesNames = $scope.newOrderItemList[i].otherTaxes;
    //                     }
    //                     for (var j = 0; j < $scope.newOrderItemList[i].otherTaxes.length; j++) {
    //                         sumOfTax += $scope.newOrderItemList[i].otherTaxes[j].value;
    //                     }
    //                     // cgst = $scope.newOrderItemList[i].CGST;
    //                     // sgst = $scope.newOrderItemList[i].SGST;
    //                     // igst = $scope.newOrderItemList[i].IGST;
    //                     var mrp = parseFloat($scope.newOrderItemList[i].itemDetails.MRP);
    //                     var orderMrp = parseFloat($scope.newOrderItemList[i].itemDetails.orderMRP);
    //                     var taxableMrp = parseFloat(orderMrp / (100 + sumOfTax) * 100);
    //                     var listTexableMrp = parseFloat(mrp / (100 + sumOfTax) * 100);
    //                     if ($scope.taxExclusive) {
    //                         var taxableMrp = parseFloat(orderMrp);
    //                     } else {
    //                         var taxableMrp = parseFloat(orderMrp / (100 + sumOfTax) * 100);
    //                     }
    //                     if ($scope.calculateIGST) {
    //                         $scope.newOrderMRPTotalAmount += ((taxableMrp + (taxableMrp * (igst / 100))) * ($scope.newOrderItemList[i].quantity));
    //                         $scope.newOrderTotalAmount += ((listTexableMrp + (mrp * (igst / 100))) * ($scope.newOrderItemList[i].quantity));
    //                     }
    //                     else {
    //                         var sumOftaxableMrp = 0;
    //                         var sumOflistTexableMrp = 0;
    //                         var totalTax = 0;
    //                         if ($scope.newOrderItemList[i].itemDetails.otherTaxes) {
    //                             for (var j = 0; j < $scope.newOrderItemList[i].itemDetails.otherTaxes.length; j++) {
    //                                 sumOftaxableMrp += (taxableMrp * ($scope.newOrderItemList[i].itemDetails.otherTaxes[j].value / 100));
    //                                 sumOflistTexableMrp += (listTexableMrp * ($scope.newOrderItemList[i].itemDetails.otherTaxes[j].value / 100))
    //                                 $scope.newOrderTaxAmount.totalTax += (parseFloat($scope.newOrderItemList[i].itemDetails.otherTaxes[j].value / 100) * taxableMrp) * Number($scope.newOrderItemList[i].quantity);
    //                                 if (!totalOtherTaxes[$scope.newOrderItemList[i].itemDetails.otherTaxes[j].name])
    //                                     totalOtherTaxes[$scope.newOrderItemList[i].itemDetails.otherTaxes[j].name] = 0;
    //                                 totalOtherTaxes[$scope.newOrderItemList[i].itemDetails.otherTaxes[j].name] += (parseFloat($scope.newOrderItemList[i].itemDetails.otherTaxes[j].value / 100) * taxableMrp) * Number($scope.newOrderItemList[i].quantity);
    //                                 $scope.newOrderTaxAmount.totalOtherTaxes[$scope.newOrderItemList[i].itemDetails.otherTaxes[j].name] = totalOtherTaxes[$scope.newOrderItemList[i].itemDetails.otherTaxes[j].name];
    //                             }
    //                         } else {
    //                             for (var j = 0; j < $scope.newOrderItemList[i].otherTaxes.length; j++) {
    //                                 sumOftaxableMrp += (taxableMrp * ($scope.newOrderItemList[i].otherTaxes[j].value / 100));
    //                                 sumOflistTexableMrp += (listTexableMrp * ($scope.newOrderItemList[i].otherTaxes[j].value / 100))
    //                                 $scope.newOrderTaxAmount.totalTax += (parseFloat($scope.newOrderItemList[i].otherTaxes[j].value / 100) * taxableMrp) * Number($scope.newOrderItemList[i].quantity);
    //                                 if (!totalOtherTaxes[$scope.newOrderItemList[i].otherTaxes[j].name])
    //                                     totalOtherTaxes[$scope.newOrderItemList[i].otherTaxes[j].name] = 0;
    //                                 totalOtherTaxes[$scope.newOrderItemList[i].otherTaxes[j].name] += (parseFloat($scope.newOrderItemList[i].otherTaxes[j].value / 100) * taxableMrp) * Number($scope.newOrderItemList[i].quantity);
    //                                 $scope.newOrderTaxAmount.totalOtherTaxes[$scope.newOrderItemList[i].otherTaxes[j].name] = totalOtherTaxes[$scope.newOrderItemList[i].otherTaxes[j].name];
    //                             }
    //                         }
    //                         $scope.newOrderMRPTotalAmount += ((taxableMrp + sumOftaxableMrp  ) * ($scope.newOrderItemList[i].quantity));
    //                         $scope.newOrderTotalAmount += ((listTexableMrp + sumOflistTexableMrp ) * ($scope.newOrderItemList[i].quantity));
    //                     }
    //                     $scope.orderTotal = Number($scope.newOrderItemList[i].quantity) * taxableMrp;
    //                     $scope.newOrderExcTaxAmount += $scope.orderTotal;
    //                 }
    //             }
    //         }
    //     } else {
    //         for (var i = 0; i < $scope.newOrderItemList.length; i++) {
    //             if ($scope.data.newOrderStore.customerVariant == 'bulk' && $scope.newOrderItemList[i].itemDetails.BulkPrice) {
    //                 var cgst = 0;
    //                 var sgst = 0;
    //                 var igst = 0;
    //                 cgst = $scope.newOrderItemList[i].CGST;
    //                 sgst = $scope.newOrderItemList[i].SGST;
    //                 igst = $scope.newOrderItemList[i].IGST;
    //                 var mrp = parseFloat($scope.newOrderItemList[i].itemDetails.MRP);
    //                 var BulkPrice = parseFloat($scope.newOrderItemList[i].itemDetails.BulkPrice);
    //                 var taxableMrp = parseFloat(BulkPrice / (100 + cgst + sgst + igst) * 100);
    //                 var listTexableMrp = parseFloat(mrp / (100 + cgst + sgst + igst) * 100);
    //                 if ($scope.taxExclusive) {
    //                     var taxableMrp = parseFloat(BulkPrice);
    //                 } else {
    //                     var taxableMrp = parseFloat(BulkPrice / (100 + cgst + sgst + igst) * 100);
    //                 }
    //                 if ($scope.calculateIGST) {
    //                     $scope.newOrderMRPTotalAmount += ((taxableMrp + (taxableMrp * (igst / 100))) * ($scope.newOrderItemList[i].quantity));
    //                     $scope.newOrderTotalAmount += ((listTexableMrp + (mrp * (igst / 100))) * ($scope.newOrderItemList[i].quantity));
    //                 }
    //                 else {
    //                     $scope.newOrderMRPTotalAmount += ((taxableMrp + ( (taxableMrp * (cgst / 100)) + (taxableMrp * (sgst / 100)))) * ($scope.newOrderItemList[i].quantity));
    //                     $scope.newOrderTotalAmount += ((listTexableMrp + ( (listTexableMrp * (cgst / 100)) + (listTexableMrp * (sgst / 100)))) * ($scope.newOrderItemList[i].quantity));
    //                 }
    //                 $scope.newOrderTaxAmount.totalTax += (parseFloat(cgst / 100) * taxableMrp) * Number($scope.newOrderItemList[i].quantity) + (parseFloat(sgst / 100) * taxableMrp) * Number($scope.newOrderItemList[i].quantity) + (parseFloat(igst / 100) * taxableMrp) * Number($scope.newOrderItemList[i].quantity);
    //                 $scope.newOrderTaxAmount.totalCGST += (parseFloat(cgst / 100) * taxableMrp) * Number($scope.newOrderItemList[i].quantity);
    //                 $scope.newOrderTaxAmount.totalSGST += (parseFloat(sgst / 100) * taxableMrp) * Number($scope.newOrderItemList[i].quantity);
    //                 $scope.newOrderTaxAmount.totalIGST += (parseFloat(igst / 100) * taxableMrp) * Number($scope.newOrderItemList[i].quantity);
    //                 $scope.orderTotal = Number($scope.newOrderItemList[i].quantity) * taxableMrp;
    //                 $scope.newOrderExcTaxAmount += $scope.orderTotal;
    //             } else {
    //                 if (!$scope.taxSetups.otherSetup) {
    //                     var cgst = 0;
    //                     var sgst = 0;
    //                     var igst = 0;
    //                     cgst = $scope.newOrderItemList[i].CGST;
    //                     sgst = $scope.newOrderItemList[i].SGST;
    //                     igst = $scope.newOrderItemList[i].IGST;
    //                     var mrp = parseFloat($scope.newOrderItemList[i].itemDetails.MRP);
    //                     var orderMrp = parseFloat($scope.newOrderItemList[i].itemDetails.orderMRP);
    //                     var taxableMrp = parseFloat(orderMrp / (100 + cgst + sgst + igst) * 100);
    //                     var listTexableMrp = parseFloat(mrp / (100 + cgst + sgst + igst) * 100);
    //                     if ($scope.taxExclusive) {
    //                         var taxableMrp = parseFloat(orderMrp);
    //                     } else {
    //                         var taxableMrp = parseFloat(orderMrp / (100 + cgst + sgst + igst) * 100);
    //                     }
    //                     if ($scope.calculateIGST) {
    //                         $scope.newOrderMRPTotalAmount += ((taxableMrp + (taxableMrp * (igst / 100))) * ($scope.newOrderItemList[i].quantity));
    //                         $scope.newOrderTotalAmount += ((listTexableMrp + (mrp * (igst / 100))) * ($scope.newOrderItemList[i].quantity));
    //                     }
    //                     else {
    //                         $scope.newOrderMRPTotalAmount += ((taxableMrp + ( (taxableMrp * (cgst / 100)) + (taxableMrp * (sgst / 100)))) * ($scope.newOrderItemList[i].quantity));
    //                         $scope.newOrderTotalAmount += ((listTexableMrp + ( (listTexableMrp * (cgst / 100)) + (listTexableMrp * (sgst / 100)))) * ($scope.newOrderItemList[i].quantity));
    //                     }
    //                     $scope.newOrderTaxAmount.totalTax += (parseFloat(cgst / 100) * taxableMrp) * Number($scope.newOrderItemList[i].quantity) + (parseFloat(sgst / 100) * taxableMrp) * Number($scope.newOrderItemList[i].quantity) + (parseFloat(igst / 100) * taxableMrp) * Number($scope.newOrderItemList[i].quantity);
    //                     $scope.newOrderTaxAmount.totalCGST += (parseFloat(cgst / 100) * taxableMrp) * Number($scope.newOrderItemList[i].quantity);
    //                     $scope.newOrderTaxAmount.totalSGST += (parseFloat(sgst / 100) * taxableMrp) * Number($scope.newOrderItemList[i].quantity);
    //                     $scope.newOrderTaxAmount.totalIGST += (parseFloat(igst / 100) * taxableMrp) * Number($scope.newOrderItemList[i].quantity);
    //                     $scope.orderTotal = Number($scope.newOrderItemList[i].quantity) * taxableMrp;
    //                     $scope.newOrderExcTaxAmount += $scope.orderTotal;
    //                 } else if ($scope.newOrderItemList[i].otherTaxes && $scope.newOrderItemList[i].otherTaxes.length) {
    //                     var sumOfTax = 0;
    //                     if (!$scope.newOrderOtherTaxesNames.length && $scope.newOrderItemList[i].otherTaxes) {
    //                         $scope.newOrderOtherTaxesNames = $scope.newOrderItemList[i].otherTaxes;
    //                     }
    //                     for (var j = 0; j < $scope.newOrderItemList[i].otherTaxes.length; j++) {
    //                         sumOfTax += $scope.newOrderItemList[i].otherTaxes[j].value;
    //                     }
    //                     var mrp = parseFloat($scope.newOrderItemList[i].itemDetails.MRP);
    //                     var orderMrp = parseFloat($scope.newOrderItemList[i].itemDetails.orderMRP);
    //                     var taxableMrp = parseFloat(orderMrp / (100 + sumOfTax) * 100);
    //                     var listTexableMrp = parseFloat(mrp / (100 + sumOfTax) * 100);
    //                     if ($scope.taxExclusive) {
    //                         var taxableMrp = parseFloat(orderMrp);
    //                     } else {
    //                         var taxableMrp = parseFloat(orderMrp / (100 + sumOfTax) * 100);
    //                     }
    //                     if ($scope.calculateIGST) {
    //                         $scope.newOrderMRPTotalAmount += ((taxableMrp + (taxableMrp * (igst / 100))) * ($scope.newOrderItemList[i].quantity));
    //                         $scope.newOrderTotalAmount += ((listTexableMrp + (mrp * (igst / 100))) * ($scope.newOrderItemList[i].quantity));
    //                     }
    //                     else {
    //                         var sumOftaxableMrp = 0;
    //                         var sumOflistTexableMrp = 0;
    //                         var totalTax = 0;
    //                         if ($scope.newOrderItemList[i].itemDetails.otherTaxes) {
    //                             for (var j = 0; j < $scope.newOrderItemList[i].itemDetails.otherTaxes.length; j++) {
    //                                 sumOftaxableMrp += (taxableMrp * ($scope.newOrderItemList[i].itemDetails.otherTaxes[j].value / 100));
    //                                 sumOflistTexableMrp += (listTexableMrp * ($scope.newOrderItemList[i].itemDetails.otherTaxes[j].value / 100))
    //                                 $scope.newOrderTaxAmount.totalTax += (parseFloat($scope.newOrderItemList[i].itemDetails.otherTaxes[j].value / 100) * taxableMrp) * Number($scope.newOrderItemList[i].quantity);
    //                                 if (!totalOtherTaxes[$scope.newOrderItemList[i].itemDetails.otherTaxes[j].name])
    //                                     totalOtherTaxes[$scope.newOrderItemList[i].itemDetails.otherTaxes[j].name] = 0;
    //                                 totalOtherTaxes[$scope.newOrderItemList[i].itemDetails.otherTaxes[j].name] += (parseFloat($scope.newOrderItemList[i].itemDetails.otherTaxes[j].value / 100) * taxableMrp) * Number($scope.newOrderItemList[i].quantity);
    //                                 $scope.newOrderTaxAmount.totalOtherTaxes[$scope.newOrderItemList[i].itemDetails.otherTaxes[j].name] = totalOtherTaxes[$scope.newOrderItemList[i].itemDetails.otherTaxes[j].name];
    //                             }
    //                         } else {
    //                             for (var j = 0; j < $scope.newOrderItemList[i].otherTaxes.length; j++) {
    //                                 sumOftaxableMrp += (taxableMrp * ($scope.newOrderItemList[i].otherTaxes[j].value / 100));
    //                                 sumOflistTexableMrp += (listTexableMrp * ($scope.newOrderItemList[i].otherTaxes[j].value / 100))
    //                                 $scope.newOrderTaxAmount.totalTax += (parseFloat($scope.newOrderItemList[i].otherTaxes[j].value / 100) * taxableMrp) * Number($scope.newOrderItemList[i].quantity);
    //                                 if (!totalOtherTaxes[$scope.newOrderItemList[i].otherTaxes[j].name])
    //                                     totalOtherTaxes[$scope.newOrderItemList[i].otherTaxes[j].name] = 0;
    //                                 totalOtherTaxes[$scope.newOrderItemList[i].otherTaxes[j].name] += (parseFloat($scope.newOrderItemList[i].otherTaxes[j].value / 100) * taxableMrp) * Number($scope.newOrderItemList[i].quantity);
    //                                 $scope.newOrderTaxAmount.totalOtherTaxes[$scope.newOrderItemList[i].otherTaxes[j].name] = totalOtherTaxes[$scope.newOrderItemList[i].otherTaxes[j].name];
    //                             }
    //                         }
    //                         $scope.newOrderMRPTotalAmount += ((taxableMrp + sumOftaxableMrp  ) * ($scope.newOrderItemList[i].quantity));
    //                         $scope.newOrderTotalAmount += ((listTexableMrp + sumOflistTexableMrp ) * ($scope.newOrderItemList[i].quantity));
    //                     }
    //                     $scope.orderTotal = Number($scope.newOrderItemList[i].quantity) * taxableMrp;
    //                     $scope.newOrderExcTaxAmount += $scope.orderTotal;
    //                 }
    //             }
    //         }
    //     }
    //     $scope.discountCalculate($scope.posDiscount.value);
    //     // if($scope.data.newOrderfreight ){
    //     // $scope.newOrderMRPTotalAmount += $scope.data.newOrderfreight;
    //     // }
    // }, true);
    //Change in any of the items calls for change in total amount of purchaseorder
    // $scope.$watch('newPurchaseOrderItemList', function(){
    //     $scope.newPurchaseOrderTaxAmount = {};
    //     $scope.newPurchaseOrderTaxAmount.totalTax = 0;
    //     $scope.newPurchaseOrderTaxAmount.totalCGST = 0;
    //     $scope.newPurchaseOrderTaxAmount.totalSGST = 0;
    //     $scope.newPurchaseOrderTaxAmount.totalIGST = 0;
    //     $scope.newPurchaseOrderExcTaxAmount = 0;
    //     $scope.newPurchaseOrderTotalAmount = 0;
    //     $scope.newPurchaseOrderMRPTotalAmount = 0;
    //     $scope.data.newPurchaseOrderfreight=0;
    //     if($scope.newPurchaseOrderItemList){
    //         for(var i=0; i<$scope.newPurchaseOrderItemList.length; i++){
    //             var cgst = 0;
    //             var sgst = 0;
    //             var igst = 0;
    //             cgst = $scope.newPurchaseOrderItemList[i].CGST;
    //             sgst = $scope.newPurchaseOrderItemList[i].SGST;
    //             igst = $scope.newPurchaseOrderItemList[i].IGST;
    //             var mrp = parseFloat($scope.newPurchaseOrderItemList[i].itemDetails.MRP);
    //             var orderMrp = parseFloat($scope.newPurchaseOrderItemList[i].itemDetails.orderMRP);
    //             var taxableMrp = parseFloat(orderMrp / (100 + cgst + sgst + igst) * 100);
    //             var listTexableMrp = parseFloat(mrp / (100 + cgst + sgst + igst)* 100);
    //             if($scope.calculateIGST){
    //                 $scope.newPurchaseOrderMRPTotalAmount += ((taxableMrp +(taxableMrp * (igst/100))) * ($scope.newPurchaseOrderItemList[i].quantity));
    //                 $scope.newPurchaseOrderTotalAmount += ((listTexableMrp +(mrp * (igst/100))) * ($scope.newPurchaseOrderItemList[i].quantity));
    //             }
    //             else{
    //                 $scope.newPurchaseOrderMRPTotalAmount += ((taxableMrp +( (taxableMrp * (cgst/100)) + (taxableMrp *(sgst/100)))) * ($scope.newPurchaseOrderItemList[i].quantity));
    //                 console.log("checking order total 22222222222.......");
    //                 console.log($scope.newPurchaseOrderMRPTotalAmount);
    //                 $scope.newPurchaseOrderTotalAmount += ((listTexableMrp +( (listTexableMrp * (cgst/100)) + (listTexableMrp *(sgst/100)))) * ($scope.newPurchaseOrderItemList[i].quantity));
    //                 console.log("checking tax newPurchaseOrderMRPTotalAmount ......");
    //                 console.log("checking order total ......");
    //                 console.log(Number($scope.newPurchaseOrderItemList[i].quantity) * taxableMrp);
    //                 console.log($scope.newPurchaseOrderMRPTotalAmount);
    //                 console.log($scope.newPurchaseOrderTotalAmount);
    //             }
    //             $scope.newPurchaseOrderTaxAmount.totalTax +=  (parseFloat(cgst/100) * taxableMrp) * Number($scope.newPurchaseOrderItemList[i].quantity) + (parseFloat(sgst/100) * taxableMrp) * Number($scope.newPurchaseOrderItemList[i].quantity) + (parseFloat(igst/100) * taxableMrp) * Number($scope.newPurchaseOrderItemList[i].quantity);
    //             $scope.newPurchaseOrderTaxAmount.totalCGST += (parseFloat(cgst/100) * taxableMrp) * Number($scope.newPurchaseOrderItemList[i].quantity);
    //             $scope.newPurchaseOrderTaxAmount.totalSGST += (parseFloat(sgst/100) * taxableMrp) * Number($scope.newPurchaseOrderItemList[i].quantity);
    //             $scope.newPurchaseOrderTaxAmount.totalIGST += (parseFloat(igst/100) * taxableMrp) * Number($scope.newPurchaseOrderItemList[i].quantity);
    //             $scope.orderTotal = Number($scope.newPurchaseOrderItemList[i].quantity) * taxableMrp;
    //             $scope.newPurchaseOrderExcTaxAmount += $scope.orderTotal;
    //         }
    //     }
    //     $scope.newPurchaseOrderMRPTotalAmount += $scope.data.newPurchaseOrderfreight;
    // }, true);
    $scope.Taxtotal = function(){
        $scope.GST = {};
        $scope.otherTaxCal = {};
        $scope.otherTaxCal.otherTax = [];
        $scope.GST.CSGSTTotal = 0;
        $scope.GST.SGSTTotal = 0;
        $scope.GST.IGSTTotal = 0;
        $scope.GST.listTotal = [];
        $scope.GST.orderTotal = [];
        $scope.GST.Quantity = 0;
        $scope.GST.taxableValue = [];
        $scope.otherTaxCal.listTotal = [];
        $scope.otherTaxCal.Quantity = 0;
        $scope.otherTaxCal.orderTotal = [];
        $scope.otherTaxCal.taxableValue = [];
        $scope.otherTaxCal.otherTaxesTotal = [];
        $scope.otherTaxCal.taxSetup = $scope.taxSetups.otherSetup;
        //console.log($scope.newOrderItemList)
        for(var i=0;i<$scope.newOrderItemList.length;i++){
            var taxableValue = 0;
            if($scope.taxExclusive){
                if($scope.taxSetups.otherSetup == 'other'){
                    if($scope.data.newOrderStore.customerVariant == 'bulk' && $scope.newOrderItemList[i].itemDetails.BulkPrice){
                        taxableValue = parseFloat($scope.newOrderItemList[i].itemDetails.BulkPrice)
                        $scope.GST.orderTotal[i] = ( parseFloat($scope.newOrderItemList[i].itemDetails.BulkPrice)) +
                            (( $scope.newOrderItemList[i].CGST * $scope.newOrderItemList[i].itemDetails.BulkPrice)/100 + ($scope.newOrderItemList[i].SGST* $scope.newOrderItemList[i].itemDetails.BulkPrice)/100 + ($scope.newOrderItemList[i].IGST* $scope.newOrderItemList[i].itemDetails.BulkPrice)/100);
                        $scope.GST.orderTotal[i] = $scope.GST.orderTotal[i] * Number($scope.newOrderItemList[i].quantity);
                        $scope.GST.taxableValue[i] = Number($scope.newOrderItemList[i].itemDetails.BulkPrice) * Number($scope.newOrderItemList[i].quantity)
                    }else{
                        if($scope.newOrderItemList[i].itemDetails.otherTaxes && $scope.newOrderItemList[i].itemDetails.otherTaxes.length){
                            taxableValue = parseFloat($scope.newOrderItemList[i].itemDetails.orderMRP)
                           // taxableValue = taxableValue * Number($scope.newOrderItemList[i].quantity);
                            var otherTaxesCal = 0;
                            for(var j=0; j< $scope.newOrderItemList[i].itemDetails.otherTaxes.length; j++){
                                if(!$scope.otherTaxCal.otherTaxesTotal[$scope.newOrderItemList[i].itemDetails.otherTaxes[j].name])
                                    $scope.otherTaxCal.otherTaxesTotal[$scope.newOrderItemList[i].itemDetails.otherTaxes[j].name] = 0;
                                otherTaxesCal += (taxableValue * $scope.newOrderItemList[i].otherTaxes[j].value) / 100;
                                $scope.otherTaxCal.otherTaxesTotal[$scope.newOrderItemList[i].itemDetails.otherTaxes[j].name] += ((taxableValue * $scope.newOrderItemList[i].itemDetails.otherTaxes[j].value) / 100) * Number($scope.newOrderItemList[i].quantity);
                            }
                        }else{
                            taxableValue = parseFloat($scope.newOrderItemList[i].itemDetails.orderMRP)
                            //taxableValue = taxableValue * Number($scope.newOrderItemList[i].quantity);
                            var otherTaxesCal = 0;
                            for(var j=0; j< $scope.newOrderItemList[i].otherTaxes.length; j++){
                                if(!$scope.otherTaxCal.otherTaxesTotal[$scope.newOrderItemList[i].otherTaxes[j].name])
                                    $scope.otherTaxCal.otherTaxesTotal[$scope.newOrderItemList[i].otherTaxes[j].name] = 0;
                                otherTaxesCal += (taxableValue * $scope.newOrderItemList[i].otherTaxes[j].value) / 100;
                                $scope.otherTaxCal.otherTaxesTotal[$scope.newOrderItemList[i].otherTaxes[j].name] += ((taxableValue * $scope.newOrderItemList[i].otherTaxes[j].value) / 100) * Number($scope.newOrderItemList[i].quantity);
                            }
                        }
                        $scope.otherTaxCal.orderTotal[i] = (parseFloat($scope.newOrderItemList[i].itemDetails.orderMRP) + otherTaxesCal);
                        // $scope.GST.orderTotal[i] = ( parseFloat($scope.newOrderItemList[i].itemDetails.orderMRP)) +
                        //     (( $scope.newOrderItemList[i].CGST * $scope.newOrderItemList[i].itemDetails.orderMRP)/100 + ($scope.newOrderItemList[i].SGST* $scope.newOrderItemList[i].itemDetails.orderMRP)/100 + ($scope.newOrderItemList[i].IGST* $scope.newOrderItemList[i].itemDetails.orderMRP)/100);
                        $scope.otherTaxCal.orderTotal[i] = $scope.otherTaxCal.orderTotal[i] * Number($scope.newOrderItemList[i].quantity);
                        $scope.otherTaxCal.taxableValue[i] = Number($scope.newOrderItemList[i].itemDetails.orderMRP) * Number($scope.newOrderItemList[i].quantity)
                    }
                }else{
                if($scope.data.newOrderStore.customerVariant == 'bulk' && $scope.newOrderItemList[i].itemDetails.BulkPrice){
                    taxableValue = parseFloat($scope.newOrderItemList[i].itemDetails.BulkPrice)
                    $scope.GST.orderTotal[i] = ( parseFloat($scope.newOrderItemList[i].itemDetails.BulkPrice)) +
                        (( $scope.newOrderItemList[i].CGST * $scope.newOrderItemList[i].itemDetails.BulkPrice)/100 + ($scope.newOrderItemList[i].SGST* $scope.newOrderItemList[i].itemDetails.BulkPrice)/100 + ($scope.newOrderItemList[i].IGST* $scope.newOrderItemList[i].itemDetails.BulkPrice)/100);
                    $scope.GST.orderTotal[i] = $scope.GST.orderTotal[i] * Number($scope.newOrderItemList[i].quantity);
                    $scope.GST.taxableValue[i] = Number($scope.newOrderItemList[i].itemDetails.BulkPrice) * Number($scope.newOrderItemList[i].quantity)
                }else{
                    taxableValue = parseFloat($scope.newOrderItemList[i].itemDetails.orderMRP)
                    $scope.GST.orderTotal[i] = ( parseFloat($scope.newOrderItemList[i].itemDetails.orderMRP)) +
                        (( $scope.newOrderItemList[i].CGST * $scope.newOrderItemList[i].itemDetails.orderMRP)/100 + ($scope.newOrderItemList[i].SGST* $scope.newOrderItemList[i].itemDetails.orderMRP)/100 + ($scope.newOrderItemList[i].IGST* $scope.newOrderItemList[i].itemDetails.orderMRP)/100);
                    $scope.GST.orderTotal[i] = $scope.GST.orderTotal[i] * Number($scope.newOrderItemList[i].quantity);
                    $scope.GST.taxableValue[i] = Number($scope.newOrderItemList[i].itemDetails.orderMRP) * Number($scope.newOrderItemList[i].quantity)
                }
                }
            }else{
                if($scope.data.newOrderStore.customerVariant == 'bulk' && $scope.newOrderItemList[i].itemDetails.BulkPrice) {
                    taxableValue = parseFloat($scope.newOrderItemList[i].itemDetails.BulkPrice) / (100 + $scope.newOrderItemList[i].CGST + $scope.newOrderItemList[i].SGST + $scope.newOrderItemList[i].IGST) * 100;
                    $scope.GST.taxableValue[i] = Number(taxableValue) * Number($scope.newOrderItemList[i].quantity)
                    $scope.GST.orderTotal[i] = Number($scope.newOrderItemList[i].quantity) * parseFloat($scope.newOrderItemList[i].itemDetails.BulkPrice);
                }else{
                    if($scope.taxSetups.otherSetup != 'other'){
                    taxableValue = parseFloat($scope.newOrderItemList[i].itemDetails.orderMRP) / (100 + $scope.newOrderItemList[i].CGST + $scope.newOrderItemList[i].SGST + $scope.newOrderItemList[i].IGST) * 100;
                    $scope.GST.taxableValue[i] = Number(taxableValue) * Number($scope.newOrderItemList[i].quantity)
                    $scope.GST.orderTotal[i] = Number($scope.newOrderItemList[i].quantity) * parseFloat($scope.newOrderItemList[i].itemDetails.orderMRP);
                    }else if($scope.taxSetups.otherSetup == 'other'){
                        var otherTaxesValue = 0;
                        for(var j=0; j< $scope.newOrderItemList[i].otherTaxes.length; j++){
                            otherTaxesValue += $scope.newOrderItemList[i].otherTaxes[j].value;
                        }
                        taxableValue = parseFloat($scope.newOrderItemList[i].itemDetails.orderMRP) / (100 + otherTaxesValue) * 100;
                        $scope.otherTaxCal.taxableValue[i] = Number(taxableValue) * Number($scope.newOrderItemList[i].quantity)
                        $scope.otherTaxCal.orderTotal[i] = Number($scope.newOrderItemList[i].quantity) * parseFloat($scope.newOrderItemList[i].itemDetails.orderMRP);
                        var otherTaxesCal = 0;
                        taxableValue = taxableValue * Number($scope.newOrderItemList[i].quantity);
                        if($scope.newOrderItemList[i].itemDetails.otherTaxes && $scope.newOrderItemList[i].itemDetails.otherTaxes.length){
                            for(var j=0; j< $scope.newOrderItemList[i].itemDetails.otherTaxes.length; j++){
                                if(!$scope.otherTaxCal.otherTaxesTotal[$scope.newOrderItemList[i].itemDetails.otherTaxes[j].name])
                                    $scope.otherTaxCal.otherTaxesTotal[$scope.newOrderItemList[i].itemDetails.otherTaxes[j].name] = 0;
                                $scope.otherTaxCal.otherTaxesTotal[$scope.newOrderItemList[i].itemDetails.otherTaxes[j].name] += (taxableValue * $scope.newOrderItemList[i].itemDetails.otherTaxes[j].value) / 100;
                            }
                        }else if($scope.newOrderItemList[i].otherTaxes && $scope.newOrderItemList[i].otherTaxes.length){
                            for(var j=0; j< $scope.newOrderItemList[i].otherTaxes.length; j++){
                                if(!$scope.otherTaxCal.otherTaxesTotal[$scope.newOrderItemList[i].otherTaxes[j].name])
                                    $scope.otherTaxCal.otherTaxesTotal[$scope.newOrderItemList[i].otherTaxes[j].name] = 0;
                                $scope.otherTaxCal.otherTaxesTotal[$scope.newOrderItemList[i].otherTaxes[j].name] += (taxableValue * $scope.newOrderItemList[i].otherTaxes[j].value) / 100;
                            }
                        }
                    }
                }
            }
            $scope.GST.CSGSTTotal += (parseFloat($scope.newOrderItemList[i].CGST/100) * taxableValue) * Number($scope.newOrderItemList[i].quantity) ;
            $scope.GST.SGSTTotal += (parseFloat($scope.newOrderItemList[i].SGST/100) * taxableValue) * Number($scope.newOrderItemList[i].quantity) ;
            $scope.GST.IGSTTotal += (parseFloat($scope.newOrderItemList[i].IGST/100) * taxableValue) * Number($scope.newOrderItemList[i].quantity) ;
            $scope.GST.listTotal[i] = Number($scope.newOrderItemList[i].quantity) * (parseFloat($scope.newOrderItemList[i].itemDetails.MRP));
            $scope.GST.Quantity += Number($scope.newOrderItemList[i].quantity);
            $scope.otherTaxCal.listTotal[i] = Number($scope.newOrderItemList[i].quantity) * (parseFloat($scope.newOrderItemList[i].itemDetails.MRP));
            $scope.otherTaxCal.Quantity += Number($scope.newOrderItemList[i].quantity);
        }
    }
    //Purchase Taxtotal
    $scope.PurchaseOrderTaxtotal = function(){
        $scope.PurchaseOrderGST = {};
        $scope.PurchaseOrderGST.CSGSTTotal = 0;
        $scope.PurchaseOrderGST.SGSTTotal = 0;
        $scope.PurchaseOrderGST.IGSTTotal = 0;
        $scope.PurchaseOrderGST.listTotal = [];
        $scope.PurchaseOrderGST.orderTotal = [];
        $scope.PurchaseOrderGST.Quantity = 0;
        $scope.PurchaseOrderGST.taxableValue = [];
        //console.log($scope.newOrderItemList)
        for(var i=0;i<$scope.newPurchaseOrderItemList.length;i++){
            console.log($scope.newPurchaseOrderItemList[i])
            var taxableValue = parseFloat($scope.newPurchaseOrderItemList[i].itemDetails.orderMRP) / (100 + $scope.newPurchaseOrderItemList[i].CGST + $scope.newPurchaseOrderItemList[i].SGST + $scope.newPurchaseOrderItemList[i].IGST) * 100;
            $scope.PurchaseOrderGST.CSGSTTotal += (parseFloat($scope.newPurchaseOrderItemList[i].CGST/100) * taxableValue) * Number($scope.newPurchaseOrderItemList[i].quantity) ;
            $scope.PurchaseOrderGST.SGSTTotal += (parseFloat($scope.newPurchaseOrderItemList[i].SGST/100) * taxableValue) * Number($scope.newPurchaseOrderItemList[i].quantity) ;
            $scope.PurchaseOrderGST.IGSTTotal += (parseFloat($scope.newPurchaseOrderItemList[i].IGST/100) * taxableValue) * Number($scope.newPurchaseOrderItemList[i].quantity) ;
            $scope.PurchaseOrderGST.listTotal[i] = Number($scope.newPurchaseOrderItemList[i].quantity) * (parseFloat($scope.newPurchaseOrderItemList[i].itemDetails.MRP));
            $scope.PurchaseOrderGST.orderTotal[i] = Number($scope.newPurchaseOrderItemList[i].quantity) * parseFloat($scope.newPurchaseOrderItemList[i].itemDetails.orderMRP);
            $scope.PurchaseOrderGST.Quantity += Number($scope.newPurchaseOrderItemList[i].quantity);
            $scope.PurchaseOrderGST.taxableValue[i] = Number(taxableValue) * Number($scope.newPurchaseOrderItemList[i].quantity)
        }
    }
    // $scope.$watch('data.newOrderfreight', function(){
    //
    //     // //remove the old freight charges from the total amount
    //     // $scope.newOrderTotalAmount -= $scope.data.oldOrderfreight;
    //     // $scope.newOrderMRPTotalAmount -= $scope.data.oldOrderfreight;
    //     //
    //     // //update the total amount
    //     // $scope.newOrderTotalAmount += $scope.data.newOrderfreight;
    //     // $scope.newOrderMRPTotalAmount += $scope.data.newOrderfreight;
    //     //
    //     // //Now new will be old during next change if at all
    //     // $scope.data.oldOrderfreight = $scope.data.newOrderfreight;
    //
    // });
    //
    //
    // $scope.$watch('data.newPurchaseOrderfreight', function(){
    //
    //     // //remove the old freight charges from the total amount
    //     // $scope.newOrderTotalAmount -= $scope.data.oldOrderfreight;
    //     // $scope.newOrderMRPTotalAmount -= $scope.data.oldOrderfreight;
    //     //
    //     // //update the total amount
    //     // $scope.newOrderTotalAmount += $scope.data.data.newOrderfreight;
    //     // $scope.newOrderMRPTotalAmount += $scope.data.data.newOrderfreight;
    //     //
    //     // //Now new will be old during next change if at all
    //     // $scope.data.oldOrderfreight = $scope.data.data.newOrderfreight;
    //
    // });
    //When there is change in sales person , the store should be reinitialized
    //As each sales person has different set of stores under him
    $scope.salesPersonChange = function(newSalesPerson){
        $scope.data.newOrderStore = {};
    }//End of function salesPersonChange
    //Function to set the true/false vaue to displayAddItemOption
    $scope.displayAddItemOptionFunction = function(setToBoolValue){
        $scope.displayAddItemOption = setToBoolValue;
    }
    //Change in stores changes billing address and so does the shipping address
    //But if shipping address of order is different from billing address and is been edited by the user
    //it should be prompted to the user if he wants to retain his new edited shipping address,
    //or set to new billing address
    $scope.updateBillingAddress = function(newStoreUpdated){
        var tempOldBillingAddress = $scope.data.newOrderBilling_address;
        //Display the Billing address - Store address is the billing address
        $scope.data.newOrderBilling_address =  newStoreUpdated.Address;
        if(	tempOldBillingAddress !== $scope.data.newOrderShipping_address
            &&	$scope.data.newOrderShipping_address != ""
            && 	typeof $scope.data.newOrderShipping_address != "undefined" )
        {
            var confirmChange =
                confirm("You have edited shipping address different from billing address.\n" +
                    "Want to retain it ? Now you have changed Store ") ;
            if(confirmChange) return;
        }
        //Ask for shipping address - Its better to take it from html than prompt may be
        $scope.data.newOrderShipping_address  = $scope.data.newOrderBilling_address;
    };
    $scope.updatepurchaseOrderBillingAddress = function(newStoreUpdated){
        var tempOldBillingAddress = $scope.data.newPurchaseOrderBilling_address;
        //Display the Billing address - Store address is the billing address
        $scope.data.newPurchaseOrderBilling_address =  newStoreUpdated.Address;
        if(	tempOldBillingAddress !== $scope.data.newPurchaseOrderShipping_address
            &&	$scope.data.newPurchaseOrderShipping_address != ""
            && 	typeof $scope.data.newPurchaseOrderShipping_address != "undefined" )
        {
            var confirmChange =
                confirm("You have edited shipping address different from billing address.\n" +
                    "Want to retain it ? Now you have changed Store ") ;
            if(confirmChange) return;
        }
        //Ask for shipping address - Its better to take it from html than prompt may be
        $scope.data.newpurchaseOrderShipping_address  = $scope.data.newPurchaseOrderBilling_address;
    };
    //Function which is used to initialize new order, on clicking add order or even
    //to clear order click
    $scope.intitializeNewOrder = function(){
        //Some HTML Models to be reset
        $scope.data = 	{
            "newOrderSalesPerson": {},
            "newOrderStore": {},
            "newOrderBilling_address": "",
            "newOrderShipping_address": "",
            "newOrderFulfiller": "",
            "newOrderStatus": "New",
            "newOrderDateTime" : "",
            "newOrderDate": "",
            "newOrderId"   : "",
            "newOrderComment":"",
            "category" 	: "",
            "newOrderfreight": 0,
            "chequenum": "",
            "bankname": ""
        }
        //old order frieght need to stored , in case frieght charge changes
        //we need it to recalculate the value of total amount
        $scope.data.oldOrderfreight = $scope.data.newOrderfreight;
        //Need for editing the items entered
        $scope.newOrderItemEditing = [];
        $scope.newOrder = [];
        //For typeahead for store and sales person
        $scope.display = {};
        $scope.disableSalesPersonSelection = true;
        //With primitive type selectedStores, scope assignments in controllers
        // are not reflected on html, so make it into an object, now changes are reflected
        $scope.a = {};
        $scope.a.selectedStores = "";
        $scope.a.selectedSalesPerson = "";
        $scope.displayAddItemOption = false;  //to display item options to add item to order
        $scope.editShippingAddress = {};
        $scope.editShippingAddress.flag = false;
        $scope.tempnewOrderShipping_address = "";
        $scope.editpurchaseShippingAddress = false;
        $scope.tempnewpurchaseOrderShipping_address = "";
        $scope.newOrderItemList 		= [];
        $scope.newOrderItem 			= {
            itemDetails:{},
            quantity: 1,
            total: 0,
            MRP: 0,
            orderMRP:0,
            CGST:0,
            SGST:0,
            IGST: 0
        };
        $scope.newOrderTotalAmount = 0;
        $scope.newOrderMRPTotalAmount = 0;
        //Clear order should clear the catalogue displayed selections
        if($scope.itemsInModal)
            for(var i=0; i < $scope.itemsInModal.length; i++ )
            {
                $scope.itemsInModal[i].added = -1;
                $scope.itemsInModal[i].itemQuantity = '';
            }
        if($scope.user.role == 'Dealer'){
            console.log("Store assigned to Dealer user")
            $scope.a.selectedStores = newOrderSelectedStore;
            $scope.data.newOrderStore = newOrderSelectedStore;
            $scope.StoreSelectedFromTypeahead(newOrderSelectedStore);
            $scope.changeOrderView(1)
        }
    }
    $scope.intitializeNewOrder();
    //Purchase Initilize
    $scope.intitializeNewPurchaseOrder = function(){
        //Some HTML Models to be reset
        $scope.PurchaseOrderdata = 	{
            "newPurchaseOrderSalesPerson": {},
            "newPurchaseOrderSupplier": {},
            "newPurchaseOrderBilling_address": "",
            "newPurchaseOrderShipping_address": "",
            "newPurchaseOrderFulfiller": "",
            "newPurchaseOrderStatus": "New",
            "newPurchaseOrderDateTime" : "",
            "newPurchaseOrderDate": "",
            "newPurchaseOrderId"   : "",
            "newPurchaseOrderComment":"",
            "newPurchasecategory" 	: "",
            "newPurchaseOrderfreight": 0,
            "Purchasechequenum": "",
            "Purchasebankname": ""
        }
        //old order frieght need to stored , in case frieght charge changes
        //we need it to recalculate the value of total amount
        console.log(" frrieght charges are below...");
        console.log($scope.data.newPurchaseOrderfreight);
        $scope.data.oldPurchaseOrderfreight = $scope.data.newPurchaseOrderfreight;
        //Need for editing the items entered
        $scope.newPurchaseOrderItemEditing = [];
        $scope.newPurchaseOrder = [];
        //For typeahead for store and sales person
        $scope.display = {};
        $scope.disablePurchaseSalesPersonSelection = true;
        //With primitive type selectedStores, scope assignments in controllers
        // are not reflected on html, so make it into an object, now changes are reflected
        $scope.a = {};
        $scope.a.selectedSuppliers = "";
        $scope.a.PurchaseOrderselectedSalesPerson = "";
        $scope.PurchaseOrderdisplayAddItemOption = false;  //to display item options to add item to order
        $scope.editPurchaseOrderShippingAddress = false;
        $scope.tempnewPurchaseOrderShipping_address = "";
        $scope.newPurchaseOrderItemList 		= [];
        $scope.newPurchaseOrderItem 			= {
            itemDetails:{},
            quantity: 1,
            total: 0,
            MRP: 0,
            orderMRP:0,
            CGST:0,
            SGST:0,
            IGST: 0
        };
        $scope.newPurchaseOrderTotalAmount = 0;
        $scope.newPurchaseOrderMRPTotalAmount = 0;
        //Clear order should clear the catalogue displayed selections
        if($scope.PurchaseOrderitemsInModal)
            for(var i=0; i < $scope.PurchaseOrderitemsInModal.length; i++ )
            {
                $scope.PurchaseOrderitemsInModal[i].added = -1;
                $scope.PurchaseOrderitemsInModal[i].itemQuantity = '';
            }
        if($scope.user.role == 'Supplier'){
            console.log("Store assigned to Dealer user")
            $scope.a.selectedSuppliers = selectedSuppliers;
            $scope.data.newPurchaseOrderSupplier = selectedSuppliers;
        }
    }
    //Function which is used to initialize new order, on clicking add order or even
    //to clear order click
    $scope.intitializeNewQuotation = function(){
        console.log(" intitializeNewQuotation   called")
        //Some HTML Models to be reset
        $scope.quotationdata = 	{
            "newQuotationSalesPerson": {},
            "newQuotationStore": {},
            "newQuotationBilling_address": "",
            "newQuotationShipping_address": "",
            "newQuotationFulfiller": "",
            "newQuotationStatus": "New",
            "newQuotationDateTime" : "",
            "newQuotationDate": "",
            "newQuotationId"   : "",
            "newQuotationComment":"",
            "quotationcategory" 	: "",
            "newQuotationfreight": 0,
            "quotationchequenum": "",
            "quotationbankname": ""
        }
        //old order frieght need to stored , in case frieght charge changes
        //we need it to recalculate the value of total amount
        $scope.data.oldQuotationfreight = $scope.data.newQuotationfreight;
        //Need for editing the items entered
        $scope.newQuotationItemEditing = [];
        $scope.newQuotation = [];
        //For typeahead for store and sales person
        $scope.display = {};
        $scope.disableQuotationSalesPersonSelection = true;
        //With primitive type selectedStores, scope assignments in controllers
        // are not reflected on html, so make it into an object, now changes are reflected
        $scope.a = {};
        $scope.a.quotationselectedStores = "";
        $scope.a.quotationselectedSalesPerson = "";
        //shipping might not be necessary
        $scope.quotationdisplayAddItemOption = false;  //to display item options to add item to order
        $scope.editQuotationShippingAddress = false;
        $scope.tempnewQuotationShipping_address = "";
        $scope.newQuotationItemList 		= [];
        $scope.newQuotationItem 			= {
            itemDetails:{},
            quantity: 1,
            total: 0,
            MRP: 0,
            orderMRP:0,
            CGST:0,
            SGST:0,
            IGST: 0
        };
        $scope.newQuotationTotalAmount = 0;
        //Clear order should clear the catalogue displayed selections
        if($scope.quotationitemsInModal)
            for(var i=0; i < $scope.quotationitemsInModal.length; i++ )
            {
                $scope.quotationitemsInModal[i].added = -1;
                $scope.quotationitemsInModal[i].quotationitemQuantity = '';
            }
    }
    $scope.generateTaxId = function(){
        var date = new Date();
        var components = [
            ('Tax'),
            (date.getHours() < 10)? '0' + date.getHours() : date.getHours(),
            (date.getMinutes() < 10)? '0' + date.getMinutes() : date.getMinutes(),
            (date.getSeconds() < 10)? '0' + date.getSeconds() : date.getSeconds(),
            (date.getMilliseconds() < 10)? '00' + date.getMilliseconds() : (date.getMilliseconds() < 100)? '0' + date.getMilliseconds() : date.getMilliseconds()
        ];
        var date_ = components.join("");
        return date_;
    };
    //Generate purchase order id//
    $scope.generatePurchaseOrderId = function(){
        var date = new Date();
        var components = [
            "P",
            date.getYear(),
            (date.getMonth() < 10)? '0' + date.getMonth() : date.getMonth(),
            (date.getDate() < 10)? '0' + date.getDate() : date.getDate(),
            (date.getHours() < 10)? '0' + date.getHours() : date.getHours(),
            (date.getMinutes() < 10)? '0' + date.getMinutes() : date.getMinutes(),
            (date.getSeconds() < 10)? '0' + date.getSeconds() : date.getSeconds(),
            (date.getMilliseconds() < 10)? '00' + date.getMilliseconds() : (date.getMilliseconds() < 100)? '0' + date.getMilliseconds() : date.getMilliseconds()
        ];
        var date_ = components.join("");
        //At app side, category is appended to the orderid
        // shreyas said , it was use case for patanjali and is not
        // needed for other company user. So sticking to date only as base
        // kind of order id is applied in portal
        // app  side category is - category[i].Category
        return date_;
    }//End of function to generate Order Id
    $scope.generateInvoiceNumber = function(callback){
        var date = new Date();
        var components = [
            (date.getDate() < 10)? '0' + date.getDate() : date.getDate(),
            (date.getHours() < 10)? '0' + date.getHours() : date.getHours(),
            (date.getMinutes() < 10)? '0' + date.getMinutes() : date.getMinutes(),
            (date.getSeconds() < 10)? '0' + date.getSeconds() : date.getSeconds(),
            (date.getMilliseconds() < 10)? '00' + date.getMilliseconds() : (date.getMilliseconds() < 100)? '0' + date.getMilliseconds() : date.getMilliseconds()
        ];
        var date_ = components.join("");
        date_ = "INV" + date_;
        //At app side, category is appended to the orderid
        // shreyas said , it was use case for patanjali and is not
        // needed for other company user. So sticking to date only as base
        // kind of order id is applied in portal
        // app  side category is - category[i].Category
        callback(date_);
    }
    $scope.generateSerialId = function(){
        var date = new Date();
        var components = [
            'AST',
            (date.getMonth() < 10)? '0' + date.getMonth() : date.getMonth(),
            (date.getDate() < 10)? '0' + date.getDate() : date.getDate(),
            (date.getHours() < 10)? '0' + date.getHours() : date.getHours(),
            (date.getMinutes() < 10)? '0' + date.getMinutes() : date.getMinutes(),
            (date.getSeconds() < 10)? '0' + date.getSeconds() : date.getSeconds(),
            (date.getMilliseconds() < 10)? '00' + date.getMilliseconds() : (date.getMilliseconds() < 100)? '0' + date.getMilliseconds() : date.getMilliseconds()
        ];
        var date_ = components.join("");
        return date_;
    }//End of function to generate Order Id
    $scope.generateQuotationId = function(){
        var date = new Date();
        var components = [
            // date.getYear(),
            (date.getMonth() < 12)? $scope.coID + date.getMonth() : date.getMonth(),
            (date.getDate() < 10)? + date.getDate() : date.getDate(),
            // (date.getHours() < 10)? '0' + date.getHours() : date.getHours(),
            (date.getMinutes() < 10)? + date.getMinutes() : date.getMinutes(),
            (date.getSeconds() < 10)? + date.getSeconds() : date.getSeconds(),
            (date.getMilliseconds() < 10)? '00' + date.getMilliseconds() : (date.getMilliseconds() < 100)? '0' + date.getMilliseconds() : date.getMilliseconds()
        ];
        var date_ = components.join("");
        //At app side, category is appended to the orderid
        // shreyas said , it was use case for patanjali and is not
        // needed for other company user. So sticking to date only as base
        // kind of order id is applied in portal
        // app  side category is - category[i].Category
        return date_;
    }//End of function to generate Order Id
    $scope.getIndexInFilterTagsArray = function( category, filterTagsArray){
        for( var i = 0; i < filterTagsArray.length; i++){
            for( key in filterTagsArray[i]){
                if( category == key ) return i;
            }
        }
        return -1;
    }
    /* $scope.getQuotationIndexInFilterTagsArray = function( category, qfilterTagsArray){
     for( var i = 0; i < qfilterTagsArray.length; i++){
     for( key in qfilterTagsArray[i]){
     if( category == key ) return i;
     }
     }
     return -1;
     }*/
    $scope.updateFilterTags = function( category, masterKeySet, changedKey, changedKeyValue ){
        //Check at which index the category is in $scope.filterTagsArray
        var indexCategory = $scope.getIndexInFilterTagsArray(category, $scope.filterTagsArray);
        //If ALL is selected then all the categories need to be set to true
        if( changedKey == 'All'){
            $scope.filterTagsArray[indexCategory][category] = [];
            for( var i=0; i < masterKeySet.length; i++ ){
                var key = masterKeySet[i][category];
                if( changedKeyValue )
                    $scope.filterTagsArray[indexCategory][category].push(key);
            }
            return ;
        }
        //IF type of changed key and changedkey value is true or false, and they are related atributes
        //set to true or false.
        switch($scope.filterTagsArray[indexCategory].type ){
            case filterTagTypes.select:
                if( changedKeyValue ){
                    $scope.filterTagsArray[indexCategory][category].push( changedKey );
                }else{
                    var index = $scope.filterTagsArray[indexCategory][category].indexOf(changedKey);
                    if( index >= 0 )
                        $scope.filterTagsArray[indexCategory][category].splice(index, 1);
                }
                break;
            case filterTagTypes.valueString:
                $scope.filterTagsArray[indexCategory][category] = [];
                $scope.filterTagsArray[indexCategory][category].push(changedKeyValue);
                break;
        }
        /* $scope.filterTagsArray = [
         { 'Manufacturer'  : ['Cookies', 'Crackers', 'Flour']},
         {'Product': ['HaR']}
         ]; */
    };
    $scope.updatepurchaseFilterTags = function( category, masterKeySet, changedKey, changedKeyValue ){
        //Check at which index the category is in $scope.filterTagsArray
        var purchaseindexCategory = $scope.getIndexInpurchaseFilterTagsArray(category, $scope.purchasefilterTagsArray);
        //If ALL is selected then all the categories need to be set to true
        if( changedKey == 'All'){
            $scope.purchasefilterTagsArray[purchaseindexCategory][category] = [];
            for( var i=0; i < masterKeySet.length; i++ ){
                var key = masterKeySet[i][category];
                if( changedKeyValue )
                    $scope.purchasefilterTagsArray[purchaseindexCategory][category].push(key);
            }
            return ;
        }
        //IF type of changed key and changedkey value is true or false, and they are related atributes
        //set to true or false.
        switch($scope.filterTagsArray[purchaseindexCategory].type ){
            case filterTagTypes.select:
                if( changedKeyValue ){
                    $scope.filterTagsArray[purchaseindexCategory][category].push( changedKey );
                }else{
                    var index = $scope.filterTagsArray[purchaseindexCategory][category].indexOf(changedKey);
                    if( index >= 0 )
                        $scope.filterTagsArray[purchaseindexCategory][category].splice(index, 1);
                }
                break;
            case filterTagTypes.valueString:
                $scope.filterTagsArray[purchaseindexCategory][category] = [];
                $scope.filterTagsArray[purchaseindexCategory][category].push(changedKeyValue);
                break;
        }
    };
    $scope.changeShippingAddress = function(){
        //console.log($scope.data.shippingAddress)
        if($scope.data.shippingAddress){
            if($scope.data.shippingAddress.Address)
                $scope.data.tempnewOrderShipping_address = $scope.data.shippingAddress.Address;
            if($scope.data.shippingAddress.City)
                $scope.data.tempCity = $scope.data.shippingAddress.City;
            if($scope.data.shippingAddress.State)
                $scope.data.tempState = $scope.data.shippingAddress.State;
            $scope.data.newOrderShipping_address = $scope.data.tempnewOrderShipping_address ;
            if($scope.data.newOrderStore.StockistState && $scope.data.shippingAddress.State){
                if($scope.data.newOrderStore.StockistState != $scope.data.shippingAddress.State)
                    $scope.calculateIGST = true;
                else
                    $scope.calculateIGST = false;
            }else
                $scope.calculateIGST = false;
        }
        else {
            $scope.data.newOrderShipping_address = $scope.data.newOrderStore.Address;
            $scope.data.tempCity = "";
            $scope.data.tempState = "";
        }
    }
    $scope.changePurchaseOrderShippingAddress = function(){
        if($scope.data.purchaseshippingAddress){
            if($scope.data.purchaseshippingAddress.Address)
                $scope.data.tempnewOrderShipping_address = $scope.data.purchaseshippingAddress.Address;
            if($scope.data.purchaseshippingAddress.City)
                $scope.data.tempCity = $scope.data.purchaseshippingAddress.City;
            if($scope.data.purchaseshippingAddress.State)
                $scope.data.tempState = $scope.data.purchaseshippingAddress.State;
            $scope.data.newpurchaseOrderShipping_address = $scope.data.tempnewpurchaseOrderShipping_address + ", " + $scope.data.tempCity + ", " + $scope.data.tempState;
            if($scope.data.newPurchaseOrderSuppliers.StockistState && $scope.data.purchaseshippingAddress.State){
                if($scope.data.newPurchaseOrderSuppliers.StockistState != $scope.data.purchaseshippingAddress.State)
                    $scope.calculateIGST = true;
                else
                    $scope.calculateIGST = false;
            }else
                $scope.calculateIGST = false;
        }
        else {
            $scope.data.newpurchaseOrderShipping_address = $scope.data.newPurchaseOrderSuppliers.Address;
            $scope.data.tempCity = "";
            $scope.data.tempState = "";
        }
    };
    $scope.handleChangeInCategory = function( category,  changedKey){
        $scope.categorySearch = "";
        // console.log("handleChangeInCategory "+type)
        if( changedKey == 'All' ){
            if($scope.categorySelected['All'])
                $scope.categorySearch = "Searching in all Categories";
            else
                $scope.categorySearch = "Category Selected for search NONE";
        }
        if( changedKey == 'All' ){
            for(var i=0; i< $scope.itemCategories.length; i++ )
                $scope.categorySelected[$scope.itemCategories[i][category]] = $scope.categorySelected['All'];
        }else{
            $scope.categorySelected['All'] = true;
            $scope.categorySearch = "Searching in categories ( "
            for(key in $scope.categorySelected) {
                $scope.categorySelected['All'] = $scope.categorySelected['All'] && $scope.categorySelected[key];
                if( $scope.categorySelected[key] && key != "All") $scope.categorySearch += " " + key+",";
            }
            $scope.categorySearch += " ) ";
            if($scope.categorySelected['All'] )
                $scope.categorySearch = "Searching in all Categories";
        }
        $scope.searchMessage = $scope.categorySearch + " " + $scope.KeyWordSearch;
        $scope.updateFilterTags( category, $scope.itemCategories, changedKey,
            $scope.categorySelected[changedKey] );
    };
    $scope.handleChangeInPurchaseCategory = function( category,  changedKey){
        $scope.PurchaseOrdercategorySearch = "";
        // console.log("handleChangeInCategory "+type)
        if( changedKey == 'All' ){
            if($scope.PurchaseOrdercategorySelected['All'])
                $scope.PurchaseOrdercategorySearch = "Searching in all Categories";
            else
                $scope.PurchaseOrdercategorySearch = "Category Selected for search NONE";
        }
        if( changedKey == 'All' ){
            for(var i=0; i< $scope.itemCategories.length; i++ )
                $scope.PurchaseOrdercategorySelected[$scope.itemCategories[i][category]] = $scope.PurchaseOrdercategorySelected['All'];
        }else{
            $scope.PurchaseOrdercategorySelected['All'] = true;
            $scope.PurchaseOrdercategorySearch = "Searching in categories ( "
            for(key in $scope.PurchaseOrdercategorySelected) {
                $scope.PurchaseOrdercategorySelected['All'] = $scope.PurchaseOrdercategorySelected['All'] && $scope.PurchaseOrdercategorySelected[key];
                if( $scope.PurchaseOrdercategorySelected[key] && key != "All") $scope.PurchaseOrdercategorySearch += " " + key+",";
            }
            $scope.PurchaseOrdercategorySearch += " ) ";
            if($scope.PurchaseOrdercategorySelected['All'] )
                $scope.PurchaseOrdercategorySearch = "Searching in all Categories";
        }
        $scope.PurchaseOrdersearchMessage = $scope.PurchaseOrdercategorySearch + " " + $scope.PurchaseOrdercategorySearch;
        $scope.updateFilterTags( category, $scope.itemCategories, changedKey,
            $scope.PurchaseOrdercategorySelected[changedKey] );
    };
    $scope.updateQuotationFilterTags = function( category, masterKeySet, changedKey, changedKeyValue ){
        //Check at which index the category is in $scope.filterTagsArray
        var indexquotationCategory = $scope.getIndexInFilterTagsArray(category, $scope.qtnfilterTagsArray);
        //If ALL is selected then all the categories need to be set to true
        if( changedKey == 'All'){
            $scope.qtnfilterTagsArray[indexquotationCategory][category] = [];
            for( var i=0; i < masterKeySet.length; i++ ){
                var key = masterKeySet[i][category];
                if( changedKeyValue )
                    $scope.qtnfilterTagsArray[indexquotationCategory][category].push(key);
            }
            return ;
        }
        //IF type of changed key and changedkey value is true or false, and they are related atributes
        //set to true or false.
        switch($scope.qtnfilterTagsArray[indexquotationCategory].type ){
            case filterTagTypes.select:
                if( changedKeyValue ){
                    $scope.qtnfilterTagsArray[indexquotationCategory][category].push( changedKey );
                }else{
                    var index = $scope.qtnfilterTagsArray[indexquotationCategory][category].indexOf(changedKey);
                    if( index >= 0 )
                        $scope.qtnfilterTagsArray[indexquotationCategory][category].splice(index, 1);
                }
                break;
            case filterTagTypes.valueString:
                $scope.qtnfilterTagsArray[indexquotationCategory][category] = [];
                $scope.qtnfilterTagsArray[indexquotationCategory][category].push(changedKeyValue);
                break;
        }
        /* $scope.filterTagsArray = [
         { 'Manufacturer'  : ['Cookies', 'Crackers', 'Flour']},
         {'Product': ['HaR']}
         ]; */
    };
    $scope.handleChangeInQuotationCategory = function( category,  changedKey){
        //Similarly for quotation
        console.log("handleChangeInQuotationCategory ")
        $scope.quotationcategorySearch = "";
        if( changedKey == 'All' ){
            if($scope.quotationcategorySelected['All'])
                $scope.quotationcategorySearch = "Searching in all Categories";
            else
                $scope.quotationcategorySearch = "Category Selected for search NONE";
        }
        if( changedKey == 'All' ){
            for(var i=0; i< $scope.itemCategories.length; i++ )
                $scope.quotationcategorySelected[$scope.itemCategories[i][category]] = $scope.quotationcategorySelected['All'];
        }else{
            $scope.quotationcategorySelected['All'] = true;
            $scope.quotationcategorySearch = "Searching in categories ( "
            for(key in $scope.quotationcategorySelected) {
                $scope.quotationcategorySelected['All'] = $scope.quotationcategorySelected['All'] && $scope.quotationcategorySelected[key];
                if( $scope.quotationcategorySelected[key] && key != "All") $scope.quotationcategorySearch += " " + key;
            }
            $scope.quotationcategorySearch += " ) ";
            if($scope.quotationcategorySelected['All'] )
                $scope.quotationcategorySearch = "Searching in all Categories";
        }
        $scope.quotationsearchMessage = $scope.quotationcategorySearch + " " + $scope.quotationKeyWordSearch;
        $scope.updateQuotationFilterTags( category, $scope.itemCategories, changedKey,
            $scope.quotationcategorySelected[changedKey] )
    };
    //Data preparations that are needed before we take a new order
    $scope.addPosInitialize = function(flag){
        $scope.edit =false;
        if(!flag){
            $scope.displayBGWhite = true;
            $scope.addPosButton = true;
            $scope.addOrderButton = false;
        }
        $scope.intitializeNewOrder();		//Reset the new order page
        $scope.PosDealer = {};
        $scope.orderPriceList = '';
        $scope.categorySearch = "Searching in all Categories";
        $scope.KeyWordSearch = "";
        $scope.searchMessage = $scope.categorySearch + " " + $scope.KeyWordSearch;
        $scope.categorySelected = {	'All': true	};
        $scope.viewLength = 0;
        $scope.newViewBy = viewBy.dealer;
        $scope.filterTagsArray = [
            { strictWhenEmpty:  true, type: filterTagTypes.select, 		'Manufacturer'  : []},
            { strictWhenEmpty: false, type:	filterTagTypes.valueString, 'Product': []}
        ];
        // $scope.handleChangeInCategory('Manufacturer', 'All')
        //         $scope.clearFilter(2);
        $scope.clearFilter(2);
        $scope.data.newOrderId = $scope.generateOrderId();
        jQuery.noConflict();
        $('#newOrderDealerSearchBox').val(null);
    }//End of addOrderInitialize
    //Data preparations that are needed before we take a new order
    $scope.addTaskInitialize = function() {
        $scope.edit = false;
        $scope.task = {};
        $scope.task.cc = [];
        $scope.subTask =[];
        $scope.task.taskUserBox = '';
        $scope.task.taskGroupBox = '';
        $scope.addTaskButton = false;
        $scope.task.taskCc = '';
    }
    //addPurchaseOrderInitialize
    $scope.addPurchaseOrderInitialize = function() {
        $scope.addPurchaseOrderButton = false;
        $scope.intitializeNewPurchaseOrder();		//Reset the new order page
        $scope.PurchaseOrdercategorySearch = "Searching in all Categories";
        $scope.purchaseorderKeyWordSearch = "";
        $scope.searchMessage = $scope.PurchaseOrdercategorySearch + " " + $scope.purchaseorderKeyWordSearch;
        $scope.PurchaseOrdercategorySelected = {'All': true};
        $scope.filterTagsArray = [
            {strictWhenEmpty: true, type: filterTagTypes.select, 'Manufacturer': []},
            {strictWhenEmpty: false, type: filterTagTypes.valueString, 'Product': []}
        ];
        $scope.handleChangeInPurchaseCategory('Manufacturer', 'All');
        //
        //        console.log($scope.itemsInModal)
        // 	})
        //To get Suppliers
        $http.get("/dash/suppliers")
            .success(function (response) {
                $scope.renderServiceSupplier(response);
            });
        $scope.searchSupplierBox = '';
        jQuery.noConflict();
        $('#newPurchaseOrderSupplierSearchBox').val(null);
    };
    $scope.addQuotationInitialize = function(){
        if(!$scope.quotationselectedStores) $scope.quotationselectedStores = {};
        $scope.quotationselectedStores.name = '';
        $scope.addQuotationButton = false;
        $scope.intitializeNewQuotation();		//Reset the new order page
        $scope.quotationshowDealerDetails =true;
        $scope.quotationcategorySearch = "Searching in all Categories";
        $scope.quotationKeyWordSearch = "";
        $scope.quotationsearchMessage = $scope.quotationcategorySearch + " " + $scope.quotationKeyWordSearch;
        $scope.quotationcategorySelected = {	'All': true	};
        $scope.qtnfilterTagsArray = [
            { strictWhenEmpty:  true, type: filterTagTypes.select, 		'Manufacturer'  : []},
            { strictWhenEmpty: false, type:	filterTagTypes.valueString, 'Product': []}
        ];
        //If catalogue is still not loaded, load it
        // $http.get("/dash/items")
        //     .success(function(response){
        //         $scope.renderItems(response);
        //         $scope.quotationitemCategories = $scope.items.unique("Manufacturer"); //Get the categories for products for subgrouping
        //         $scope.quotationitemsInModal = $scope.items;
        //         for(var i=0; i < $scope.quotationitemsInModal.length; i++ )
        //             $scope.quotationitemsInModal[i].added = $scope.doesItemExistsInCart($scope.newQuotationItemList, "Product", $scope.quotationitemsInModal[i]);
        //
        //         $scope.handleChangeInQuotationCategory('Manufacturer', 'All');
        //
        //
        //     })
        //To get Stores
        $http.get("/dash/stores")
            .success(function(response){
                $scope.renderServiceClients(response);
            });
    }//End of addQuotationInitialize
    $scope.checkNumber = function(quantity){
        if(quantity <1 || quantity == null || quantity == ''){
            jQuery.noConflict();
            $("#saveOrderQuantity").css('pointer-events', 'none');
            $("#saveOrderQuantity").css('background-color', 'grey');
            $("#saveOrderQuantity").css('cursor', 'not-allowed');
            $("#closeButton").attr('disabled', 'true');
            $("#closeButton").css('cursor', 'not-allowed');
            $("#closeCartButton").css('pointer-events', 'none');
            $("#closeCartButton").css('cursor', 'not-allowed');
            $("#itemsInCart").modal({backdrop: "static"});
        }
        else {
            jQuery.noConflict();
            $("#saveOrderQuantity").css('pointer-events', 'auto');
            $("#saveOrderQuantity").css('background-color', '#06b306');
            $("#saveOrderQuantity").css('cursor', 'pointer');
            $("#closeButton").attr('disabled', 'false')
            $("#closeButton").css('cursor', 'pointer');
            $("#closeCartButton").css('pointer-events', 'auto');
            $("#closeCartButton").css('cursor', 'pointer');
            $("#itemsInCart").modal({backdrop : true});
        }
    }
    $scope.changeInQuantity = function(direction, item, itemQuantity,flag,neworderflag){
        if(itemQuantity)
            itemQuantity = Number(itemQuantity.toFixed(3));
        switch(direction){
            case $scope.CTOCT :
                //Check if the item is already in the order
                var itemIndex = $scope.doesItemExistsInCart($scope.newOrderItemList, "itemCode", item);
                if( $scope.newOrderItemList.length != 0 && itemIndex >= 0 && ( itemQuantity <= 0  ) )
                    $scope.alertMsg( "danger", "", "ZERO quantity not accepted. Press delete icon to delete item");
                if( itemIndex >= 0 ){
                    if( itemQuantity > 0 )
                        $scope.newOrderItemList[itemIndex].quantity = Math.round(itemQuantity);
                    else
                        item.itemQuantity = Math.round($scope.newOrderItemList[itemIndex].quantity);
                }
                break;
            case $scope.CTTOC :
                if(!neworderflag){
                    //Check if the item is already in the order
                    var itemIndex = $scope.doesItemExistsInArray($scope.itemsInModal, "itemCode", item.itemDetails);
                }else {
                    //Check if the item is already in the order
                    var itemIndex = $scope.doesItemExistsInCart($scope.newOrderItemList, "itemCode", item.itemDetails);
                }
                if(itemQuantity > item.totalInventory){
                    $scope.alertMsg( "danger", "", "Quantity should be lesser than inventory quantity");
                    item.quantity='';
                    item.itemQuantity = '';
                    $scope.renderItemsMrp();
                    break;
                }
                if( $scope.newOrderItemList.length != 0 && (!itemQuantity && itemQuantity < 0 ) ){
                    $scope.alertMsg( "danger", "", "ZERO quantity not accepted. Press delete icon to delete item");
                }
                if( itemIndex >= 0 ){
                    if( itemQuantity <=1000 ){
                        // $scope.itemsInModal[itemIndex].itemQuantity = Math.round(itemQuantity);
                        // item.itemQuantity = Math.round($scope.itemsInModal[itemIndex].itemQuantity)
                        // item.quantity = Math.round($scope.itemsInModal[itemIndex].itemQuantity)* $scope.stepQuantity ;
                        $scope.itemsInModal[itemIndex].itemQuantity = itemQuantity;
                        item.itemQuantity = $scope.itemsInModal[itemIndex].itemQuantity;
                        item.quantity = $scope.itemsInModal[itemIndex].itemQuantity* $scope.stepQuantity ;
                    }
                    else{
                        $scope.alertMsg( "danger", "", "ZERO quantity not accepted. Press delete icon to delete item");
                        if(flag){
                            item.quantity='';
                            item.itemQuantity = '';
                        }else{
                            item.quantity = Math.round($scope.itemsInModal[itemIndex].itemQuantity)* $scope.stepQuantity ;
                            item.itemQuantity = Math.round($scope.itemsInModal[itemIndex].itemQuantity);
                        }
                    }
                    if($scope.taxExclusive){
                        for(var i=0; i< $scope.newOrderItemList.length; i++){
                            if($scope.data.newOrderStore.customerVariant == 'bulk' && $scope.newOrderItemList[i].itemDetails.BulkPrice){
                                $scope.newOrderItemList[i].taxableValue =  $scope.newOrderItemList[i].itemDetails.BulkPrice * $scope.newOrderItemList[i].quantity;
                                if($scope.taxSetups.otherSetup != 'other'){
                                $scope.newOrderItemList[i].BulkPrice =
                                    ( $scope.newOrderItemList[i].itemDetails.BulkPrice) +
                                    (( $scope.newOrderItemList[i].CGST * $scope.newOrderItemList[i].itemDetails.BulkPrice)/100 + ($scope.newOrderItemList[i].SGST* $scope.newOrderItemList[i].itemDetails.BulkPrice)/100 + ($scope.newOrderItemList[i].IGST* $scope.newOrderItemList[i].itemDetails.BulkPrice)/100);
                                }else if($scope.taxSetups.otherSetup == 'other' && $scope.newOrderItemList[i].otherTaxes){
                                    var otherTaxesValue = 0;
                                    for(var j=0; i< $scope.newOrderItemList[i].otherTaxes.length; j++){
                                        if(itemIndex == j){
                                            otherTaxesValue += (($scope.newOrderItemList[i].otherTaxes[j].value * $scope.newOrderItemList[i].itemDetails.BulkPrice)/100)
                                        }
                                    }
                                    $scope.newOrderItemList[i].BulkPrice = $scope.newOrderItemList[i].itemDetails.BulkPrice + otherTaxesValue;
                                }
                            }else{
                                if($scope.taxSetups.otherSetup != 'other') {
                                $scope.newOrderItemList[i].taxableValue =  $scope.newOrderItemList[i].itemDetails.orderMRP * $scope.newOrderItemList[i].quantity;
                                $scope.newOrderItemList[i].orderMRP =
                                    ( $scope.newOrderItemList[i].itemDetails.orderMRP) +
                                    (( $scope.newOrderItemList[i].CGST * $scope.newOrderItemList[i].itemDetails.orderMRP)/100 + ($scope.newOrderItemList[i].SGST* $scope.newOrderItemList[i].itemDetails.orderMRP)/100 + ($scope.newOrderItemList[i].IGST* $scope.newOrderItemList[i].itemDetails.orderMRP)/100);
                                }else if($scope.taxSetups.otherSetup == 'other' && $scope.newOrderItemList[i].otherTaxes){
                                    var otherTaxesValue = 0;
                                    $scope.newOrderItemList[i].taxableValue = $scope.newOrderItemList[i].itemDetails.orderMRP * $scope.newOrderItemList[i].quantity;
                                    for(var j=0; j< $scope.newOrderItemList[i].otherTaxes.length; j++){
                                        otherTaxesValue += (($scope.newOrderItemList[i].otherTaxes[j].value * $scope.newOrderItemList[i].itemDetails.orderMRP)/100)
                                    }
                                    $scope.newOrderItemList[i].orderMRP = $scope.newOrderItemList[i].itemDetails.orderMRP + otherTaxesValue;
                                }
                            }
                        }
                    }else{
                        for(var i=0; i< $scope.newOrderItemList.length; i++){
                            if($scope.data.newOrderStore.customerVariant == 'bulk' &&  $scope.newOrderItemList[i].itemDetails.BulkPrice){
                                $scope.newOrderItemList[i].taxableValue =
                                    (($scope.newOrderItemList[i].quantity  *
                                    ($scope.newOrderItemList[i].itemDetails.BulkPrice -
                                    ($scope.newOrderItemList[i].itemDetails.BulkPrice * ($scope.getItemsDiscount($scope.newOrderItemList[i].itemDetails.itemCode) / 100)))) /
                                    (100 + $scope.newOrderItemList[i].CGST + $scope.newOrderItemList[i].SGST + $scope.newOrderItemList[i].IGST)) * 100;
                            }else{
                                if($scope.taxSetups.otherSetup != 'other') {
                                $scope.newOrderItemList[i].taxableValue =
                                        (($scope.newOrderItemList[i].quantity * $scope.newOrderItemList[i].itemDetails.orderMRP) /
                                    (100 + $scope.newOrderItemList[i].CGST + $scope.newOrderItemList[i].SGST + $scope.newOrderItemList[i].IGST)) * 100;
                                }else if($scope.taxSetups.otherSetup == 'other'){
                                    var otherTaxesValue = 0;
                                    for(var j=0; j< $scope.newOrderItemList[i].otherTaxes.length; j++){
                                        otherTaxesValue += $scope.newOrderItemList[i].otherTaxes[j].value;
                                    }
                                    $scope.newOrderItemList[i].taxableValue =
                                        (($scope.newOrderItemList[i].quantity  * ($scope.newOrderItemList[i].itemDetails.orderMRP - ($scope.newOrderItemList[i].itemDetails.orderMRP * ($scope.getItemsDiscount($scope.newOrderItemList[i].itemDetails.itemCode) / 100)))) /
                                        (100 + otherTaxesValue)) * 100;
                                }
                            }
                        }
                    }
                }
                break;
        }     //End of switch
    }//End of function changeInQuantity
    //purchase change quantity
    $scope.changeInPurchaseOrderQuantity = function(direction, item, itemQuantity,flag){
        console.log("cheking item purchase quantity");
        console.log(direction);
        console.log(item);
        console.log(itemQuantity);
        switch(direction){
            case $scope.CTOCT :
                //Check if the item is already in the order
                var itemIndex = $scope.doesItemExistsInCart($scope.newPurchaseOrderItemList, "Product", item);
                if( $scope.newPurchaseOrderItemList.length != 0 && itemIndex >= 0 && ( itemQuantity <= 0  ) )
                    $scope.alertMsg( "danger", "", "ZERO quantity not accepted. Press delete icon to delete item");
                if( itemIndex >= 0 ){
                    if( itemQuantity > 0 )
                        $scope.newPurchaseOrderItemList[itemIndex].quantity = Math.round(itemQuantity);
                    else
                        item.itemQuantity = Math.round($scope.newPurchaseOrderItemList[itemIndex].quantity);
                }
                break;
            case $scope.CTTOC :
                //Check if the item is already in the order
                var itemIndex = $scope.doesItemExistsInArray($scope.PurchaseOrderitemsInModal, "Product", item.itemDetails);
                if( $scope.newPurchaseOrderItemList.length != 0 && (!itemQuantity && itemQuantity < 0 ) ){
                    $scope.alertMsg( "danger", "", "ZERO quantity not accepted. Press delete icon to delete item");
                }
                if( itemIndex >= 0 ){
                    if( itemQuantity <=1000 ){
                        $scope.PurchaseOrderitemsInModal[itemIndex].itemQuantity = Math.round(itemQuantity);
                        item.itemQuantity = Math.round($scope.PurchaseOrderitemsInModal[itemIndex].itemQuantity)
                        item.quantity = Math.round($scope.PurchaseOrderitemsInModal[itemIndex].itemQuantity)* $scope.stepQuantity ;
                    }
                    else{
                        $scope.alertMsg( "danger", "", "ZERO quantity not accepted. Press delete icon to delete item");
                        if(flag){
                            item.quantity='';
                            item.itemQuantity = '';
                        }else{
                            item.quantity = Math.round($scope.PurchaseOrderitemsInModal[itemIndex].itemQuantity)* $scope.stepQuantity ;
                            item.itemQuantity = Math.round($scope.PurchaseOrderitemsInModal[itemIndex].itemQuantity);
                        }
                    }
                    for(var i=0; i< $scope.newPurchaseOrderItemList.length; i++){
                        $scope.newPurchaseOrderItemList[i].taxableValue =
                            (($scope.newPurchaseOrderItemList[i].quantity  *
                            ($scope.newPurchaseOrderItemList[i].itemDetails.orderMRP -
                            ($scope.newPurchaseOrderItemList[i].itemDetails.orderMRP * ($scope.getItemsDiscount($scope.newPurchaseOrderItemList[i].itemDetails.itemCode) / 100)))) /
                            (100 + $scope.newPurchaseOrderItemList[i].CGST + $scope.newPurchaseOrderItemList[i].SGST + $scope.newPurchaseOrderItemList[i].IGST)) * 100;
                    }
                }
                break;
        }     //End of switch
    }
    $scope.setQuotation = function(item,quotation_uom){
        if(quotation_uom){
            for(var i=0;i<$scope.newQuotationItemList.length;i++){
                if(item.itemDetails.Product == $scope.newQuotationItemList[i].itemDetails.Product){
                    $scope.newQuotationItemList[i].quotation_uom = quotation_uom;
                    console.log($scope.newQuotationItemList[i].quotation_uom)
                }
            }
        }
    }
    $scope.changeInQuotationQuantity = function(direction, item, quotationitemQuantity, qtnmrp){
        console.log(quotationitemQuantity);
        console.log(item)
        switch(direction){
            case $scope.CTOCT :
                //Check if the item is already in the order
                var itemIndex = $scope.doesItemExistsInCart($scope.newQuotationItemList, "Product", item);
                if( $scope.newQuotationItemList.length != 0 && itemIndex >= 0 && ( quotationitemQuantity <= 0  ) )
                    $scope.alertMsg( "danger", "", "ZERO quantity not accepted. Press delete icon to delete item");
                /*  if( itemIndex >= 0 ){get
                 if( quotationitemQuantity > 0 )
                 $scope.newQuotationItemList[itemIndex].quantity = Math.round(quotationitemQuantity);
                 else
                 item.quotationitemQuantity = Math.round($scope.newQuotationItemList[itemIndex].quantity);
                 }*/
                break;
            case $scope.CTTOC :
                //Check if the item is already in the order
                var itemIndex = $scope.doesItemExistsInArray($scope.quotationitemsInModal, "Product", item.itemDetails);
                if( $scope.newQuotationItemList.length != 0 && ( quotationitemQuantity <= 0 ) )
                    $scope.alertMsg( "danger", "", "ZERO quantity not accepted. Press delete icon to delete item");
                /*if( itemIndex >= 0 ){
                 if( quotationitemQuantity > 0 ){
                 $scope.quotationitemsInModal[itemIndex].quotationitemQuantity = Math.round(quotationitemQuantity);
                 item.quotationitemQuantity = Math.round($scope.quotationitemsInModal[itemIndex].quotationitemQuantity)* $scope.stepQuantity ;
                 }
                 else
                 item.quotationitemQuantity = Math.round($scope.quotationitemsInModal[itemIndex].quotationitemQuantity);
                 }*/
                break;
        }     //End of switch
    }   //End of function changeInQuantity for quotations
    //Change GST for an orderLine
    $scope.changeGSTForOrderLine = function(order, gst){
        if($scope.tempCountryName != 'ghana'){
        if($scope.data.newOrderStore.customerVariant == 'bulk'){
            if(gst){
                if(!$scope.taxExclusive){
                    for(var i=0; i< $scope.newOrderItemList.length; i++){
                        if($scope.newOrderItemList[i].itemDetails.BulkPrice){
                            if(order.itemDetails.itemCode == $scope.newOrderItemList[i].itemDetails.itemCode){
                                $scope.newOrderItemList[i].CGST = gst.cgst;
                                $scope.newOrderItemList[i].SGST = gst.sgst;
                                $scope.newOrderItemList[i].IGST = gst.igst;
                                $scope.newOrderItemList[i].qbId = gst.qbId;
                                $scope.newOrderItemList[i].BulkPrice = $scope.newOrderItemList[i].itemDetails.BulkPrice;
                                $scope.newOrderItemList[i].taxableValue =
                                    (($scope.newOrderItemList[i].quantity  * $scope.newOrderItemList[i].itemDetails.BulkPrice) /
                                    (100 + $scope.newOrderItemList[i].CGST + $scope.newOrderItemList[i].SGST + $scope.newOrderItemList[i].IGST)) * 100;
                            }
                        }else{
                            if(order.itemDetails.itemCode == $scope.newOrderItemList[i].itemDetails.itemCode){
                                $scope.newOrderItemList[i].CGST = gst.cgst;
                                $scope.newOrderItemList[i].SGST = gst.sgst;
                                $scope.newOrderItemList[i].IGST = gst.igst;
                                $scope.newOrderItemList[i].qbId = gst.qbId;
                                $scope.newOrderItemList[i].orderMRP = $scope.newOrderItemList[i].itemDetails.orderMRP
                                $scope.newOrderItemList[i].taxableValue =
                                    (($scope.newOrderItemList[i].quantity  * $scope.newOrderItemList[i].itemDetails.orderMRP) /
                                    (100 + $scope.newOrderItemList[i].CGST + $scope.newOrderItemList[i].SGST + $scope.newOrderItemList[i].IGST)) * 100;
                            }
                        }
                    }
                }else{
                    for(var i=0; i< $scope.newOrderItemList.length; i++){
                        if($scope.newOrderItemList[i].itemDetails.BulkPrice) {
                            if (order.itemDetails.itemCode == $scope.newOrderItemList[i].itemDetails.itemCode) {
                                $scope.newOrderItemList[i].CGST = gst.cgst;
                                $scope.newOrderItemList[i].SGST = gst.sgst;
                                $scope.newOrderItemList[i].IGST = gst.igst;
                                $scope.newOrderItemList[i].qbId = gst.qbId;
                                $scope.newOrderItemList[i].taxableValue = $scope.newOrderItemList[i].itemDetails.BulkPrice * $scope.newOrderItemList[i].quantity;
                                $scope.newOrderItemList[i].BulkPrice =
                                    ( $scope.newOrderItemList[i].itemDetails.BulkPrice) +
                                    (( $scope.newOrderItemList[i].CGST * $scope.newOrderItemList[i].itemDetails.BulkPrice) / 100 + ($scope.newOrderItemList[i].SGST * $scope.newOrderItemList[i].itemDetails.BulkPrice) / 100 + ($scope.newOrderItemList[i].IGST * $scope.newOrderItemList[i].itemDetails.BulkPrice) / 100);
                            }
                        }else{
                            if(order.itemDetails.itemCode == $scope.newOrderItemList[i].itemDetails.itemCode){
                                $scope.newOrderItemList[i].CGST = gst.cgst;
                                $scope.newOrderItemList[i].SGST = gst.sgst;
                                $scope.newOrderItemList[i].IGST = gst.igst;
                                $scope.newOrderItemList[i].qbId = gst.qbId;
                                $scope.newOrderItemList[i].taxableValue =  $scope.newOrderItemList[i].itemDetails.orderMRP * $scope.newOrderItemList[i].quantity;
                                $scope.newOrderItemList[i].orderMRP =
                                    ( $scope.newOrderItemList[i].itemDetails.orderMRP) +
                                    (( $scope.newOrderItemList[i].CGST * $scope.newOrderItemList[i].itemDetails.orderMRP)/100 + ($scope.newOrderItemList[i].SGST* $scope.newOrderItemList[i].itemDetails.orderMRP)/100 + ($scope.newOrderItemList[i].IGST* $scope.newOrderItemList[i].itemDetails.orderMRP)/100);
                            }
                        }
                    }
                }
            }else{
                for(var i=0; i< $scope.newOrderItemList.length; i++){
                    if($scope.newOrderItemList[i].itemDetails.BulkPrice) {
                        if (order.itemDetails.itemCode == $scope.newOrderItemList[i].itemDetails.itemCode) {
                            $scope.newOrderItemList[i].CGST = 0;
                            $scope.newOrderItemList[i].SGST = 0;
                            $scope.newOrderItemList[i].IGST = 0;
                            $scope.newOrderItemList[i].qbId = 0;
                            $scope.newOrderItemList[i].BulkPrice = $scope.newOrderItemList[i].itemDetails.BulkPrice;
                            $scope.newOrderItemList[i].taxableValue =
                                (($scope.newOrderItemList[i].quantity * $scope.newOrderItemList[i].itemDetails.BulkPrice) /
                                (100 + $scope.newOrderItemList[i].CGST + $scope.newOrderItemList[i].SGST + $scope.newOrderItemList[i].IGST)) * 100;
                        }
                    }else{
                        if(order.itemDetails.itemCode == $scope.newOrderItemList[i].itemDetails.itemCode){
                            $scope.newOrderItemList[i].CGST = 0;
                            $scope.newOrderItemList[i].SGST = 0;
                            $scope.newOrderItemList[i].IGST = 0;
                            $scope.newOrderItemList[i].qbId = 0;
                            $scope.newOrderItemList[i].orderMRP = $scope.newOrderItemList[i].itemDetails.orderMRP
                            $scope.newOrderItemList[i].taxableValue =
                                (($scope.newOrderItemList[i].quantity  * $scope.newOrderItemList[i].itemDetails.orderMRP) /
                                (100 + $scope.newOrderItemList[i].CGST + $scope.newOrderItemList[i].SGST + $scope.newOrderItemList[i].IGST)) * 100;
                        }
                    }
                }
            }
        }else{
            if(gst){
                if(!$scope.taxExclusive){
                    for(var i=0; i< $scope.newOrderItemList.length; i++){
                        if(order.itemDetails.itemCode == $scope.newOrderItemList[i].itemDetails.itemCode){
                            $scope.newOrderItemList[i].CGST = gst.cgst;
                            $scope.newOrderItemList[i].SGST = gst.sgst;
                            $scope.newOrderItemList[i].IGST = gst.igst;
                            $scope.newOrderItemList[i].qbId = gst.qbId;
                            $scope.newOrderItemList[i].orderMRP = $scope.newOrderItemList[i].itemDetails.orderMRP
                            $scope.newOrderItemList[i].taxableValue =
                                (($scope.newOrderItemList[i].quantity  * $scope.newOrderItemList[i].itemDetails.orderMRP) /
                                (100 + $scope.newOrderItemList[i].CGST + $scope.newOrderItemList[i].SGST + $scope.newOrderItemList[i].IGST)) * 100;
                        }
                    }
                }else{
                    for(var i=0; i< $scope.newOrderItemList.length; i++){
                        if(order.itemDetails.itemCode == $scope.newOrderItemList[i].itemDetails.itemCode){
                            $scope.newOrderItemList[i].CGST = gst.cgst;
                            $scope.newOrderItemList[i].SGST = gst.sgst;
                            $scope.newOrderItemList[i].IGST = gst.igst;
                            $scope.newOrderItemList[i].qbId = gst.qbId;
                            $scope.newOrderItemList[i].taxableValue =  $scope.newOrderItemList[i].itemDetails.orderMRP * $scope.newOrderItemList[i].quantity;
                            $scope.newOrderItemList[i].orderMRP =
                                ( $scope.newOrderItemList[i].itemDetails.orderMRP) +
                                (( $scope.newOrderItemList[i].CGST * $scope.newOrderItemList[i].itemDetails.orderMRP)/100 + ($scope.newOrderItemList[i].SGST* $scope.newOrderItemList[i].itemDetails.orderMRP)/100 + ($scope.newOrderItemList[i].IGST* $scope.newOrderItemList[i].itemDetails.orderMRP)/100);
                        }
                    }
                }
            }else{
                for(var i=0; i< $scope.newOrderItemList.length; i++){
                    if(order.itemDetails.itemCode == $scope.newOrderItemList[i].itemDetails.itemCode){
                        $scope.newOrderItemList[i].CGST = 0;
                        $scope.newOrderItemList[i].SGST = 0;
                        $scope.newOrderItemList[i].IGST = 0;
                        $scope.newOrderItemList[i].qbId = 0;
                        $scope.newOrderItemList[i].orderMRP = $scope.newOrderItemList[i].itemDetails.orderMRP
                        $scope.newOrderItemList[i].taxableValue =
                            (($scope.newOrderItemList[i].quantity  * $scope.newOrderItemList[i].itemDetails.orderMRP) /
                            (100 + $scope.newOrderItemList[i].CGST + $scope.newOrderItemList[i].SGST + $scope.newOrderItemList[i].IGST)) * 100;
                    }
                }
            }
        }
    }
    }
    //Change GST for an PurchaseorderLine
    $scope.changeGSTForPurchaseOrderLine = function(order, gst){
        if(gst){
            for(var i=0; i< $scope.newPurchaseOrderItemList.length; i++){
                if(order.itemDetails.itemCode == $scope.newPurchaseOrderItemList[i].itemDetails.itemCode){
                    $scope.newPurchaseOrderItemList[i].CGST = gst.cgst;
                    $scope.newPurchaseOrderItemList[i].SGST = gst.sgst;
                    $scope.newPurchaseOrderItemList[i].IGST = gst.igst;
                    $scope.newPurchaseOrderItemList[i].taxableValue =
                        (($scope.newPurchaseOrderItemList[i].quantity  * $scope.newPurchaseOrderItemList[i].itemDetails.orderMRP) /
                        (100 + $scope.newPurchaseOrderItemList[i].CGST + $scope.newPurchaseOrderItemList[i].SGST + $scope.newPurchaseOrderItemList[i].IGST)) * 100;
                }
            }
        }
    }
//Adding item to the Purchaseorder//
    $scope.addItemToPurchaseOrder = function( item, itemQuantity, lineComment){
        $scope.newPurchaseOrderItem.itemDetails = item;
        console.log("new item");
        console.log(item);
        console.log("new itemQuantity");
        console.log(itemQuantity);
        console.log("new lineComment");
        console.log(lineComment);
        if($scope.PurchasecalculateIGST){
            $scope.newPurchaseOrderItem.IGST = item.IGST ? item.IGST : 0;
            $scope.newPurchaseOrderItem.CGST = 0;
            $scope.newPurchaseOrderItem.SGST = 0;
        }
        else{
            $scope.newPurchaseOrderItem.CGST = item.CGST ? item.CGST  : 0;
            $scope.newPurchaseOrderItem.SGST = item.SGST ? item.SGST : 0;
            $scope.newPurchaseOrderItem.IGST = 0;
        }
        $scope.newPurchaseOrderItem.quantity = Math.round(itemQuantity)*$scope.stepQuantity;
        if(!item.itemQuantity){
            $scope.alertMsg("danger", "In New Order Addition", "Please Enter a Valid Quantity");
            return;
        }
        if(!item.orderMRP){
            $scope.alertMsg("danger", "In New Order Addition", "Please Enter a Valid Order MRP");
            return;
        }
        //Validate Fields of an item
        if(	   $scope.newPurchaseOrderItem.itemDetails.Product == ""
            || typeof $scope.newPurchaseOrderItem.itemDetails.Product == "undefined")
        {
            //throw up modal for reConfirmation of  submission of order
            $scope.alertMsg( "danger", "In New Order addition", "Item Not Selected");
            return;
        }
        if($scope.newPurchaseOrderItem.quantity < MIN_ORDER || $scope.newPurchaseOrderItem.quantity == null)
        {
            $scope.alertMsg("danger", "In New Order Addition", MIN_ORDER + " is minimum number of items that must be ordered" );
            return;
        }
        //Check if the item is already in the order
        if($scope.doesItemExistsInCart($scope.newPurchaseOrderItemList, "Product", $scope.newPurchaseOrderItem.itemDetails) >= 0){
            $scope.alertMsg("info", "In New Order Addition", "Item already exists in the order, please check");
            return;
        }
        //Price of Order
        $scope.newPurchaseOrderItem.total = $scope.newPurchaseOrderItem.quantity  * $scope.newPurchaseOrderItem.itemDetails.MRP;
        $scope.newPurchaseOrderItem.orderTotal = $scope.newPurchaseOrderItem.quantity  * $scope.newPurchaseOrderItem.itemDetails.orderMRP;
        $scope.newPurchaseOrderItem.MRP = $scope.newPurchaseOrderItem.itemDetails.MRP;
        $scope.newPurchaseOrderItem.orderMRP = $scope.newPurchaseOrderItem.itemDetails.orderMRP;
        //Calculate discount
        var discount = (($scope.newPurchaseOrderItem.MRP - $scope.newPurchaseOrderItem.orderMRP)/$scope.newPurchaseOrderItem.MRP) * 100;
        if(discount > 0)
            $scope.newPurchaseOrderItem.Specials = discount.toFixed(2);
        else
            $scope.newPurchaseOrderItem.Specials = 0;
        $scope.newPurchaseOrderItem.taxableValue =
            (($scope.newPurchaseOrderItem.quantity  * $scope.newPurchaseOrderItem.orderMRP) /
            (100 + $scope.newPurchaseOrderItem.CGST + $scope.newPurchaseOrderItem.SGST + $scope.newPurchaseOrderItem.IGST)) * 100;
        var date = new Date;
        $scope.newPurchaseOrderItem.lineComment = {};
        $scope.newPurchaseOrderItem.lineComment.date_added = [date.getFullYear(),(date.getMonth()+1).padLeft(), date.getDate().padLeft() ].join('-') + ' '
            + [date.getHours().padLeft(), date.getMinutes().padLeft(), date.getSeconds().padLeft()].join (':');
        $scope.newPurchaseOrderItem.lineComment.username = $scope.user.role ? $scope.user.username : 'PORTAL ADMIN';
        $scope.newPurchaseOrderItem.lineComment.userphone = $scope.user.sellerphone ? $scope.user.sellerphone : '';
        $scope.newPurchaseOrderItem.lineComment.comment = lineComment ? lineComment : '';
        //Push items to the order items list
        $scope.newPurchaseOrderItemList.push($scope.newPurchaseOrderItem);
        console.log(" hello po order list is...");
        console.log($scope.newPurchaseOrderItemList);
        console.log(" hello po order  is...");
        console.log($scope.newPurchaseOrderItem);
        var indexInCatalogue = $scope.doesItemExistsInArray($scope.items, "Product", $scope.newPurchaseOrderItem.itemDetails);
        $scope.PurchaseOrderitemsInModal[indexInCatalogue].added        = $scope.newPurchaseOrderItemList.length - 1 ;
        //Initialize
        $scope.newPurchaseOrderItem = {
            itemDetails:{},
            quantity: 1,
            total: 0,
            MRP:0,
            orderMRP:0,
            CGST:0,
            SGST:0,
            IGST : 0
        };
        $scope.data.category = "";
        //To display option to add item need to be displayed
        $scope.displayAddItemOption = false;
        return $scope.newPurchaseOrderItemList.length;
    }
    //end add item to purchase order//
    //Adding item to the order
    $scope.addItemToOrder = function( item, itemQuantity, lineComment,invtQty){
        switch($scope.tempCountryName){
            case 'india': {
                $scope.addItemToOrderIndia(item, itemQuantity, lineComment,invtQty);
                break;
            }
            case 'ghana': {
                $scope.addItemToOrderGhana(item, itemQuantity, lineComment,invtQty);
                break;
            }
            default:
                $scope.addItemToOrderIndia(item, itemQuantity, lineComment,invtQty);
                console.log("Changed default *******" + tab);
                break;
        }
    }//End of addItemToOrder
    //Adding item based on india country
    $scope.addItemToOrderIndia = function( item, itemQuantity, lineComment,invtQty){
        itemQuantity = 1;
        item.itemQuantity = 1;
        $scope.newOrderItem.itemDetails = angular.copy(item);
        if($scope.taxSetups.otherSetup != 'other'){
        if(item.gst){
            if($scope.calculateIGST){
                $scope.newOrderItem.IGST = item.gst.igst ? item.gst.igst : 0;
                $scope.newOrderItem.CGST = 0;
                $scope.newOrderItem.SGST = 0;
                if(item.gst.qbId){
                    $scope.newOrderItem.qbId = item.gst.qbId;
                }
            }
            else{
                $scope.newOrderItem.CGST = item.gst.cgst ? item.gst.cgst  : 0;
                $scope.newOrderItem.SGST = item.gst.sgst ? item.gst.sgst  : 0;
                $scope.newOrderItem.IGST = 0;
                if(item.gst.qbId){
                    $scope.newOrderItem.qbId = item.gst.qbId;
                }
            }
        }else{
            if($scope.calculateIGST){
                $scope.newOrderItem.IGST = item.IGST ? item.IGST : 0;
                $scope.newOrderItem.CGST = 0;
                $scope.newOrderItem.SGST = 0;
            }
            else{
                $scope.newOrderItem.CGST = item.CGST ? item.CGST  : 0;
                $scope.newOrderItem.SGST = item.SGST ? item.SGST : 0;
                $scope.newOrderItem.IGST = 0;
            }
        }
        }else if($scope.taxSetups.otherSetup == 'other'){
            if(!item.otherTaxes || (item.otherTaxes && !item.otherTaxes.length) ){
                $scope.newOrderItem.otherTaxes = [];
                if($scope.otherTaxDefault && $scope.otherTaxDefault.taxs && $scope.otherTaxDefault.taxs.length){
                    for(var i = 0; i< $scope.otherTaxDefault.taxs.length; i++){
                        $scope.newOrderItem.otherTaxes.push($scope.otherTaxDefault.taxs[i]);
                    }
                    item.otherTaxes = $scope.newOrderItem.otherTaxes;
                }
            }else if(item.otherTaxes){
                $scope.newOrderItem.otherTaxes = [];
                if(item.otherTaxes && item.otherTaxes.length){
                    for(var i = 0; i< item.otherTaxes.length; i++){
                        $scope.newOrderItem.otherTaxes.push(item.otherTaxes[i]);
                    }
                }
            }
        }
        if($scope.newOrderItem.itemDetails.looseQty){
            if(invtQty >= 0 && invtQty <= 1){
                $scope.newOrderItem.quantity = (invtQty)*$scope.stepQuantity;
            }else{
                $scope.newOrderItem.quantity = itemQuantity*$scope.stepQuantity;
            }
        }else{
            $scope.newOrderItem.quantity = Math.round(itemQuantity)*$scope.stepQuantity;
        }
        if($scope.newOrderItem.quantity > invtQty){
            $scope.alertMsg("danger", "In New Order Addition", "Quantity should be lesser than inventory quantity for "+$scope.newOrderItem.itemDetails.Product);
            return;
        }
        item.itemQuantity =  $scope.newOrderItem.quantity;
        // if(invtQty >= 0 && invtQty <= 1){
        //         $scope.newOrderItem.quantity = Math.round(invtQty)*$scope.stepQuantity;
        // }else{
        //     console.log("else")
        // $scope.newOrderItem.quantity = Math.round(itemQuantity)*$scope.stepQuantity;
        // }
        if(!item.itemQuantity){
            $scope.alertMsg("danger", "In New Order Addition", "Please Enter a Valid Quantity");
            return;
        }
        // if(!item.orderMRP){
        //     $scope.alertMsg("danger", "In New Order Addition", "Please Enter a Valid Order MRP");
        //     return;
        // }
        //Validate Fields of an item
        if(	   $scope.newOrderItem.itemDetails.Product == ""
            || typeof $scope.newOrderItem.itemDetails.Product == "undefined")
        {
            //throw up modal for reConfirmation of  submission of order
            $scope.alertMsg( "danger", "In New Order addition", "Item Not Selected");
            return;
        }
        // if($scope.newOrderItem.quantity < MIN_ORDER || $scope.newOrderItem.quantity == null)
        // {
        //     $scope.alertMsg("danger", "In New Order Addition", MIN_ORDER + " is minimum number of items that must be ordered" );
        //     return;
        // }
        //Check if the item is already in the order
        if($scope.doesItemExistsInCart($scope.newOrderItemList, "itemCode", $scope.newOrderItem.itemDetails) >= 0){
            $scope.alertMsg("info", "In New Order Addition", "Item already exists in the order, please check");
            return;
        }
        //Price of Order
        if($scope.newOrderItem.itemDetails.DealerPrice){
            $scope.newOrderItem.total = $scope.newOrderItem.quantity  * $scope.newOrderItem.itemDetails.DealerPrice;
            $scope.newOrderItem.orderTotal = $scope.newOrderItem.quantity  * $scope.newOrderItem.itemDetails.orderMRP;
            $scope.newOrderItem.MRP = $scope.newOrderItem.itemDetails.MRP;
            $scope.newOrderItem.orderMRP = $scope.newOrderItem.itemDetails.orderMRP;
            if(invtQty){
                $scope.newOrderItem.totalInventory = invtQty;
            }
        }else{
            $scope.newOrderItem.total = $scope.newOrderItem.quantity  * $scope.newOrderItem.itemDetails.MRP;
            $scope.newOrderItem.orderTotal = $scope.newOrderItem.quantity  * $scope.newOrderItem.itemDetails.orderMRP;
            $scope.newOrderItem.MRP = $scope.newOrderItem.itemDetails.MRP;
            $scope.newOrderItem.orderMRP = $scope.newOrderItem.itemDetails.orderMRP;
            if(invtQty){
                $scope.newOrderItem.totalInventory = invtQty;
            }
        }
        if($scope.data.newOrderStore.customerVariant == 'bulk' && $scope.newOrderItem.itemDetails.BulkPrice){
            //Calculate discount
            // var discount = (($scope.newOrderItem.MRP - $scope.newOrderItem.itemDetails.BulkPrice)/$scope.newOrderItem.MRP) * 100;
            // if(discount > 0){
            //     $scope.newOrderItem.Specials = discount.toFixed(2);
            // }else{
            $scope.newOrderItem.Specials = 0;
            // }
            if(item.gst){
                if(!$scope.taxExclusive){
                    $scope.newOrderItem.taxableValue =
                        (($scope.newOrderItem.quantity  * $scope.newOrderItem.itemDetails.BulkPrice) /
                        (100 + $scope.newOrderItem.CGST + $scope.newOrderItem.SGST + $scope.newOrderItem.IGST)) * 100;
                    $scope.newOrderItem.BulkPrice = $scope.newOrderItem.itemDetails.BulkPrice;
                }else{
                    $scope.newOrderItem.taxableValue = $scope.newOrderItem.itemDetails.BulkPrice *$scope.newOrderItem.quantity  ;
                    $scope.newOrderItem.BulkPrice =
                        ( $scope.newOrderItem.itemDetails.BulkPrice) +
                        (( $scope.newOrderItem.CGST * $scope.newOrderItem.itemDetails.BulkPrice)/100 + ($scope.newOrderItem.SGST* $scope.newOrderItem.itemDetails.BulkPrice)/100 + ($scope.newOrderItem.IGST* $scope.newOrderItem.itemDetails.BulkPrice)/100);
                }
            }else{
                if($scope.taxSetups.otherSetup != 'other'){
                $scope.newOrderItem.taxableValue =
                    (($scope.newOrderItem.quantity  * $scope.newOrderItem.itemDetails.BulkPrice) /
                    (100 + $scope.newOrderItem.CGST + $scope.newOrderItem.SGST + $scope.newOrderItem.IGST)) * 100;
                }else if($scope.taxSetups.otherSetup == 'other' && item.otherTaxes && item.otherTaxes.length){
                    var otherTaxes = 0;
                    for(var j=0; j< item.otherTaxes.length; j++){
                        otherTaxes += item.otherTaxes[j].value;
                    }
                    $scope.newOrderItem.taxableValue = (($scope.newOrderItem.quantity  * $scope.newOrderItem.itemDetails.BulkPrice) / (100 + otherTaxes)) * 100;
                }
            }
        }else{
            if($scope.newOrderItem.itemDetails.DealerPrice){
                //Calculate discount
                var discount = (($scope.newOrderItem.itemDetails.DealerPrice - $scope.newOrderItem.orderMRP)/$scope.newOrderItem.itemDetails.DealerPrice) * 100;
                if(discount > 0){
                    $scope.newOrderItem.Specials = discount.toFixed(2);
                }else{
                    $scope.newOrderItem.Specials = 0;
                }
            }else{
                //Calculate discount
                var discount = (($scope.newOrderItem.MRP - $scope.newOrderItem.orderMRP)/$scope.newOrderItem.MRP) * 100;
                if(discount > 0){
                    $scope.newOrderItem.Specials = discount.toFixed(2);
                }else{
                    $scope.newOrderItem.Specials = 0;
                }
            }
            if(item.gst && $scope.taxSetups.otherSetup != 'other'){
                if(!$scope.taxExclusive){
                    $scope.newOrderItem.taxableValue =
                        (($scope.newOrderItem.quantity  * $scope.newOrderItem.orderMRP) /
                        (100 + $scope.newOrderItem.CGST + $scope.newOrderItem.SGST + $scope.newOrderItem.IGST)) * 100;
                    $scope.newOrderItem.orderMRP = $scope.newOrderItem.itemDetails.orderMRP;
                }else{
                    $scope.newOrderItem.taxableValue = $scope.newOrderItem.itemDetails.orderMRP *$scope.newOrderItem.quantity  ;
                    $scope.newOrderItem.orderMRP =
                        ( $scope.newOrderItem.itemDetails.orderMRP) +
                        (( $scope.newOrderItem.CGST * $scope.newOrderItem.itemDetails.orderMRP)/100 + ($scope.newOrderItem.SGST* $scope.newOrderItem.itemDetails.orderMRP)/100 + ($scope.newOrderItem.IGST* $scope.newOrderItem.itemDetails.orderMRP)/100);
                }
            }else if(item.otherTaxes && item.otherTaxes.length && $scope.taxSetups.otherSetup == 'other'){
                if(!$scope.taxExclusive){
                    var otherTaxes = 0;
                    for(var i=0;i< item.otherTaxes.length; i++){
                        otherTaxes += item.otherTaxes[i].value;
                    }
                    $scope.newOrderItem.taxableValue =
                        (($scope.newOrderItem.quantity  * $scope.newOrderItem.orderMRP) /
                        (100 + otherTaxes)) * 100;
                    $scope.newOrderItem.orderMRP = $scope.newOrderItem.itemDetails.orderMRP;
            }else{
                    var otherTaxes = 0;
                    $scope.newOrderItem.taxableValue = $scope.newOrderItem.itemDetails.orderMRP *$scope.newOrderItem.quantity;
                    if(item.otherTaxes && item.otherTaxes.length){
                        for(var i=0;i< item.otherTaxes.length; i++){
                            otherTaxes += ( item.otherTaxes[i].value * $scope.newOrderItem.itemDetails.orderMRP)/100;
                        }
                    }
                    $scope.newOrderItem.orderMRP = $scope.newOrderItem.itemDetails.orderMRP + otherTaxes;
                }
            }else {
                $scope.newOrderItem.taxableValue =
                    (($scope.newOrderItem.quantity  * $scope.newOrderItem.orderMRP) /
                    (100 + $scope.newOrderItem.CGST + $scope.newOrderItem.SGST + $scope.newOrderItem.IGST)) * 100;
            }
        }
        var date = new Date;
        $scope.newOrderItem.lineComment = {};
        $scope.newOrderItem.lineComment.date_added = [date.getFullYear(),(date.getMonth()+1).padLeft(), date.getDate().padLeft() ].join('-') + ' '
            + [date.getHours().padLeft(), date.getMinutes().padLeft(), date.getSeconds().padLeft()].join (':');
        $scope.newOrderItem.lineComment.username = $scope.user.role ? $scope.user.username : 'PORTAL ADMIN';
        $scope.newOrderItem.lineComment.userphone = $scope.user.sellerphone ? $scope.user.sellerphone : '';
        $scope.newOrderItem.lineComment.comment = lineComment ? lineComment : '';
        //Push items to the order items list
        $scope.newOrderItemList.unshift($scope.newOrderItem);
        var indexInCatalogue = $scope.doesItemExistsInArray($scope.items, "itemCode", $scope.newOrderItem.itemDetails);
        $scope.itemsInModal[indexInCatalogue].added        = $scope.newOrderItemList.length - 1 ;
        //Initialize
        $scope.newOrderItem = {
            itemDetails:{},
            quantity: 1,
            total: 0,
            MRP:0,
            orderMRP:0,
            CGST:0,
            SGST:0,
            IGST : 0,
            otherTaxes: []
        };
        $scope.data.category = "";
        //To display option to add item need to be displayed
        $scope.displayAddItemOption = false;
        return $scope.newOrderItemList.length;
    }//End of addItemToOrder
    //Adding item based on Ghana country
    $scope.addItemToOrderGhana = function ( item, itemQuantity, lineComment,invtQty){
        itemQuantity = 1;
        item.itemQuantity = 1;
        var defaultTax ='';
        if($scope.tax.length){
            for(var i=0;i<$scope.tax.length;i++){
                if($scope.tax[i].default){
                    defaultTax = $scope.tax[i];
                }
            }
        }
        $scope.newOrderItem.itemDetails = angular.copy(item);
        if($scope.taxSetups.otherSetup != 'other'){
            if(item.gst){
                $scope.newOrderItem.CGST = item.gst.cgst ? item.gst.cgst  : (defaultTax.cgst ? defaultTax.cgst  : 0);
                $scope.newOrderItem.SGST = item.gst.sgst ? item.gst.sgst  : (defaultTax.sgst ? defaultTax.sgst : 0);
                $scope.newOrderItem.IGST = item.gst.igst ? item.gst.igst : (defaultTax.igst ? defaultTax.igst : 0);
            }else{
                if(defaultTax){
                    $scope.newOrderItem.CGST = defaultTax.cgst ? defaultTax.cgst  : 0;
                    $scope.newOrderItem.SGST = defaultTax.sgst ? defaultTax.sgst : 0;
                    $scope.newOrderItem.IGST = defaultTax.igst ? defaultTax.igst : 0;
                }else {
                    $scope.newOrderItem.CGST = item.gst.cgst ? item.gst.cgst  : 0;
                    $scope.newOrderItem.SGST = item.gst.sgst ? item.gst.sgst  : 0;
                    $scope.newOrderItem.IGST = item.gst.igst ? item.gst.igst : 0;
                }
            }
        }else if($scope.taxSetups.otherSetup == 'other'){
            if(!item.otherTaxes || (item.otherTaxes && !item.otherTaxes.length) ){
                $scope.newOrderItem.otherTaxes = [];
                if($scope.otherTaxDefault && $scope.otherTaxDefault.taxs && $scope.otherTaxDefault.taxs.length){
                    for(var i = 0; i< $scope.otherTaxDefault.taxs.length; i++){
                        $scope.newOrderItem.otherTaxes.push($scope.otherTaxDefault.taxs[i]);
                    }
                    item.otherTaxes = $scope.newOrderItem.otherTaxes;
                }
            }else if(item.otherTaxes){
                $scope.newOrderItem.otherTaxes = [];
                if(item.otherTaxes && item.otherTaxes.length){
                    for(var i = 0; i< item.otherTaxes.length; i++){
                        $scope.newOrderItem.otherTaxes.push(item.otherTaxes[i]);
                    }
                }
            }
        }
        if($scope.newOrderItem.itemDetails.looseQty){
            if(invtQty >= 0 && invtQty <= 1){
                $scope.newOrderItem.quantity = (invtQty)*$scope.stepQuantity;
            }else{
                $scope.newOrderItem.quantity = itemQuantity*$scope.stepQuantity;
            }
        }else{
            $scope.newOrderItem.quantity = Math.round(itemQuantity)*$scope.stepQuantity;
        }
        if($scope.newOrderItem.quantity > invtQty){
            $scope.alertMsg("danger", "In New Order Addition", "Quantity should be lesser than inventory quantity for "+$scope.newOrderItem.itemDetails.Product);
            return;
        }
        item.itemQuantity =  $scope.newOrderItem.quantity;
        // if(invtQty >= 0 && invtQty <= 1){
        //         $scope.newOrderItem.quantity = Math.round(invtQty)*$scope.stepQuantity;
        // }else{
        //     console.log("else")
        // $scope.newOrderItem.quantity = Math.round(itemQuantity)*$scope.stepQuantity;
        // }
        if(!item.itemQuantity){
            $scope.alertMsg("danger", "In New Order Addition", "Please Enter a Valid Quantity");
            return;
        }
        // if(!item.orderMRP){
        //     $scope.alertMsg("danger", "In New Order Addition", "Please Enter a Valid Order MRP");
        //     return;
        // }
        //Validate Fields of an item
        if(	   $scope.newOrderItem.itemDetails.Product == ""
            || typeof $scope.newOrderItem.itemDetails.Product == "undefined")
        {
            //throw up modal for reConfirmation of  submission of order
            $scope.alertMsg( "danger", "In New Order addition", "Item Not Selected");
            return;
        }
        // if($scope.newOrderItem.quantity < MIN_ORDER || $scope.newOrderItem.quantity == null)
        // {
        //     $scope.alertMsg("danger", "In New Order Addition", MIN_ORDER + " is minimum number of items that must be ordered" );
        //     return;
        // }
        //Check if the item is already in the order
        if($scope.doesItemExistsInCart($scope.newOrderItemList, "itemCode", $scope.newOrderItem.itemDetails) >= 0){
            $scope.alertMsg("info", "In New Order Addition", "Item already exists in the order, please check");
            return;
        }
        //Price of Order
        if($scope.newOrderItem.itemDetails.DealerPrice){
            $scope.newOrderItem.total = $scope.newOrderItem.quantity  * $scope.newOrderItem.itemDetails.DealerPrice;
            $scope.newOrderItem.orderTotal = $scope.newOrderItem.quantity  * $scope.newOrderItem.itemDetails.orderMRP;
            $scope.newOrderItem.MRP = $scope.newOrderItem.itemDetails.MRP;
            $scope.newOrderItem.orderMRP = $scope.newOrderItem.itemDetails.orderMRP;
            if(invtQty){
                $scope.newOrderItem.totalInventory = invtQty;
            }
        }else{
            $scope.newOrderItem.total = $scope.newOrderItem.quantity  * $scope.newOrderItem.itemDetails.MRP;
            $scope.newOrderItem.orderTotal = $scope.newOrderItem.quantity  * $scope.newOrderItem.itemDetails.orderMRP;
            $scope.newOrderItem.MRP = $scope.newOrderItem.itemDetails.MRP;
            $scope.newOrderItem.orderMRP = $scope.newOrderItem.itemDetails.orderMRP;
            if(invtQty){
                $scope.newOrderItem.totalInventory = invtQty;
            }
        }
        if($scope.data.newOrderStore.customerVariant == 'bulk' && $scope.newOrderItem.itemDetails.BulkPrice){
            //Calculate discount
            // var discount = (($scope.newOrderItem.MRP - $scope.newOrderItem.itemDetails.BulkPrice)/$scope.newOrderItem.MRP) * 100;
            // if(discount > 0){
            //     $scope.newOrderItem.Specials = discount.toFixed(2);
            // }else{
            $scope.newOrderItem.Specials = 0;
            // }
            if(item.gst || defaultTax){
                if(!$scope.taxExclusive){
                    $scope.newOrderItem.taxableValue =
                        (($scope.newOrderItem.quantity  * $scope.newOrderItem.itemDetails.BulkPrice) /
                            (100 + $scope.newOrderItem.CGST + $scope.newOrderItem.SGST + $scope.newOrderItem.IGST)) * 100;
                    $scope.newOrderItem.BulkPrice = $scope.newOrderItem.itemDetails.BulkPrice;
                }else{
                    $scope.newOrderItem.taxableValue = $scope.newOrderItem.itemDetails.BulkPrice *$scope.newOrderItem.quantity  ;
                    $scope.newOrderItem.BulkPrice =
                        ( $scope.newOrderItem.itemDetails.BulkPrice) +
                        (( $scope.newOrderItem.CGST * $scope.newOrderItem.itemDetails.BulkPrice)/100 + ($scope.newOrderItem.SGST* $scope.newOrderItem.itemDetails.BulkPrice)/100 + ($scope.newOrderItem.IGST* $scope.newOrderItem.itemDetails.BulkPrice)/100);
                }
            }else{
                if($scope.taxSetups.otherSetup != 'other'){
                    $scope.newOrderItem.taxableValue =
                        (($scope.newOrderItem.quantity  * $scope.newOrderItem.itemDetails.BulkPrice) /
                            (100 + $scope.newOrderItem.CGST + $scope.newOrderItem.SGST + $scope.newOrderItem.IGST)) * 100;
                }else if($scope.taxSetups.otherSetup == 'other' && item.otherTaxes && item.otherTaxes.length){
                    var otherTaxes = 0;
                    for(var j=0; j< item.otherTaxes.length; j++){
                        otherTaxes += item.otherTaxes[j].value;
                    }
                    $scope.newOrderItem.taxableValue = (($scope.newOrderItem.quantity  * $scope.newOrderItem.itemDetails.BulkPrice) / (100 + otherTaxes)) * 100;
                }
            }
        }else{
            if(item.Specials){
                //Calculate discount
                var discount = Number(item.Specials);
                if(discount > 0){
                    $scope.newOrderItem.Specials = discount.toFixed(2);
                }else{
                    $scope.newOrderItem.Specials = 0;
                }
            }else{
                //Calculate discount
                $scope.newOrderItem.Specials = 0;
            }
            if((item.gst || defaultTax) && $scope.taxSetups.otherSetup != 'other'){
                if(!$scope.taxExclusive){
                    $scope.newOrderItem.taxableValue =
                        (($scope.newOrderItem.quantity  * $scope.newOrderItem.orderMRP) /
                            (100 + $scope.newOrderItem.CGST + $scope.newOrderItem.SGST + $scope.newOrderItem.IGST)) * 100;
                    $scope.newOrderItem.orderMRP = $scope.newOrderItem.itemDetails.orderMRP;
                }else{
                    $scope.newOrderItem.taxableValue = $scope.newOrderItem.itemDetails.orderMRP *$scope.newOrderItem.quantity ;
                    $scope.newOrderItem.orderMRP =
                        ( $scope.newOrderItem.itemDetails.orderMRP) +
                        (( $scope.newOrderItem.CGST * $scope.newOrderItem.itemDetails.orderMRP)/100 + ($scope.newOrderItem.SGST* $scope.newOrderItem.itemDetails.orderMRP)/100 + ($scope.newOrderItem.IGST* $scope.newOrderItem.itemDetails.orderMRP)/100);
                }
            }else if(item.otherTaxes && item.otherTaxes.length && $scope.taxSetups.otherSetup == 'other'){
                if(!$scope.taxExclusive){
                    var otherTaxes = 0;
                    for(var i=0;i< item.otherTaxes.length; i++){
                        otherTaxes += item.otherTaxes[i].value;
                    }
                    $scope.newOrderItem.taxableValue =
                        (($scope.newOrderItem.quantity  * $scope.newOrderItem.orderMRP) /
                            (100 + otherTaxes)) * 100;
                    $scope.newOrderItem.orderMRP = $scope.newOrderItem.itemDetails.orderMRP;
                }else{
                    var otherTaxes = 0;
                    $scope.newOrderItem.taxableValue = $scope.newOrderItem.itemDetails.orderMRP *$scope.newOrderItem.quantity;
                    if(item.otherTaxes && item.otherTaxes.length){
                        for(var i=0;i< item.otherTaxes.length; i++){
                            otherTaxes += ( item.otherTaxes[i].value * $scope.newOrderItem.itemDetails.orderMRP)/100;
                        }
                    }
                    $scope.newOrderItem.orderMRP = $scope.newOrderItem.itemDetails.orderMRP + otherTaxes;
                }
            }else {
                $scope.newOrderItem.taxableValue =
                    (($scope.newOrderItem.quantity  * $scope.newOrderItem.orderMRP) /
                        (100 + $scope.newOrderItem.CGST + $scope.newOrderItem.SGST + $scope.newOrderItem.IGST)) * 100;
            }
        }
        var date = new Date;
        $scope.newOrderItem.lineComment = {};
        $scope.newOrderItem.lineComment.date_added = [date.getFullYear(),(date.getMonth()+1).padLeft(), date.getDate().padLeft() ].join('-') + ' '
            + [date.getHours().padLeft(), date.getMinutes().padLeft(), date.getSeconds().padLeft()].join (':');
        $scope.newOrderItem.lineComment.username = $scope.user.role ? $scope.user.username : 'PORTAL ADMIN';
        $scope.newOrderItem.lineComment.userphone = $scope.user.sellerphone ? $scope.user.sellerphone : '';
        $scope.newOrderItem.lineComment.comment = lineComment ? lineComment : '';
        //Push items to the order items list
        $scope.newOrderItemList.unshift($scope.newOrderItem);
        var indexInCatalogue = $scope.doesItemExistsInArray($scope.items, "itemCode", $scope.newOrderItem.itemDetails);
        $scope.itemsInModal[indexInCatalogue].added        = $scope.newOrderItemList.length - 1 ;
        //Initialize
        $scope.newOrderItem = {
            itemDetails:{},
            quantity: 1,
            total: 0,
            MRP:0,
            orderMRP:0,
            CGST:0,
            SGST:0,
            IGST : 0,
            otherTaxes: []
        };
        $scope.data.category = "";
        //To display option to add item need to be displayed
        $scope.displayAddItemOption = false;
        return $scope.newOrderItemList.length;
    }
    //Adding item to the QUOTATION
    $scope.addItemToQuotation = function( item, quotationitemQuantity, qtnmrp){
        $scope.newQuotationItem.itemDetails = item;
        if($scope.calculateQuotationIGST){
            $scope.newQuotationItem.IGST = item.IGST;
            $scope.newQuotationItem.CGST = 0;
            $scope.newQuotationItem.SGST= 0;
        }
        else{
            $scope.newQuotationItem.CGST = item.CGST;
            $scope.newQuotationItem.SGST= item.SGST;
            $scope.newQuotationItem.IGST = 0;
        }
        $scope.newQuotationItem.quantity = (quotationitemQuantity)*$scope.stepQuantity;
        //Validate Fields of an item
        if(	   $scope.newQuotationItem.itemDetails.Product == ""
            || typeof $scope.newQuotationItem.itemDetails.Product == "undefined")
        {
            //throw up modal for reConfirmation of  submission of order
            $scope.alertMsg( "danger", "In New Order addition", "Item Not Selected");
            return;
        }
        if($scope.newQuotationItem.quantity < MIN_QUOTATION || $scope.newQuotationItem.quantity == null)
        {
            $scope.alertMsg("danger", "In New Quotation", MIN_QUOTATION+ " is minimum number of items that must be entered" );
            return;
        }
        //Check if the item is already in the order
        if($scope.doesItemExistsInCart($scope.newQuotationItemList, "Product", $scope.newQuotationItem.itemDetails) >= 0){
            $scope.alertMsg("info", "In New Quotation Addition", "Item already exists in the Quotation, please check");
            return;
        }
        //Price of Order
        $scope.newQuotationItem.total = $scope.newQuotationItem.orderTotal =  $scope.newQuotationItem.quantity  * $scope.newQuotationItem.itemDetails.MRP;
        $scope.newQuotationItem.MRP = $scope.newQuotationItem.orderMRP = $scope.newQuotationItem.itemDetails.MRP;
        if(qtnmrp){
            console.log(qtnmrp)
            $scope.newQuotationItem.MRP = qtnmrp;
        }
        //Push items to the order items list
        $scope.newQuotationItemList.push($scope.newQuotationItem);
        console.log( $scope.newQuotationItemList)
        console.log($scope.newQuotationItem)
        var indexInCatalogue = $scope.doesItemExistsInArray($scope.items, "Product", $scope.newQuotationItem.itemDetails);
        $scope.quotationitemsInModal[indexInCatalogue].added = $scope.newQuotationItemList.length - 1 ;
        console.log("Added "+$scope.quotationitemsInModal[indexInCatalogue].added)
        //Initialize
        $scope.newQuotationItem = {
            itemDetails:{},
            quantity: 1,
            total: 0,
            MRP:0,
            orderMRP:0,
            CGST:0,
            SGST:0,
            IGST : 0
        };
        $scope.data.category = "";
        //To display option to add item need to be displayed
        $scope.displayAddItemOption = false;
        return $scope.newQuotationItemList.length;
    }//End of addItemToQuotation
    $scope.deleteItemFromOrder = function(item, index){
        bootbox.confirm("Are you sure you want to delete the item from cart?", function(result) {
            console.log(result);
            if (result) {
                $scope.$apply(function(){
                    var indexInCatalogue = $scope.doesItemExistsInArray($scope.items, "itemCode", item.itemDetails);
                    if(indexInCatalogue >=0){
                        $scope.itemsInModal[indexInCatalogue].added        = -1;
                        $scope.itemsInModal[indexInCatalogue].itemQuantity = '';
                    }
                    //remove items from the order
                    $scope.newOrderItemList.splice(index, 1);
                })
                if($scope.newOrderItemList.length == 0){
                    jQuery.noConflict();
                    $("#itemsInCart").modal('hide');
                }
                var temp = 0;
                $scope.orderTotalPrice = $scope.dealerOrderTotalPrice;
                for(var i=0; i<$scope.newOrderItemList.length; i++) {
                    temp = $scope.newOrderItemList[i].quantity * $scope.newOrderItemList[i].MRP;
                    $scope.orderTotalPrice = $scope.orderTotalPrice + temp;
                }
            }
        })
    };
    //delete purchase item//
    $scope.deleteItemFromPurchaseOrder = function(item, index){
        bootbox.confirm("Are you sure you want to delete?", function(result) {
            console.log(result);
            if (result) {
                $scope.$apply(function(){
                    var indexInCatalogue = $scope.doesItemExistsInArray($scope.items, "Product", item.itemDetails);
                    $scope.PurchaseOrderitemsInModal[indexInCatalogue].added        = -1;
                    $scope.PurchaseOrderitemsInModal[indexInCatalogue].itemQuantity = '';
                    //remove items from the order
                    $scope.newPurchaseOrderItemList.splice(index, 1);
                });
                if($scope.newPurchaseOrderItemList.length == 0){
                    jQuery.noConflict();
                    $("#itemsInCart1").modal('hide');
                }
            }
        })
    };
    $scope.deleteItemFromQuotation = function(item, index){
        bootbox.confirm("Are you sure you want to delete?", function(result) {
            console.log(result);
            if (result) {
                $scope.$apply(function(){
                    var quotationindexInCatalogue = $scope.doesItemExistsInArray($scope.items, "Product", item.itemDetails);
                    $scope.quotationitemsInModal[quotationindexInCatalogue].added = -1;
                    $scope.quotationitemsInModal[quotationindexInCatalogue].quotationitemQuantity = '';
                    //remove items from the order
                    $scope.newQuotationItemList.splice(index, 1);
                });
                if($scope.newQuotationItemList.length == 0){
                    jQuery.noConflict();
                    $("#itemsInCart").modal('hide');
                }
            }
        })
    }
    //Function to convert quotation to order, using the passed quotation object and changing the type to ORDER, Assigning new orderId and re-assigning the quotation id
    $scope.convertToOrder =function(qtnid){
        console.log("Quotation ID :"+qtnid+" converting to order");
        $scope.convertedQuotation = [];
        bootbox.confirm("Are you sure?", function(result){
            if(result){
                $http.get("/dash/orders/" + qtnid)
                    .success( function(response) {
                        $scope.orderDetails =response;
                        quotationObject =response;
                        $scope.neworderid=$scope.generateOrderId();//Assign a new Order id for all the order
                        for (var i=0; i<quotationObject.length; i++){
                            quotationObject[i]._id = null;
                            quotationObject[i].quotationid=quotationObject[i].orderId;
                            quotationObject[i].type='Order';
                            quotationObject[i].orderId=$scope.neworderid;
                            quotationObject[i].UOM = '';
                            var date = new Date();
                            var dformat = [ date.getFullYear(),(date.getMonth()+1).padLeft(), date.getDate().padLeft()].join('-') + ' '
                                + [date.getHours().padLeft(), date.getMinutes().padLeft(), date.getSeconds().padLeft()].join (':');
                            quotationObject[i].date_added = dformat;
                            $scope.convertedQuotation.push(quotationObject[i])
                        }
                        $http.post("/dash/convertToOrder/" , $scope.convertedQuotation)
                            .success(function(result){
                                // $scope.refreshQuotations()
                                //console.log(result)
                            })
                    })
            }
        })
    }
    $scope.checkCart = function(){
        var a=false;
        for(var i=0; i<$scope.newOrderItemList.length; i++){
            if($scope.newOrderItemList[i].quantity == ''){
                a = true;
                bootbox.alert({
                    title : 'ERROR',
                    message : "Please enter quantity for "+$scope.newOrderItemList[i].itemDetails.Product+" and save.",
                    className : 'text-center'
                });
                return false;
            }
        }
        if(!a){
            jQuery.noConflict();
            $("#itemsInCart").modal('hide');
            $scope.changeOrderView(2)
        }
    }
    //check purchaseitem cart//
    $scope.checkPurchaseCart = function(){
        var a=false;
        for(var i=0; i<$scope.newPurchaseOrderItemList.length; i++){
            if($scope.newPurchaseOrderItemList[i].quantity == ''){
                a = true;
                bootbox.alert({
                    title : 'ERROR',
                    message : "Please enter quantity for "+$scope.newPurchaseOrderItemList[i].itemDetails.Product+" and save.",
                    className : 'text-center'
                });
                return false;
            }
        }
        if(!a){
            jQuery.noConflict();
            $("#itemsInCart1").modal('hide');
            $scope.changePurchaseOrderView(32)
        }
    }
    //To invoke the modal to display item details.
    $scope.showItemDetails = function( itemToDisplayInModal){
        $scope.item = itemToDisplayInModal.itemDetails;
    };
    //To invoke the modal to display purchaseitem details.
    $scope.showPurchaseItemDetails = function( itemToDisplayInModal){
        $scope.PurchaseItem = itemToDisplayInModal;
    };
    //To invoke the modal to display item details.
    $scope.showQuotationItemDetails = function( quotationitemToDisplayInModal){
        $scope.quotationitem = quotationitemToDisplayInModal;
    };
    $scope.reciveditemdetails = function(id){
        $http.get("/dash/inventory/transaction/details/" + id)
            .success(function (response) {
                $scope.purchaseOrder_transactionsDetails = response;
            });
    }
    //SubmitPurchaseOrder
    $scope.submitPurchaseOrder = function(){
        console.log(" checking submitPurchaseOrder ")
        console.log(" cheking dataaaaaa.....");
        console.log($scope.data);
        console.log("cheking purchase orders......");
        console.log($scope.newPurchaseOrderItemList);
        //Validate that item list is not empty
        if($scope.newPurchaseOrderItemList.length == 0){
            $scope.alertMsg("danger", "In New PurchaseOrder Addition", "Item list is empty for order");
            return;
        }
        //Validate that sales person and store are not empty
        /*if(typeof $scope.data.newOrderSalesPerson.sellername === "undefined" ||
         $scope.data.newOrderSalesPerson.sellername === "")
         {
         $scope.alertMsg("danger", "In New Order Addition", "Sales person is not choosen for new Order");
         return;
         }*/
        // console.log("$scope.data.newOrderStore")
        console.log($scope.data.newPurchaseOrderSuppliers.SupplierName)
        if(typeof $scope.data.newPurchaseOrderSuppliers.SupplierName === "undefined" ||
            $scope.data.newPurchaseOrderSuppliers.SupplierName === "")
        {
            $scope.alertMsg("danger", "In New Purchase Order Addition", "Supplier is not choosen for new order");
            return;
        }
        //DATE AND TIMESTAMP
        $scope.data.newOrderDate = new Date();
        $scope.PurchaseOrderTaxtotal();
        var date = 	$scope.data.newOrderDate;
        $scope.data.newOrderDateTime = [date.getFullYear(),(date.getMonth()+1).padLeft(), date.getDate().padLeft() ].join('-') + ' '
            + [date.getHours().padLeft(), date.getMinutes().padLeft(), date.getSeconds().padLeft()].join (':');
        //Lets generate order id
        $scope.data.PurchaseOrderId = $scope.generatePurchaseOrderId();
        //Comment to say order is added from the portal
        var portalComment = {
            "comment" : "-------- Purchase Order Added from portal ",
            "date" : $scope.data.newOrderDateTime,
            "userphone" : "",
            "username" : ($scope.user.role)? $scope.user.username : "Portal Admin or Portal Access"
        };
        //There could be changes in sales person and store during the process of ordering
        //Reassign value of sales person and store in item list
        var itemAsStoredInMongo;
        console.log($scope.newPurchaseOrderItemList)
        for(var i=0; i < $scope.newPurchaseOrderItemList.length; i++) {
            itemAsStoredInMongo = {
                "date_added": $scope.data.newOrderDateTime,
                "date" : (new Date())+"",
                "PurchaseOrderId": $scope.data.PurchaseOrderId,
                "suppliercode": $scope.data.newPurchaseOrderSuppliers.SupplierCode,
                "suppliername": $scope.data.newPurchaseOrderSuppliers.SupplierName,
                "supplierphone": $scope.data.newPurchaseOrderSuppliers.Phone,
                "shipping_address": $scope.data.newpurchaseOrderShipping_address,
                "Address": $scope.data.newPurchaseOrderSuppliers.Address,
                "itemcode": $scope.newPurchaseOrderItemList[i].itemDetails.itemCode,
                "medicine": $scope.newPurchaseOrderItemList[i].itemDetails.Product,
                "quantity": $scope.newPurchaseOrderItemList[i].quantity,
                "seller": ($scope.user.seller)? $scope.user.seller : ($scope.data.newPurchaseOrderSalesPerson.sellerphone)?$scope.data.newPurchaseOrderSalesPerson.sellerphone.toString():'',
                "MRP": $scope.newPurchaseOrderItemList[i].MRP,
                "GST": {'cgst' : $scope.newPurchaseOrderItemList[i].CGST ,
                    'sgst' : $scope.newPurchaseOrderItemList[i].SGST ,
                    'igst' : $scope.newPurchaseOrderItemList[i].IGST },
                "orderMRP": $scope.newPurchaseOrderItemList[i].orderMRP,
                "Special": Number($scope.newPurchaseOrderItemList[i].Specials),
                "sellername": $scope.user.username || $scope.data.newPurchaseOrderSalesPerson.sellername || 'PORTAL',
                "stockist": ($scope.data.newPurchaseOrderSuppliers.Stockist)? $scope.data.newPurchaseOrderSuppliers.Stockist :  "",
                "stockistname": $scope.data.newPurchaseOrderSuppliers.StockistName,
                "billing_address": $scope.data.newPurchaseOrderBilling_address,
                "stockistarea": $scope.data.newPurchaseOrderSuppliers.Area,
                "fulfiller": $scope.data.newPurchaseOrderSuppliers.sellerphone,
                "status": $scope.nav[32].status[0],
                "chequenum": $scope.data.chequenum,
                "bankname": $scope.data.bankname,
                "total": Number(($scope.newPurchaseOrderTotalAmount).toFixed(2)),
                "orderTotal" : Number(($scope.newPurchaseOrderMRPTotalAmount).toFixed(2)),
                "GST_Total":{ 'cgst' : Number(($scope.PurchaseOrderGST.CSGSTTotal).toFixed(2)) ,
                    'sgst' : Number(($scope.PurchaseOrderGST.SGSTTotal).toFixed(2)),
                    'igst' : Number(($scope.PurchaseOrderGST.IGSTTotal).toFixed(2))},
                "comment": [],
                "type": "PurchaseOrder",
                "latitude": 0,
                "longitude": 0,
                "api_key": "",
                "freight": $scope.data.newPurchaseOrderfreight,
                "lineComment" : [$scope.newPurchaseOrderItemList[i].lineComment],
                "lineStatus" : $scope.nav[32].status[0]
            }
            if ($scope.data.newpurchaseOrderComment != "") {
                itemAsStoredInMongo.comment.unshift(
                    {
                        "comment" 	:	$scope.data.newpurchaseOrderComment,
                        "date"    	:	$scope.data.newOrderDateTime,
                        "username"	:	"Portal",
                        "userphone"	:	""
                    });
            }
            //Each Item is segregated into one element of newOrder Array
            //Thats how orders are stored in mongo
            $scope.newOrder.push(itemAsStoredInMongo);
        }
        //Prompt user for prompt to add his comments to the order
        //Its better to give comment box in html than as prompt
        //throw up modal for reConfirmation of  submission of order
        var reconfirm = $uibModal.open(
            {
                templateUrl: 'purchaseorder_details.html',
                controller: "PurchaseOrderModalController",
                resolve: {
                    purchaseorder: function () {
                        return $scope.newOrder;
                    },
                    totalAmount: function(){
                        return $scope.newPurchaseOrderTotalAmount;
                    },
                    taxableAmount : function(){
                        return $scope.newPurchaseOrderExcTaxAmount;
                    },
                    purchaseorderTotalAmount : function(){
                        return $scope.newPurchaseOrderMRPTotalAmount;
                    },
                    GST : function(){
                        return $scope.PurchaseOrderGST;
                    },
                    nav : function(){
                        //console.log($scope.nav)
                        return $scope.nav;
                    }
                },
                size: 'xl'
            }
        );
        //Check the selection of the user
        reconfirm.result.then(function (selection) {
            $scope.selection = selection;
            //If user has returned confirm from the modal, submit to the server and fetch new set of orders
            if($scope.selection == "confirm"){
                //HTTP Header is not being set here, Session id is being set in
                //request in cookies.
                //HTTP post to post order to the server
                console.log(" purchase order orderssssss......");
                console.log($scope.newOrder);
                $http.post("/dash/purchase/create/" + $scope.data.PurchaseOrderId, $scope.newOrder)
                    .success(function (response) {
                        console.log(" purchase order results......");
                        console.log(response);
                        //Show up the add order button again
                        $scope.addPurchaseOrderButton = true;
                        $scope.PurchaseorderViewTab = 0;
                        $scope.data.newPurchaseOrderStore = {};
                        $scope.data.newPurchaseOrderSalesPerson = {};
                        $scope.a.PurchaseOrderselectedSalesPerson = "";
                        $scope.disableSalesPersonSelection = true;
                        $scope.a.selectedSuppliers = {};
                        $scope.data.tempCity = "";
                        $scope.data.tempState = "";
                        $scope.showSupplierDetails = false;
                        //to bring the latest addition to the top
                        $scope.sortOrder = false;
                        $scope.clearFilter(32);
                        renderWeeklyDashboard();
                        $scope.renderDashboardPurchaseOrdersReport();
                        // $http.post("/dash/purchase/orders")
                        //     .success(function (response) {
                        //         $scope.purchaseOrder = response;
                        //         $scope.viewLength = 0;
                        //         $scope.newViewBy = viewBy.purchaseorder;
                        //         console.log("Get all Purchase Order...");
                        //         console.log($scope.purchaseOrder);
                        //
                        //         if($scope.purchaseOrder.length < viewBy.purchaseorder){
                        //             $scope.newViewBy = $scope.purchaseOrder.length;
                        //         }
                        //
                        //         // $scope.transactionCount(response,32)
                        //         $scope.renderPurchaseOrders(response)
                        //
                        //     })
                    });
                $scope.orderDetails = [];
                toastr.success("New Purchase Order Successfully Submitted")
                // $scope.alertMsg("green", "", "New Order Successfully Submitted");
            }
            if($scope.selection == "cancel"){
                //On cancellation at modal, the new order should be reinitialized
                //else, all the previous items will get reinserted into the new Order
                $scope.newOrder = [];
            }
        }, function () {
            console.log('Modal dismissed at: ' + new Date());
            $scope.newOrder = [];
        });
    }//End of submitPurchaseOrder
    //For submitting new QUOTATION
    $scope.submitQuotation = function(){
        // $scope.portaltype='Quotation'
        //console.log("entered submitqtn")
        //Validate that item list is not empty
        if($scope.newQuotationItemList.length == 0){
            $scope.alertMsg("danger", "In New Quotation Addition", "Item list is empty for Quotation");
            return;
        }
        //Validate that sales person and store are not empty
        /*if(typeof $scope.data.newOrderSalesPerson.sellername === "undefined" ||
         $scope.data.newOrderSalesPerson.sellername === "")
         {
         $scope.alertMsg("danger", "In New Order Addition", "Sales person is not choosen for new Order");
         return;
         }*/
        if(typeof $scope.data.newQuotationStore.DealerName === "undefined" ||
            $scope.data.newQuotationStore.DealerName === "")
        {
            $scope.alertMsg("danger", "In New Quotation Addition", "Store is not choosen for new quotation");
            return;
        }
        //DATE AND TIMESTAMP
        $scope.data.newQuotationDate = new Date();
        $scope.Taxtotal();
        var date = 	$scope.data.newQuotationDate;
        $scope.data.newQuotationDateTime = [date.getFullYear(),(date.getMonth()+1).padLeft(), date.getDate().padLeft() ].join('-') + ' '
            + [date.getHours().padLeft(), date.getMinutes().padLeft(), date.getSeconds().padLeft()].join (':');
        //Lets generate order id
        $scope.data.newQuotationId = $scope.generateQuotationId();
        //Comment to say order is added from the portal
        var portalComment = {
            "comment" : "-------- Quotation Added from portal ",
            "date" : $scope.data.newQuotationDateTime,
            "userphone" : "",
            "username" : ($scope.user.role)? $scope.user.username : "Portal Admin or Portal Access"
        };
        //There could be changes in sales person and store during the process of ordering
        //Reassign value of sales person and store in item list
        var quotationitemAsStoredInMongo;
        for(var i=0; i < $scope.newQuotationItemList.length; i++) {
            quotationitemAsStoredInMongo = {
                "date_added": $scope.data.newQuotationDateTime,
                "quotationid": '',
                "converted":false,
                "orderId": $scope.data.newQuotationId,
                "dealercode": $scope.data.newQuotationStore.Dealercode,
                "dealername": $scope.data.newQuotationStore.DealerName,
                "dealerphone": $scope.data.newQuotationStore.Phone,
                "shipping_address": $scope.data.newQuotationShipping_address,
                "Address": $scope.data.newQuotationStore.Address,
                "itemcode": $scope.newQuotationItemList[i].itemDetails.itemCode,
                "item": "",
                "quantity": parseFloat($scope.newQuotationItemList[i].quantity),
                "seller": $scope.user.seller,
                "MRP": $scope.newQuotationItemList[i].MRP,
                "quotation_uom": ($scope.newQuotationItemList[i].itemDetails.quotation_uom)? $scope.newQuotationItemList[i].itemDetails.quotation_uom : null,
                "CGST": $scope.newQuotationItemList[i].CGST,
                "SGST": $scope.newQuotationItemList[i].SGST,
                "IGST": $scope.newQuotationItemList[i].IGST,
                "orderMRP": $scope.newQuotationItemList[i].orderMRP,
                "Special": $scope.newQuotationItemList[i].itemDetails.Specials,
                "sellername": $scope.user.username  || 'PORTAL',
                "stockist": ($scope.data.newQuotationStore.Stockist)? $scope.data.newQuotationStore.Stockist :  "",
                "stockistname": $scope.data.newQuotationStore.StockistName,
                "billing_address": $scope.data.newQuotationBilling_address,
                "stockistarea": $scope.data.newQuotationStore.Area,
                "fulfiller": "",
                "status": $scope.nav[1].status[0],
                "chequenum": $scope.data.quotationchequenum,
                "bankname": $scope.data.quotationbankname,
                "total":($scope.newQuotationTotalAmount).toFixed(2),
                "orderTotal" : ($scope.newQuotationTotalAmount).toFixed(2),
                "comment": [{
                    "comment": "",
                    "date": $scope.data.newQuotationDateTime,
                    "userphone": "",
                    "username": ($scope.user.role)? $scope.user.username : "Portal Admin or Portal Access"
                },
                ],
                "type": "Quotation",
                "latitude": 0,
                "longitude": 0,
                "api_key": "",
                "medicine": $scope.newQuotationItemList[i].itemDetails.Product,
                "freight": $scope.data.newQuotationfreight
            }
            if ($scope.data.newQuotationComment != "") {
                quotationitemAsStoredInMongo.comment.unshift(
                    {
                        "comment" 	:	$scope.data.newQuotationComment,
                        "date"    	:	$scope.data.newQuotationDateTime,
                        "username"	:	"Portal",
                        "userphone"	:	""
                    });
            }
            //Each Item is segregated into one element of newOrder Array
            //Thats how orders are stored in mongo
            $scope.newQuotation.push(quotationitemAsStoredInMongo);
        }
        //Prompt user for prompt to add his comments to the order
        //Its better to give comment box in html than as prompt
        //throw up modal for reConfirmation of  submission of order
        var reconfirm = $uibModal.open(
            {
                templateUrl: 'quotation_details.html',
                controller: "quotationModalController",
                resolve: {
                    quotation: function () {
                        return $scope.newQuotation;
                    },
                    newQuotationTaxAmount: function(){
                        return $scope.newQuotationTotalAmount;
                    },
                    GST : function(){
                        return $scope.GST;
                    },
                    qty : function () {
                        return $scope.quotationTotalQuantity
                    }
                },
                size: 'xl'
            }
        );
        //Check the selection of the user
        reconfirm.result.then(function (selection) {
            $scope.quotationselection = selection;
            //If user has returned confirm from the modal, submit to the server and fetch new set of orders
            if($scope.quotationselection == "confirm"){
                //HTTP Header is not being set here, Session id is being set in
                //request in cookies.
                //HTTP post to post order to the server]
                $http.post("/dash/orders/"+ $scope.data.newQuotationId, $scope.newQuotation)
                    .success(function (response) {
                        // console.log(response)
                        //Show up the add order button again
                        $scope.addQuotationButton = true;
                        $scope.quotationViewTab = 0;
                        $scope.data.newquotationStore = {};
                        $scope.data.newquotationSalesPerson = {};
                        $scope.a.quotationselectedSalesPerson = "";
                        $scope.quotationdisableSalesPersonSelection = true;
                        $scope.a.quotationselectedStores = {};
                        $scope.data.quotationtempCity = "";
                        $scope.data.quotationtempState = "";
                        $scope.quotationshowDealerDetails = false;
                        //to bring the latest addition to the top
                        $scope.sortOrder = false;
                        //Fetch Orders after inserting our new order
                        // $scope.refreshQuotations();
                        $scope.refreshTransactions(8)
                    });
                // console.log( $scope.newQuotation)
                $scope.quotationDetails = [];
                // $scope.alertMsg("green", "", "New Quotation Successfully Submitted");
                toastr.success("New Quotation Successfully Submitted");
                $scope.quotationshowDealerDetails = false;
            }
            if($scope.quotationselection == "cancel"){
                //On cancellation at modal, the new order should be reinitialized
                //else, all the previous items will get reinserted into the new Order
                $scope.newQuotation = [];
            }
        }, function () {
            $scope.newQuotation = [];
        });
    }//End of submitquotation
    $scope.cancelOrder = function(){
        if($scope.newOrderItemList.length){
            bootbox.confirm({
                message: "Discard all items from your cart??",
                buttons: {
                    confirm: {
                        label: 'DISCARD',
                    },
                    cancel: {
                        label: 'CANCEL',
                    }
                },
                callback: function (result) {
                    if (result) {
                        console.log(result);
                        $scope.handleCancelNewOrder();
                        $scope.storeChanged();
                    $scope.posDiscount.value = '';
                    $scope.discountMrp = 0;
                    }
                }
            });
        }else{
            $scope.handleCancelNewOrder();
            $scope.storeChanged();
        }
    }
    //order
    $scope.handleCancelNewOrder = function(){
        $scope.addOrderButton =	!$scope.addOrderButton;
        $scope.addPosButton = false;
        $scope.displayAddItemOption=false;
        $scope.data.newOrderStore = {};
        $scope.orderViewTab.tab = 0;
        $scope.data.newOrderSalesPerson = {};
        $scope.a.selectedSalesPerson = "";
        $scope.disableSalesPersonSelection = true;
        $scope.a.selectedStores = {};
        $scope.data.tempCity = "";
        $scope.data.tempState = "";
        $scope.showDealerDetails = false;
        $window.scrollTo(0, 0);
        $scope.viewLength = 0;
        $scope.newViewBy = localViewBy;
        if($scope.user.role != 'Dealer' && $scope.order_count < localViewBy){
            $scope.newViewBy = $scope.order_count;
        }
        if($scope.user.role == 'Dealer' && $scope.order_count < localViewBy){
            $scope.newViewBy = $scope.order_count;
        }
        $scope.displayBGWhite = true;
        $scope.$apply();
    }
    $scope.handleCancelNewTask = function() {
        $scope.addTaskButton =	!$scope.addTaskButton;
    }
    $scope.handleCancelNewPurchaseOrder = function(){
        $scope.addPurchaseOrderButton =	!$scope.addPurchaseOrderButton;
        $scope.displayAddItemOption=false;
        $scope.data.newOrderStore = {};
        $scope.PurchaseorderViewTab = 0;
        $scope.data.newPurchaseOrderSalesPerson = {};
        $scope.a.PurchaseOrderselectedSalesPerson = "";
        $scope.disableSalesPersonSelection = true;
        $scope.a.selectedSuppliers = {};
        $scope.data.tempCity = "";
        $scope.data.tempState = "";
        $scope.showSupplierDetails = false;
        $window.scrollTo(0, 0);
        //$scope.$apply();
    }
    //quotations
    $scope.handleCancelNewQuotation = function(){
        $scope.quotationshowDealerDetails = false;
        $scope.addQuotationButton =	!$scope.addQuotationButton;
        //  $scope.displayAddItemOption=false;
        $scope.quotationViewTab = 0;
        $scope.data.newQuotationSalesPerson = {};
        $scope.a.quotaionselectedSalesPerson = "";
        $scope.disableQuotationSalesPersonSelection = true;
        $scope.a.quotationselectedStores = {};
        $scope.data.quotationtempCity = "";
        $scope.data.quotationtempState = "";
        $scope.quotationshowDealerDetails = false;
        $window.scrollTo(0, 0);
        //$scope.$apply();
    }
    //Toggle add item button
    $scope.toggleAddItemButton = function(){
        $scope.displayAddItemOption = !$scope.displayAddItemOption;
    }
    //Which item in cart is under edit, or delete, tracking it to so that we can reflect same in
    //the catalogue, Modal scope is set to parent scope, so this element is accessible from modal,
    //We need it as edit and delete functions are part of parent scope
    $scope.itemUnderEditDeleteAtCartFromModal = { item:{}, itemUnderEdit: false, itemUnderDeleted:false };
    /*---fetches sellername if phone is provided---*/
    $scope.getSellerName = function(sellerNo,tag){
        // console.log('SellerNumber',sellerNo,'Tag',tag)
        /*---DynamicProgramming---*/
        /*---objects doesnt have length ---*/
        if(sellerNo){
            if(Object.keys($scope.sellerNames).length==0){
                //console.log('Seller name array is empty and being initialized')
                $scope.refreshSellerNames();
                if(tag == 'goals' || $scope.applicationType == 'Atmosphere') $scope.refreshGoalSellerNames()
            }
            if($scope.sellerNames[sellerNo]){
                return $scope.sellerNames[sellerNo]
            }else if($scope.fulfillerNames[sellerNo]!=undefined){
                return $scope.fulfillerNames[sellerNo];
            }
        }else return sellerNo;
    };
    $scope.refreshSellerNames = function(){
        if(typeof $scope.roleSalesrep == 'object'){
            for(var j=0;j<$scope.roleSalesrep.length;j++){
                if($scope.roleSalesrep[j].userStatus == 'Active' || $scope.roleSalesrep[j].role != '')
                    $scope.sellerNames[$scope.roleSalesrep[j].sellerphone] = $scope.roleSalesrep[j].sellername;
            }
        }
        //console.log($scope.sellerNames);
    }
    //... Dynamic programming to get Dealername...
    $scope.getDealerName = function(dealercode){
        if(Object.keys($scope.dealerNames).length==0){
            //console.log('Dealer name array is empty and being initialized')
            $scope.refreshDealerNames();
        }
        if($scope.dealerNames[dealercode]!=undefined){
            return $scope.dealerNames[dealercode]
        }
    };
    //... Dynamic programming to get Role Name from Nav...
    $scope.getRoleName = function(role){
        // console.log(role)
        var temp = '';
        if(role){
            if($scope.userRole){
                for (var i=0 ; i<$scope.userRole.length ; i++){
                    if($scope.userRole[i].role.toUpperCase() == role.toUpperCase()){
                        temp =$scope.userRole[i].name ;
                        break;
                    }
                }
            }
        }
        return temp ;
    };
    // for list view Dealer
    $scope.showDealerDetail = {};
    $scope.showListDealerDetail = false;
    $scope.showEditDealerListview = false;
    $scope.showlistDocument =  false;
    $scope.typeImage = false;
    $scope.typeDocument = false;
    $scope.editDealerListView = function () {
        $scope.showEditDealerListview = true;
    }
    $scope.showDocument = function (){
        $scope.showlistDocument = !$scope.showlistDocument;
    }
    $scope.selectUploadType = function (type) {
        if(type == 'Images'){
            $scope.typeImage = true;
            $scope.typeDocument = false;
        }else if(type == 'Documents'){
            $scope.typeImage = false;
            $scope.typeDocument = true;
        }
    }
    $scope.showMoreDealerDetails = false;
    $scope.showMoreDealersDetails = function (){
        $scope.showMoreDealerDetails = !$scope.showMoreDealerDetails;
    }
    $scope.getDealerMoreDetails = function (dealer) {
        if(dealer){
            var body = {};
            body.dealer = dealer;
            body.dealercode = dealer.Dealercode;
            $http.post('/dash/orders/dealercode', body).success(function (res) {
                if(res){
                    $scope.dealerMoreDetail = [];
                    $scope.dealerMoreDetail = res;
                }
            })
            body.week_date = new Date();
            body.week_date.setDate(body.week_date.getDate() - 7)
            body.week_date.setHours(0, 0, 0, 0);
            body.month_date = new Date();
            body.month_date.setDate(body.month_date.getDate() - 30)
            body.month_date.setHours(0, 0, 0, 0);
            body.today_start = new Date();
            body.today_start.setDate(body.today_start.getDate());
            body.today_start.setHours(0, 0, 0, 0);
            body.today_end = new Date();
            body.today_end.setDate(body.today_end.getDate());
            body.today_end.setHours(23, 59, 59, 59);
            $http.post('/dash/order/ordersCount', body).success(function (res) {
                if(res){
                    //console.log(res);
                    $scope.showDealerDetail.meeting_count = {}
                    $scope.showDealerDetail.orderCount = res.order;
                    $scope.showDealerDetail.paymentCount = res.payment;
                    $scope.showDealerDetail.check_insCount = res.check_ins;
                    $scope.showDealerDetail.meeting_count.meeting_month = res.meeting_month;
                    $scope.showDealerDetail.meeting_count.meeting_week = res.meeting_week;
                    $scope.showDealerDetail.meeting_count.meeting_today = res.meeting_today;
                }
            });
        }
    }
    $scope.changeSeller = function (type){
        $scope.showseller = !$scope.showseller;
        $scope.showstockist = !$scope.showstockist;
    };
    $scope.invoiceDealerPaidAmt = [];
    $scope.showListDealerDetails = function (dealer){
        if(dealer){
            $scope.outstandingAmt = 0;
            $scope.invoiceDealerPaidAmt = [];
            // console.log('dealer',dealer)
            $scope.showseller =false;
            $scope.showstockist =false;
            $scope.showEditDealerListview = false;
            if($scope.applicationType != 'StoreJini'){
                $scope.dealerOrderView = true;
                $scope.currentNavItem = 'Orders';
                $scope.showMoreDealerDetails = false;
                $scope.dealerPaymentView = false;
                $scope.dealerVisitView = false;
                $scope.dealerMeetingView = false;
                $scope.dealerEnquiryView = false;
                $scope.dealerInvoiceView = false;
            }
            if($scope.applicationType == 'StoreJini'){
                $scope.dealerEnquiryView = true;
                $scope.currentNavItem = 'Enquires';
                $scope.showMoreDealerDetails = true;
                $scope.dealerOrderView = false;
                $scope.dealerInvoiceView = false;
            }
            $scope.storeEntryshowMap=false;
            //$scope.storesColname('Dealercode',dealer);
            $scope.editedDealer = {};
            $scope.editedDealer.Dealercode = dealer.Dealercode ;
            $scope.editedDealer.DealerName = dealer.DealerName ;
            $scope.editedDealer.Phone = Number(dealer.Phone) ;
            $scope.editedDealer.Address = dealer.Address ;
            $scope.editedDealer.Phone = Number(dealer.Phone) ;
            $scope.oldPhoneNo = Number(dealer.Phone) ;
            $scope.editedDealer.Stockist = dealer.Stockist ;
            $scope.editedDealer.GST = dealer.GST ;
            $scope.editedDealer.contactPerson = dealer.contactPerson ;
            $scope.editedDealer.email = dealer.email ;
            $scope.editedDealer.Area = dealer.Area ;
            $scope.editedDealer.City = dealer.City ;
            $scope.editedDealer.Pincode = dealer.Pincode ;
            $scope.editedDealer.dob = dealer.dob ;
            $scope.editedDealer.anniversary = dealer.anniversary ;
            $scope.editedDealer.creditLimit = dealer.creditLimit ;
            $scope.editedDealer.class = dealer.class || '';
            $scope.editedDealer.paymentMode = dealer.paymentMode || '';
            if(dealer.customerVariant)
                $scope.editedDealer.customerVariant = dealer.customerVariant ;
            else
                $scope.editedDealer.customerVariant = 'regular' ;
            $scope.editDealer.Seller = false;
            $scope.editDealer.Stockist = false;
            $scope.validateDealerphone = false;
            if(!$scope.showEditDealerListview) {
                $scope.storesDisp = dealer;
                $scope.selected_customer = [];
                if(dealer.cloudinaryURL){
                    if(typeof(dealer.cloudinaryURL) == 'string'){
                        var url = dealer.cloudinaryURL;
                        $scope.storesDisp.cloudinaryURL = [];
                        $scope.storesDisp.cloudinaryURL = [{'image' : url}];
                    }
                }
                if(dealer.doccloudinaryURL){
                    if(typeof(dealer.doccloudinaryURL) == 'string'){
                        var url = dealer.doccloudinaryURL;
                        $scope.storesDisp.doccloudinaryURL = [];
                        $scope.storesDisp.doccloudinaryURL = [{'image' : url}];
                    }
                }
                for(var i = 0; i < $scope.allShippingAddress.length; i++){
                    if(dealer.Dealercode == $scope.allShippingAddress[i].Dealercode){
                        $scope.selected_customer.push($scope.allShippingAddress[i]);
                    }
                }
            }
            $http.post("/dash/invoice/fetch/dealer",dealer).success(function(res){
                var temp = 0;
                $scope.totalAmt = 0;
                for(var i=0; i<res.length; i++){
                    $scope.totalAmt += res[i].total;
                    if( res[i].payment){
                        if(res[i].payment.length ){
                            var last = res[i].payment[res[i].payment.length-1];
                            $scope.invoiceDealerPaidAmt.push(last);
                        }
                    }
                }
                if($scope.invoiceDealerPaidAmt.length) {
                    for (var i = 0; i < $scope.invoiceDealerPaidAmt.length; i++) {
                        temp = parseFloat(temp) + parseFloat($scope.invoiceDealerPaidAmt[i].total_paid_amt);
                        $scope.outstandingAmt = $scope.totalAmt - temp;
                    }
                }else{
                    $scope.outstandingAmt =  $scope.totalAmt;
                }
            })
            $scope.showDealerDetail = dealer;
            $scope.showListDealerDetail = true;
        }
    }
    //for image slides in dealer list view page
    //$scope.imageIndex = 0;
    // $scope.carousel = function (images) {
    //     console.log('images====>>>>',images);
    //     var i = 0;
    //     if(images.length == i){
    //         i = 0;
    //     }
    //     $scope.imageIndex = i;
    //     i++;
    //     setTimeout($scope.carousel, 2000); // Change image every 2 seconds
    // }
    $scope.getSiteName = function(code, dealercode){
        for(var i =0; i < $scope.allShippingAddress.length; i++){
            if($scope.allShippingAddress[i].Dealercode == dealercode){
                if($scope.allShippingAddress[i].siteCode == code)
                    return $scope.allShippingAddress[i].siteName;
            }
        }
    };
    $scope.getGSTNo = function(dealercode){
        for(var i=0; i< masterDealers.length; i++){
            if(Number(dealercode) == masterDealers[i].Dealercode )
                return masterDealers[i].GST;
        }
    };
    $scope.refreshDealerNames = function(){
        for(var j=0;j<$scope.dealers.length;j++){
            $scope.dealerNames[$scope.dealers[j].Dealercode] =$scope.dealers[j].DealerName;
        }
        //console.log($scope.dealerNames);
    };
    /*---check the phone no is valid or not---*/
    $scope.isPhoneNo = function (data) {
        var x = Number.parseInt(data);
        //console.log(x)
        //console.log(x.toString().length)
        if(data){
            if (data.toString().length >= 10) {
                if (Number.isInteger(x) && ((x.toString().length >= 10)) && (data.toString().length >= 10))
                    return true;
                else
                    return false;
            }
            return false;
        }
        return false;
    };
    $scope.formatDate = function(date){
        if(date==undefined || date == '')
            return ('');
        /* replace is used to ensure cross browser support*/
        var d = new Date(date.toString().replace("-","/").replace("-","/"));
        var monthNames = ["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"];
        var dt = d.getDate();
        if(dt<10)
            dt = "0"+dt;
        var dateOut = dt+" - "+monthNames[d.getMonth()]+" - "+(d.getFullYear());
        return dateOut;
    }
    // Function to display only date (DD-MM-YY)
    $scope.formatOnlyDate = function(date){
        if(date==undefined || date == '')
            return ('');
        /* replace is used to ensure cross browser support*/
        var d = new Date(date.toString().replace("-","/").replace("-","/"));
        var dt = d.getDate();
        var mon = d.getMonth()+1 ;
        if(dt<10)
            dt = "0"+dt;
        if(mon<10)
            mon = "0"+mon;
        var dateOut = dt+" - "+mon+" - "+(d.getFullYear());
        return dateOut;
    };
    $scope.getTimeFromDate = function(date){
        if(date){
            var t = date.split(" ");
            var time = t[1].split(":");
            if(time[0] <= 11){
                return time[0]+":"+time[1]+" AM";
            }
            else if(time[0] == 12){
                return time[0]+":"+time[1]+" PM";
            }
            else{
                return (time[0] - 12)+":"+time[1]+" PM";
            }
        }
        else{
            return 'Not available';
        }
    };
    $scope.formatDefaultDate = function(date){
        if(date){
            var newDate = new Date(date);
            //console.log(newDate);
            return newDate;
        }
    };
    $scope.foramtDealerDate = function (date) {
        if (date == undefined)
            return;
        var d = new Date(date);
        var monthNames = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"];
        var dateOut = d.getDate() + " - " + monthNames[d.getMonth()] + " - " + (d.getFullYear());
        $scope.mapTransactionDate = d.getDate() + " - " + monthNames[d.getMonth()] + " - " + (d.getFullYear());
        return dateOut;
    };
    $scope.formatdate = function(date){
        if(date!=undefined && date!='' && date!= null){
            // try{
            //    return new Date(date.replace(/-/g, "/"))
            // }
            // catch(e){
            //    return new Date(date);
            // }
            var a = date.toString();
            var b = a.replace(/-/g, "/");
            return new Date(b);
        }
        else{
            return false;
        }
    };
    $scope.atmsFormatedDate = function(d){
        if(d){
            var date = new Date(d);
            var monthNames = ['January','February','March','April','May','June','July','August','September','October','November','December'];
            var year = date.getUTCFullYear();
            var month =  monthNames[date.getMonth()];
            var d = (date.getDate() < 10) ? '0' + date.getDate() : date.getDate();
            var hour = (date.getHours() < 10) ? '0' + date.getHours() : date.getHours();
            var minute = (date.getMinutes() < 10) ? '0' + date.getMinutes() : date.getMinutes();
            var seconds = (date.getSeconds() < 10) ? '0' + date.getSeconds() : date.getSeconds();
            var ampm = hour >= 12 ? ' PM' : ' AM';
            var dateformat = d + '-' + month + '-' + year + ' ' + hour + ':' + minute + ' ' + ampm ;
            return dateformat
        }
        else
            return '';
    }
    $scope.formatGraphDate = function(date){
        if(date==undefined || date == '')
            return ('');
        /* replace is used to ensure cross browser support*/
        var d = new Date(date.toString().replace("-","/").replace("-","/"));
        var monthNames = ["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"]
        var dt = d.getDate();
        if(dt<10)
            dt = "0"+dt;
        var dateOut = dt+" - "+monthNames[d.getMonth()];
        return dateOut;
    };
    //Get time in hh:mm AM/PM from 24-Hour time
    $scope.getTimeFrom24Hour = function(time){
        if(time){
            var temp = new Date(time);
            if(temp == 'Invalid Date'){
                var t = time.split(':');
                if(t[0] < 12){
                    return t[0]+":"+t[1]+" AM";
                }
                else if(t[0] == 12)
                    return t[0]+":"+t[1]+" PM";
                else
                    return (t[0] - 12)+":"+t[1]+" PM";
            }
            else{
                var hh = temp.getHours();
                var mm = temp.getMinutes() > 9 ? temp.getMinutes() : "0"+temp.getMinutes();
                if(hh < 12)
                    return hh+":"+mm+" AM";
                else if(hh == 12)
                    return hh+":"+mm+" PM";
                else
                    return (hh - 12)+":"+mm+" PM";
            }
        }
        else
            return ''
    }
    $scope.calculateDuration = function(inTime, outTime){
        var intime ,outtime;
        if(inTime.isArray && outTime.isArray)
        {
            intime = inTime[0];
            outtime = outTime[0];
        }
        else
        {
            intime = inTime;
            outtime = outTime;
        }
        if(intime != null && outtime != null){
            if(outtime != ''){
                var newInTime = new Date(intime);
                var newOutTime = new Date(outtime);
                if(newInTime == 'Invalid Date' && newOutTime == 'Invalid Date'){
                    var t1 = intime.split(':');
                    var t2 = outtime.split(':');
                    var hh1 = parseInt(t1[0]);
                    var hh2 = parseInt(t2[0]);
                    var mm1 = parseInt(t1[1]);
                    var mm2 = parseInt(t2[1]);
                    var h1 = hh1*60;
                    var h2 = hh2*60;
                    var diff = (h2 + mm2) - (h1 + mm1);
                    if(diff >=60){
                        var hh = parseInt(diff / 60);
                        var mm = parseInt(diff - (hh*60));
                        return hh+ "h : " +mm+ "m";
                    }
                    else{
                        var mm = parseInt(diff);
                        return "0h : "+mm+"m";
                    }
                }
                else{
                    var t1 = moment(newInTime);
                    var t2 = moment(newOutTime);
                    var diff = moment.duration(t2.diff(t1)).asMinutes();
                    if(diff >=60){
                        var hh = parseInt(diff / 60);
                        var mm = parseInt(diff - (hh*60));
                        return hh+ "h : " +mm+ "m";
                    }
                    else{
                        var mm = parseInt(diff);
                        return "0h : "+mm+"m";
                    }
                }
            }
            else{
                return "User not punched out";
            }
        }
    }
    $scope.calculateDiff = function(inTime,outTime)
    {
        var intime = inTime[0];
        var outtime = outTime[0];
        if(intime != null && outtime != null){
            if(outtime != ''){
                var newInTime = new Date(intime);
                var newOutTime = new Date(outtime);
                if(newInTime == 'Invalid Date' && newOutTime == 'Invalid Date'){
                    var t1 = intime.split(':');
                    var t2 = outtime.split(':');
                    var hh1 = parseInt(t1[0]);
                    var hh2 = parseInt(t2[0]);
                    var mm1 = parseInt(t1[1]);
                    var mm2 = parseInt(t2[1]);
                    var h1 = hh1*60;
                    var h2 = hh2*60;
                    var diff = (h2 + mm2) - (h1 + mm1);
                    if(diff >=60){
                        var hh = parseInt(diff / 60);
                        var mm = parseInt(diff - (hh*60));
                        // return hh+ "h : " +mm+ "m";
                        return $scope.cal(hh);
                    }
                    else{
                        var mm = parseInt(diff);
                        // return "0h : "+mm+"m";
                        return $scope.cal(0);
                    }
                }
                else{
                    var t1 = moment(newInTime);
                    var t2 = moment(newOutTime);
                    var diff = moment.duration(t2.diff(t1)).asMinutes();
                    if(diff >=60){
                        var hh = parseInt(diff / 60);
                        var mm = parseInt(diff - (hh*60));
                        // return hh+ "h : " +mm+ "m";
                        return $scope.cal(hh);
                    }
                    else{
                        var mm = parseInt(diff);
                        // return "0h : "+mm+"m";
                        return $scope.cal(0);
                    }
                }
            }
            else{
                return "User not punched out";
            }
        }
        $scope.cal = function(hour)
        {
            if(hour < 4) {
                return 'Leave';
            }
            else if(hour >= 4 && hour < 8)
            {
                return 'Half Day';
            }
            else if(hour >= 8){
                return 'Full Day';
            }
        }
        // return $scope.diff;
    }
    $scope.formatDateForAttendance = function(date){
        if(date==undefined || date == '')
            return ('')
        var d = date.toString();
        var firstcut = d.split(" ");
        var a = firstcut[0].split("-");
        var monthNames = ["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"]
        var dateReturn = a[2]+"-"+monthNames[a[1] - 1]+"-"+a[0];
        return dateReturn;
    }
    $scope.formatIsoDate = function (date) {
        if (date == undefined)
            return
        /* replace is used to ensure cross browser support*/
        var d = new Date(date);
        var monthNames = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"]
        var time = ''
        var hour = d.getHours();
        var minute = d.getMinutes();
        var session = ''
        if (minute == 0)
            minute = '00'
        else if (minute < 10) {
            var temp = minute;
            minute = '0' + minute
        }
        if (d.getHours() > 12) {
            session = 'PM'
            hour -= 12
        }
        else if (d.getHours() == 12)
            session = 'PM'
        else {
            session = 'AM'
        }
        time = hour + ':' + minute + ' ' + session
        var dateOut = d.getDate() + " - " + monthNames[d.getMonth()] + " - " + (d.getFullYear()) + ' at ' + time
        $scope.mapTransactionDate = d.getDate() + " - " + monthNames[d.getMonth()] + " - " + (d.getFullYear());
        return dateOut;
    }
    $scope.foramtDealerDate = function (date) {
        if (date == undefined)
            return
        var d = new Date(date);
        var monthNames = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"]
        var dateOut = d.getDate() + " - " + monthNames[d.getMonth()] + " - " + (d.getFullYear())
        $scope.mapTransactionDate = d.getDate() + " - " + monthNames[d.getMonth()] + " - " + (d.getFullYear());
        return dateOut;
    }
    $scope.formatFullDate = function(date){
        if(date==undefined)
            return
        /* replace is used to ensure cross browser support*/
        var d = new Date(date.toString().replace("-","/").replace("-","/"));
        var monthNames = ["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"]
        var time = ''
        var hour =  d.getHours();
        var minute = d.getMinutes();
        var session = ''
        if(minute==0)
            minute = '00'
        else if(minute<10){
            var temp = minute;
            minute = '0' +minute
        }
        if(d.getHours()>12) {
            session = 'PM'
            hour -= 12
        }
        else if(d.getHours() == 12)
            session = 'PM'
        else {
            session = 'AM'
        }
        time = hour+':'+ minute +' '+session
        var dateOut = d.getDate()+" - "+monthNames[d.getMonth()]+" - "+(d.getFullYear())+' at '+ time
        $scope.mapTransactionDate = d.getDate()+" - "+monthNames[d.getMonth()]+" - "+(d.getFullYear());
        return dateOut;
    }
    // Function for date foramt (YYYY-MM-DD HR:MIN:SEC)
    $scope.formatFullDealerDate = function (date) {
        if (date == undefined)
            return
        /* replace is used to ensure cross browser support*/
        var dateOut = [date.getFullYear(), (date.getMonth() + 1).padLeft(), date.getDate().padLeft()].join('-') + ' '
            + [date.getHours().padLeft(), date.getMinutes().padLeft(), date.getSeconds().padLeft()].join(':');
        return dateOut;
    }
    // Function for date foramt (YYYY-MM-DD) without time
    $scope.formatYYMMDDrDate = function (date) {
        if (date == undefined)
            return
        /* replace is used to ensure cross browser support*/
        var dateOut = [date.getFullYear(), (date.getMonth() + 1).padLeft(), date.getDate().padLeft()].join('-') ;
        return dateOut;
    }
    //.... In Angular, parseFloat JS function won't work on the view..
    //... So we define our own...
    $scope.parseFloat = function(x){
        return parseFloat(x);
    }
    function reverseGeocode(callback, latlng, type){
        var geocoder = new google.maps.Geocoder();
        if(type == 'ATD'){
            geocoder.geocode({ 'latLng': latlng }, function (results, status) {
                if (status !== google.maps.GeocoderStatus.OK) {
                    console.log(status);
                }
                if (status == google.maps.GeocoderStatus.OK) {
                    //console.log(results);
                    var address = (results[0].formatted_address);
                    callback.call(this, address, 'ATD');
                }
            });
        }
        else if(type == 'customer'){
            geocoder.geocode({ 'latLng': latlng }, function (results, status) {
                if (status !== google.maps.GeocoderStatus.OK) {
                    console.log(status);
                }
                if (status == google.maps.GeocoderStatus.OK) {
                    //console.log(results);
                    var address = (results[0].formatted_address);
                    callback.call(this, address, 'customer');
                }
            });
        }
        else if(type == 'startVisit'){
            geocoder.geocode({ 'latLng': latlng }, function (results, status) {
                if (status !== google.maps.GeocoderStatus.OK) {
                    console.log(status);
                }
                if (status == google.maps.GeocoderStatus.OK) {
                    //console.log(results);
                    var address = (results[0].formatted_address);
                    callback.call(this, address, 'startVisit');
                }
            });
        }
        else if(type == 'endVisit'){
            geocoder.geocode({ 'latLng': latlng }, function (results, status) {
                if (status !== google.maps.GeocoderStatus.OK) {
                    console.log(status);
                }
                if (status == google.maps.GeocoderStatus.OK) {
                    //console.log(results);
                    var address = (results[0].formatted_address);
                    callback.call(this, address, 'endVisit');
                }
            });
        }
        else if(type == 'bidhistory'){
            geocoder.geocode({ 'latLng': latlng }, function (results, status) {
                if (status !== google.maps.GeocoderStatus.OK) {
                    console.log(status);
                }
                if (status == google.maps.GeocoderStatus.OK) {
                    console.log("bidhistory address==");
                    var address = (results[0].formatted_address);
                    callback.call(this, address, 'bidhistory');
                }
            });
        }
    }
    function geocode_address(result, type){
        if(type == 'ATD'){
            //console.log(result)
            $scope.attendance_address = result;
            $scope.$apply();
        }
        else if(type == 'customer'){
            $scope.checkinMapLocation.dealer = result;
            $scope.$apply();
        }
        else if(type == 'startVisit'){
            $scope.checkinMapLocation.sVisit = result;
            $scope.$apply();
        }
        else if(type == 'endVisit'){
            $scope.checkinMapLocation.eVisit = result;
            $scope.$apply();
        }
        else if(type == 'bidhistory'){
            $scope.checkinMapLocation.BidHistoryAddress = result;
            $scope.$apply();
        }
    }
    $scope.BidAddress = '';
    var RefreshMap = [];
    $scope.renderBidHistoryMap = function(bid){
        RefreshMap = bid;
        $scope.BidAddress = bid;
        var gmarkers = [];
        $scope.checkinIcons['Customer'] = 'https://maps.google.com/mapfiles/ms/micons/orange-dot.png';
        $scope.checkinMapLocation = {};
        $scope.checkinMapLocation.dealer = "Not Available";
        var latlng = new google.maps.LatLng(20.5937, 78.9629);
        var zoomLevel = 11;
        var latlngList = [];
        var myOptions = {
            zoom: zoomLevel,
            center: latlng,
            scaleControl: true,
            mapTypeId: google.maps.MapTypeId.ROADMAP
        };
        map = new google.maps.Map(document.getElementById("mapbidhistoryEntry"), myOptions);
        function addMarker(latlng, id){
            if(id == 0){
                var marker = new google.maps.Marker({
                    position: latlng,
                    map: map,
                    title: 'Click to zoom',
                    icon : $scope.checkinIcons['Customer']
                });
                reverseGeocode(geocode_address, latlng, 'bidhistory');
            }
            gmarkers.push(marker);
        }
        if(bid.latitude && bid.longitude && bid.latitude != 1 && bid.latitude != 2 &&
            bid.latitude != 3 && bid.latitude != 4){
            latlng = new google.maps.LatLng(parseFloat(bid.latitude), parseFloat(bid.longitude));
            latlngList.push(new google.maps.LatLng(parseFloat(bid.latitude), parseFloat(bid.longitude)))
            addMarker(latlng, 0);
            $scope.ShowBidAddress = true;
        }
        else{
            $scope.ShowBidAddress=false;
            // bootbox.alert({
            //     title: "ERROR",
            //     message : "Location Is Not Available",
            //     className : 'text-center'
            // })
        }
        //Set zoom based on the location latlongs
        if(latlngList.length > 0){
            var bounds = new google.maps.LatLngBounds();
            for (var i = 0; i < latlngList.length; i++) {
                bounds.extend(latlngList[i]);
            }
            map.setCenter(bounds.getCenter()); //or use custom center
            map.panToBounds(bounds);
        }
        var mcOptions = {gridSize: 6, maxZoom: 20};
        var markerCluster = new MarkerClusterer(map, gmarkers, mcOptions); //clusters the nearby points
        google.maps.event.trigger(map, 'resize');
        $('a[href="#profile"]').on('shown', function (e) {
            google.maps.event.trigger(map, 'resize');
        });
    }
    $scope.storeEntryshowMap = false;
    $scope.renderStoreEntryMap = function(order){
        //console.log('pjp order', order)
        $scope.storeEntryshowMap = !$scope.storeEntryshowMap;
        var gmarkers = [];
        $scope.checkinIcons['Customer'] = 'https://maps.google.com/mapfiles/ms/micons/orange-dot.png';
        $scope.checkinMapLocation = {};
        $scope.checkinMapLocation.dealer = "Not Available";
        var latlng = new google.maps.LatLng(20.5937, 78.9629);
        var zoomLevel = 11;
        var latlngList = [];
        var myOptions = {
            zoom: zoomLevel,
            center: latlng,
            scaleControl: true,
            mapTypeId: google.maps.MapTypeId.ROADMAP
        };
        map = new google.maps.Map(document.getElementById("mapstoreEntry"), myOptions);
        function addMarker(latlng, id){
            if(id == 0){
                var marker = new google.maps.Marker({
                    position: latlng,
                    map: map,
                    title: 'Click to zoom',
                    icon : $scope.checkinIcons['Customer']
                });
                reverseGeocode(geocode_address, latlng, 'customer');
            }
            gmarkers.push(marker);
        }
        if(order.latitude && order.longitude && order.latitude != 1 && order.latitude != 2 &&
            order.latitude != 3 && order.latitude != 4){
            latlng = new google.maps.LatLng(parseFloat(order.latitude), parseFloat(order.longitude));
            latlngList.push(new google.maps.LatLng(parseFloat(order.latitude), parseFloat(order.longitude)))
            addMarker(latlng, 0);
        }else{
            $scope.storeEntryshowMap=false;
            bootbox.alert({
                title: "ERROR",
                message : "Location Is Not Available",
                className : 'text-center'
            })
        }
        //Set zoom based on the location latlongs
        if(latlngList.length > 0){
            var bounds = new google.maps.LatLngBounds();
            for (var i = 0; i < latlngList.length; i++) {
                bounds.extend(latlngList[i]);
            }
            map.setCenter(bounds.getCenter()); //or use custom center
            map.panToBounds(bounds);
        }
        var mcOptions = {gridSize: 6, maxZoom: 20};
        var markerCluster = new MarkerClusterer(map, gmarkers, mcOptions); //clusters the nearby points
        google.maps.event.trigger(map, 'resize');
        $('a[href="#profile"]').on('shown', function (e) {
            google.maps.event.trigger(map, 'resize');
        });
    }
    $scope.storeMarkershowMap = false;
    $scope.renderStoreMap = function(order){
        $scope.storeMarkershowMap = false;
        var gmarkers = [];
        $scope.checkinIcons['Customer'] = 'https://maps.google.com/mapfiles/ms/micons/orange-dot.png';
        // $scope.checkinMapLocation = {};
        // $scope.checkinMapLocation.dealer = "Not Available";
        // $scope.checkinMapLocation.sVisit = "Not Available";
        var latlng = new google.maps.LatLng(20.5937, 78.9629);
        var zoomLevel = 5;
        var latlngList = [];
        map = new google.maps.Map(document.getElementById("allStores"), myOptions);
        for(var i=0;i<order.length;i++){
            var myOptions = {
                zoom: zoomLevel,
                center: latlng,
                scaleControl: true,
                mapTypeId: google.maps.MapTypeId.ROADMAP
            };
            function addMarker(latlng, id){
                if(id == 0){
                    var marker = new google.maps.Marker({
                        position: latlng,
                        map: map,
                        icon : $scope.checkinIcons['Customer']
                    });
                    reverseGeocode(geocode_address, latlng, 'customer');
                    var contentString = '<p>' + ' <span style="font-weight:bold"> StoreName : ' + ' ' + '</span>' + order[i].DealerName + '</p>'+
                        '<p>' + ' <span style="font-weight:bold"> Address : ' + ' ' + '</span>' + order[i].Address + ' </p>';
                    var infowindow = new google.maps.InfoWindow({
                        content: contentString
                    });
                    marker.addListener('click', function() {
                        infowindow.open(map, marker);
                    });
                }
                gmarkers.push(marker);
            }
            if(typeof order[i].latitude == 'object' || typeof order[i].longitude == 'object')
            {
                if(order[i].latitude.length || order[i].longitude.length) {
                    //console.log('array')
                    if (order[i].latitude[0] && order[i].longitude[0] && order[i].latitude[0] != 1 && order[i].latitude[0] != 2 &&
                        order[i].latitude[0] != 3 && order[i].latitude[0] != 4) {
                        $scope.storeMarkershowMap = true;
                        latlng = new google.maps.LatLng(parseFloat(order[i].latitude[0]), parseFloat(order[i].longitude[0]));
                        latlngList.push(new google.maps.LatLng(parseFloat(order[i].latitude[0]), parseFloat(order[i].longitude[0])))
                        addMarker(latlng, 0);
                    }
                }
            }else{
                //console.log('variable')
                if(order[i].latitude && order[i].longitude && order[i].latitude != 1 && order[i].latitude != 2 &&
                    order[i].latitude != 3 && order[i].latitude != 4){
                    $scope.storeMarkershowMap=true;
                    latlng = new google.maps.LatLng(parseFloat(order[i].latitude), parseFloat(order[i].longitude));
                    latlngList.push(new google.maps.LatLng(parseFloat(order[i].latitude), parseFloat(order[i].longitude)))
                    addMarker(latlng, 0);
                }
            }
        }
        // console.log('latlngList',latlngList)
        //Set zoom based on the location latlongs
        if(latlngList.length > 0){
            var bounds = new google.maps.LatLngBounds();
            for (var i = 0; i < latlngList.length; i++) {
                bounds.extend(latlngList[i]);
            }
            map.setCenter(bounds.getCenter()); //or use custom center
            map.fitBounds(bounds);
            // map.invalidatesize(true);
        }
        var mcOptions = {gridSize: 6, maxZoom: 20};
        var markerCluster = new MarkerClusterer(map, gmarkers, mcOptions); //clusters the nearby points
        google.maps.event.trigger(map, 'resize');
        $('a[href="#profile"]').on('shown', function (e) {
            google.maps.event.trigger(map, 'resize');
        });
    }
    $scope.DistanceCalculate = [];
    $scope.renderPjpMap = function(order,mapvalue) {
        $scope.DistanceCalculate = [];
        console.log('pjp order', order)
        // $scope.showMap = true;
        $scope.showPjpMap = false;
        var gmarkers = [];
        $scope.checkinIcons['Customer'] = 'https://maps.google.com/mapfiles/ms/micons/orange-dot.png';
        // $scope.checkinMapLocation = {};
        // $scope.checkinMapLocation.dealer = "Not Available";
        // $scope.checkinMapLocation.sVisit = "Not Available";
        var myOptions = {
            zoom: zoomLevel,
            center: latlng,
            scaleControl: false,
            mapTypeControl: false,
            streetViewControl: false,
            mapTypeId: google.maps.MapTypeId.ROADMAP
        };
        var latlng = new google.maps.LatLng(20.5937, 78.9629);
        var zoomLevel = 5;
        var latlngList = [];
        var flightPlanCoordinates = [];
        map = new google.maps.Map(document.getElementById(mapvalue), myOptions);
        for (var i = 0; i < order.length; i++) {
            var demolatlang = {};
            if (order[i].latitude && order[i].longitude) {
                if (typeof order[i].latitude == 'object' && typeof order[i].longitude == 'object') {
                    //console.log('array')
                    if (order[i].latitude[0] && order[i].longitude[0] && order[i].latitude[0] != 1 && order[i].latitude[0] != 2 &&
                        order[i].latitude[0] != 3 && order[i].latitude[0] != 4) {
                        $scope.DistanceCalculate.push(order[i]);
                        demolatlang.lat = order[i].latitude[0];
                        demolatlang.lng = order[i].longitude[0];
                        flightPlanCoordinates.push(demolatlang);
                        $scope.showPjpMap = true;
                        latlngList.push(new google.maps.LatLng(parseFloat(order[i].latitude[0]), parseFloat(order[i].longitude[0])))
                    }
                }
                else {
                    if (order[i].latitude && order[i].longitude && order[i].latitude != 1 && order[i].latitude != 2 &&
                        order[i].latitude != 3 && order[i].latitude != 4) {
                        $scope.DistanceCalculate.push(order[i]);
                        demolatlang.lat = order[i].latitude;
                        demolatlang.lng = order[i].longitude;
                        flightPlanCoordinates.push(demolatlang);
                        $scope.showPjpMap = true;
                        latlngList.push(new google.maps.LatLng(parseFloat(order[i].latitude), parseFloat(order[i].longitude)))
                    }
                }
            }
        }
        for(var i=0;i<$scope.DistanceCalculate.length;i++){
            if ($scope.DistanceCalculate[i].latitude && $scope.DistanceCalculate[i].longitude) {
                if (typeof $scope.DistanceCalculate[i].latitude == 'object' && typeof $scope.DistanceCalculate[i].longitude == 'object') {
                    if ($scope.DistanceCalculate[i].latitude[0] && $scope.DistanceCalculate[i].longitude[0] && $scope.DistanceCalculate[i].latitude[0] != 1 && $scope.DistanceCalculate[i].latitude[0] != 2 &&
                        $scope.DistanceCalculate[i].latitude[0] != 3 && $scope.DistanceCalculate[i].latitude[0] != 4) {
                        latlng = new google.maps.LatLng(parseFloat($scope.DistanceCalculate[i].latitude[0]), parseFloat($scope.DistanceCalculate[i].longitude[0]));
                        addMarker(latlng, 0);
                    }
                }
                else {
                    if ($scope.DistanceCalculate[i].latitude && $scope.DistanceCalculate[i].longitude && $scope.DistanceCalculate[i].latitude != 1 && $scope.DistanceCalculate[i].latitude != 2 &&
                        $scope.DistanceCalculate[i].latitude != 3 && $scope.DistanceCalculate[i].latitude != 4) {
                        latlng = new google.maps.LatLng(parseFloat($scope.DistanceCalculate[i].latitude), parseFloat($scope.DistanceCalculate[i].longitude));
                        addMarker(latlng, 0);
                    }
                }
            }
            function addMarker(latlng, id) {
                // console.log('addmarker');
                var markertitle = i+1;
                var contentString = $scope.DistanceCalculate[i].DealerName;
                if (id == 0) {
                    var marker = new google.maps.Marker({
                        position: latlng,
                        map: map,
                        title: markertitle.toString() + '. ' + contentString,
                    });
                    if (i == 0) {
                        marker.setIcon('http://maps.google.com/mapfiles/ms/icons/green-dot.png')
                    } else if (i == $scope.DistanceCalculate.length - 1 ) {
                        marker.setIcon('http://maps.google.com/mapfiles/ms/icons/red-dot.png')
                    } else {
                        marker.setIcon('http://maps.google.com/mapfiles/ms/icons/blue-dot.png')
                    }
                    reverseGeocode(geocode_address, latlng, 'customer');
                }
                var infowindow = new google.maps.InfoWindow({
                    content: markertitle.toString() + '. ' + contentString
                });
                marker.addListener('click', function () {
                    infowindow.open(map, marker);
                });
                gmarkers.push(marker);
            }
        }
        //Set zoom based on the location latlongs
        if (latlngList.length > 0) {
            var bounds = new google.maps.LatLngBounds();
            for (var i = 0; i < latlngList.length; i++) {
                bounds.extend(latlngList[i]);
            }
            map.setCenter(bounds.getCenter()); //or use custom center
            map.fitBounds(bounds);
            // map.invalidatesize(true);
        }
        var mcOptions = {gridSize: 6, maxZoom: 20};
        var markerCluster = new MarkerClusterer(map, gmarkers, mcOptions); //clusters the nearby points
        google.maps.event.trigger(map, 'resize');
        $('a[href="#profile"]').on('shown', function (e) {
            google.maps.event.trigger(map, 'resize');
        });
        var flightPath = new google.maps.Polyline({
            path: flightPlanCoordinates,
            geodesic: true,
            strokeColor: '#FF0000',
            strokeOpacity: 1.0,
            strokeWeight: 2
        });
        flightPath.setMap(map);
    }
    $scope.beatDistance = 0;
    $scope.renderPjpMapDistance = function(){
        if($scope.DistanceCalculate.length <= 24){
            var directionsService = new google.maps.DirectionsService;
            var directionsDisplay = new google.maps.DirectionsRenderer;
            $scope.beatDistance = 0;
            var waypts = [];
            // var checkboxArray = document.getElementById('waypoints');
            // console.log('checkboxArray',checkboxArray)
            var startpoint = '';
            var endpoint =  '';
            var startindex = 0;
            var lastindex = 0;
            var tempArray = [];
            for (var j = 0 ; j < $scope.DistanceCalculate.length; j++) {
                // console.log('index1',j);
                lastindex += 24;
                waypts = [];
                if( $scope.DistanceCalculate.length <= lastindex ) {
                    startindex=$scope.DistanceCalculate.length;
                }else{
                    startindex += 24;
                }
                for (i=j;i<startindex;i++){
                    if($scope.DistanceCalculate[i].latitude[0] && $scope.DistanceCalculate[j].longitude[0]){
                        console.log('index2',i);
                        if(i == 0){
                            startpoint = new google.maps.LatLng($scope.DistanceCalculate[i].latitude[0],$scope.DistanceCalculate[i].longitude[0]);
                        }else if(i == startindex-1){
                            endpoint =new google.maps.LatLng($scope.DistanceCalculate[i].latitude[0],$scope.DistanceCalculate[i].longitude[0]);
                        }else{
                            waypts.push({
                                location: new google.maps.LatLng($scope.DistanceCalculate[i].latitude[0],$scope.DistanceCalculate[i].longitude[0]),
                                stopover: true
                            });
                        }
                    }else if($scope.DistanceCalculate[i].latitude && $scope.DistanceCalculate[i].longitude ){
                        if(i == 0){
                            startpoint = new google.maps.LatLng($scope.DistanceCalculate[i].latitude,$scope.DistanceCalculate[i].longitude);
                        }else if(i == startindex-1){
                            console.log('end',i);
                            endpoint =new google.maps.LatLng($scope.DistanceCalculate[i].latitude,$scope.DistanceCalculate[i].longitude);
                        }else{
                            waypts.push({
                                location: new google.maps.LatLng($scope.DistanceCalculate[i].latitude,$scope.DistanceCalculate[i].longitude),
                                stopover: true
                            });
                        }
                    }
                }
                j= startindex;
                directionsService.route({
                    origin: startpoint,
                    destination: endpoint,
                    waypoints: waypts,
                    optimizeWaypoints: true,
                    travelMode: 'DRIVING'
                }, function(response, status) {
                    if (status === 'OK') {
                        directionsDisplay.setDirections(response);
                        var route = response.routes[0];
                        // var summaryPanel = document.getElementById('directions-panel');
                        // summaryPanel.innerHTML = '';
                        // For each route, display summary information.
                        for (var i = 0; i < route.legs.length; i++) {
                            $scope.beatDistance  += route.legs[i].distance.value
                        }
                        $scope.beatDistance = $scope.beatDistance / 1000;
                        waypts = [];
                    } else {
                    }
                });
            }
        }else{
            bootbox.alert({
                title : 'ERROR',
                message : 'Distance can be calculated for only 25 '+$scope.nav[2].tab,
                className : 'text-center'
            })
        }
    }
    $scope.renderOrderMap = function(order){
        $scope.showMap = true;
        var gmarkers = [];
        $scope.checkinIcons['startVisit'] = 'https://maps.google.com/mapfiles/ms/micons/blue-dot.png';
        $scope.checkinIcons['Customer'] = 'https://maps.google.com/mapfiles/ms/micons/orange-dot.png';
        $scope.checkinMapLocation = {};
        //$scope.checkinMapLocation.dealer = "Not Available";
        //$scope.checkinMapLocation.sVisit = "Not Available";
        var latlng = new google.maps.LatLng(20.5937, 78.9629);
        var zoomLevel = 4;
        var latlngList = [];
        var myOptions = {
            zoom: zoomLevel,
            center: latlng,
            scaleControl: true,
            mapTypeId: google.maps.MapTypeId.ROADMAP
        };
        map = new google.maps.Map(document.getElementById("map_checkin1"), myOptions);
        function addMarker(latlng, id){
            if(id == 0){
                var marker = new google.maps.Marker({
                    position: latlng,
                    map: map,
                    title: 'Click to zoom',
                    icon : $scope.checkinIcons['startVisit']
                });
                reverseGeocode(geocode_address, latlng, 'startVisit');
            }
            else if(id == 1){
                var marker = new google.maps.Marker({
                    position: latlng,
                    map: map,
                    title: 'Click to zoom',
                    icon : $scope.checkinIcons['Customer']
                });
                reverseGeocode(geocode_address, latlng, 'customer');
            }
            gmarkers.push(marker);
        }
        if(order){
            if(order.latitude && order.longitude && order.latitude != 1 && order.latitude != 2 &&
                order.latitude != 3 && order.latitude != 4){
                latlng = new google.maps.LatLng(parseFloat(order.latitude), parseFloat(order.longitude));
                latlngList.push(new google.maps.LatLng(parseFloat(order.latitude), parseFloat(order.longitude)))
                addMarker(latlng, 0);
            }else if(order.storeLat && order.storeLong){
                bootbox.alert({
                    title: "ERROR",
                    message : "Order Location Is Not Available",
                    className : 'text-center'
                })
            }
            if(order.storeLat && order.storeLong){
                var slatlng = new google.maps.LatLng(parseFloat(order.storeLat), parseFloat(order.storeLong));
                latlngList.push(new google.maps.LatLng(parseFloat(order.storeLat), parseFloat(order.storeLong)))
                addMarker(slatlng, 1);
            }else if(order.latitude && order.longitude && order.latitude != 1 && order.latitude != 2 &&
                order.latitude != 3 && order.latitude != 4){
                bootbox.alert({
                    title: "ERROR",
                    message : "Store Location Is Not Available",
                    className : 'text-center'
                })
            } else {
                bootbox.alert({
                    title: "ERROR",
                    message : "Location Is Not Available",
                    className : 'text-center'
                })
            }
        }
        //Set zoom based on the location latlongs
        if(latlngList.length > 0){
            var bounds = new google.maps.LatLngBounds();
            for (var i = 0; i < latlngList.length; i++) {
                bounds.extend(latlngList[i]);
            }
            map.setCenter(bounds.getCenter()); //or use custom center
            map.fitBounds(bounds);
        }
        var mcOptions = {gridSize: 6, maxZoom: 20};
        var markerCluster = new MarkerClusterer(map, gmarkers, mcOptions); //clusters the nearby points
        google.maps.event.trigger(map, 'resize');
        $('a[href="#profile"]').on('shown', function (e) {
            google.maps.event.trigger(map, 'resize');
        });
    }
    $scope.plotOrderMapMarker = function(order){
        //console.log(order);
        if(order.latitude != 1 && order.latitude != 2 && order.latitude != 3 &&
            order.latitude != undefined && order.latitude != null && order.latitude != '' &&
            order.longitude != 1 && order.longitude != 2 && order.longitude != 3 &&
            order.longitude != undefined && order.longitude != null && order.longitude != ''){
            initializeOrderMap(order.latitude, order.longitude,  order);
        }
        else{
            initializeOrderMap();
        }
    };
    $scope.plotMapMarker = function(order){
        //console.log(order);
        if(order.latitude[0] != 1 && order.latitude[0] != 2 && order.latitude[0] != 3 &&
            order.latitude[0] != undefined && order.latitude[0] != null && order.latitude[0] != '' &&
            order.longitude[0] != 1 && order.longitude[0] != 2 && order.longitude[0] != 3 &&
            order.longitude[0] != undefined && order.longitude[0] != null && order.longitude[0] != ''){
            initializeMap(order.latitude[0], order.longitude[0],  order);
        }
        else{
            initializeMap();
        }
    }
    $scope.asset = {};
    $scope.assetUserSelect = function(user,arg) {
        $scope.asset.Sellername = '';
        $scope.asset.recivername = '';
        $scope.dropDownHide = true;
        if (user) {
            if(arg){
                console.log('inside reciver');
                $scope.asset.recivername = user.sellername;
                $scope.interAssetTransfer.receiverId= user.sellerphone;
                $scope.interAssetTransfer.receiverName= user.sellername;
            }else{
                console.log('inside seller');
                $scope.asset.Sellername = user.sellername;
                $scope.miscellaneousReceiptAsset.sellerId = user.sellerphone;
                $scope.miscellaneousReceiptAsset.sellerName = user.sellername;
            }
            $scope.assetSellernameDisp = user.sellername;
            $scope.mapsFilter.seller = user;
        }else{
            $scope.assetSellernameDisp = '';
            $scope.mapsFilter.seller = '';
            $scope.asset.Sellername = '';
        }
    }
   $scope.assetSearch = {};
    $scope.assetFilterUserSelect = function(user,arg) {
        // $scope.asset.Sellername = '';
        $scope.dropDownHide = true;
        if (user) {
            if(arg){
                $scope.assetSearch.seller = user;
                $scope.assetSearch.userName = user.sellername;
            }else{
                $scope.assetTransactionSearch.seller = user;
                $scope.assetTransactionSearch.userName = user.sellername;
            }
            $scope.assetSellernameDisp = user.sellername;
            $scope.assetSearch.sellerid = user.sellerid;
        }else{
            // $scope.assetSellernameDisp = '';
            // $scope.mapsFilter.seller = '';
            $scope.assetSearch.userName = '';
        }
    }
    $scope.renderLocationTrackerMaps = function() {
        console.log("!!!!! Maps Location Tracker")
        for (var i = 0; i < $scope.gmarkers.length; i++) {
            $scope.gmarkers[i].setMap(null);
        }
        $scope.gmarkers = [];
        var icons = [];
        icons['User'] = '/assets/images/map_icons/Live_Tracking.png';
        var latlng = new google.maps.LatLng(20.5937, 78.9629);
        var zoomLevel = 5;
        var mcOptions = {gridSize: 6, maxZoom: 20};
        $http.get("/dash/users/location")
            .success(function (response) {
                //console.log(response)
                $scope.allLocation = response
                var myOptions = {
                    zoom: zoomLevel,
                    center: latlng,
                    scaleControl: true,
                    mapTypeId: google.maps.MapTypeId.ROADMAP
                };
                map = new google.maps.Map(document.getElementById("map_location"), myOptions);
                function addMarker(m, locationInfo) {
                    //console.log(locationInfo);
                    var lastUpdate = false;
                    if (locationInfo.updated)
                        lastUpdate = new Date(locationInfo.updated);
                    var contentString = '<div id="content">' +
                        '<h4 style="text-align: center; color:#003366;"><strong>' + locationInfo.sellername + '</strong></h4>' +
                        '<h5 style="text-align: center; color:#003366;"> Last Updated : <strong>' + (lastUpdate ? lastUpdate.getDate().padLeft() + '/' + (lastUpdate.getMonth() + 1).padLeft() + '/' + lastUpdate.getFullYear() + ' ' + (lastUpdate.getHours() > 12 ? (lastUpdate.getHours() - 12).padLeft() : lastUpdate.getHours().padLeft()) + ':' + lastUpdate.getMinutes().padLeft() + ' ' + (lastUpdate.getHours() > 11 ? 'PM' : 'AM') : 'Not Available') + '</strong></h5>' +
                        '</div>';
                    var infowindow = new google.maps.InfoWindow({
                        content: contentString
                    });
                    //console.log(latlng)
                    var marker = new google.maps.Marker({
                        position: latlng,
                        map: map,
                        title: 'Click to zoom',
                        icon: icons['User']
                    });
                    marker.addListener('mouseover', function () {
                        //map.setZoom(8);
                        //map.setCenter(marker.getPosition());
                        infowindow.open(map, marker);
                        //console.log($scope.mapOrders[m])
                        $scope.$apply();
                    });
                    marker.addListener('mouseout', function () {
                        infowindow.close();
                    });
                    $scope.gmarkers.push(marker);
                }
                if ($scope.mapsFilter.locationSeller) {
                    $scope.markerCluster.clearMarkers()
                    for (var i = 0; i < $scope.allLocation.length; i++) {
                        if ($scope.mapsFilter.locationSeller.sellerphone == $scope.allLocation[i].sellerphone) {
                            latlng = new google.maps.LatLng(parseFloat($scope.allLocation[i].latitude), parseFloat($scope.allLocation[i].longitude));
                            map.setZoom(12);
                            map.setCenter(latlng)
                            addMarker(i, $scope.allLocation[i]);
                        }
                    }
                }
                else{
                    for (var i = 0; i < response.length; i++) {
                        latlng = new google.maps.LatLng(parseFloat(response[i].latitude), parseFloat(response[i].longitude));
                        addMarker(i, response[i],latlng);
                    }
                    $scope.markerCluster = new MarkerClusterer(map, $scope.gmarkers, mcOptions); //clusters the nearby points
                    google.maps.event.trigger(map, 'resize');
                    $('a[href="#profile"]').on('shown', function (e) {
                        google.maps.event.trigger(map, 'resize');
                    });
                }
            })
        jQuery.noConflict();
        $("#chooseLocfilter").css("display", "none");
    };
    $scope.renderMapsOrderDetails = function(){
        $scope.showOrderDetails($scope.selectedOrder);
        // $scope.selectedOrder already contains the selected order id
    };
    $scope.getItemsCategories = function(type) {
        $http.get("/dash/items/categories/"+type)
            .success(function (response) {
                //console.log(response);
                $scope.uniqueCategories =[];
                $scope.categoryType = type;
                for(var i=0; i< response.length; i++){
                    (function(i) {
                        $scope.uniqueCategories.push({categoryName : response[i]});
                        $http.get("/dash/item/category/image/" + type + "/" + $scope.uniqueCategories[i].categoryName).then(function (imgs) {
                            //console.log(imgs.data);
                            if (imgs.data.length){
                                $scope.uniqueCategories[i].image = imgs.data[0].cloudinaryURL;
                                $scope.uniqueCategories[i].type = imgs.data[0].type;
                                $scope.uniqueCategories[i].categoryId = imgs.data[0].categoryId;
                            }
                        });
                    })(i)
                }
            })
            .error(function (error){
                console.log(error);
                alert("Could not fetch categories");
            })
    }
    $scope.checkQbflag = function(){
        console.log("checkQbflag")
        $http.get("/dash/quickbooks/flag/check")
            .success(function(response){
                if(response){
                    $scope.qbConnect = true;
                    $scope.qbConnectTime = response.lastConnectedTime;
                    $scope.qbCompany = response.quickbooks_company_id;
                    clearInterval(qbInterval);
                }
            })
    }
    $scope.saveQuickbooksToken = function(token){
        if(token){
            var body = {};
            body.accesstoken = token;
            $http.post("/dash/quickbooks/token/replace",body)
                .success(function(response){
                    console.log("You can fetch Datas from QuickBooks");
                    toastr.success("You can fetch Datas from QuickBooks");
                })
        }
        else{
            console.log("token not available,please fetch token");
            toastr.error("token not available,please fetch token");
        }
    }
    $scope.getQuickbooksItems = function(){
        $scope.showLoader = true;
        $http.get("/dash/quickbooks/catalog/pull")
            .success(function(response){
                console.log(response);
                if(response == true){
                    $scope.showLoader = false;
                    toastr.success("Items pulled from QuickBooks");
                }else {
                    $scope.showLoader = false;
                    $scope.qbConnect  = false;
                    toastr.error("Error fetching products, Please connect again and try");
                }
            })
    }
    $scope.postQuickbooksItems =function(){
        $scope.showLoader = true;
        $http.post("/dash/quickbooks/catalog/push")
            .success(function(response){
                console.log(response);
                if(response == true){
                    $scope.showLoader = false;
                    toastr.success("Catalog posted to QuickBooks");
                }
                else if(response == false){
                    $scope.showLoader = false;
                    $scope.qbConnect = false;
                    toastr.error("Error posting catalog, Please connect again and try");
                }
                else{
                    $scope.showLoader = false;
                    toastr.error("Validation error,Please Update All The Datas And Try Again");
                }
            })
    }
    $scope.syncQuickbooksItems = function(){
        $scope.showLoader = true;
        $http.get("dash/quickbooks/catalog/sync")
            .success(function(response){
                if(response == true){
                    $scope.showLoader = false;
                    toastr.success("Catalog synchronised between B2BOMS and QuickBooks");
                }
                else if(response == false){
                    $scope.showLoader = false;
                    $scope.qbConnect = false;
                    toastr.error("Error synchronising catalog, Please connect again and try");
                }
                else{
                    $scope.showLoader = false;
                    toastr.error("Validation error,Please Update All The Datas And Try Again");
                }
            })
    }
    $scope.postQuickbooksCustomer = function(){
        $scope.showLoader = true;
        $http.post("/dash/quickbooks/customer/push")
            .success(function(response){
                console.log(response);
                if(response == true){
                    $scope.showLoader = false;
                    toastr.success("Customers posted to QuickBooks");
                }
                else if(response == false){
                    $scope.showLoader = false;
                    $scope.qbConnect = false;
                    toastr.error("Error posting customers, Please connect again and try");
                }
                else{
                    $scope.showLoader = false;
                    toastr.error("Validation error,Please Update All The Datas And Try Again");
                }
            })
    }
    $scope.getQuickbooksCustomer = function(){
        $scope.showLoader = true;
        $http.get("/dash/quickbooks/customer/pull")
            .success(function(response){
                console.log(response);
                if(response == true){
                    $scope.showLoader = false;
                    toastr.success("Dealers pulled from QuickBooks");
                }
                else{
                    $scope.showLoader = false;
                    $scope.qbConnect  = false;
                    toastr.error("Error fetching dealers, Please connect again and try");
                }
            })
    }
    $scope.getQuickbooksTaxes = function(){
        $scope.showLoader = true;
        var date = new Date();
        var date_added = [date.getFullYear(),(date.getMonth()+1).padLeft(), date.getDate().padLeft() ].join('-') + ' '
            + [date.getHours().padLeft(), date.getMinutes().padLeft(), date.getSeconds().padLeft()].join (':');
        var body = {};
        body.date_added = date_added;
        $http.post("/dash/quickbooks/taxes/fetch",body)
            .success(function(response){
                console.log(response);
                if(response == false){
                    $scope.showLoader = false;
                    $scope.qbConnect  = false;
                    toastr.error("Error fetching taxes, Please connect again and try");
                }
                else{
                    $scope.showLoader = false;
                    toastr.success("Taxes  pulled from QuickBooks");
                }
            })
    }
    $scope.getQuickbooksOrder = function(){
        $scope.showLoader = true;
        $http.get("/dash/quickbooks/invoice/pull")
            .success(function(response){
                console.log(response);
                if(response == true){
                    $scope.showLoader = false;
                    toastr.success("Invoices pulled from QuickBooks");
                }
                else{
                    $scope.showLoader = false;
                    $scope.qbConnect  = false;
                    toastr.error("Error fetching invoices, Please connect again and try");
                }
            })
    }
    $scope.postQuickbooksOrders = function(){
        $scope.showLoader = true;
        $http.get("/dash/quickbooks/invoice/push")
            .success(function(response) {
                console.log(response);
                if (response == true) {
                    $scope.showLoader = false;
                    toastr.success("orders posted to QuickBooks");
                } else if (response == false) {
                    $scope.showLoader = false;
                    $scope.qbConnect = false;
                    toastr.error("Error posting orders, Please connect again and try");
                } else {
                    $scope.showLoader = false;
                    toastr.error("Validation error,Please Update All The Datas And Try Again");
                }
            })
    }
    /* .......................................................................................................................................................................
     FIREBASE  MANAGEMENT
     .........................................................................................................................................................................*/
    $scope.firebase = {};
    $scope.showAccount = false;
    $scope.chat_messages = {};
    $scope.showUsers = false;
    $scope.showGroupUsers = false;
    $scope.createNewGroupCollection = [];
    $scope.firebaseGroup = {};
    $scope.userChatSelectedTab = 'recentChats';
    $scope.startIndex = -1;
    $scope.numberOfMessages = 10;
    $scope.chat_messages.messagesToShow =[];
    $scope.readChatMessages = [];
    $scope.addMembersToGroup = [];
    $scope.reply = {};
    /*$interval(function (){
        if($scope.chat && $scope.chat.type)
            $scope.updateMessages($scope.chat.type)
    }, 1000);*/
    // Api to fetch all firebase credentials from database and initialize the firebase
    $scope.renderFirebaseCredential =function() {
        $scope.firebase = {};
        $http.get("/dash/firebase/credentials").success(function (response) {
            console.log('Initializing Firebase Credentials --->', response);
            if(response.length){
                var config = {
                    apiKey: response[0].firebase_api_key,
                    authDomain: response[0].firebase_auth_domain,
                    databaseURL: response[0].firebase_database_url,
                    projectId: response[0].firebase_project_id,
                    storageBucket: response[0].firebase_storage_bucket,
                    messagingSenderId: response[0].firebase_messaging_sender_id
                };
                //.... Initialize Firebase credentials to display in Settings...
                $scope.firebase.api_key = response[0].firebase_api_key;
                $scope.firebase.auth_domain = response[0].firebase_auth_domain;
                $scope.firebase.database_url = response[0].firebase_database_url;
                $scope.firebase.project_id = response[0].firebase_project_id;
                $scope.firebase.storage_bucket = response[0].firebase_storage_bucket;
                $scope.firebase.messaging_sender_id = response[0].firebase_messaging_sender_id;
                if (!firebase.apps.length) {
                    console.log('Firebase already configured --->');
                    firebase.initializeApp(config);
                    firebase.auth().onAuthStateChanged(function(user){
                        if (user) {
                            //console.log(user)
                            $scope.firebase.uid = firebase.auth().currentUser.uid;
                            //console.log('Firebase Current Logged In User-Id : ' + $scope.firebase.uid);
                        }else{
                            console.log("### User / Firebase credentials not authenticated.... -->");
                        }
                    });
                    if ($scope.user && $scope.user.sellerObject) {
                        //console.log($scope.user)
                        //console.log('Chat Credentails already configured for user ... ');
                        if($scope.user.onesignal_player_id){
                            firebase.database().ref("accounts/" + $scope.firebase.uid).update({
                                onesignal_player_id : $scope.user.onesignal_player_id
                            });
                        }
                        if ($scope.user.sellerObject.chat_username && $scope.user.sellerObject.chat_password) {
                            // console.log($scope.user.sellerObject.chat_username + '' + $scope.user.sellerObject.chat_password)
                            $scope.emailLogin($scope.user.sellerObject.chat_username, $scope.user.sellerObject.chat_password);
                        } else {
                            console.log('No chat credentails configured, Create one and save');
                            $scope.sign_in_body ={};
                            $scope.sign_in_body.chat_username = $scope.coID.toLowerCase() + '' + $scope.user.sellerphone + '@B2BOMS.com';
                            $scope.sign_in_body.chat_password = $scope.coID.toLowerCase()+ '' + $scope.user.sellerphone;
                            $scope.sign_in_body.sellerphone = $scope.user.sellerphone;
                            $http.post("/dash/firebase/signin",$scope.sign_in_body).success(function(response){
                                // Creating new user in firebase account
                                $scope.register($scope.sign_in_body.chat_username, $scope.sign_in_body.chat_password);
                            }).error(function (error){
                                alert("Error updating "+error)
                            })
                        }
                    }else{
                        console.log("### User credentials not found ...!!");
                    }
                }else{
                    console.log(firebase.auth().currentUser);
                    if(firebase.auth().currentUser){
                        console.log('CHAT : Already logged In --->', firebase.auth().currentUser.uid);
                        $scope.firebase.uid = firebase.auth().currentUser.uid;
                        if($scope.user.onesignal_player_id){
                            firebase.database().ref("accounts/" + $scope.firebase.uid).update({
                                onesignal_player_id : $scope.user.onesignal_player_id
                            });
                        }
                        console.log("Getting all users --->>>");
                        $scope.getUsers();
                    }
                }
            }else{
                console.log('Firebase Credentials are not added')
            }
        }).error(function (error) {
            console.log(error);
        })
        //.... Register User if the user is first time login....
        $scope.register = function(email, password) {
            //.... Create the user with an auto generated email and system generated password (Auto login)...
            firebase.auth().createUserWithEmailAndPassword(email,password).then(function(success){
                if(success){
                    var user = firebase.auth().currentUser;
                    if(user){
                        var uid = user.uid;
                        var username = $scope.user.username;
                        $scope.createNewUser(uid,username,username,email, "I am available", "Firebase", 'images/chat/profile.png');
                    }
                }
            })
        };
        $scope.createNewUser = function(userId,name,username,email,description,provider,img){
            // console.log(email+''+userId+''+name+''+username+''+provider);
            var date = new Date();
            var body = {
                date : date,
                username : username,
                name : name,
                userId : userId,
                email : email,
                description : description,
                provider : provider,
                onesignal : $scope.user.onesignal_player_id || '',
                img : img,
                coID : $scope.coID
            };
            // console.log("CHAT : Creating a new user and updating the details to firebase", body);
            firebase.auth().onAuthStateChanged(function(user) {
                if (user) {
                    if (user["isAnonymous"]) {
                    } else {
                        this.zone.run(function() {
                        });
                    }
                }
            });
            firebase.database().ref('accounts/'+userId).update(body);
        };
        $scope.emailLogin = function (email, password) {
            // console.log(email+'    '+password)
            firebase.auth().signInWithEmailAndPassword(email, password)
                .then(function (success) {
                    console.log("Successfully Logged In!! ~~");
                    firebase.database().ref('accounts/'+firebase.auth().currentUser.uid).once('value', function(snap){
                        //console.log(snap);
                        if(snap.val() && snap.val().userId){
                            // console.log($scope.user.sellerObject.chat_username + '' + $scope.user.sellerObject.chat_password)
                            $scope.getUsers();
                        }else {
                            console.log("Something messed up the account data...");
                            firebase.database().ref('accounts/' + firebase.auth().currentUser.uid).update({
                                dateCreated: new Date(),
                                username: $scope.user.username,
                                name: $scope.user.username,
                                userId: firebase.auth().currentUser.uid,
                                email: $scope.coID.toLowerCase() + '' + $scope.user.sellerphone + '@B2BOMS.com',
                                description: "I'm available",
                                provider: "Firebase",
                                img: "assets/images/profile.png",
                                coID: $scope.coID,
                                phone: $scope.user.sellerphone
                            }).then(function(){
                                $scope.getUsers();
                            })
                        }
                    })
                }).catch(function (error) {
                var code = error["code"];
                console.log(code)
            });
        }
        $scope.getGroupChatConversation =function(){
            firebase.database().ref('/accounts/' + $scope.firebase.uid+'/groups').on('value',function(snap){
                var groupIds = [];
                angular.forEach(snap.val(), function (groupId, key) {
                    if (groupId) {
                        groupId.key = key;
                        groupIds.push(groupId);
                    }
                })
                if(groupIds.length>0) {
                    angular.forEach(groupIds,function(groupIdsRes){
                        if(groupIdsRes.key){
                            firebase.database().ref('/groups/'+groupIdsRes.key).on('value',function(groupRes){
                                if(groupRes.exists()){
                                    firebase.database().ref('/accounts/' + $scope.firebase.uid+'/groups').once('value',function(res){
                                        if(JSON.stringify(res.val()).indexOf(groupIdsRes.key) != -1){
                                            if(res.exists()){
                                                var group ={};
                                                group.key = groupRes.key;
                                                group.group = groupRes.val();
                                                if(group.key){
                                                    if( group.group && group.group.messages){
                                                        // console.log('unreadMessagesCount =>',group.group.messages.length - groupIdsRes.messagesRead)
                                                        var keys = Object.keys(group.group.messages);
                                                        group.unreadMessagesCount = keys.length - groupIdsRes.messagesRead;
                                                        group.chatType = 'group';
                                                        // Get group's last active date
                                                        if(group.group.messages[keys[keys.length - 1]]){
                                                            // console.log(group.group.messages[group.group.messages.length - 1])
                                                            group.date = group.group.messages[keys[keys.length - 1]].date
                                                        }
                                                        var lastMessage = group.group.messages[keys[keys.length - 1]];
                                                        if ( lastMessage.type == 'text' && lastMessage.message){
                                                            if (lastMessage.sender == $scope.firebase.uid ) {
                                                                group.message = 'You: ' + lastMessage.message;
                                                            } else if(lastMessage.message) {
                                                                // console.log(lastMessage)
                                                                group.message = lastMessage.username+ ': ' +lastMessage.message;
                                                            }
                                                        } else if (lastMessage.type == 'location' && lastMessage.message) {
                                                            if (lastMessage.sender == $scope.firebase.uid) {
                                                                group.message = 'You shared a location';
                                                            } else if(lastMessage.message){
                                                                group.message = lastMessage.username+': has shared a location';
                                                            }
                                                        } else if (lastMessage.type == 'contact' && lastMessage.message) {
                                                            if (lastMessage.sender == $scope.firebase.uid) {
                                                                group.message = 'You shared a contact';
                                                            } else if(lastMessage.message) {
                                                                group.message = lastMessage.username+': has shared a contact information';
                                                            }
                                                        } else if (lastMessage.type == 'video' && lastMessage.message) {
                                                            if (lastMessage.sender == $scope.firebase.uid) {
                                                                group.message = 'You shared a video';
                                                            } else if(lastMessage.message){
                                                                group.message = lastMessage.username+': has shared a video';
                                                            }
                                                        }
                                                        else if (lastMessage.type == 'audio' && lastMessage.message) {
                                                            if (lastMessage.sender == $scope.firebase.uid) {
                                                                group.message = 'You shared a audio';
                                                            } else if(lastMessage.message){
                                                                group.message = lastMessage.username+': has shared a audio';
                                                            }
                                                        }
                                                        else if (lastMessage.type == 'image' && lastMessage.message) {
                                                            if (lastMessage.sender == $scope.firebase.uid) {
                                                                group.message = 'You sent a photo message.';
                                                            } else if(lastMessage.message){
                                                                group.message = lastMessage.username+': has sent you a photo message.';
                                                            }
                                                        } else if(lastMessage.message){
                                                            if (lastMessage.sender == $scope.firebase.uid ) {
                                                                group.message = 'You: ' + lastMessage.message;
                                                            } else if(lastMessage.message){
                                                                // console.log(lastMessage)
                                                                group.message = lastMessage.message;
                                                            }
                                                        }else{
                                                            group.message = ' '
                                                        }
                                                        $scope.addOrUpdateConversation(group);
                                                    }
                                                }
                                            }
                                        }else{
                                            console.log('You left the Group....')
                                        }
                                    })
                                }
                            })
                        }
                    })
                }
            })
        }
        $scope.getSingleChatConversation =function(){
            // console.log($scope.firebase.uid)
            firebase.database().ref('/accounts/' + $scope.firebase.uid+'/conversations').on('value', function (snap) {
                // console.log('List one -2- One Of conversation')
                var conversations =[];
                angular.forEach(snap.val(), function (value, key) {
                    value.key = key;
                    conversations.push(value);
                });
                if(conversations.length){
                    angular.forEach(conversations, function (conversation, key) {
                        if (conversation.key) {
                            firebase.database().ref('/accounts/' + conversation.key).on('value', function (user) {
                                // console.log(user.val())
                                conversation.friend = user.val();
                                firebase.database().ref('/conversations/' + conversation.conversationId).on('value', function (obj) {
                                    if (obj.exists()) {
                                        if(obj.val() && obj.val().messages){
                                            var keys = Object.keys(obj.val().messages);
                                            if (obj.val().messages[keys[keys.length - 1]] != 'undefined' && obj.val().messages[keys[keys.length - 1]]) {
                                                var lastMessage = obj.val().messages[keys[keys.length - 1]];
                                                conversation.date = lastMessage.date;
                                                conversation.sender = lastMessage.sender;
                                                conversation.unreadMessagesCount = keys.length - conversation.messagesRead;
                                                conversation.chatType = 'single';
                                            }
                                            // Set unreadMessagesCount
                                            // Process last message depending on messageType.
                                            // console.log(lastMessage)
                                            // if(lastMessage){
                                            if (lastMessage.type == 'text' && lastMessage.message){
                                                if (lastMessage.sender == $scope.firebase.uid ) {
                                                    conversation.message = 'You: ' + lastMessage.message;
                                                } else if(lastMessage.message) {
                                                    conversation.message = lastMessage.message;
                                                }
                                            } else if (lastMessage.type == 'location' && lastMessage.message) {
                                                if (lastMessage.sender == $scope.firebase.uid) {
                                                    conversation.message = 'You shared a location';
                                                } else if(lastMessage.message){
                                                    conversation.message = 'has shared a location';
                                                }
                                            } else if (lastMessage.type == 'contact' && lastMessage.message) {
                                                if (lastMessage.sender == $scope.firebase.uid) {
                                                    conversation.message = 'You shared a contact';
                                                } else if(lastMessage.message) {
                                                    conversation.message = 'has shared a contact information';
                                                }
                                            } else if (lastMessage.type == 'video' && lastMessage.message) {
                                                if (lastMessage.sender == $scope.firebase.uid) {
                                                    conversation.message = 'You shared a video';
                                                } else if(lastMessage.message){
                                                    conversation.message = 'has shared a video';
                                                }
                                            }
                                            else if (lastMessage.type == 'audio' && lastMessage.message) {
                                                if (lastMessage.sender == $scope.firebase.uid) {
                                                    conversation.message = 'You shared a audio';
                                                } else if(lastMessage.message){
                                                    conversation.message = 'has shared a audio';
                                                }
                                            }
                                            else if (lastMessage.type == 'image' && lastMessage.message) {
                                                if (lastMessage.sender == $scope.firebase.uid) {
                                                    conversation.message = 'You sent a photo message.';
                                                } else if(lastMessage.message){
                                                    conversation.message = 'has sent you a photo message.';
                                                }
                                            } else if (lastMessage.type == 'system' && lastMessage.message) {
                                                if (lastMessage.sender == $scope.firebase.uid) {
                                                    conversation.message = 'You: ' + lastMessage.message;
                                                } else if(lastMessage.message){
                                                    conversation.message = lastMessage.message;
                                                }
                                            }else if(lastMessage.message){
                                                if (lastMessage.sender == $scope.firebase.uid ) {
                                                    conversation.message = 'You: ' + lastMessage.message;
                                                } else if(lastMessage.message){
                                                    conversation.message = lastMessage.message;
                                                }
                                            }
                                            else {
                                                conversation.message = ' '
                                            }
                                            // }
                                            // Add or update conversation.
                                            $scope.addOrUpdateConversation(conversation);
                                        }
                                    } else {
                                        // console.log("Conversation Key Not Found : " + obj.key);
                                    }
                                })
                            })
                        }
                    })
                    // })($scope);
                    // console.log('List of conversation - id for current account')
                    // console.log($scope.chat_messages.accounts)
                }
            })
        }
        $scope.getUsers = function () {
            $scope.chat_messages.accounts = [];
            if(firebase.auth().currentUser){
                firebase.database().ref('/accounts/' + firebase.auth().currentUser.uid).once('value', function (snap) {
                    if(snap.val()){
                        //console.log(snap.val())
                        $scope.loggedInUser = {};
                        $scope.loggedInUser = snap.val();
                        $scope.loggedInUserId = snap.val().userId;
                        $scope.loggedInUserName = snap.val().username;
                        //console.log('loggedInUserId '+$scope.loggedInUserId+' loggedInUserName  '+$scope.loggedInUserName )
                    }else console.log("Chat : Global Login Possible ---> No userID");
                });
                $scope.getSingleChatConversation();
                $scope.getGroupChatConversation();
                $scope.getAllAccounts();
                $scope.showUsers = true;
                $scope.showAccount =false;
                $scope.showGroupUsers = false;
                // $scope.$apply();
            }else console.log("Chat : Global Login Possible ---> No Uid");
        }
        $scope.addOrUpdateConversation = function(conversation) {
            // console.log(conversation,'Conversation')
            if (!$scope.chat_messages.accounts) {
                $scope.chat_messages.accounts = [conversation];
            } else {
                var index = -1;
                for (var i = 0; i < $scope.chat_messages.accounts.length; i++) {
                    if ($scope.chat_messages.accounts[i].key == conversation.key) {
                        index = i;
                    }
                }
                if (index > -1) {
                    $scope.chat_messages.accounts[index] = conversation;
                } else {
                    $scope.chat_messages.accounts.push(conversation);
                }
                $scope.chat_messages.accounts.sort(function (a, b) {
                    var date1 = new Date(a.date);
                    var date2 = new Date(b.date);
                    if (date1 > date2) {
                        return -1;
                    } else if (date1 < date2) {
                        return 1;
                    } else {
                        return 0;
                    }
                });
            }
            $scope.Accounts = $scope.chat_messages.accounts;
        }
        $scope.sendChatMessage = function (type) {
            if(type == 'single'){
                if($scope.chat.conversationId){
                    if($scope.chat.selectedConversation && $scope.replyMessages && $scope.reply.message){
                        var reply = angular.copy($scope.replyMessages);
                        var conversationId = $scope.chat.conversationId;
                        var new_message = {
                            date: new Date().toString(),
                            sender: firebase.auth().currentUser.uid,
                            type: 'reply',
                            reply: {
                                date: reply.date,
                                sender: reply.sender,
                                type: reply.type,
                                username: reply.username ? reply.username : '',
                                message: reply.message,
                                avatar: reply.avatar ? reply.avatar : ''
                            },
                            message: $scope.reply.message,
                            username: $scope.loggedInUserName,
                            reply_type: 'text'
                        };
                        // Update conversation on database.
                        var ref = firebase.database().ref('/conversations/' + conversationId+'/messages/');
                        var newMessageRef = ref.push();
                        newMessageRef.set(new_message).then(function(){
                            console.log("New message --> ", newMessageRef.key);
                        });
                        // Clear messagebox.
                        $scope.reply.message = '';
                        jQuery.noConflict();
                        $('#replyMessage').modal('hide')
                    }else if ($scope.chat.selectedConversation && $scope.chat.textMessage) {
                        var  new_message = {
                            date: new Date().toString(),
                            sender: $scope.loggedInUserId,
                            type: 'text',
                            message: $scope.chat.textMessage,
                            username: $scope.loggedInUserName
                        };
                        var ref = firebase.database().ref('/conversations/' + $scope.chat.conversationId+'/messages/');
                        var newMessageRef = ref.push();
                        newMessageRef.set(new_message).then(function(success){
                            console.log("New message -- > ", newMessageRef.key);
                        })
                        $scope.chat.textMessage = '';
                        // $(window).scrollTop();.
                    }
                    $scope.setMessagesRead('single');
                    setTimeout(function(){
                        $scope.scrollDown();
                    }, 500);
                    // $scope.updatereadMessages();
                }else{
                    console.log("else")
                    // New Conversation with friend.
                    var new_message = {
                        date : new Date().toString(),
                        sender : $scope.loggedInUserId,
                        type :  'text',
                        message :  $scope.chat.textMessage,
                        username :  $scope.loggedInUserName
                    };
                    var users = [];
                    users.push($scope.loggedInUserId);
                    users.push($scope.chat.selectedConversation);
                    // console.log(users)
                    // Add conversation.
                    var convRef = firebase.database().ref('conversations');
                    var newConMessageRef = convRef.push();
                    newConMessageRef.set({
                        dateCreated : new Date().toString(),
                        users : users
                    }).then(function(){
                        // console.log(success)
                        var conversationId = newConMessageRef.key;
                        console.log(conversationId);
                        var ref = firebase.database().ref('/conversations/' + conversationId+'/messages/');
                        var newMessageRef = ref.push();
                        newMessageRef.set(new_message).then(function(){
                            console.log("New Message --->", newMessageRef.key);
                            firebase.database().ref('/accounts/' + $scope.loggedInUserId + '/conversations/' + $scope.chat.selectedConversation).update({
                                conversationId: conversationId,
                                messagesRead: 1
                            });
                            firebase.database().ref('/accounts/' +$scope.chat.selectedConversation + '/conversations/' + $scope.loggedInUserId).update({
                                conversationId: conversationId,
                                messagesRead: 0
                            });
                        });
                    });
                    $scope.chat.textMessage ='';
                }
            }else if(type == 'group'){
                // console.log($scope.chat.selectedConversation)
                if($scope.chat.selectedConversation && $scope.replyMessages && $scope.reply.message){
                    // var reply = $scope.replyMessages;
                    var groupId = $scope.chat.selectedConversation;
                    // console.log(reply)
                    var new_message = {
                        date: new Date().toString(),
                        sender: firebase.auth().currentUser.uid,
                        type: 'reply',
                        reply:{
                            date:$scope.replyMessages.date,
                            sender:$scope.replyMessages.sender,
                            type:$scope.replyMessages.type,
                            username: $scope.replyMessages.username ? $scope.replyMessages.username : '',
                            message: $scope.replyMessages.message?$scope.replyMessages.message:$scope.replyMessages.url,
                            avatar:$scope.replyMessages.avatar?$scope.replyMessages.avatar:''
                        },
                        username: $scope.loggedInUserName ? $scope.loggedInUserName : '',
                        message: $scope.reply.message,
                        reply_type: type
                    };
                    var ref = firebase.database().ref('/groups/'+ groupId+'/messages/');
                    var newMessageRef = ref.push();
                    newMessageRef.set(new_message).then(function(){
                        console.log("New Message ---> ", newMessageRef.key);
                    });
                    // Clear messagebox.
                    $scope.reply.message = '';
                    jQuery.noConflict();
                    $('#replyMessage').modal('hide')
                } else if($scope.chat.selectedConversation && $scope.chat.textMessage){
                    var newMessage = {
                        date: new Date().toString(),
                        sender: $scope.loggedInUserId,
                        type: 'text',
                        message: $scope.chat.textMessage,
                        username: $scope.loggedInUserName
                    };
                    var array = [];
                    array = angular.copy($scope.chat_messages.messages);
                    array.push(newMessage);
                    var groupId = $scope.chat.selectedConversation;
                    // Update group messages.
                    var ref = firebase.database().ref('/groups/'+ groupId+'/messages/');
                    var newMessageRef = ref.push();
                    newMessageRef.set(newMessage).then(function(){
                        console.log("New Message ---> ", newMessageRef.key);
                    })
                }
                $scope.chat.textMessage = '';
                $scope.setMessagesRead('group');
                setTimeout(function(){
                    $scope.scrollDown();
                }, 500);
            }
        }
        $scope.scrollDown = function(){
            document.getElementById('scroll').scrollTop =  document.getElementById('scroll').scrollHeight;
        };
        // Fetch conversation Data on click of single of group
        $scope.fetchConversationData = function (conversationId, type) {
            console.log(conversationId, type);
            $scope.readChatMessages = [];
            $scope.startIndex = -1;
            $scope.chatter_user_info = {};
            $scope.chat_messages.messagesToShow = [];
            if (type == 'single') {
                firebase.database().ref('/accounts/' + conversationId).once('value', function (response) {
                    $scope.chatter_user_info.name = response.val().name ? response.val().name : response.val().username;
                    $scope.chatter_user_info.profileImage = response.val().img != 'assets/images/profile.png' ? response.val().img : '/images/chat/profile.png';
                });
                if (conversationId) {
                    $scope.chat_messages.messages = [];
                    $scope.chat.conversationId = '';
                    $scope.chat.selectedConversation = conversationId;
                    $scope.chat.type = 'single';
                    firebase.database().ref('/accounts/' + $scope.firebase.uid + '/conversations/' + conversationId).on('value', function (data) {
                        if (data.exists()) {
                            firebase.database().ref('/conversations/' + data.val().conversationId + '/messages').on('value', function (snapshot) {
                                if (snapshot.exists()) {
                                    var temp = [];
                                    for(var key in snapshot.val()){
                                        if(snapshot.val().hasOwnProperty(key)){
                                            snapshot.val()[key].key = key;
                                            temp.push(snapshot.val()[key]);
                                        }
                                    }
                                    var messages = snapshot.val();
                                    if (!messages) messages = [];
                                    $scope.readChatMessages = temp;
                                    if ($scope.chat_messages.messages.length) {
                                        if ($scope.chat.selectedConversation == conversationId) {
                                            if (Object.keys(messages).length > $scope.chat_messages.messages.length) {
                                                var keys = Object.keys(messages);
                                                if(keys[keys.length - 1] != $scope.chat_messages.messages[$scope.chat_messages.messages.length - 1].key){
                                                    var message = messages[keys[keys.length - 1]];
                                                    message.key = keys[keys.length -1];
                                                    $scope.chat.conversationId = data.val().conversationId;
                                                    if (message.deleted) {
                                                        var deleting = JSON.stringify(message.deleted);
                                                        if (deleting.indexOf($scope.loggedInUserId) != -1)
                                                            message.hide_message = true;
                                                    }
                                                    $scope.chat_messages.messages.push(message);
                                                    $scope.chat_messages.messagesToShow.push(message);
                                                    $scope.markMessagesRead($scope.chat.conversationId, 'single');
                                                }else{
                                                    var message = temp[keys[keys.length - 2]];
                                                    message.key = keys[keys.length - 2];
                                                    if (message.deleted) {
                                                        var deleting = JSON.stringify(message.deleted);
                                                        if (deleting.indexOf($scope.loggedInUserId) != -1)
                                                            message.hide_message = true;
                                                    }
                                                    $scope.chat_messages.messages.push(message);
                                                    $scope.chat_messages.messagesToShow.push(message);
                                                }
                                            }
                                        } else {
                                            console.log("Wrong Page !! ????");
                                            $scope.markMessagesDelivered($scope.chat_messages.messages, data.val().conversationId, 'single');
                                        }
                                    } else {
                                        if ($scope.chat.selectedConversation == conversationId) {
                                            $scope.chat_messages.messages = [];
                                            $scope.chat.conversationId = data.val().conversationId;
                                            for (var key in messages) {
                                                if(messages.hasOwnProperty(key)){
                                                    messages[key].key =key;
                                                    firebase.database().ref('/accounts/' + messages[key].sender).on('value', function (user) {
                                                        if (user.exists()) {
                                                            messages.avatar = user.val().img;
                                                        }
                                                    });
                                                    if (messages[key].deleted) {
                                                        var deleting = JSON.stringify(messages[key].deleted);
                                                        if (deleting.indexOf($scope.loggedInUserId) != -1)
                                                            messages[key].hide_message = true;
                                                    }
                                                    $scope.chat_messages.messages.push(messages[key]);
                                                }
                                            }
                                            // Load messages in relation to numOfMessages.
                                            if ($scope.startIndex == -1) {
                                                // Get initial index for numberOfMessages to show.
                                                if (($scope.chat_messages.messages.length - $scope.numberOfMessages) > 0) {
                                                    $scope.startIndex = $scope.chat_messages.messages.length - $scope.numberOfMessages;
                                                } else {
                                                    $scope.startIndex = 0;
                                                }
                                            }
                                            // Set messagesToShow
                                            for (var i = $scope.startIndex; i < $scope.chat_messages.messages.length; i++) {
                                                $scope.chat_messages.messagesToShow.push($scope.chat_messages.messages[i]);
                                            }
                                            $scope.markMessagesRead($scope.chat.conversationId, 'single');
                                            $scope.setMessagesRead('single');
                                        }else{
                                            console.log("Wrong Page !! ????");
                                        }
                                    }
                                }
                            });
                        }
                    });
                }
            } else if (type == 'group') {
                // console.log('User accountId'+conversationId)
                firebase.database().ref('/groups/' + conversationId).once('value', function (group) {
                    if (group.exists()) {
                        $scope.chatter_user_info.name = group.val().name ? group.val().name : '';
                        $scope.chatter_user_info.profileImage = group.val().img != 'assets/images/group.jpeg' ? group.val().img : '/images/chat/groupProfile.png';
                        $scope.chatter_user_info.dateCreated = group.val().dateCreated;
                        $scope.chatter_user_info.description = group.val().description
                        $scope.chatter_user_info.group_members = group.val().members;
                        $scope.chatter_user_info.sender = group.val().sender;
                        $scope.chatter_user_info.messages = group.val().messages;
                        $scope.chatter_user_info.membersCount = group.val().members.length;
                        $scope.isAdmin();
                    }
                })
                if (conversationId) {
                    $scope.chat_messages.messages = [];
                    $scope.chat.selectedConversation = conversationId;
                    $scope.chat.type = 'group';
                    firebase.database().ref('/groups/' + $scope.chat.selectedConversation + '/messages').on('value', function (data) {
                        firebase.database().ref('/accounts/' + $scope.firebase.uid + '/groups').once('value', function (res) {
                            if (JSON.stringify(res.val()).indexOf($scope.chat.selectedConversation) != -1) {
                                var temp = [];
                                for(var key in data.val()){
                                    if(data.val().hasOwnProperty(key)){
                                        data.val()[key].key = key;
                                        temp.push(data.val()[key]);
                                    }
                                }
                                console.log(temp);
                                var messages = data.val();
                                if (!messages) messages = [];
                                $scope.readChatMessages = temp;
                                if ($scope.chat_messages.messages.length) {
                                    if ($scope.chat.selectedConversation == conversationId) {
                                        if (Object.keys(messages).length > $scope.chat_messages.messages.length) {
                                            var new_messages = Object.keys(messages).length - $scope.chat_messages.messages.length;
                                            for(var  i = 1; i <= new_messages; i++){
                                                var keys = Object.keys(messages);
                                                if(keys[keys.length - i] != $scope.chat_messages.messages[$scope.chat_messages.messages.length - i].key) {
                                                    var message = messages[keys[keys.length - i]];
                                                    message.key = keys[keys.length - i];
                                                    firebase.database().ref('/accounts/' + message.sender).on('value', function (user) {
                                                        if (user.exists()) {
                                                            message.username = user.val().name;
                                                            message.avatar = user.val().img;
                                                        }
                                                    });
                                                    if (message.deleted) {
                                                        var deleting = JSON.stringify(message.deleted);
                                                        if (deleting.indexOf(firebase.auth().currentUser.uid) != -1)
                                                            message.hide_message = true;
                                                    }
                                                    $scope.chat_messages.messages.push(message);
                                                    $scope.chat_messages.messagesToShow.push(message);
                                                    if(i == new_messages)
                                                        $scope.markMessagesRead($scope.chat.selectedConversation, 'group');
                                                }
                                            }
                                        }
                                    } else {
                                        console.log("Wrong Page !! ????");
                                        $scope.markMessagesDelivered($scope.chat_messages.messages, conversationId, 'group');
                                    }
                                } else {
                                    if ($scope.chat.selectedConversation == conversationId) {
                                        $scope.chat_messages.messages = [];
                                        // console.log(messages)
                                        for (var key in messages) {
                                            if(messages.hasOwnProperty(key)) {
                                                messages[key].key = key;
                                                firebase.database().ref('/accounts/' + messages[key].sender).on('value', function (user) {
                                                    if (user.exists()) {
                                                        messages.username = user.val().name;
                                                        messages.avatar = user.val().img;
                                                    }
                                                })
                                                if (messages[key].deleted) {
                                                    var deleting = JSON.stringify(messages[key].deleted);
                                                    if (deleting.indexOf(firebase.auth().currentUser.uid) != -1)
                                                        messages[key].hide_message = true;
                                                }
                                                $scope.chat_messages.messages.push(messages[key]);
                                            }
                                        }
                                        // Load messages in relation to numOfMessages.
                                        if ($scope.startIndex == -1) {
                                            // Get initial index for numberOfMessages to show.
                                            if (($scope.chat_messages.messages.length - $scope.numberOfMessages) > 0) {
                                                $scope.startIndex = $scope.chat_messages.messages.length - $scope.numberOfMessages;
                                            } else {
                                                $scope.startIndex = 0;
                                            }
                                        }
                                        if (!$scope.chat_messages.messagesToShow.length) {
                                            $scope.chat_messages.messagesToShow = [];
                                        }
                                        // Set messagesToShow
                                        for (var i = $scope.startIndex; i < $scope.chat_messages.messages.length; i++) {
                                            $scope.chat_messages.messagesToShow.push($scope.chat_messages.messages[i]);
                                        }
                                        $scope.markMessagesRead(conversationId, 'group');
                                        $scope.setMessagesRead('group');
                                    }else{
                                        console.log("Wrong Page !! ????");
                                    }
                                }
                            } else {
                                console.log('Do Nothing');
                                $scope.chat.selectedConversation = '';
                                $scope.chat_messages.messages = [];
                                $scope.chat.textMessage = ''
                            }
                        })
                    })
                }
            }
            setTimeout(function () {
                $scope.scrollDown();
            }, 500);
        }
        $scope.view = function(tab){
            console.log('CHAT : View Tab - ' + tab);
            $scope.chat.search ='';
            switch(tab){
                case 0:
                    $scope.getUsers();
                    $scope.showUsers = true;
                    $scope.showAccount =false;
                    $scope.showGroupUsers = false;
                    break;
                case 1:
                    $scope.getAllAccounts();
                    $scope.showAccount = true;
                    $scope.showUsers = false;
                    $scope.showGroupUsers = false;
                    break;
                case 2:
                    $scope.getAllAccounts();
                    $scope.showGroupUsers = true;
                    $scope.showAccount =false;
                    $scope.showUsers = false;
                    $scope.createNewGroupCollection = [];
                    $scope.firebaseGroup ={};
                    break;
            }
        }
        $scope.getAllAccounts=function(){
            // console.log('List of Members')
            firebase.database().ref('/accounts/').orderByChild('name').on('value',function(response){
                $scope.accounts = [];
                angular.forEach(response.val(), function (value, key) {
                    // console.log(key == $scope.loggedInUserId)
                    if(key && value.userId){
                        if($scope.loggedInUserId != key){
                            value.key = key;
                            $scope.accounts.push(value);
                            $scope.accounts.sort(function (a, b) {
                                var name1 = a.name;
                                var name2 = b.name;
                                if (name1 > name2) {
                                    return 1;
                                } else if (name1 < name2) {
                                    return -1;
                                } else {
                                    return 0;
                                }
                            });
                        }
                    }
                    $scope.searchAccount = $scope.accounts
                });
            })
        }
    }
    $scope.setMessagesRead = function(type){
        if(type == 'single'){
            if($scope.chat.conversationId){
                /*firebase.database().ref('/conversations/' + $scope.chat.conversationId + '/messages').on('value', function(snap){
                 // console.log(snap.val());
                 if (snap.exists()) {
                 firebase.database().ref('/accounts/' + $scope.firebase.uid + '/conversations/' +  $scope.chat.selectedConversation).update({
                 messagesRead: snap.val().length
                 }).then(function(success){
                 // console.log(success)
                 });
                 }
                 });*/
                firebase.database().ref('/accounts/' + $scope.firebase.uid + '/conversations/' +  $scope.chat.selectedConversation).update({
                    messagesRead: $scope.chat_messages.messages.length
                }).then(function(success){
                    // console.log(success)
                });
            }
        }else if(type == 'group'){
            // Update user's messagesRead on database.
            firebase.database().ref('/accounts/' + $scope.firebase.uid + '/groups/' + $scope.chat.selectedConversation).update({
                messagesRead: $scope.chat_messages.messages.length
            })
        }
    }
    $scope.markMessagesDelivered = function(messages,conversationId,type){
        // console.log(type)
        if(type == 'group'){
            if(messages.length){
                for(var i =0;i< messages.length; i++){
                    if(messages[i]){
                        if(messages[i]!= 'system'){
                            if(messages[i].sender != firebase.auth().currentUser.uid){
                                console.log('Delivered Message');
                                if(!messages[i].delivered){
                                    var delivered = [{
                                        date: new Date(),
                                        sender: firebase.auth().currentUser.uid,
                                        username: ($scope.loggedInUserName? $scope.loggedInUserName : ''),
                                        img: (messages[i].avatar)? messages[i].avatar : ''
                                    }];
                                    firebase.database().ref('/groups/' + conversationId  + '/messages/'+ messages[i].key).update({
                                        delivered: delivered
                                    })
                                }else if(messages[i].delivered.length > 0){
                                    var delivered_users = messages[i].delivered;
                                    //..... index will be 96 - 20 = 76.....
                                    //.... 76 is same as 0 index for message and messagetoshor resp....
                                    if(JSON.stringify(delivered_users).indexOf(firebase.auth().currentUser.uid) == -1){
                                        delivered_users.push({
                                            date: new Date(),
                                            sender: firebase.auth().currentUser.uid,
                                            username: ($scope.loggedInUserName? $scope.loggedInUserName.name : ''),
                                            img: (messages[i].avatar)? messages[i].avatar : ''
                                        });
                                        firebase.database().ref('/groups/' + conversationId  + '/messages/'+ messages[i].key).update({
                                            delivered: delivered_users
                                        })
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }else if(type == 'single'){
            // console.log(messages,'message')
            if (messages.length) {
                //..... index will be 96 - 20 = 76.....
                // console.log(messages)
                for(var i = 0;i < messages.length;i++){
                    if(messages[i]){
                        if(messages[i].type!= 'system'){
                            if(messages[i].sender != firebase.auth().currentUser.uid){
                                if(!messages[i].delivered){
                                    firebase.database().ref('/conversations/' + conversationId + '/messages/' + messages[i].key).update({
                                        delivered: true,
                                        delivery_date: new Date().toString()
                                    }).then(function(success){
                                        // console.log(success)
                                    })
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    $scope.updateMessages =function(type){
        if(type == 'group'){
            if($scope.readChatMessages.length){
                for(var i = 0; i < $scope.chat_messages.messagesToShow.length; i++){
                    if($scope.chat_messages.messagesToShow[i].type != "system"){
                        // console.log($scope.readChatMessages.length - $scope.chat_messages.messagesToShow.length + i)
                        if(!$scope.chat_messages.messagesToShow[i].read){
                            if($scope.readChatMessages[$scope.readChatMessages.length - $scope.chat_messages.messagesToShow.length + i].read){
                                //.... Update the view....
                                $scope.chat_messages.messagesToShow[i].read = $scope.readChatMessages[$scope.readChatMessages.length - $scope.chat_messages.messagesToShow.length + i].read;
                                // console.log($scope.chat_messages.messagesToShow[i].read)
                                //.... Update the master data....
                                $scope.chat_messages.messages[$scope.readChatMessages.length - $scope.chat_messages.messagesToShow.length + i].read = $scope.readChatMessages [$scope.readChatMessages.length - $scope.chat_messages.messagesToShow.length + i].read;
                            }
                        }else{
                            if($scope.chat_messages.messagesToShow[i].read.length < $scope.chatter_user_info.membersCount){
                                // console.log($scope.readChatMessages .length - $scope.chat_messages.messagesToShow.length + i)
                                // console.log($scope.readChatMessages [$scope.readChatMessages .length - $scope.chat_messages.messagesToShow.length + i])
                                if($scope.readChatMessages[$scope.readChatMessages .length - $scope.chat_messages.messagesToShow.length + i].read){
                                    if($scope.chat_messages.messagesToShow[i].read.length != $scope.readChatMessages [$scope.readChatMessages.length - $scope.chat_messages.messagesToShow.length + i].read.length){
                                        //.... Update the view....
                                        $scope.chat_messages.messagesToShow[i].read = $scope.readChatMessages[$scope.readChatMessages .length - $scope.chat_messages.messagesToShow.length + i].read;
                                        //.... Update the master data....
                                        $scope.chat_messages.messages[$scope.readChatMessages.length - $scope.chat_messages.messagesToShow.length + i].read = $scope.readChatMessages[$scope.readChatMessages .length - $scope.chat_messages.messagesToShow.length + i].read;
                                    }
                                }
                            }
                        }
                        //.... Delivery updation.....
                        if(!$scope.chat_messages.messagesToShow[i].delivered){
                            if($scope.readChatMessages [$scope.readChatMessages .length - $scope.chat_messages.messagesToShow.length + i].delivered){
                                //.... Update the view....
                                $scope.chat_messages.messagesToShow[i].delivered = $scope.readChatMessages [$scope.readChatMessages .length - $scope.chat_messages.messagesToShow.length + i].delivered;
                                //.... Update the master data....
                                $scope.chat_messages.messages[$scope.readChatMessages .length - $scope.chat_messages.messagesToShow.length + i].delivered = $scope.readChatMessages [$scope.readChatMessages .length - $scope.chat_messages.messagesToShow.length + i].delivered;
                            }
                        }else{
                            if($scope.chat_messages.messagesToShow[i].delivered.length < $scope.chatter_user_info.membersCount){
                                if($scope.readChatMessages[$scope.readChatMessages .length - $scope.chat_messages.messagesToShow.length + i].delivered){
                                    if($scope.chat_messages.messagesToShow[i].delivered.length != $scope.readChatMessages [$scope.readChatMessages .length - $scope.chat_messages.messagesToShow.length + i].delivered.length){
                                        //.... Update the view....
                                        $scope.chat_messages.messagesToShow[i].delivered = $scope.readChatMessages [$scope.readChatMessages .length - $scope.chat_messages.messagesToShow.length + i].delivered;
                                        //.... Update the master data....
                                        $scope.chat_messages.messages[$scope.readChatMessages .length - $scope.chat_messages.messagesToShow.length + i].delivered = $scope.readChatMessages [$scope.readChatMessages .length - $scope.chat_messages.messagesToShow.length + i].delivered;
                                    }
                                }
                            }
                        }
                        if(!$scope.chat_messages.messagesToShow[i].deleted && $scope.readChatMessages[$scope.readChatMessages .length - $scope.chat_messages.messagesToShow.length + i].deleted){
                            //.... Update the view....
                            // console.log("Noting this as deleted - " + $scope.chat_messages.messagesToShow[i].message);
                            $scope.chat_messages.messagesToShow[i].deleted = $scope.readChatMessages [$scope.readChatMessages .length - $scope.chat_messages.messagesToShow.length + i].deleted;
                            if((JSON.stringify($scope.chat_messages.messagesToShow[i].deleted)).indexOf(firebase.auth().currentUser.uid) != -1) $scope.chat_messages.messagesToShow[i].hide_message = true;
                            //.... Update the master data....
                            // console.log("Noting this as deleted - " + $scope.chat_messages.messages[$scope.readChatMessages .length - $scope.chat_messages.messagesToShow.length + i].message);
                            $scope.chat_messages.messages[$scope.readChatMessages .length - $scope.chat_messages.messagesToShow.length + i].deleted = $scope.readChatMessages [$scope.readChatMessages .length - $scope.chat_messages.messagesToShow.length + i].deleted;
                            if((JSON.stringify($scope.chat_messages.messages[$scope.readChatMessages .length - $scope.chat_messages.messagesToShow.length + i].deleted)).indexOf(firebase.auth().currentUser.uid) != -1) $scope.chat_messages.messages[$scope.readChatMessages .length - $scope.chat_messages.messagesToShow.length + i].hide_message = true;
                        }
                    }
                }
            }
        }else if(type == 'single'){
            if($scope.readChatMessages.length){
                // console.log("Updating all single conversations ------->>>");
                //.... Update the view irrespective of the messages coming from the firebase....
                for(var i = 0; i < $scope.chat_messages.messagesToShow.length; i++){
                    if($scope.chat_messages.messagesToShow[i].type != "system"){
                        if(!$scope.chat_messages.messagesToShow[i].read && $scope.readChatMessages[$scope.readChatMessages.length - $scope.chat_messages.messagesToShow.length + i].read){
                            //.... Update the view....
                            // console.log("Noting $scope.chat_messages as read - " + $scope.chat_messages.messagesToShow[i].message);
                            $scope.chat_messages.messagesToShow[i].read = $scope.readChatMessages[$scope.readChatMessages.length - $scope.chat_messages.messagesToShow.length + i].read;
                            $scope.chat_messages.messagesToShow[i].last_seen = $scope.readChatMessages[$scope.readChatMessages.length - $scope.chat_messages.messagesToShow.length + i].last_seen;
                            //.... Update the master data....
                            // console.log("Noting $scope.chat_messages as read - " + $scope.chat_messages.messages[$scope.chat_messages.messages.length - $scope.chat_messages.messagesToShow.length + i].message);
                            $scope.chat_messages.messages[$scope.readChatMessages.length - $scope.chat_messages.messagesToShow.length + i].read = $scope.readChatMessages[$scope.readChatMessages.length - $scope.chat_messages.messagesToShow.length + i].read;
                            $scope.chat_messages.messages[$scope.readChatMessages.length - $scope.chat_messages.messagesToShow.length + i].last_seen = $scope.readChatMessages[$scope.readChatMessages.length - $scope.chat_messages.messagesToShow.length + i].last_seen;
                        }
                        // console.log(!$scope.chat_messages.messagesToShow[i].delivered && $scope.chat_messages.messages[$scope.chat_messages.messages.length - $scope.chat_messages.messagesToShow.length + i].delivered)
                        if(!$scope.chat_messages.messagesToShow[i].delivered && $scope.readChatMessages[$scope.readChatMessages.length - $scope.chat_messages.messagesToShow.length + i].delivered){
                            //.... Update the view....
                            // console.log("Noting $scope.chat_messages as delivered - " + $scope.chat_messages.messagesToShow[i].message);
                            $scope.chat_messages.messagesToShow[i].delivered = $scope.readChatMessages[$scope.readChatMessages.length - $scope.chat_messages.messagesToShow.length + i].delivered;
                            $scope.chat_messages.messagesToShow[i].delivery_date = $scope.readChatMessages[$scope.readChatMessages.length - $scope.chat_messages.messagesToShow.length + i].delivery_date;
                            //.... Update the master data....
                            // console.log("Noting $scope.chat_messages as delivered - " + $scope.chat_messages.messages[$scope.chat_messages.messages.length - $scope.chat_messages.messagesToShow.length + i].message);
                            $scope.chat_messages.messages[$scope.readChatMessages.length - $scope.chat_messages.messagesToShow.length + i].delivered = $scope.readChatMessages[$scope.readChatMessages.length - $scope.chat_messages.messagesToShow.length + i].delivered;
                            $scope.chat_messages.messages[$scope.readChatMessages.length - $scope.chat_messages.messagesToShow.length + i].delivery_date = $scope.readChatMessages[$scope.readChatMessages.length - $scope.chat_messages.messagesToShow.length + i].delivery_date;
                        }
                        if(!$scope.chat_messages.messagesToShow[i].deleted && $scope.readChatMessages[$scope.readChatMessages.length - $scope.chat_messages.messagesToShow.length + i].deleted){
                            //.... Update the view....
                            // console.log("Noting $scope.chat_messages as deleted - " + $scope.chat_messages.messagesToShow[i].message);
                            $scope.chat_messages.messagesToShow[i].deleted = $scope.readChatMessages[$scope.readChatMessages.length - $scope.chat_messages.messagesToShow.length + i].deleted;
                            if((JSON.stringify($scope.chat_messages.messagesToShow[i].deleted)).indexOf($scope.loggedInUserId) != -1) $scope.chat_messages.messagesToShow[i].hide_message = true;
                            //.... Update the master data....
                            // console.log("Noting $scope.chat_messages as deleted - " + $scope.chat_messages.messages[$scope.chat_messages.messages.length - $scope.chat_messages.messagesToShow.length + i].message);
                            $scope.chat_messages.messages[$scope.readChatMessages.length - $scope.chat_messages.messagesToShow.length + i].deleted = $scope.chat_messages.messages[$scope.chat_messages.messages.length - $scope.chat_messages.messagesToShow.length + i].deleted;
                            if((JSON.stringify($scope.chat_messages.messages[$scope.readChatMessages.length - $scope.chat_messages.messagesToShow.length + i].deleted)).indexOf($scope.loggedInUserId) != -1) $scope.chat_messages.messages[$scope.readChatMessages.length - $scope.chat_messages.messagesToShow.length + i].hide_message = true;
                        }
                    }
                }
            }
            // console.log($scope.chat_messages.messagesToShow)
        }
    }
    $scope.markMessagesRead = function(conversationId,type) {
        if(type == 'single'){
            if($scope.readChatMessages.length){
                var currentPage = conversationId;
                var updateDB = {};
                //.... Assuming we are displaying 20 messages off total 96 messages....
                if($scope.chat_messages.messagesToShow){
                    if($scope.chat_messages.messagesToShow.length){
                        //.... Loop through the 20 messages....
                        for(var i = 0; i < $scope.chat_messages.messagesToShow.length; i++){
                            if($scope.chat_messages.messagesToShow[i]){
                                if($scope.chat_messages.messagesToShow[i].type != 'system'){
                                    if ($scope.chat_messages.messagesToShow[i].sender != firebase.auth().currentUser.uid) {
                                        if(currentPage){
                                            // console.log("CONV : Marking messages as delivered!!",$scope.chat_messages.messagesToShow);
                                            if($scope.chat_messages.messagesToShow[i].key){
                                                if (!$scope.chat_messages.messagesToShow[i].delivered) {
                                                    if (!$scope.chat_messages.messagesToShow[i].read) {
                                                        console.log("Marking as read and delivered : " + $scope.chat_messages.messagesToShow[i].message, $scope.chat_messages.messagesToShow[i].key);
                                                        $scope.chat_messages.messagesToShow[i].read = true;
                                                        $scope.chat_messages.messagesToShow[i].delivered = true;
                                                        $scope.chat_messages.messagesToShow[i].delivery_date = new Date();
                                                        updateDB['/conversations/' + conversationId + '/messages/' + $scope.chat_messages.messagesToShow[i].key + '/read'] = true;
                                                        updateDB['/conversations/' + conversationId + '/messages/' + $scope.chat_messages.messagesToShow[i].key + '/last_seen'] = new Date();
                                                        updateDB['/conversations/' + conversationId + '/messages/' + $scope.chat_messages.messagesToShow[i].key + '/delivered'] = true;
                                                        updateDB['/conversations/' + conversationId + '/messages/' + $scope.chat_messages.messagesToShow[i].key + '/delivery_date'] = new Date();
                                                    }else{
                                                        $scope.chat_messages.messagesToShow[i].delivered = true;
                                                        $scope.chat_messages.messagesToShow[i].delivery_date = new Date();
                                                        updateDB['/conversations/' + conversationId + '/messages/' + $scope.chat_messages.messagesToShow[i].key + '/delivered'] = true;
                                                        updateDB['/conversations/' + conversationId + '/messages/' + $scope.chat_messages.messagesToShow[i].key + '/delivery_date'] = new Date();
                                                    }
                                                }else if (!$scope.chat_messages.messagesToShow[i].read) {
                                                    console.log("Marking as read and delivered : " + $scope.chat_messages.messagesToShow[i].message, $scope.chat_messages.messagesToShow[i].key);
                                                    $scope.chat_messages.messagesToShow[i].read = true;
                                                    updateDB['/conversations/' + conversationId + '/messages/' + $scope.chat_messages.messagesToShow[i].key + '/read'] = true;
                                                    updateDB['/conversations/' + conversationId + '/messages/' + $scope.chat_messages.messagesToShow[i].key + '/last_seen'] = new Date();
                                                }
                                            }
                                        }else{
                                            console.log("CONV : Marking messages as delivered!!");
                                            if($scope.chat_messages.messagesToShow[i].key){
                                                if (!$scope.chat_messages.messagesToShow[i].delivered) {
                                                    //..... index will be 96 - 20 = 76.....
                                                    //.... 76 is same as 0 index for message and messagetoshor resp....
                                                    //var index = that.messages.length - that.messagesToShow.length + i;
                                                    console.log("Marking as delivered : " + $scope.chat_messages.messagesToShow[i].message, $scope.chat_messages.messagesToShow[i].key);
                                                    $scope.chat_messages.messagesToShow[i].delivered = true;
                                                    $scope.chat_messages.messagesToShow[i].delivery_date = new Date();
                                                    updateDB['/conversations/' + conversationId + '/messages/' + $scope.chat_messages.messagesToShow[i].key + '/delivered'] = true;
                                                    updateDB['/conversations/' + conversationId + '/messages/' + $scope.chat_messages.messagesToShow[i].key + '/delivery_date'] = new Date();
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        firebase.database().ref().update(updateDB);
                    }
                }
            }
        }else if(type == 'group'){
            if($scope.chat_messages.messages.length){
                var currentPage = conversationId;
                var updateDB = {};
                //.... Assuming we are displaying 20 messages off total 96 messages....
                if($scope.chat_messages.messagesToShow){
                    if($scope.chat_messages.messagesToShow.length){
                        //.... Loop through the 20 messages....
                        for(var i = 0; i < $scope.chat_messages.messagesToShow.length; i++){
                            if($scope.chat_messages.messagesToShow[i]){
                                if($scope.chat_messages.messagesToShow[i].type != 'system'){
                                    if ($scope.chat_messages.messagesToShow[i].sender != firebase.auth().currentUser.uid) {
                                        if(currentPage){
                                            // console.log(currentPage)
                                            if(!$scope.chat_messages.messagesToShow[i].delivered){
                                                if(!$scope.chat_messages.messagesToShow[i].read){
                                                    console.log("Marking as read first user and delivered first user : " + $scope.chat_messages.messagesToShow[i].message, $scope.chat_messages.messagesToShow[i].key);
                                                    var read = [{
                                                        date: new Date(),
                                                        sender: firebase.auth().currentUser.uid,
                                                        username: ($scope.loggedInUserName? $scope.loggedInUserName : ''),
                                                        img: ($scope.chat_messages.messagesToShow[i].avatar)? $scope.chat_messages.messagesToShow[i].avatar : ''
                                                    }];
                                                    var delivered = [{
                                                        date: new Date(),
                                                        sender: firebase.auth().currentUser.uid,
                                                        username: ($scope.loggedInUserName? $scope.loggedInUserName : ''),
                                                        img: ($scope.chat_messages.messagesToShow[i].avatar)? $scope.chat_messages.messagesToShow[i].avatar : ''
                                                    }];
                                                    $scope.chat_messages.messagesToShow[i].read = read;
                                                    $scope.chat_messages.messagesToShow[i].delivered = delivered;
                                                    updateDB['/groups/' + conversationId  + '/messages/'+ $scope.chat_messages.messagesToShow[i].key + '/read'] = read;
                                                    updateDB['/groups/' + conversationId  + '/messages/'+ $scope.chat_messages.messagesToShow[i].key + '/delivered'] = delivered;
                                                    /*firebase.database().ref('/groups/' + conversationId  + '/messages/'+ $scope.chat_messages.messagesToShow[i].key).update({
                                                     read: read,
                                                     delivered: delivered
                                                     });*/
                                                }else if($scope.chat_messages.messagesToShow[i].read.length > 0){
                                                    var read_users = $scope.chat_messages.messagesToShow[i].read;
                                                    var delivered = [{
                                                        date: new Date(),
                                                        sender: firebase.auth().currentUser.uid,
                                                        username: ($scope.loggedInUserName? $scope.loggedInUserName : ''),
                                                        img: ($scope.chat_messages.messagesToShow[i].avatar)? $scope.chat_messages.messagesToShow[i].avatar : ''
                                                    }];
                                                    if(JSON.stringify(read_users).indexOf(firebase.auth().currentUser.uid) == -1){
                                                        console.log("Marking as read and delivered first user : " + $scope.chat_messages.messagesToShow[i].message, $scope.chat_messages.messagesToShow[i].key);
                                                        read_users.push({
                                                            date: new Date(),
                                                            sender: firebase.auth().currentUser.uid,
                                                            username: ($scope.loggedInUserName? $scope.loggedInUserName : ''),
                                                            img: ($scope.chat_messages.messagesToShow[i].avatar)? $scope.chat_messages.messagesToShow[i].avatar : ''
                                                        });
                                                        $scope.chat_messages.messagesToShow[i].read = read_users;
                                                        $scope.chat_messages.messagesToShow[i].delivered = delivered;
                                                        updateDB['/groups/' + conversationId  + '/messages/'+ $scope.chat_messages.messagesToShow[i].key + '/read'] = read_users;
                                                        updateDB['/groups/' + conversationId  + '/messages/'+ $scope.chat_messages.messagesToShow[i].key + '/delivered'] = delivered;
                                                        /*firebase.database().ref('/groups/' + conversationId  + '/messages/'+ $scope.chat_messages.messagesToShow[i].key).update({
                                                         read: read_users,
                                                         delivered: delivered
                                                         })*/
                                                    }else{
                                                        ///... Message is already marked read, mark it delivered....
                                                        ///... This will be a one off case.... Old data...
                                                        console.log("Marking as delivered first user : " + $scope.chat_messages.messagesToShow[i].message, $scope.chat_messages.messagesToShow[i].key);
                                                        $scope.chat_messages.messagesToShow[i].delivered = delivered;
                                                        updateDB['/groups/' + conversationId  + '/messages/'+ $scope.chat_messages.messagesToShow[i].key + '/delivered'] = delivered;
                                                        /*firebase.database().ref('/groups/' + conversationId  + '/messages/'+ $scope.chat_messages.messagesToShow[i].key).update({
                                                         delivered: delivered
                                                         })*/
                                                    }
                                                }
                                            }else if($scope.chat_messages.messagesToShow[i].delivered.length > 0){
                                                var delivered_users = $scope.chat_messages.messagesToShow[i].delivered;
                                                if(JSON.stringify(delivered_users).indexOf(firebase.auth().currentUser.uid) == -1){
                                                    //console.log("Marking as delivered : " + that.messagesToShow[i].message, index);
                                                    delivered_users.push({
                                                        date: new Date(),
                                                        sender: firebase.auth().currentUser.uid,
                                                        username: ($scope.loggedInUserName? $scope.loggedInUserName : ''),
                                                        img: ($scope.chat_messages.messagesToShow[i].avatar)? $scope.chat_messages.messagesToShow[i].avatar : ''
                                                    });
                                                    if(!$scope.chat_messages.messagesToShow[i].read) {
                                                        console.log("Marking as read first user and delivered : " + $scope.chat_messages.messagesToShow[i].message, $scope.chat_messages.messagesToShow[i].key);
                                                        var read = [{
                                                            date: new Date(),
                                                            sender: firebase.auth().currentUser.uid,
                                                            username: ($scope.loggedInUserName? $scope.loggedInUserName : ''),
                                                            img: ($scope.chat_messages.messagesToShow[i].avatar)? $scope.chat_messages.messagesToShow[i].avatar : ''
                                                        }];
                                                        $scope.chat_messages.messagesToShow[i].read = read;
                                                        $scope.chat_messages.messagesToShow[i].delivered = delivered_users;
                                                        updateDB['/groups/' + conversationId  + '/messages/'+ $scope.chat_messages.messagesToShow[i].key + '/delivered'] = delivered_users;
                                                        updateDB['/groups/' + conversationId  + '/messages/'+ $scope.chat_messages.messagesToShow[i].key + '/read'] = read;
                                                        /*firebase.database().ref('/groups/' + conversationId  + '/messages/'+ $scope.chat_messages.messagesToShow[i].key).update({
                                                         read: read,
                                                         delivered: delivered_users
                                                         })*/
                                                    }else if($scope.chat_messages.messagesToShow[i].read.length > 0){
                                                        var read_users = $scope.chat_messages.messagesToShow[i].read;
                                                        if(JSON.stringify(read_users).indexOf(firebase.auth().currentUser.uid) == -1){
                                                            console.log("Marking as read and delivered : " + $scope.chat_messages.messagesToShow[i].message, $scope.chat_messages.messagesToShow[i].key);
                                                            read_users.push({
                                                                date: new Date(),
                                                                sender: firebase.auth().currentUser.uid,
                                                                username: ($scope.loggedInUserName? $scope.loggedInUserName : ''),
                                                                img: ($scope.chat_messages.messagesToShow[i].avatar)? $scope.chat_messages.messagesToShow[i].avatar : ''
                                                            });
                                                            $scope.chat_messages.messagesToShow[i].read = read_users;
                                                            $scope.chat_messages.messagesToShow[i].delivered = delivered_users;
                                                            updateDB['/groups/' + conversationId  + '/messages/'+ $scope.chat_messages.messagesToShow[i].key + '/delivered'] = delivered_users;
                                                            updateDB['/groups/' + conversationId  + '/messages/'+ $scope.chat_messages.messagesToShow[i].key + '/read'] = read_users;
                                                            /*firebase.database().ref('/groups/' + conversationId  + '/messages/'+ $scope.chat_messages.messagesToShow[i].key).update({
                                                             read: read_users,
                                                             delivered: delivered_users
                                                             })*/
                                                        }else{
                                                            ///... Message is already marked read, mark it delivered....
                                                            ///... This will be a one off case.... Old data...
                                                            console.log("Marking as delivered : " + $scope.chat_messages.messagesToShow[i].message, $scope.chat_messages.messagesToShow[i].key);
                                                            $scope.chat_messages.messagesToShow[i].delivered = delivered_users;
                                                            updateDB['/groups/' + conversationId  + '/messages/'+ $scope.chat_messages.messagesToShow[i].key + '/delivered'] = delivered_users;
                                                            /*firebase.database().ref('/groups/' + conversationId  + '/messages/'+ $scope.chat_messages.messagesToShow[i].key).update({
                                                             delivered: delivered_users
                                                             })*/
                                                        }
                                                    }
                                                }else{
                                                    if(!$scope.chat_messages.messagesToShow[i].delivered){
                                                        //..... index will be 96 - 20 = 76.....
                                                        //.... 76 is same as 0 index for message and messagetoshor resp....
                                                        //var index = that.messages.length - that.messagesToShow.length + i;
                                                        console.log("Marking as delivered first user (Other Page) : " + $scope.chat_messages.messagesToShow[i].message, $scope.chat_messages.messagesToShow[i].key);
                                                        var delivered = [{
                                                            date: new Date(),
                                                            sender: firebase.auth().currentUser.uid,
                                                            username: ($scope.loggedInUserName? $scope.loggedInUserName : ''),
                                                            img: ($scope.chat_messages.messagesToShow[i].avatar)? $scope.chat_messages.messagesToShow[i].avatar : ''
                                                        }];
                                                        $scope.chat_messages.messagesToShow[i].delivered = delivered;
                                                        updateDB['/groups/' + conversationId  + '/messages/'+ $scope.chat_messages.messagesToShow[i].key + '/delivered'] = delivered;
                                                        /*firebase.database().ref('/groups/' + conversationId  + '/messages/'+ $scope.chat_messages.messagesToShow[i].key).update({
                                                         delivered: delivered
                                                         })*/
                                                    }else if($scope.chat_messages.messagesToShow[i].delivered.length > 0){
                                                        var delivered_users = $scope.chat_messages.messagesToShow[i].delivered;
                                                        //..... index will be 96 - 20 = 76.....
                                                        //.... 76 is same as 0 index for message and messagetoshor resp....
                                                        //var index = that.messages.length - that.messagesToShow.length + i;
                                                        if(JSON.stringify(delivered_users).indexOf(firebase.auth().currentUser.uid) == -1){
                                                            console.log("Marking as delivered (Other Page) : " + $scope.chat_messages.messagesToShow[i].message, $scope.chat_messages.messagesToShow[i].key);
                                                            delivered_users.push({
                                                                date: new Date(),
                                                                sender: firebase.auth().currentUser.uid,
                                                                username: ($scope.loggedInUserName? $scope.loggedInUserName : ''),
                                                                img: ($scope.chat_messages.messagesToShow[i].avatar)? $scope.chat_messages.messagesToShow[i].avatar : ''
                                                            });
                                                            $scope.chat_messages.messagesToShow[i].delivered = delivered_users;
                                                            updateDB['/groups/' + conversationId  + '/messages/'+ $scope.chat_messages.messagesToShow[i].key + '/delivered'] = delivered_users;
                                                        }
                                                    }
                                                }
                                            }
                                        }else{
                                            if(!$scope.chat_messages.messagesToShow[i].delivered){
                                                //..... index will be 96 - 20 = 76.....
                                                //.... 76 is same as 0 index for message and messagetoshor resp....
                                                //let index = that.messages.length - that.messagesToShow.length + i;
                                                console.log("Marking as delivered first user (Other Page) : " + $scope.chat_messages.messagesToShow[i].message, $scope.chat_messages.messagesToShow[i].key);
                                                var delivered = [{
                                                    date: new Date(),
                                                    sender: firebase.auth().currentUser.uid,
                                                    username: ($scope.loggedInUserName? $scope.loggedInUserName : ''),
                                                    img: ($scope.chat_messages.messagesToShow[i].avatar)? $scope.chat_messages.messagesToShow[i].avatar : ''
                                                }];
                                                $scope.chat_messages.messagesToShow[i].delivered = delivered;
                                                updateDB['/groups/' + conversationId  + '/messages/'+ $scope.chat_messages.messagesToShow[i].key + '/delivered'] = delivered;
                                            }else if($scope.chat_messages.messagesToShow[i].delivered.length > 0){
                                                var delivered_users = $scope.chat_messages.messagesToShow[i].delivered;
                                                //..... index will be 96 - 20 = 76.....
                                                //.... 76 is same as 0 index for message and messagetoshor resp....
                                                //let index = that.messages.length - that.messagesToShow.length + i;
                                                if(JSON.stringify(delivered_users).indexOf(firebase.auth().currentUser.uid) == -1){
                                                    console.log("Marking as delivered (Other Page) : " + $scope.chat_messages.messagesToShow[i].message, $scope.chat_messages.messagesToShow[i].key);
                                                    delivered_users.push({
                                                        date: new Date(),
                                                        sender: firebase.auth().currentUser.uid,
                                                        username: ($scope.loggedInUserName? $scope.loggedInUserName : ''),
                                                        img: ($scope.chat_messages.messagesToShow[i].avatar)? $scope.chat_messages.messagesToShow[i].avatar : ''
                                                    });
                                                    $scope.chat_messages.messagesToShow[i].delivered = delivered_users;
                                                    updateDB['/groups/' + conversationId  + '/messages/'+ $scope.chat_messages.messagesToShow[i].key + '/delivered'] = delivered_users;
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        firebase.database().ref().update(updateDB);
                    }
                }
            }
        }
    }
    $scope.trialChat = function (val,i) {
        if(i == 1){
            $scope.chat_messages.accounts = $filter('filter')($scope.Accounts, val);
        }else if(i == 2){
            $scope.accounts = $filter('filter')($scope.searchAccount, val);
        }else if(i == 3 ){
            $scope.accounts = $filter('filter')($scope.searchAccount, val);
        }
    }
    $scope.groupInfo = function(){
        var obj = []
        // console.log($scope.chatter_user_info.group_members)
        $scope.chatter_user_info.groupMembersInfo = [];
        if($scope.chatter_user_info.group_members && $scope.chatter_user_info.group_members.length>0){
            for(var i=0;i<$scope.chatter_user_info.group_members.length;i++){
                firebase.database().ref('/accounts/'+$scope.chatter_user_info.group_members[i]).once('value',function(response){
                    if(response){
                        var response = response.val();
                        // console.log(response)
                        if(response.userId == $scope.chatter_user_info.sender){
                            response.role ='Admin'
                        }
                        obj.push(response)
                    }
                })
            }
        }else{
            $scope.chatter_user_info.group_members = [];
        }
        $scope.chatter_user_info.groupMembersInfo = obj ;
        $scope.chatter_user_info.groupMembersInfo.sort(function (a, b) {
            var date1 = a.date;
            var date2 = b.date;
            if (date1 > date2) {
                return 1;
            } else if (date1 < date2) {
                return -1;
            } else {
                return 0;
            }
        });
    }
    $scope.returnType = function(user){
        if(user.chatType == 'single'){
            if(user.friend && user.friend.img == 'assets/images/profile.png'){
                return '/images/chat/profile.png';
            }else if(user.friend){
                return user.friend.img
            }else{
                return '/images/chat/profile.png';
            }
        }else if(user.chatType == 'group'){
            if(user.group && user.group.img == 'assets/images/group.jpeg'){
                return '/images/chat/groupProfile.png';
            }else if(user.group){
                return user.group.img;
            } else{
                return '/images/chat/groupProfile.png';
            }
        }
    }
    $scope.addUserToGroup = function(account,type){
        if(type == 'createGroup'){
            $scope.createNewGroupCollection.push(account);
        }else if (type == 'addMemberToGroup'){
            $scope.addMembersToGroup.push(account);
        }
    }
    // / Check if friend is already on the list of members to be added.
    $scope.isAdded = function(friend,type) {
        if(type == 'createGroup'){
            if ($scope.createNewGroupCollection) {
                // console.log(this.toAdd)
                for (var i = 0; i < $scope.createNewGroupCollection.length; i++) {
                    // console.log(this.toAdd[i].$key+''+friend.$key)
                    if ( $scope.createNewGroupCollection[i].userId == friend.userId) {
                        return true;
                    }
                }
            }
            return false;
        }else if(type == 'addMemberToGroup'){
            if ($scope.addMembersToGroup) {
                // console.log(this.toAdd)
                for (var i = 0; i < $scope.addMembersToGroup.length; i++) {
                    // console.log(this.toAdd[i].$key+''+friend.$key)
                    if ($scope.addMembersToGroup[i].userId == friend.userId) {
                        return true;
                    }
                }
            }
            return false;
        }
    }
    $scope.isMember =function(member){
        if($scope.chat.type == 'group' && member){
            if ($scope.chatter_user_info && $scope.chatter_user_info.group_members.length) {
                if (JSON.stringify($scope.chatter_user_info.group_members).indexOf(member.key) != -1) {
                    return true;
                }else{
                    return false;
                }
            }
        }
    }
    $scope.removeUserFromGroup = function(friend,type){
        if(type == 'createGroup'){
            $scope.createNewGroupCollection.splice($scope.createNewGroupCollection.indexOf(friend), 1);
        }else if (type == 'addMemberToGroup'){
            $scope.addMembersToGroup.splice($scope.addMembersToGroup.indexOf(friend), 1);
        }
    }
    $scope.removeFromGroup = function(id,type){
        if(type == 'createGroup'){
            var tempArray = [];
            for(var i = 0; i <  $scope.createNewGroupCollection.length; i++){
                if(id != $scope.createNewGroupCollection[i].userId)
                    tempArray.push($scope.createNewGroupCollection[i]);
            }
            $scope.createNewGroupCollection = tempArray;
        }else if(type == 'addMemberToGroup'){
            var tempArray = [];
            for(var i = 0; i <  $scope.addMembersToGroup.length; i++){
                if(id != $scope.addMembersToGroup[i].userId)
                    tempArray.push($scope.addMembersToGroup[i]);
            }
            $scope.addMembersToGroup = tempArray;
        }
    }
    // Proceed with group creation.
    $scope.createNewGroup =function(){
        if($scope.firebaseGroup.name){
            // Add members of the group.
            var members = [];
            // Add system message that group is created.
            var message  = {
                date: new Date().toString(),
                sender: firebase.auth().currentUser.uid,
                type: 'system',
                message: 'This group has been created.',
                icon: 'md-chatbubbles'
            }
            if($scope.loggedInUser){
                $scope.createNewGroupCollection.push($scope.loggedInUser);
                for (var i = 0; i < $scope.createNewGroupCollection.length; i++) {
                    members.push($scope.createNewGroupCollection[i].userId);
                }
                // Add group info and date.
                $scope.firebaseGroup.dateCreated = new Date().toString();
                //$scope.firebaseGroup.messages = messages;
                $scope.firebaseGroup.members = members;
                // $scope.firebaseGroup.description = 'I am Available';
                $scope.firebaseGroup.sender = firebase.auth().currentUser.uid;
                $scope.firebaseGroup.role = 'Admin';
                $scope.firebaseGroup.img = 'assets/images/group.jpeg';
            }else{
                // console.log('Failed to fetch current logged-in user information...')
            }
            // Add group to database.
            var ref = firebase.database().ref('groups');
            var newGroupMessageRef = ref.push();
            newGroupMessageRef.set($scope.firebaseGroup).then(function(success){
                console.log("New Message ---> ", newGroupMessageRef.key);
                var groupId = newGroupMessageRef.key;
                var groupRef = firebase.database().ref('groups/' + groupId + '/messages/');
                var newMessageRef = groupRef.push();
                newMessageRef.set(message).then(function(){
                    // console.log($scope.createNewGroupCollection.userId)
                    console.log("New Message ---> ", newMessageRef.key);
                    for (var i = 0; i < $scope.createNewGroupCollection.length; i++) {
                        firebase.database().ref('/accounts/' + $scope.createNewGroupCollection[i].userId + '/groups/' + groupId).update({
                            messagesRead: 0
                        })
                    }
                    $scope.view(0);
                })
            })
        }else{
            bootbox.alert({
                title: "ERROR",
                message: "Please Enter Group Name"
            });
        }
    }
    // Remove Users From the Group
    $scope.removeMemberFromGroup = function(member){
        bootbox.confirm({
            message : 'Remove '+$scope.loggedInUserName+' from '+$scope.chatter_user_info.name+' ?',
            className: 'text-center',
            buttons: {
                confirm: {
                    label : 'Remove'
                }
            },
            callback : function(result){
                if(result){
                    // Check whether loggedInUser is Admin or not
                    if($scope.loggedInUserId == $scope.chatter_user_info.sender && member.userId != $scope.chatter_user_info.sender){
                        // Remove member from group.
                        $scope.chatter_user_info.group_members.splice( $scope.chatter_user_info.group_members.indexOf(member.userId), 1);
                        // console.log('After:Group Members ',$scope.chatter_user_info.group_members);
                        // console.log($scope.chat_messages.messages);
                        // System genereated messages for members
                        var new_message = {
                            date : new Date().toString(),
                            userKey : member.userId,
                            type : 'system',
                            message :  $scope.loggedInUserName+ ' removed '+ member.name,
                            icon : 'md-log-out',
                            adminId : firebase.auth().currentUser.uid
                        };
                        // Update group on database.
                        firebase.database().ref('/groups/' +$scope.chat.selectedConversation).update({
                            members : $scope.chatter_user_info.group_members //Updated members list
                        }).then(function(success){
                            // Remove group from user's group list.
                            var groupRef = firebase.database().ref('/groups/' +$scope.chat.selectedConversation + '/messages/');
                            var newMessageRef = groupRef.push();
                            newMessageRef.set(new_message).then(function(){
                                console.log("New Message --- > ", newMessageRef.key);
                                firebase.database().ref('/accounts/' + member.userId + '/groups/' + $scope.chat.selectedConversation).remove().then(function(){
                                    // console.log('Member Removed Successfully from the Group...')
                                    $scope.$apply(function(){
                                        $scope.groupInfo();
                                    });
                                });
                            })
                        }).catch(function(error){
                            console.log(error)
                        });
                    }else{
                        console.log('Logged-In User is Not an Admin......')
                    }
                }
            }
        })
    }
    // Check whether loggedIn user is Admin or Not
    $scope.isAdmin = function(){
        if($scope.loggedInUserId == $scope.chatter_user_info.sender){
            $scope.admin = true;
        }else{
            $scope.admin = false;
        }
    };
    // Leave group.
    $scope.leaveGroup = function(member){
        bootbox.confirm({
            size:"sm",
            message : 'Leave '+ $scope.chatter_user_info.name+' ?',
            className: 'text-center',
            buttons: {
                confirm: {
                    label : 'Leave'
                }
            },
            callback : function(result){
                if(result){
                    // Remove member from group.
                    $scope.chatter_user_info.group_members.splice( $scope.chatter_user_info.group_members.indexOf($scope.loggedInUserId), 1);
                    // Add system message.
                    var new_message = {
                        date: new Date().toString(),
                        sender: $scope.loggedInUserId,
                        type: 'system',
                        message: $scope.loggedInUserName + ' has left this group.',
                        icon: 'md-log-out'
                    };
                    // Update group on database.
                    firebase.database().ref('/groups/' +$scope.chat.selectedConversation).update({
                        members:  $scope.chatter_user_info.group_members //Updated members list
                    }).then(function(success){
                        var groupRef = firebase.database().ref('/groups/' + $scope.chat.selectedConversation +  '/messages/');
                        var newMessageRef = groupRef.push();
                        newMessageRef.set(new_message).then(function(message){
                            if(newMessageRef.key){
                                // console.log('Firebase updated successfully')
                                // Remove group from user's group list.
                                firebase.database().ref('/accounts/' + firebase.auth().currentUser.uid + '/groups/' + $scope.chat.selectedConversation).remove().then(function(){
                                    console.log('Member Removed Successfully from the Group...');
                                    $scope.chatter_user_info = {};
                                    $scope.chat.selectedConversation = '';
                                    $scope.chat_messages.messages=[];
                                }).then(function(sucess){
                                    $scope.$apply(function(){
                                        $scope.getUsers();
                                    })
                                })
                            }
                        })
                    }).catch(function(error){
                        console.log(error)
                    });
                }
            }
        })
    }
    // Function used to change forward message model view
    $scope.changeView = function(tab){
        $scope.userChatSelectedTab =tab;
        if(tab == 'recentChats'){
            // console.log('recentChats')
        }else if(tab == 'newUsers'){
            // console.log('newUsers')
        }
    }
    $scope.forwardUsersList = [];
    $scope.forwardMessageUsersList = function(user,check){
        // console.log(user.friend.conversations,'', user)
        if(user && user.chatType == 'single'){
            if(check){
                // Temporary variable to store conversation id.
                var ids =[];
                for (var key in user.friend.conversations) {
                    user.friend.conversations[key].key = key;
                    ids.push(user.friend.conversations[key]);
                }
                // console.log(ids)
                //For Looping ids to get selected users Conversation Information......
                /*for(var i = 0;i < ids.length; i++){
                 if($scope.loggedInUserId == ids[i].key){
                 // Fetching Conversation details from Firebase using Conversation-Id.....
                 firebase.database().ref('/conversations/'+ids[i].conversationId).once('value', function(snap){
                 var tempObj = snap.val();
                 if(tempObj){
                 // Assigning type single
                 tempObj.type = 'single';
                 tempObj.conversationId =ids[i].conversationId;
                 tempObj.userId = user.userId;
                 // console.log(tempObj)
                 // $scope.forwardUsersList.push(tempObj);
                 }
                 });
                 break;
                 }else{
                 // New Conversation with friend.
                 // console.log(this.forwardMessDetail)
                 // if(i == ids.length-1){
                 //     // var messages = [];
                 //     // messages.push({
                 //     //     date: new Date().toString(),
                 //     //     sender: $scope.loggedInUserId,
                 //     //     // type: $scope.forwardUsersList.type=='reply'?'text',
                 //     //     message: $scope.forwardUsersList.message
                 //     // });
                 //
                 //
                 //     var users = [];
                 //     users.push(this.loggedInUserId);
                 //     users.push(friendvalue.userId);
                 //
                 //     var temp ={
                 //         messages:messages,
                 //         users:users,
                 //         type:'new',
                 //         userId:friendvalue.userId
                 //     }
                 //     this.selectedGroups.push(temp)
                 //
                 // }
                 }
                 }*/
            }else{
            }
        }else if(user && user.chatType == 'group'){
            if(check){
                $scope.forwardUsersList.push(user);
            }else{
                var index = $scope.forwardUsersList.indexOf(user);
                $scope.forwardUsersList.splice(index,1);
            }
        }
    }
    $scope.loadPreviousMessages = function(){
        if (($scope.startIndex - $scope.numberOfMessages) > -1) {
            $scope.startIndex -= $scope.numberOfMessages;
        } else {
            $scope.startIndex = 0;
        }
        $scope.chat_messages.messagesToShow = [];
        for(var i = $scope.startIndex; i < $scope.chat_messages.messages.length;i++){
            $scope.chat_messages.messagesToShow.push($scope.chat_messages.messages[i])
        }
        //$scope.fetchConversationData($scope.chat.selectedConversation, $scope.chat.type);
    }
    $scope.checkSingleReadDelivered = function(message){
        if(message){
            if(!message.read && !message.delivered){
                return 1;
            }else if(!message.read && message.delivered){
                return 2;
            }else if(message.read){
                return 3
            }
        }
    }
    $scope.checkGroupReadDelivered = function(message){
        if(message){
            if(message.read){
                if(message.read.length){
                    if(($scope.chatter_user_info.membersCount - 1) <= message.read.length)
                        return (3);
                    else{
                        if(message.delivered){
                            if(message.delivered.length){
                                if(($scope.chatter_user_info.membersCount - 1) <= message.delivered.length)
                                    return (2);
                                else return (1);
                            }else return (1);
                        }else return (1);
                    }
                } else {
                    if(message.delivered){
                        if(message.delivered.length){
                            if(($scope.chatter_user_info.membersCount - 1) <= message.delivered.length)
                                return (2);
                            else return (1);
                        }else return (1);
                    }else return (1);
                }
            } else {
                if(message.delivered){
                    if(message.delivered.length){
                        if(($scope.chatter_user_info.membersCount - 1) <= message.delivered.length)
                            return (2);
                        else return (1);
                    }else return (1);
                }else return (1);
            }
        } else return (1)
    }
    $scope.fetchMessageInfo =function(message,type){
        $scope.messageInfo = {};
        $scope.messageInfo.read = [];
        $scope.messageInfo.delivered = [];
        if(type == 'group'){
            if(message.read){
                if(message.read.length){
                    $scope.messageInfo.read = message.read;
                }else{
                    $scope.messageInfo.read = [];
                }
            }
            if(message.delivered){
                if(message.delivered.length){
                    $scope.messageInfo.delivered = message.delivered;
                }
            }
        }else if(type == 'single'){
            // console.log(message)
            if(message.read){
                firebase.database().ref('/accounts/'+message.sender).once('value',function(snap){
                    if(snap.val()){
                        message.img = snap.val().img;
                        message.username = snap.val().username;
                    }
                    var temp = [];
                    temp.push(message);
                    $scope.messageInfo.read = temp;
                    // console.log($scope.messageInfo.read)
                });
            }
            if(message.delivered){
                firebase.database().ref('/accounts/'+message.sender).once('value',function(snap){
                    if(snap.val()){
                        message.img = snap.val().img;
                        message.username = snap.val().username;
                    }
                    var temp = [];
                    temp.push(message);
                    $scope.messageInfo.delivered = temp;
                });
            }
        }
    }
    $scope.genericDialog = function(index,message,type,messageIndex){
        if(index == 0) {
            $scope.replyMessage(type,message);                      //Reply to a Message.......
            jQuery.noConflict();
            $('#replyMessage').modal('show')
        }else if(index == 1){
            $scope.deleteMessage(type,messageIndex,false)    // Delete Message for Me.....
        }else if(index == 2){
            $scope.deleteMessage(type,messageIndex,true)     // Delete Message for everyone.....
        }else if(index == 3){
            $scope.fetchMessageInfo(message,type);                // Message Info ..........
            $scope.messageInfoOpenNav();
        }
    }
    $scope.replyMessage = function(type,message){
        if(message)
            $scope.replyMessages = message;
        else
            $scope.replyMessages ={};
    }
    $scope.deleteMessage = function(chatType, index, flag){
        if(chatType == 'single'){
            if($scope.chat_messages.messagesToShow) {
                if ($scope.chat_messages.messagesToShow.length) {
                    if($scope.chat_messages.messagesToShow[index].type != 'system'){
                        //var i = $scope.chat_messages.messages.length - $scope.chat_messages.messagesToShow.length + index;
                        // console.log(i)
                        if (!$scope.chat_messages.messagesToShow[index].deleted) {
                            //..... index will be 96 - 20 = 76.....
                            //.... 76 is same as 0 index for message and messagetoshow resp....
                            if(!flag){
                                var deleted = [firebase.auth().currentUser.uid];
                                // console.log("Marking as deleted : " + $scope.chat_messages.messagesToShow[index].message, i);
                                firebase.database().ref('/conversations/' + $scope.chat.conversationId + '/messages/' + $scope.chat_messages.messagesToShow[index].key).update({
                                    deleted: deleted
                                });
                                $scope.chat_messages.messagesToShow[index].deleted = deleted;
                                $scope.chat_messages.messagesToShow[index].hide_message = true;
                            }else{
                                var deleted = [firebase.auth().currentUser.uid, $scope.chat.selectedConversation];
                                // console.log("Marking as deleted : " + $scope.chat_messages.messagesToShow[index].message, i);
                                firebase.database().ref('/conversations/' + $scope.chat.conversationId + '/messages/' + $scope.chat_messages.messagesToShow[index].key).update({
                                    deleted: deleted
                                });
                                $scope.chat_messages.messagesToShow[index].deleted = deleted;
                                $scope.chat_messages.messagesToShow[index].hide_message = true;
                            }
                        }else{
                            if($scope.chat_messages.messagesToShow[index].deleted.length){
                                var deleted = $scope.chat_messages.messagesToShow[index].deleted;
                                //.... If the message was already marked as deleted...
                                var hide_message = JSON.stringify(deleted);
                                if(!flag){
                                    if(hide_message.indexOf(firebase.auth().currentUser.uid) == -1){
                                        deleted.push(firebase.auth().currentUser.uid);
                                        // console.log("Marking as deleted : " + $scope.chat_messages.messagesToShow[index].message, i);
                                        firebase.database().ref('/conversations/' + $scope.chat.conversationId + '/messages/' + $scope.chat_messages.messagesToShow[index].key).update({
                                            deleted: deleted
                                        });
                                    }
                                    $scope.chat_messages.messagesToShow[index].deleted = deleted;
                                    $scope.chat_messages.messagesToShow[index].hide_message = true;
                                }else{
                                    if(hide_message.indexOf(firebase.auth().currentUser.uid) == -1){
                                        deleted.push(firebase.auth().currentUser.uid);
                                        if(hide_message.indexOf($scope.chat.selectedConversation) == -1){
                                            deleted.push($scope.chat.selectedConversation);
                                        }
                                        // console.log("Marking as deleted : " + $scope.chat_messages.messagesToShow[index].message, i);
                                        firebase.database().ref('/conversations/' + $scope.chat.conversationId + '/messages/' + $scope.chat_messages.messagesToShow[index].key).update({
                                            deleted: deleted
                                        });
                                    }
                                    $scope.chat_messages.messagesToShow[index].deleted = deleted;
                                    $scope.chat_messages.messagesToShow[index].hide_message = true;
                                }
                            }
                        }
                    }
                }
            }
        }else if(chatType == 'group'){
            if($scope.chat_messages.messagesToShow){
                if($scope.chat_messages.messagesToShow.length){
                    if($scope.chat_messages.messagesToShow[index].type != 'system'){
                        //var i = $scope.chat_messages.messages.length - $scope.chat_messages.messagesToShow.length + index;
                        if (!$scope.chat_messages.messagesToShow[index].deleted) {
                            //..... index will be 96 - 20 = 76.....
                            //.... 76 is same as 0 index for message and messagetoshow resp....
                            if(!flag){
                                var deleted = [firebase.auth().currentUser.uid];
                                // console.log("Marking as deleted : " + $scope.chat_messages.messagesToShow[index].message, i);
                                firebase.database().ref('/groups/' + $scope.chat.selectedConversation  + '/messages/' + $scope.chat_messages.messagesToShow[index].key).update({
                                    deleted: deleted
                                });
                                $scope.chat_messages.messagesToShow[index].deleted = deleted;
                                $scope.chat_messages.messagesToShow[index].hide_message = true;
                            }else{
                                var deleted = [firebase.auth().currentUser.uid];
                                for(var i = 0; i < $scope.chatter_user_info.group_members.length; i++){
                                    var id = JSON.stringify(deleted);
                                    if(id.indexOf($scope.chatter_user_info.group_members[i]) == -1)
                                        deleted.push($scope.chatter_user_info.group_members[i]);
                                }
                                // console.log("Marking as deleted : " + $scope.chat_messages.messagesToShow[index].message, i);
                                firebase.database().ref('/groups/' + $scope.chat.selectedConversation  + '/messages/' + $scope.chat_messages.messagesToShow[index].key).update({
                                    deleted: deleted
                                });
                                $scope.chat_messages.messagesToShow[index].deleted = deleted;
                                $scope.chat_messages.messagesToShow[index].hide_message = true;
                            }
                        }else{
                            if($scope.chat_messages.messagesToShow[index].deleted.length){
                                var deleted = $scope.chat_messages.messagesToShow[index].deleted;
                                //.... If the message was already marked as deleted...
                                var hide_message = JSON.stringify(deleted);
                                if(!flag){
                                    if(hide_message.indexOf(firebase.auth().currentUser.uid) == -1){
                                        deleted.push(firebase.auth().currentUser.uid);
                                        // console.log("Marking as deleted : " + $scope.chat_messages.messagesToShow[index].message, i);
                                        firebase.database().ref('/groups/' + $scope.chat.selectedConversation  + '/messages/' + $scope.chat_messages.messagesToShow[index].key).update({
                                            deleted: deleted
                                        });
                                        $scope.chat_messages.messagesToShow[index].deleted = deleted;
                                        $scope.chat_messages.messagesToShow[index].hide_message = true;
                                    }
                                }else{
                                    for(var i = 0; i < $scope.chatter_user_info.group_members.length; i++){
                                        hide_message = JSON.stringify(deleted);
                                        if(hide_message.indexOf($scope.chatter_user_info.group_members[i]) == -1)
                                            deleted.push($scope.chatter_user_info.group_members[i]);
                                    }
                                    // console.log("Marking as deleted : " + $scope.chat_messages.messagesToShow[index].message, i);
                                    firebase.database().ref('/groups/' + $scope.chat.selectedConversation  + '/messages/' + $scope.chat_messages.messagesToShow[index].key).update({
                                        deleted: deleted
                                    });
                                    $scope.chat_messages.messagesToShow[index].deleted = deleted;
                                    $scope.chat_messages.messagesToShow[index].hide_message = true;
                                }
                            }
                        }
                    }
                }
            }
        }
    };
    $scope.messageInfoOpenNav = function() {
        if(document.getElementById("mySidenav").style.width == "400px"){
            closeNav();
            document.getElementById("messageInfoSidenav").style.width = "400px";
            document.getElementById("messageInfoSidenav").style.top = "2%";
            document.getElementById("main").style.marginRight = "400px";
        }else{
            document.getElementById("messageInfoSidenav").style.width = "400px";
            document.getElementById("messageInfoSidenav").style.top = "2%";
            document.getElementById("main").style.marginRight = "400px";
        }
    }
    $scope.getNames = function(){
        var names = '';
        $scope.addMembersToGroup.forEach(function(friend){
            names += friend.name + ', ';
        });
        return names.substring(0, names.length - 2);
    }
    $scope.done = function(){
        bootbox.confirm({
            size:"sm",
            message: 'Are you sure you want to add <b>' + $scope.getNames() + '</b> to the group?',
            className: 'text-center',
            buttons: {
                confirm: {
                    label : 'Yes'
                }
            },
            callback : function(result){
                if(result){
                    if($scope.addMembersToGroup && $scope.addMembersToGroup.length){
                        for(var i=0;i<$scope.addMembersToGroup.length;i++){
                            firebase.database().ref('/accounts/' + $scope.addMembersToGroup[i].userId + '/groups/' + $scope.chat.selectedConversation).update({
                                messagesRead:0
                            });
                            $scope.chatter_user_info.group_members.push($scope.addMembersToGroup[i].userId);
                            $scope.chat_messages.messages.push({
                                date: new Date().toString(),
                                sender: $scope.loggedInUserId,
                                type: 'system',
                                message: $scope.loggedInUserName + ' has added ' + $scope.getNames() + ' to the group.',
                                icon: 'md-contacts'
                            });
                            ;
                            // Update group data on the database.
                            firebase.database().ref('/groups/' + $scope.chat.selectedConversation).update({
                                members: $scope.chatter_user_info.group_members,
                                messages: $scope.chat_messages.messages
                            }).then(function(){
                                // console.log('success')
                                $scope.addMembersToGroup = [];
                            });
                        }
                        jQuery.noConflict();
                        $('#addMembers').modal('hide')
                        $scope.$apply(function(){
                            $scope.groupInfo();
                        });
                    }else{
                        // console.log('No One there to add')
                    }
                }
            }
        })
    }
    $scope.reset = function(){
        // console.log($scope.addMembersToGroup)
        $scope.addMembersToGroup =[];
    }
    // Check if the user is the sender of the message.
    $scope.isSender = function(message) {
        if (message.sender == firebase.auth().currentUser.uid) {
            return true;
        } else {
            return false;
        }
    }
    $scope.clearReplyTextBox = function(){
        $scope.reply.message = '';
    }
    // ......................................................................................................................................................................
    /* .......................................................................................................................................................................
     Receive Inventory
     ...........................................................................................................................................................*/
    $scope.registerAssetView = false;
    $scope.selectedAssetTab = 'registerAsset';
    $scope.miscellaneousReceiptAsset = {};
    $scope.receiveAssetArray = [];
    $scope.itemExistsInAsset = false;
    $scope.interAssetView = false;
    $scope.assetTransactionView = false;
    $scope.transactionDetails = [];
    // Function To Switch Receive Inventory Module and Transaction History Component.....
    $scope.changeAssetView = function(type,arg){
        if(type == 'register_assets'){
            $scope.registerAssetView = !$scope.registerAssetView;
            $scope.selectedAssetTab = 'registerAsset';
            $scope.itemExistsInAsset = true;
            $scope.refreshTransactions(40);
            $scope.miscellaneousReceipt = {};
            $scope.clearMiscellaneousAssetReceiptForm();
        }else if(type == 'asset_transaction') {
            $scope.assetTransactionView = !$scope.assetTransactionView;
            $scope.inventoryTransactionHistory.filter ='';
            $scope.getAssetTransactionHistory();
            if(arg){
                $scope.refreshTransactions(40);
            }
        }
    }
    $scope.transferAssetFromlist = function(item){
        $scope.changeAssetView('register_assets');
        $scope.changeReceiveAssetTab('issueAsset');
        // $scope.interAssetTransfer = item;
        $scope.interAssetTransfer.itemCode = item.itemCode || 0;
        $scope.interAssetTransfer.Product = item.Product || '';
        $scope.interAssetTransfer.serial_number = item.serial_number;
        $scope.interAssetTransfer.sellerId = item.sellerId || 0;
        $scope.interAssetTransfer.sellerName = item.sellerName || '';
        $scope.interAssetTransfer.branchCode = '';
        $scope.interAssetTransfer.receiverId = 0;
        $scope.interAssetTransfer.Category = item.Category || '';
        $scope.interAssetTransfer.subCategory = item.subCategory || '';
        $scope.interAssetTransfer.cloudinaryURL = item.cloudinaryURL.length ? item.cloudinaryURL[0].image : item.cloudinaryURL ? item.cloudinaryURL : '';
        $scope.assetTransfer.inventoryTansferItemCode = item.serial_number;
    }
    // Function to switch between Inventory Transfer and Miscellaneous Receipt tabs......
    $scope.changeReceiveAssetTab = function(tab){
        // $scope.itemExistsInAsset = true;
        $scope.selectedAssetTab = tab;
        // $scope.transferAssetFromlistBackground = false;
        $scope.assetTransfer = {};
        $scope.interAssetTransfer = [];
    }
    $scope.submitMiscellaneousAssetReceiptForm = function(){
        if($scope.miscellaneousReceiptAsset.itemCode){
            if($scope.miscellaneousReceiptAsset.Product){
                if($scope.miscellaneousReceiptAsset.serial_number){
                    $http.get('/dash/search/serialNo/'+$scope.miscellaneousReceiptAsset.serial_number).success(function(res){
                        if(res && res.serial_number){
                            $scope.checkSerialFlag = true;
                            addAsset();
                        }else{
                            $scope.checkSerialFlag = false;
                            addAsset();
                        }
                    })
                }
                else {
                    if (!$scope.miscellaneousReceiptAsset.serial_number) {
                        bootbox.confirm({
                            title: 'CONFIRM',
                            message: 'Do you want to auto generate Serial Id/Unique Id ?',
                            className: 'text-center',
                            buttons: {
                                confirm: {
                                    label: 'YES',
                                    className: 'btn-success'
                                },
                                cancel: {
                                    label: 'NO',
                                    className: 'btn-danger'
                                }
                            },
                            callback: function (buttonResponse) {
                                if (buttonResponse) {
                                    $scope.miscellaneousReceiptAsset.serial_number = $scope.generateSerialId();
                                    $scope.receiveAssetArray.push($scope.miscellaneousReceiptAsset)
                                    $scope.displaySalesperson = [];
                                    $scope.miscellaneousReceiptAsset = {};
                                    $scope.asset = {};
                                }
                            }
                        })
                    }
                }
                function addAsset() {
                    if($scope.itemExistsInAsset){
                        bootbox.alert({
                            title : 'ERROR',
                            message : 'Please add item to the Catalog',
                            className : 'text-center'
                        })
                    }else if($scope.checkSerialFlag) {
                        bootbox.alert({
                            title: 'ERROR',
                            message: 'Serial No./Unique Id already exist',
                            className: 'text-center'
                        })
                    }else {
                        var uniqueSerialNo = false;
                        if($scope.receiveAssetArray && $scope.receiveAssetArray.length && $scope.miscellaneousReceiptAsset.serial_number){
                            for(var i=0; i< $scope.receiveAssetArray.length; i++){
                                if($scope.receiveAssetArray[i].serial_number == $scope.miscellaneousReceiptAsset.serial_number){
                                    uniqueSerialNo = true;
                                }
                            }
                            if(uniqueSerialNo){
                                bootbox.alert({
                                    title : 'ERROR',
                                    message : 'Asset serial No already exist',
                                    className : 'text-center'
                                })
                            }else{
                                $scope.receiveAssetArray.push($scope.miscellaneousReceiptAsset)
                                $scope.displaySalesperson = [];
                                $scope.miscellaneousReceiptAsset = {};
                                $scope.asset = {};
                            }
                        }else{
                            if(!$scope.miscellaneousReceiptAsset.serial_number) {
                                bootbox.confirm({
                                    title: 'CONFIRM',
                                    message: 'Do you want to auto generate Serial Id/Unique Id ?',
                                    className: 'text-center',
                                    buttons: {
                                        confirm: {
                                            label: 'YES',
                                            className: 'btn-success'
                                        },
                                        cancel: {
                                            label: 'NO',
                                            className: 'btn-danger'
                                        }
                                    },
                                    callback: function (buttonResponse) {
                                        if(buttonResponse){
                                            $scope.miscellaneousReceiptAsset.serial_number = $scope.generateSerialId();
                                            $scope.receiveAssetArray.push($scope.miscellaneousReceiptAsset)
                                            $scope.displaySalesperson = [];
                                            $scope.miscellaneousReceiptAsset = {};
                                            $scope.asset = {};
                                        }
                                    }
                                })
                            }else{
                                $scope.receiveAssetArray.push($scope.miscellaneousReceiptAsset)
                                $scope.displaySalesperson = [];
                                $scope.miscellaneousReceiptAsset = {};
                                $scope.asset = {};
                            }
                        }
                    }
                }
            }else{
                toastr.error('Please Enter a Product Name')
            }
        }else{
            toastr.error('Please Add Asset')
        }
    }
    $scope.removeMiscellaneousAsset =function(data){
        $scope.receiveAssetArray.splice($scope.receiveAssetArray.indexOf(data), 1);
    }
    // Fetch warehouse locations from setting location ........
    $scope.checkSerialFlag = false;
    $scope.checkSerialNo = function(search){
        $http.get('/dash/search/serialNo/'+search).success(function(res){
            if(res.length){
                $scope.checkSerialFlag = true;
            }else{
                $scope.checkSerialFlag = false;
            }
        })
    }
    $scope.searchItemcodeInAsset = function(search,type){
        $scope.searchArray = [];
        $scope.checkSerialFlag = false;
        if(type == 'itemName' && search){
            $http.get("/dash/item/search/"+search).success(function(res){
                $scope.miscellaneousReceiptAsset.Product = '';
                $scope.miscellaneousReceiptAsset.itemCode = '';
                $scope.miscellaneousReceiptAsset.Category = '';
                $scope.miscellaneousReceiptAsset.subCategory = '';
                $scope.miscellaneousReceiptAsset.cloudinaryURL = '';
                if(res.length>0){
                    if(res.length == 1){
                        $scope.miscellaneousReceiptAsset.Product = res[0].Product;
                        $scope.miscellaneousReceiptAsset.itemCode = res[0].itemCode;
                        $scope.miscellaneousReceiptAsset.Category = res[0].Manufacturer ? res[0].Manufacturer : '';
                        $scope.miscellaneousReceiptAsset.subCategory = res[0].subCategory ? res[0].subCategory : '';
                        $scope.miscellaneousReceiptAsset.cloudinaryURL = res[0].cloudinaryURL ? res[0].cloudinaryURL : '';
                        $scope.itemExistsInAsset = false;
                    }else{
                        $scope.searchArray = res;
                    }
                    $scope.searchInterInventory(search);
                }else {
                    $scope.searchArray = [];
                    $scope.itemExistsInAsset = true;
                    $scope.miscellaneousReceiptAsset.itemCode = '';
                    $scope.interAssetTransfer = [];
                }
            }).catch(function(error){
                console.log(error)
            })
        }else if(type == 'itemCode' && search){
            $http.get("/dash/item/search/"+search).success(function(res){
                $scope.miscellaneousReceiptAsset.Product = '';
                $scope.miscellaneousReceiptAsset.itemCode = '';
                $scope.miscellaneousReceiptAsset.Category = '';
                $scope.miscellaneousReceiptAsset.subCategory = '';
                $scope.miscellaneousReceiptAsset.cloudinaryURL = '';
                if(res.length> 0){
                    if(res.length == 1) {
                        console.log('res', res[0])
                        $scope.miscellaneousReceiptAsset.Product = res[0].Product;
                        $scope.miscellaneousReceiptAsset.Category = res[0].Manufacturer ? res[0].Manufacturer : '';
                        $scope.miscellaneousReceiptAsset.subCategory = res[0].subCategory ? res[0].subCategory : '';
                        $scope.miscellaneousReceiptAsset.cloudinaryURL = res[0].cloudinaryURL ? res[0].cloudinaryURL : '';
                        $scope.itemExistsInAsset = false;
                    }else{
                        $scope.searchArray = res;
                    }
                }else{
                    $scope.miscellaneousReceiptAsset.Product = '';
                    $scope.miscellaneousReceiptAsset.quantity = '';
                    $scope.itemExistsInAsset = true;
                    $scope.interAssetTransfer = [];
                }
                $scope.searchInterInventory(search);
                $scope.miscellaneousReceiptAsset.itemName = '';
            }).catch(function(error){
                console.log(error)
            })
        }else{
            $scope.miscellaneousReceiptAsset.Product = '';
            $scope.miscellaneousReceiptAsset.itemCode = '';
            $scope.itemExistsInAsset = true;
            $scope.interAssetTransfer = [];
        }
    }
    $scope.receiveAssetTypeahead = function(item){
        $scope.miscellaneousReceiptAsset.Product = item.Product;
        $scope.miscellaneousReceiptAsset.itemCode = item.itemCode;
        $scope.itemExistsInAsset = false;
        $scope.searchInterInventoryAsset(item.itemCode);
    }
    $scope.receiveMiscellaneousAssets = function(){
        var obj = {};
        var date = new Date();
        var components = [
            date.getFullYear() - 1900,
            (date.getMonth() < 10)? '0' + date.getMonth() : date.getMonth(),
            (date.getDate() < 10)? '0' + date.getDate() : date.getDate(),
            (date.getHours() < 10)? '0' + date.getHours() : date.getHours(),
            (date.getMinutes() < 10)? '0' + date.getMinutes() : date.getMinutes(),
            (date.getSeconds() < 10)? '0' + date.getSeconds() : date.getSeconds(),
            (date.getMilliseconds() < 10)? '00' + date.getMilliseconds() : (date.getMilliseconds() < 100)? '0' + date.getMilliseconds() : date.getMilliseconds()
        ];
        var date_ = components.join("");
        obj.transaction_id = date_;
        var date1 = new Date();
        var dformat = [date1.getFullYear(),(date1.getMonth()+1).padLeft(), date1.getDate().padLeft() ].join('-') + ' '
            + [date1.getHours().padLeft(), date1.getMinutes().padLeft(), date1.getSeconds().padLeft()].join (':');
        obj.date_added = dformat;
        obj.userName = $scope.user.username?$scope.user.username:'Admin';
        obj.userPhone = $scope.user.sellerphone?$scope.user.sellerphone:'Admin';
        obj.transaction = [];
        obj.transaction = $scope.receiveAssetArray;
        if($scope.receiveAssetArray.length){
            for(var i=0; i< $scope.receiveAssetArray.length; i++){
                obj.transaction[i].Manufacturer = $scope.receiveAssetArray[i].itemName.Manufacturer ? $scope.receiveAssetArray[i].itemName.Manufacturer : $scope.receiveAssetArray[0].itemName.Category;
                obj.transaction[i].subCategory = $scope.receiveAssetArray[i].itemName.subCategory ? $scope.receiveAssetArray[i].itemName.subCategory : '';
                obj.transaction[i].serial_number = $scope.receiveAssetArray[i].serial_number;
                obj.transaction[i].sellerName = $scope.receiveAssetArray[i].sellerName || '';
                obj.transaction[i].sellerId = $scope.receiveAssetArray[i].sellerId || 0;
                obj.transaction[i].cloudinaryURL = $scope.receiveAssetArray[i].cloudinaryURL ? $scope.receiveAssetArray[i].cloudinaryURL : '';
            }
        }
        $http.post("/dash/receive/assets", obj).success(function(res){
            toastr.success('Asset registered successfully');
            $scope.receiveAssetArray = [];
            $scope.refreshTransactions(3);
            $scope.changeAssetView('register_assets');
            $scope.changeAssetView('asset_transaction');
            $scope.interAssetTransfer =[];
        }).catch(function(err){
            console.log(err)
        })
    }
    // .............................................................Inventory Transfer..............................................................
    $scope.interAssetArray = []
    $scope.searchInterInventoryAsset = function (item) {
        console.log("item");
        $scope.interAssetTransfer = {};
        $scope.interAssetArray = [];
        if ($scope.assetTransfer && $scope.assetTransfer.inventoryTansferItemCode == '') {
            document.getElementById("assetTransferBarCode").focus();
        }
        if (item) {
            $http.get('/dash/search/asset/' + item).success(function (res) {
                console.log('res');
                $scope.interAssetTransfer.Product = '';
                $scope.interAssetTransfer.itemCode = '';
                $scope.interAssetTransfer.sellerName = '';
                $scope.interAssetTransfer.sellerId = '';
                $scope.interAssetTransfer.serial_number = '';
                //$scope.itemExistsInAsset = true;
                if (res.length > 0) {
                    if (res.length && res.length == 1) {
                        $scope.interAssetTransfer.Product = res[0].Product;
                        $scope.interAssetTransfer.itemCode = res[0].itemCode;
                        $scope.interAssetTransfer.sellerName = res[0].sellerName;
                        $scope.interAssetTransfer.sellerId = res[0].sellerId;
                        $scope.interAssetTransfer.serial_number = res[0].serial_number || '';
                        $scope.itemExistsInAsset = false;
                    } else {
                        $scope.itemExistsInAsset = false;
                        $scope.interAssetArray = res;
                    }
                } else {
                    $scope.itemExistsInAsset = true;
                }
            }).catch(function (err) {
                console.log(err)
            })
        } else {
            $scope.interAssetArray = [];
            $scope.interAssetTransfer = [];
        }
    }
    $scope.transferAsset = function(){
        var date = new Date();
        var components = [
            date.getFullYear() - 1900,
            (date.getMonth() < 10)? '0' + date.getMonth() : date.getMonth(),
            (date.getDate() < 10)? '0' + date.getDate() : date.getDate(),
            (date.getHours() < 10)? '0' + date.getHours() : date.getHours(),
            (date.getMinutes() < 10)? '0' + date.getMinutes() : date.getMinutes(),
            (date.getSeconds() < 10)? '0' + date.getSeconds() : date.getSeconds(),
            (date.getMilliseconds() < 10)? '00' + date.getMilliseconds() : (date.getMilliseconds() < 100)? '0' + date.getMilliseconds() : date.getMilliseconds()
        ];
        var date_ = components.join("");
        var date1 = new Date();
        var dformat = [date1.getFullYear(),(date1.getMonth()+1).padLeft(), date1.getDate().padLeft() ].join('-') + ' '
            + [date1.getHours().padLeft(), date1.getMinutes().padLeft(), date1.getSeconds().padLeft()].join (':');
        if($scope.interAssetTransfer && !(!$scope.interAssetTransfer.receiverId && ($scope.interAssetTransfer.sellerId == ''))) {
            if ($scope.interAssetTransfer.sellerId != $scope.interAssetTransfer.receiverId) {
                var obj = {
                    from: $scope.interAssetTransfer.from,
                    to: $scope.interAssetTransfer.to,
                    transaction_id: date_,
                    userName: $scope.user.username ? $scope.user.username : 'Admin',
                    userPhone: $scope.user.sellerphone ? $scope.user.sellerphone : 'Admin',
                    date_added: dformat
                }
                var items = {};
                items = {
                    Product: $scope.interAssetTransfer.Product,
                    itemCode: $scope.interAssetTransfer.itemCode,
                    serial_number: $scope.interAssetTransfer.serial_number,
                    issuerName: $scope.interAssetTransfer.sellerName,
                    issuerId: $scope.interAssetTransfer.sellerId,
                    receiverName: $scope.interAssetTransfer.receiverName,
                    receiverId: $scope.interAssetTransfer.receiverId,
                    branchCode: $scope.interAssetTransfer.branchCode ? $scope.interAssetTransfer.branchCode : '',
                    Category: $scope.interAssetTransfer.Category ? $scope.interAssetTransfer.Category : '',
                    subCategory: $scope.interAssetTransfer.subCategory ? $scope.interAssetTransfer.subCategory : '',
                    cloudinaryURL: $scope.interAssetTransfer.cloudinaryURL ? $scope.interAssetTransfer.cloudinaryURL : ''
                }
                obj.transaction = [];
                obj.transaction.push(items)
                obj.assetType = '';
                if($scope.interAssetTransfer.sellerId == 0 && $scope.interAssetTransfer.receiverId){
                    obj.assetType = 'issued';
                }else if($scope.interAssetTransfer.sellerId && $scope.interAssetTransfer.receiverId){
                    obj.assetType = 'transfered';
                }else if($scope.interAssetTransfer.sellerId){
                    obj.assetType = 'returned';
                }
                $http.post('/dash/asset/interAsset', obj).success(function (res) {
                    $scope.searchInterInventory(obj.itemCode);
                    toastr.success('Asset '+obj.assetType+' successfully');
                    $scope.interAssetTransfer = {};
                    $scope.assetTransfer = {};
                    $scope.changeAssetView('register_assets');
                    $scope.changeAssetView('asset_transaction');
                }).catch(function (err) {
                    console.log(err)
                })
            } else {
                bootbox.alert({
                    title: 'ERROR',
                    message: 'Issuer and Receiver cannot be same',
                    className: 'text-center'
                })
            }
        }else{
            bootbox.alert({
                title : 'ERROR',
                message : 'Please Select a receiver',
                className : 'text-center'
            })
        }
    }
    $scope.receiveInterAssetTypeahead = function(item){
        $scope.interAssetTransfer=[];
        if(item ){
            $scope.interAssetTransfer = item;
            $scope.interAssetTransfer.serial_number = item.serial_number;
            $scope.interAssetView = false;
        }
    }
    $scope.clearTransferAsset = function(){
        $scope.assetTransfer = {};
        $scope.interAssetTransfer = [];
        $scope.asset = {};
    }
    // ........................................................Inventory Transactions..................................................
    $scope.getAssetTransactionHistory = function(){
        var assetTransactionObj = {};
        assetTransactionObj.viewLength = 0;
        assetTransactionObj.viewBy =  initialViewBy;
        assetTransactionObj.searchFor = '';
        assetTransactionObj.searchBy = [];
        $scope.inventoryStatusSelect = 'all';
        assetTransactionObj.filter = '';
        $scope.viewLength = 0;
        $http.post('/dash/getAsset/transactionHistory',inventoryTransactionObj).success(function(res){
            $scope.assetTransaction = res;
        }).catch(function(err){
            console.log(err)
        })
        $http.post('/dash/asset/transactionHistory/count', inventoryTransactionObj)
            .success(function(response){
                $scope.transactionCount(response,40)
            });
    }
    $scope.getAssetTransactionHistory = function(){
        var assetTransactionObj = {};
        assetTransactionObj.viewLength = 0;
        assetTransactionObj.viewBy =  initialViewBy;
        assetTransactionObj.searchFor = '';
        assetTransactionObj.searchBy = [];
        $scope.inventoryStatusSelect = 'all';
        assetTransactionObj.filter = '';
        $scope.viewLength = 0;
        $http.post('/dash/getAsset/transactionHistory',inventoryTransactionObj).success(function(res){
            $scope.assetTransaction = res;
        }).catch(function(err){
            console.log(err)
        })
        $http.post('/dash/asset/transactionHistory/count', inventoryTransactionObj)
            .success(function(response){
                $scope.transactionCount(response,40)
            });
    }
    $scope.fetchAsset = function(searchFor){
        var assetFetch = {}
        assetFetch.searchBy = [];
        assetFetch.searchFor = '';
        assetFetch.viewLength = 0;
        assetFetch.viewBy =  initialViewBy;
        assetFetch.filter = ''
        $scope.viewLength = 0;
        $scope.showStockInventory = false;
        if($scope.assetSearch.seller){
            assetFetch.seller = $scope.assetSearch.seller.sellerid;
        }
        if($scope.assetSearch.filter && !searchFor && searchFor != ''){
            assetFetch.searchFor = $scope.assetSearch.filter + '';
            assetFetch.searchBy = assetSearchBy;
            // $scope.miscellaneousReceiptAsset.location = 'All';
        }else if(searchFor == 'All'){
            // $scope.miscellaneousReceiptAsset.location = 'All'
            assetFetch.searchFor = '';
        }else if(searchFor == '' || searchFor){
            // $scope.assetSearch.filter = '';
            assetFetch.searchFor = searchFor+'';
            // assetFetch.searchBy = ['location'];
            $scope.miscellaneousReceiptAsset.location = searchFor;
        }
        if($scope.assetSearch.date_from)
            assetFetch.from_date = $scope.assetSearch.date_from;
        if($scope.assetSearch.date_to){
            $scope.assetSearch.date_to.setHours(23,59,59)
            assetFetch.to_date = $scope.assetSearch.date_to;
        }
        if($scope.assetSearch.branchCode){
            assetFetch.branchCode = $scope.assetSearch.branchCode;
        }
        $http.post('/dash/asset/view',assetFetch).success(function(res){
            $scope.assets = res;
            $scope.assetSearch = {};
        }).catch(function(err){
            console.log(err)
        })
        $http.post('/dash/asset/count', assetFetch)
            .success(function(response){
                $scope.transactionCount(response,39)
            });
    }
    $scope.assetTransactionSearch = {};
    $scope.assetTransactionHistoryFilter = function(){
        // $scope.inventoryTransaction = [];
        var assetTransactionObj = {};
        assetTransactionObj.searchBy = [];
        assetTransactionObj.searchFor = '';
        assetTransactionObj.viewLength = 0;
        assetTransactionObj.viewBy =  initialViewBy;
        if($scope.assetTransactionSearch.filter){
            assetTransactionObj.searchFor = $scope.assetTransactionSearch.filter;
            assetTransactionObj.searchBy = assetTransactionHistorySearchBy;
        }
        if($scope.assetTransactionSearch.seller){
            assetTransactionObj.seller = $scope.assetTransactionSearch.seller.sellerid;
        }
        if($scope.assetTransactionSearch.date_from)
            assetTransactionObj.from_date = $scope.assetTransactionSearch.date_from;
        if($scope.assetTransactionSearch.date_to){
            $scope.assetTransactionSearch.date_to.setHours(23,59,59)
            assetTransactionObj.to_date = $scope.assetTransactionSearch.date_to;
        }
        if($scope.assetTransactionSearch.branchCode){
            assetTransactionObj.branchCode = $scope.assetTransactionSearch.branchCode;
        }
        $http.post('/dash/getAsset/transactionHistory',assetTransactionObj).success(function(res){
            $scope.inventoryTransaction = res;
            $scope.assetTransactionSearch.userName = '';
            $scope.assetTransactionSearch = {};
        }).catch(function(err){
            console.log(err)
        })
        $http.post('/dash/asset/transactionHistory/count', assetTransactionObj)
            .success(function(response){
                $scope.transactionCount(response,40)
            });
    }
    $scope.inventoryTransactionShipmentModelOrderDetails =[];
    $scope.fetchTransactionDetails = function(item){
        $scope.transactionDetails = item;
        if(item.orderId[0]){
            $http.get('/dash/orders/detail/'+item.orderId[0]).success(function(res) {
                $scope.inventoryTransactionShipmentModelOrderDetails = res;
            })
        }else{
            console.log('......Order Id Not Found.......')
        }
    }
    $scope.assetTransactionDetails = {};
    $scope.fetchAssetTransactionDetails = function(assetTransactionId){
        // $scope.assetTransactionDetails = asset;
        if(assetTransactionId){
            $http.get('/dash/asset/details/'+assetTransactionId)
                .success(function(res) {
                    if(res){
                        $scope.assetTransactionDetails = res[0];
                        // $scope.inventoryTransactionShipmentModelOrderDetails = res;
                    }
            })
        }else{
            console.log('......Order Id Not Found.......')
        }
    }
    // ......................................................................................................................................................................
    //formate date
    $scope.dateFormate=function(date){
        return dformat = [date.getFullYear(), (date.getMonth() + 1) < 10 ? ('0' + (date.getMonth() + 1)) : (date.getMonth() + 1), date.getDate() < 10 ? '0' + date.getDate() : date.getDate()].join('-') + ' '
            + [date.getHours(), date.getMinutes(), date.getSeconds()].join(':');
    }
    $scope.pjpLogs = [];
    $scope.displaypjpSeeMore = false;
    $scope.PjpDataload = function(){
        var pjpLength  = 0;
        $scope.displaypjpSeeMore = false;
        if(sortedPjp.length >= $scope.pjpLogs.length+10){
            pjpLength = $scope.pjpLogs.length+10
            $scope.displaypjpSeeMore = true;
            for(var i=$scope.pjpLogs.length;i<pjpLength;i++){
                $scope.pjpLogs.push(sortedPjp[i])
            }
        }else if(sortedPjp.length > $scope.pjpLogs.length){
            pjpLength = sortedPjp.length;
            $scope.displaypjpSeeMore = false;
            for(var i=$scope.pjpLogs.length;i<pjpLength;i++){
                $scope.pjpLogs.push(sortedPjp[i])
            }
        }
    }
    $scope.displayremarks = false;
    $scope.editRemarks = function(remarks){
        $scope.bids.remarks = remarks
        $scope.displayremarks = true;
    }
    var bidRefreshData = [];
    $scope.editBidsVehicleflag = false;
    $scope.displaybiddetails = [];
    $scope.getBidDetails = function(bids){
        $scope.displayremarks = false;
        bidRefreshData =bids;
        $scope.displaybiddetails=[];
        $scope.showBidhistory=true;
        $scope.ShowBidAddress=false;
        $scope.getBidshistoy();
        $scope.getOneHighestBid(bids.itemCode);
        $scope.editBidsVehicleflag = false;
        $scope.Bidhistory = {};
        $scope.Bidhistory = bids;
        if(  $scope.Bidhistory.Auction_status=="ON"){
            $scope.carAuctionStatus = true;
        }
        if(  $scope.Bidhistory.Auction_status=="OFF"){
            $scope.carAuctionStatus = false;
        }
        for(var i=0;i<$scope.Bidshistorydetails.length;i++){
            if(bids.itemCode == $scope.Bidshistorydetails[i].itemCode){
                $scope.displaybiddetails.push($scope.Bidshistorydetails[i]);
            }
        }
    }
    $scope.Approvebids = function(BidId,bid){
        bootbox.confirm({
            message: "Are You Sure?",
            buttons: {
                confirm: {
                    label: 'Yes',
                },
                cancel: {
                    label: 'No',
                }
            },
            callback: function (result) {
                if (result) {
                    var body = {};
                    body.BidId = BidId;
                    body.bid = bid;
                    $http.post("/dash/bid/approve",body)
                        .success(function(res){
                            for(var i=0;i<$scope.Bidshistorydetails.length;i++){
                                if(BidId == $scope.Bidshistorydetails[i].bid_id){
                                    $scope.getBidDetails($scope.Bidshistorydetails[i]);
                                    $scope.Bidshistorydetails[i].approveStatus="Approved";
                                }
                            }
                        })
                }
            }
        });
    }
    $scope.closeBids = function(){
        $scope.showBidhistory = false;
    }
    $scope.getLevel = [1,2,3,4,5,6,7,8,9,10];
    // ......................................................................................................................................................................
    $scope.getPickupLocations = function(){
        $http.get("/dash/settings/pickupLocation").then(function(response, error){
            if(error) throw error;
            else{
                console.log(response);
                if(response){
                    if(response.data){
                        $scope.pickupLocations = response.data.obj;
                    }
                    else{
                        $scope.pickupLocations = [];
                    }
                }
            }
        })
    }
    //store has changed, it means that salesperson person associated with store is different,
    //So reset sales person, store.
    $scope.store_changed = function(){
        if($scope.user.role=='Dealer')
            $scope.showDealerDetails = true;
        else
            $scope.showDealerDetails = false;
    }
    $scope.storeChanged = function(){
        $scope.data.newOrderStore = {};
        $scope.data.newOrderSalesPerson = {};
        $scope.a.selectedSalesPerson = "";
        $scope.disableSalesPersonSelection = true;
        $scope.a.selectedStores = {};
        $scope.data.tempCity = "";
        $scope.data.tempState = "";
        $scope.orderTotalPrice = 0;
        $scope.showDealerDetails = false;
        //$scope.orderViewTab.tab = 0;
    }
    $scope.supplierChanged = function(){
        $scope.data.newPurchaseOrderSuppliers = {};
        $scope.data.newPurchaseOrderSalesPerson = {};
        $scope.a.selectedSalesPerson = "";
        $scope.disableSalesPersonSelection = true;
        $scope.a.selectedSuppliers = {};
        $scope.data.tempCity = "";
        $scope.data.tempState = "";
        $scope.showSupplierDetails = false;
        //$scope.orderViewTab.tab = 0;
    }
    $scope.quotationStoreChanged = function(){
        $scope.data.newQuotationStore = {};
        $scope.data.newQuotationSalesPerson = {};
        $scope.data.newQuotationFulfiller ={}
        $scope.a.quotationselectedSalesPerson = "";
        $scope.quotationdisableSalesPersonSelection = true;
        $scope.a.quotationselectedStores = undefined;
        $scope.data.quotationtempCity = "";
        $scope.data.quotationtempState = "";
    }
    $scope.checkTypeString = function(arg){
        if(typeof arg == 'string'){
            return true;
        }else{
            return false;
        }
    }
    //Akash: Adding MRP and added attributes in array
    $scope.renderItemsMrp  = function(){
        var priceList = $scope.orderPriceList;
        console.log('priceList',priceList);
        if(priceList && priceList!='master'){
            for (var i = 0; i < $scope.itemsInModal.length; i++) {
                if($scope.itemsInModal[i][priceList] && typeof $scope.itemsInModal[i][priceList] != 'string' && typeof $scope.itemsInModal[i][priceList] != 'undefined' && typeof $scope.itemsInModal[i][priceList] !== 'object'){
                    $scope.itemsInModal[i].MRP = Number($scope.itemsInModal[i][priceList]);
                    if($scope.itemsInModal[i].Specials  ){
                        $scope.itemsInModal[i].orderMRP = Number($scope.itemsInModal[i][priceList]) - (Number($scope.itemsInModal[i][priceList]) * Number($scope.itemsInModal[i].Specials) / 100);
                    }else{
                        $scope.itemsInModal[i].orderMRP = Number($scope.itemsInModal[i][priceList]);
                    }
                }else{
                    $scope.itemsInModal[i].MRP = Number($scope.itemsInModal[i][priceList]);
                    $scope.itemsInModal[i].orderMRP = '';
                }
                var neworderList = $scope.newOrderItemList;
                $scope.itemsInModal[i].added = $scope.doesItemExistsInCart(neworderList, "itemCode", $scope.itemsInModal[i]);
                if($scope.itemsInModal[i].added >= 0 && $scope.newOrderItemList.length){
                    for(var j = 0; j < $scope.newOrderItemList.length; j++){
                        if($scope.itemsInModal[i]._id == $scope.newOrderItemList[j].itemDetails._id){
                            $scope.itemsInModal[i].itemQuantity = $scope.newOrderItemList[j].quantity;
                        }
                    }
                }
            }
        }else{
        for (var i = 0; i < $scope.itemsInModal.length; i++) {
            if($scope.itemsInModal[i].Specials){
                if($scope.itemsInModal[i].DealerPrice){
                    $scope.itemsInModal[i].orderMRP = Number($scope.itemsInModal[i].DealerPrice) - (Number($scope.itemsInModal[i].DealerPrice) * Number($scope.itemsInModal[i].Specials) / 100);
                }else{
                    $scope.itemsInModal[i].orderMRP = Number($scope.itemsInModal[i].MRP) - (Number($scope.itemsInModal[i].MRP) * Number($scope.itemsInModal[i].Specials) / 100);
                }
            }else{
                if($scope.itemsInModal[i].DealerPrice){
                    $scope.itemsInModal[i].orderMRP = Number($scope.itemsInModal[i].DealerPrice);
                }else{
                    $scope.itemsInModal[i].orderMRP = Number($scope.itemsInModal[i].MRP);
                }
            }
            var neworderList = $scope.newOrderItemList;
            $scope.itemsInModal[i].added = $scope.doesItemExistsInCart(neworderList, "itemCode", $scope.itemsInModal[i]);
            if($scope.itemsInModal[i].added >= 0 && $scope.newOrderItemList.length){
                for(var j = 0; j < $scope.newOrderItemList.length; j++){
                    if($scope.itemsInModal[i]._id == $scope.newOrderItemList[j].itemDetails._id){
                        $scope.itemsInModal[i].itemQuantity = $scope.newOrderItemList[j].quantity;
                    }
                }
            }
        }
        }
    }
    $scope.UniqueArraybyId = function(collection, keyname){
        var output = [],
            keys = [];
        angular.forEach(collection, function(item) {
            var key = item[keyname];
            if(keys.indexOf(key) === -1) {
                keys.push(key);
                output.push(item);
            }
        });
        return output;
    }
    $scope.SupplierSelectedFromTypeahead = function(item){
        console.log(" checking purchase suppliers");
        console.log(item)
        jQuery.noConflict();
        $(".supplierDropdown").css("display", "none");
        $scope.searchSupplierBox = item.SupplierName;
        //If seller number is valid - access sellers array   and access seller information
        //else display all the salesperson
        if($scope.a.selectedSalesPerson!= ""){
            $scope.a.selectedSalesPerson = "";
            $scope.data.newPurchaseOrderSalesPerson = {};
            $scope.disableSalesPersonSelection = true;
        }
        $scope.a.selectedSuppliers = item;
        $scope.data.newPurchaseOrderSuppliers = item;
        //console.log($scope.data.newOrderStore)
        $scope.showSupplierDetails = true;
        //$scope.data.newOrderStore.Seller - contains seller mobile number in number format
        if($scope.data.newPurchaseOrderSuppliers.Seller == "" || typeof $scope.data.newPurchaseOrderSuppliers.Seller == "undefined")
            $scope.disableSalesPersonSelection = false;
        else{
            for(var i = 0; i < $scope.sellers.length ; i++)
                if( $scope.sellers[i].sellerphone == $scope.data.newPurchaseOrderSuppliers.Seller)
                {
                    $scope.data.newPurchaseOrderSalesPerson = $scope.sellers[i];
                    $scope.a.PurchaseOrderselectedSalesPerson = $scope.data.newPurchaseOrderSalesPerson.sellername;
                    break;
                }
        }
        if($scope.data.newPurchaseOrderSuppliers.StockistState && $scope.data.newPurchaseOrderSuppliers.State){
            if($scope.data.newPurchaseOrderSuppliers.StockistState != $scope.data.newPurchaseOrderSuppliers.State)
                $scope.calculateIGST = true;
            else
                $scope.calculateIGST = false;
        }else $scope.calculateIGST = false;
        $http.get("/dash/purchaseOrderAddress-list" + $scope.data.newPurchaseOrderSuppliers.Suppliercode)
            .success(function(response){
                console.log(response);
                // $scope.shipping_addresses = response;
            })
        $scope.updatepurchaseOrderBillingAddress($scope.data.newPurchaseOrderSuppliers);
    }//End of function to take care of things when store is selected for new order
    //***************** current location of the user *********************
    /*========credit limit ==========*/
    // $scope.creditLimitOrder = function(){
    //     var tempObj = 0;
    //     $scope.orderTotalPrice = $scope.dealerOrderTotalPrice;
    //
    //     console.log("====2edit quantity",$scope.orderTotalPrice);
    //     console.log("$scope.newOrderItemList",$scope.newOrderItemList)
    //     tempObj = $scope.newOrderItemList[0].quantity * $scope.newOrderItemList[0].total;
    //     console.log("temp",$scope.newOrderItemList[0].quantity)
    //         $scope.orderTotalPrice =  $scope.orderTotalPrice + tempObj;
    //
    //     console.log("after edited",$scope.orderTotalPrice);
    // }
    $scope.changePurchaseOrderView = function(tab){
        //console.log(tab);
        if($scope.data.newPurchaseOrderfreight>=10000){
            $scope.data.newPurchaseOrderfreight = 0;
        }
        if($scope.a.selectedSuppliers.SupplierName){
            if(!$scope.showSupplierDetails){
                $scope.PurchaseorderViewTab = tab;
            }
            else
                $scope.PurchaseorderViewTab = tab;
        }
        else{
            fbootbox.alert({
                title: "ERROR",
                message: "Please select a "+$scope.nav[32].tab
            });
        }
    }
    //Change GST values for orderlines in the order cart when new GST is selected for the dropdown in the order review page
    $scope.calculateOrderGST = function(newGST){
        if($scope.newOrderItemList.length > 0){
            for(var i=0; i< $scope.newOrderItemList.length; i++){
                $scope.newOrderItemList[i].CGST = newGST.cgst;
                $scope.newOrderItemList[i].SGST = newGST.sgst;
                $scope.newOrderItemList[i].IGST = newGST.igst;
            }
        }
    }
    $scope.QuotationStoreSelectedFromTypeahead = function(item){
        //If seller number is valid - access sellers array   and access seller information
        //else display all the salesperson
        jQuery.noConflict();
        $(".dealerDropdown").css("display", "none");
        $scope.quotationselectedStores.name = item.DealerName;
        $scope.data.newQuotationStore = item;
        //console.log($scope.data.newQuotationStore)
        $scope.quotationshowDealerDetails = true;
        //console.log("Setting details to true")
        //$scope.data.newOrderStore.Seller - contains seller mobile number in number format
        if($scope.data.newQuotationStore.Seller == "" || typeof $scope.data.newQuotationStore.Seller == "undefined")
            $scope.quotationdisableSalesPersonSelection = false;
        else{
            for(var i = 0; i < $scope.sellers.length ; i++)
                if( $scope.sellers[i].sellerphone == $scope.data.newQuotationStore.Seller)
                {
                    $scope.data.newQuotationSalesPerson = $scope.sellers[i];
                    $scope.a.quotationselectedStores = $scope.data.newQuotationSalesPerson.sellername;
                    break;
                }
        }
        if($scope.data.newQuotationStore.StockistState && $scope.data.newQuotationStore.State){
            if($scope.data.newQuotationStore.StockistState != $scope.data.newQuotationStore.State)
                $scope.calculateQuotationIGST = true;
            else
                $scope.calculateQuotationIGST = false;
        }else $scope.calculateQuotationIGST = false;
        $http.get("/dash/address-list/" + $scope.data.newQuotationStore.Dealercode)
            .success(function(response){
                //console.log(response);
                $scope.quotationshipping_addresses = response;
            })
        $scope.updateQuotationBillingAddress($scope.data.newQuotationStore);
    }//End of function to take care of things when store is selected for new order
    $scope.changeQuotationView = function(tab) {
        //console.log(tab);
        //console.log($scope.a.selectedStores)
        if($scope.data.newQuotationfreight>=10000){
            $scope.data.newQuotationfreight = 0;
        }
        if($scope.quotationselectedStores.name){
            if(!$scope.quotationshowDealerDetails){
                $scope.quotationViewTab = tab;
            }
            else
                $scope.quotationViewTab = tab;
        }
        else{
            bootbox.alert({
                title: "ERROR",
                message: "Please select a "+$scope.nav[2].tab
            });
        }
        /* console.log(tab);
         console.log($scope.quotationshowDealerDetails)
         if ($scope.quotationshowDealerDetails) {
         $scope.quotationViewTab = tab;
         if (!$scope.quotationshowDealerDetails) {
         $scope.quotationViewTab = tab;
         }
         else
         $scope.quotationViewTab = tab;*/
    }
    //Function to take care of things when sales person is selected
    //Sales person is directly selected without customer input
    //if Store has one associated with it,
    //Else drop down appears
    $scope.salesPersonSelectedFromTypeahead = function ($item) {
        $scope.data.newOrderSalesPerson = $item;
    }
    $scope.PurchasesalesPersonSelectedFromTypeahead = function ($item) {
        $scope.data.newPurchaseOrderSalesPerson = $item;
    }
    $scope.purchaseordersalesmanChanged = function(){
        $scope.data.newPurchaseOrderSalesPerson = {};
        $scope.a.PurchaseOrderselectedSalesPerson = undefined;
    }
    $scope.salesmanChanged = function(){
        $scope.data.newOrderSalesPerson = {};
        $scope.a.selectedSalesPerson = undefined;
    }
    //for quotation
    $scope.quotationsalesmanChanged = function () {
        $scope.data.newQuotationSalesPerson = {};
        $scope.a.quoatationselectedSalesPerson = undefined;
    }
    $scope.$watch('calculateIGST', function () {
        // console.log('IGST : ' + $scope.calculateIGST);
        // console.log($scope.newOrderItemList);
        if ($scope.calculateIGST) {
            for (var i = 0; i < $scope.newOrderItemList.length; i++) {
                $scope.newOrderItemList[i].IGST = $scope.newOrderItemList[i].itemDetails.IGST;
                $scope.newOrderItemList[i].CGST = 0;
                $scope.newOrderItemList[i].SGST = 0;
            }
        } else {
            for (var i = 0; i < $scope.newOrderItemList.length; i++) {
                $scope.newOrderItemList[i].IGST = 0;
                $scope.newOrderItemList[i].CGST = $scope.newOrderItemList[i].itemDetails.CGST;
                $scope.newOrderItemList[i].SGST = $scope.newOrderItemList[i].itemDetails.SGST;
            }
        }
    });
    $scope.$watch('calculateQuotationIGST', function () {
        if ($scope.calculateQuotationIGST) {
            for (var i = 0; i < $scope.newQuotationItemList.length; i++) {
                $scope.newQuotationItemList[i].IGST = $scope.newQuotationItemList[i].itemDetails.IGST;
                $scope.newQuotationItemList[i].CGST = 0;
                $scope.newQuotationItemList[i].SGST= 0;
            }
        } else {
            if($scope.newQuotationItemList){
                for (var i = 0; i < $scope.newQuotationItemList.length; i++) {
                    $scope.newQuotationItemList[i].IGST = 0;
                    $scope.newQuotationItemList[i].CGST = $scope.newQuotationItemList[i].itemDetails.CGST;
                    $scope.newQuotationItemList[i].SGST= $scope.newQuotationItemList[i].itemDetails.SGST;
                }
            }
        }
    })
    $scope.changeQuotationShippingAddress = function () {
        //console.log($scope.data.shippingAddress)
        if ($scope.data.quotationshippingAddress) {
            if ($scope.data.quotationshippingAddress.Address)
                $scope.data.tempnewOrderShipping_address = $scope.data.quotationshippingAddress.Address;
            if ($scope.data.quotationshippingAddress.City)
                $scope.data.tempCity = $scope.data.quotationshippingAddress.City;
            if ($scope.data.quotationshippingAddress.State)
                $scope.data.quotationtempState = $scope.data.quotationshippingAddress.State;
            $scope.data.newQuotationShipping_address = $scope.data.tempnewQuotationShipping_address + ", " + $scope.data.quotationtempCity + ", " + $scope.data.quotationtempState;
            if ($scope.data.newQuotationStore.StockistState && $scope.data.quotationshippingAddress.State) {
                if ($scope.data.newQuotationStore.StockistState != $scope.data.quotationshippingAddress.State)
                    $scope.calculateQuotationIGST = true;
                else
                    $scope.calculateQuotationIGST = false;
            } else
                $scope.calculateQuotationIGST = false;
        }
    };
    //Which item in cart is under edit, or delete, tracking it to so that we can reflect same in
    //the catalogue
    //$scope.itemUnderEditDeleteAtCartFromModal = { item:{}, itemUnderEdit: false, itemUnderDeleted:false };
    //Function to handle change in search item key
    $scope.changeInQuotationItemSearchKey = function(searchKeyValue) {
        $scope.updateQuotationFilterTags("Product", [], "", searchKeyValue);
        $scope.qtnKeyWordSearch = "";
        if( searchKeyValue )
            $scope.qtnKeyWordSearch = " for Key word ( " + searchKeyValue + " )";
        $scope.qtnsearchMessage = $scope.quotationcategorySearch + " " + $scope.qtnKeyWordSearch;
    }//End of function to handle change in search item key
    $scope.keyStore = "";
    $scope.searchStore = false;
    //Function to handle change in search item key
    $scope.changeInItemSearchKey = function(searchKeyValue) {
        $scope.updateFilterTags("Product", [], "", searchKeyValue);
        $scope.KeyWordSearch = "";
        if( searchKeyValue )
            $scope.KeyWordSearch = " for Key word ( " + searchKeyValue + " )";
        $scope.searchMessage = $scope.categorySearch + " " + $scope.KeyWordSearch;
    }//End of function to handle change in search item key
    $scope.keyStore = "";
    $scope.searchStore = false;
    //Function to handle change in search Purchaseitem key
    $scope.changeInPurchaseItemSearchKey = function(purchasesearchKeyValue) {
        $scope.updateFilterTags("Product", [], "", purchasesearchKeyValue);
        $scope.purchaseorderKeyWordSearch = "";
        if( purchasesearchKeyValue )
            $scope.purchaseorderKeyWordSearch = " for Key word ( " + purchasesearchKeyValue + " )";
        $scope.searchMessage = $scope.PurchaseOrdercategorySearch + " " + $scope.purchaseorderKeyWordSearch;
    }//End of function to handle change in Purchaseitemitem key
    $scope.getRewardPoints = function(flag){
        if(flag){
            for(var i=0; i<$scope.orders.length; i++) {
                for (var j = 0; j < $scope.serviceClients.length; j++) {
                    if (!$scope.serviceClients[j].Revenue)
                        $scope.serviceClients[j].Revenue = 0;
                    if ((Number($scope.orders[i].dealerphone[0])) == $scope.serviceClients[j].Phone) {
                        $scope.serviceClients[j].Revenue += (Number($scope.orders[i].total_amount[0]) / 100);
                    }
                }
            }
        }
    }
    //Navigation of pages
    var a = 0;
    $scope.navPage = function(tab, direction){
        switch(tab){
            //Orders Navigation
            case 1:
                var viewLength = $scope.orderViewLength;
                var viewBy = $scope.orderNewViewBy;
                if(direction){
                    //console.log("NEXT");
                    if(viewLength + viewBy >= $scope.orders.length){
                        if(viewLength + viewBy < $scope.order_count){
                            viewLength += viewBy;
                            //console.log("Fetch more")
                            searchObj.viewLength = viewLength;
                            searchObj.viewBy = initialViewBy;
                            searchObj.from_date = $scope.orderSearch.date_from;
                            searchObj.to_date = $scope.orderSearch.date_to;
                            searchObj.filter = $scope.filterStatusSelect;
                            searchObj.searchFor = $scope.orderSearch.filter;
                            searchObj.searchBy = orderSearchBy;
                            $http.post("/dash/orders",searchObj)
                                .success(function(response){
                                    console.log(response);
                                    for(var i=0; i<response.length; i++){
                                        $scope.orders.push(response[i]);
                                    }
                                    if(viewLength + viewBy > $scope.order_count){
                                        a = viewLength + viewBy - $scope.order_count;
                                        viewBy -= a;
                                        $scope.orderNewViewBy = viewBy;
                                    }
                                    $scope.orderViewLength = viewLength;
                                })
                        }
                        else{
                            //console.log("Out of data")
                            if(viewLength + viewBy > $scope.order_count){
                                a = viewLength + viewBy - $scope.order_count;
                                viewBy -= a;
                                $scope.orderNewViewBy = viewBy;
                            }
                        }
                    }
                    else{
                        //console.log("Minus viewby")
                        viewLength += viewBy;
                        if(viewLength + viewBy > $scope.order_count){
                            a = viewLength + viewBy - $scope.order_count;
                            viewBy -= a;
                        }
                        $scope.orderNewViewBy = viewBy;
                        $scope.orderViewLength = viewLength;
                    }
                }
                else{
                    //console.log("BACK");
                    if(viewLength < viewBy){
                        //console.log("NO DATA")
                    }
                    else{
                        if(viewLength + viewBy >= $scope.order_count){
                            viewBy += a;
                            a = 0;
                        }
                        viewLength -= viewBy;
                        $scope.orderViewLength = viewLength;
                        $scope.orderNewViewBy = viewBy;
                    }
                }
                break;
            //Items Navigation
            case 2:
                var viewLength = $scope.viewLength;
                var viewBy = $scope.newViewBy;
                if(direction){
                    //console.log("NEXT");
                    if(viewLength + viewBy >= $scope.items.length){
                        if(viewLength + viewBy < $scope.items_count){
                            $scope.displayloader = true
                            viewLength += viewBy;
                            //console.log("Fetch more")
                            itemSearchObj.viewLength = viewLength;
                            itemSearchObj.viewBy = initialViewBy;
                            itemSearchObj.searchFor = $scope.itemSearch.filter;
                            itemSearchObj.searchBy = itemSearchBy;
                            // $http.post("/dash/items",itemSearchObj)
                            //     .success(function(response){
                            //
                            //         $scope.renderItems(response,'Manufacturer');
                            //
                            //         if(viewLength + viewBy > $scope.items_count){
                            //             a = viewLength + viewBy - $scope.items_count;
                            //             viewBy -= a;
                            //             $scope.newViewBy = viewBy;
                            //         }
                            //         $scope.viewLength = viewLength;
                            //         $scope.displayloader = false;
                            //
                            //     })
                        }
                        else{
                            //console.log("Out of data")
                            if(viewLength + viewBy > $scope.items_count){
                                a = viewLength + viewBy - $scope.items_count;
                                viewBy -= a;
                                $scope.newViewBy = viewBy;
                            }
                        }
                    }
                    else{
                        //console.log("Minus viewby")
                        viewLength += viewBy;
                        if(viewLength + viewBy > $scope.items_count){
                            a = viewLength + viewBy - $scope.items_count;
                            viewBy -= a;
                        }
                        $scope.newViewBy = viewBy;
                        $scope.viewLength = viewLength;
                    }
                }
                else{
                    //console.log("BACK");
                    if(viewLength < viewBy){
                        //console.log("NO DATA")
                    }
                    else{
                        if(viewLength + viewBy >= $scope.items_count){
                            viewBy += a;
                            a = 0;
                        }
                        viewLength -= viewBy;
                        $scope.viewLength = viewLength;
                        $scope.newViewBy = viewBy;
                    }
                }
                break;
            //Attendance Navigation
            case 3:
                var viewLength = $scope.viewLength;
                var viewBy = $scope.newViewBy;
                if(direction){
                    //console.log("NEXT");
                    if(viewLength + viewBy >= $scope.attendancereport.length){
                        if(viewLength + viewBy < $scope.attendance_count){
                            viewLength += viewBy;
                            //console.log("Fetch more")
                            attSearchObj.viewLength = viewLength;
                            attSearchObj.viewBy = initialViewBy;
                            attSearchObj.sDate = $scope.DateTimeFormat($scope.atdreports.startDate, 'start');
                            attSearchObj.eDate = $scope.DateTimeFormat($scope.atdreports.endDate, 'end');
                            attSearchObj.searchFor = $scope.AttendanceReportSearch.filter;
                            $http.post("/dash/reports/attendance",attSearchObj)
                                .success(function(response){
                                    //console.log(response);
                                    for(var i=0; i<response.length; i++){
                                        $scope.attendancereport.push(response[i]);
                                    }
                                    if(viewLength + viewBy > $scope.attendance_count){
                                        a = viewLength + viewBy - $scope.attendance_count;
                                        viewBy -= a;
                                        $scope.newViewBy = viewBy;
                                    }
                                    $scope.viewLength = viewLength;
                                })
                        }
                        else{
                            //console.log("Out of data")
                            if(viewLength + viewBy > $scope.attendance_count){
                                a = viewLength + viewBy - $scope.attendance_count;
                                viewBy -= a;
                                $scope.newViewBy = viewBy;
                            }
                        }
                    }
                    else{
                        //console.log("Minus viewby")
                        viewLength += viewBy;
                        if(viewLength + viewBy > $scope.attendance_count){
                            a = viewLength + viewBy - $scope.attendance_count;
                            viewBy -= a;
                        }
                        $scope.newViewBy = viewBy;
                        $scope.viewLength = viewLength;
                    }
                }
                else{
                    //console.log("BACK");
                    if(viewLength < viewBy){
                        //console.log("NO DATA")
                    }
                    else{
                        if(viewLength + viewBy >= $scope.attendance_count){
                            viewBy += a;
                            a = 0;
                        }
                        viewLength -= viewBy;
                        $scope.viewLength = viewLength;
                        $scope.newViewBy = viewBy;
                    }
                }
                break;
            //Dealer tab navigation
            case 4:
                break;
            //Users Navigation
            case 5:
                var viewLength = $scope.viewLength;
                var viewBy = $scope.newViewBy;
                if(direction){
                    //  console.log("NEXT");
                    if(viewLength + viewBy >= $scope.sellers.length){
                        if(viewLength + viewBy < $scope.sellers_count){
                            viewLength += viewBy;
                            //console.log("Fetch more")
                            sellerSearchObj.viewLength = viewLength;
                            sellerSearchObj.viewBy = initialUserViewBy;
                            sellerSearchObj.userLoginDetails = $scope.user ;
                            if($scope.applicationType != 'Atmosphere'){
                                sellerSearchObj.selectUserRole = $scope.userRole;
                                if($scope.user.sellerObject)
                                    sellerSearchObj.resort = $scope.user.sellerObject.Resort;
                            }
                            sellerSearchObj.searchFor = $scope.userSearch.filter;
                            sellerSearchObj.statusFilter = $scope.statusFilter;
                            if($scope.filter.branch != 'All'){
                                sellerSearchObj.stockist = $scope.filter.branch;
                            }
                            else {
                                sellerSearchObj.stockist = '';
                            }
                            if($scope.filter.class != 'All'){
                                sellerSearchObj.class = $scope.filter.class;
                            }
                            else {
                                sellerSearchObj.class = '';
                            }
                            if($scope.filter.sales != 'All'){
                                sellerSearchObj.seller = $scope.filter.sales.seller;
                            }
                            else{
                                sellerSearchObj.seller = '';
                            }
                            sellerSearchObj.searchBy = sellerSearchBy;
                            $http.post("/dash/users/list",sellerSearchObj)
                                .success(function(response){
                                    console.log(response);
                                    $scope.renderSellers(response)
                                    if(viewLength + viewBy > $scope.sellers_count){
                                        a = viewLength + viewBy - $scope.sellers_count;
                                        viewBy -= a;
                                        $scope.newViewBy = viewBy;
                                    }
                                    $scope.viewLength = viewLength;
                                })
                        }
                        else{
                            //  console.log("Out of data")
                            if(viewLength + viewBy > $scope.sellers_count){
                                a = viewLength + viewBy - $scope.sellers_count;
                                viewBy -= a;
                                $scope.newViewBy = viewBy;
                            }
                        }
                    }
                    else{
                        //  console.log("Minus viewby")
                        viewLength += viewBy;
                        if(viewLength + viewBy > $scope.sellers_count){
                            a = viewLength + viewBy - $scope.sellers_count;
                            viewBy -= a;
                        }
                        $scope.newViewBy = viewBy;
                        $scope.viewLength = viewLength;
                    }
                }
                else{
                    //   console.log("BACK");
                    if(viewLength < viewBy){
                        //      console.log("NO DATA")
                    }
                    else{
                        if(viewLength + viewBy >= $scope.sellers_count){
                            viewBy += a;
                            a = 0;
                        }
                        viewLength -= viewBy;
                        $scope.viewLength = viewLength;
                        $scope.newViewBy = viewBy;
                    }
                }
                break;
            //Service Complaints Navigation
            case 10:
                var viewLength = $scope.viewLength;
                var viewBy = $scope.newViewBy;
                if(direction){
                    //  console.log("NEXT");
                    if(viewLength + viewBy >= $scope.serviceComplaints.length){
                        if(viewLength + viewBy < $scope.serviceComplaints.length){
                            viewLength += viewBy;
                            //console.log("Fetch more")
                            dealerSearchObj.viewLength = viewLength;
                            dealerSearchObj.viewBy = initialViewBy;
                            dealerSearchObj.searchFor = $scope.sellers.filter;
                            if($scope.filter.branch != 'All'){
                                dealerSearchObj.stockist = $scope.filter.branch;
                            }
                            else {
                                dealerSearchObj.stockist = '';
                            }
                            if($scope.filter.class != 'All'){
                                dealerSearchObj.class = $scope.filter.class;
                            }
                            else {
                                dealerSearchObj.class = '';
                            }
                            if($scope.filter.sales != 'All'){
                                dealerSearchObj.serviceComplaints = $scope.filter.sales.seller;
                            }
                            else{
                                dealerSearchObj.serviceComplaints = '';
                            }
                            dealerSearchObj.searchBy = dealerSearchBy;
                            $http.post("/dash/serviceComplaints",dealerSearchObj)
                                .success(function(response){
                                    console.log(response);
                                    $scope.renderComplaints(response)
                                    if(viewLength + viewBy > $scope.serviceComplaints.length){
                                        a = viewLength + viewBy - $scope.serviceComplaints.length;
                                        viewBy -= a;
                                        $scope.newViewBy = viewBy;
                                    }
                                    $scope.viewLength = viewLength;
                                })
                        }
                        else{
                            //  console.log("Out of data")
                            if(viewLength + viewBy > $scope.serviceComplaints.length){
                                a = viewLength + viewBy - $scope.serviceComplaints.length;
                                viewBy -= a;
                                $scope.newViewBy = viewBy;
                            }
                        }
                    }
                    else{
                        //  console.log("Minus viewby")
                        viewLength += viewBy;
                        if(viewLength + viewBy > $scope.serviceComplaints.length){
                            a = viewLength + viewBy - $scope.serviceComplaints.length;
                            viewBy -= a;
                        }
                        $scope.newViewBy = viewBy;
                        $scope.viewLength = viewLength;
                    }
                }
                else{
                    //   console.log("BACK");
                    if(viewLength < viewBy){
                        //      console.log("NO DATA")
                    }
                    else{
                        if(viewLength + viewBy >= $scope.serviceComplaints.length){
                            viewBy += a;
                            a = 0;
                        }
                        viewLength -= viewBy;
                        $scope.viewLength = viewLength;
                        $scope.newViewBy = viewBy;
                    }
                }
                break;
            //Stocks tab navigation
            case 12:
                break;
            //Tasks tab navigation
            case 28:
                break;
            //Goals Navigation
            case 29:
                var viewLength = $scope.viewLength;
                var viewBy = $scope.newViewBy;
                if(direction){
                    //console.log("NEXT");
                    if(viewLength + viewBy >= $scope.allGoals.length){
                        if(viewLength + viewBy < $scope.allGoals_count){
                            viewLength += viewBy;
                            //console.log("Fetch more")
                            goalSearchObj.viewLength = viewLength;
                            goalSearchObj.viewBy = initialViewBy;
                            goalSearchObj.searchFor = $scope.itemSearch.filter;
                            goalSearchObj.searchBy = goalSearchBy;
                            if($scope.applicationType == 'Atmosphere' && $scope.user.sellerObject) {
                                goalSearchObj.resort = $scope.user.sellerObject.Resort;
                            }
                            $http.post("/dash/mastergoals",goalSearchObj)
                                .success(function(response){
                                    console.log(response);
                                    $scope.renderGoals(response);
                                    if(viewLength + viewBy > $scope.allGoals_count){
                                        a = viewLength + viewBy - $scope.allGoals_count;
                                        viewBy -= a;
                                        $scope.newViewBy = viewBy;
                                    }
                                    $scope.viewLength = viewLength;
                                })
                        }
                        else{
                            //console.log("Out of data")
                            if(viewLength + viewBy > $scope.allGoals_count){
                                a = viewLength + viewBy - $scope.allGoals_count;
                                viewBy -= a;
                                $scope.newViewBy = viewBy;
                            }
                        }
                    }
                    else{
                        //console.log("Minus viewby")
                        viewLength += viewBy;
                        if(viewLength + viewBy > $scope.allGoals_count){
                            a = viewLength + viewBy - $scope.allGoals_count;
                            viewBy -= a;
                        }
                        $scope.newViewBy = viewBy;
                        $scope.viewLength = viewLength;
                    }
                }
                else{
                    //console.log("BACK");
                    if(viewLength < viewBy){
                        //console.log("NO DATA")
                    }
                    else{
                        if(viewLength + viewBy >= $scope.allGoals_count){
                            viewBy += a;
                            a = 0;
                        }
                        viewLength -= viewBy;
                        $scope.viewLength = viewLength;
                        $scope.newViewBy = viewBy;
                    }
                }
                break;
            //supplier navigation
            case 31:
                console.log("loaded tab 31....")
                var viewLength = $scope.viewLength ;
                var viewBy = $scope.newViewBy;
                if(direction){
                    //console.log("NEXT");
                    if(viewLength + viewBy >= $scope.suppliers.length){
                        if(viewLength + viewBy < $scope.suppliers.length){
                            viewLength += viewBy;
                            //console.log("Fetch more")
                            supplierSearchObj.viewLength = viewLength;
                            supplierSearchObj.viewBy = initialViewBy;
                            supplierSearchObj.searchFor = $scope.suppliers.length.filter;
                            supplierSearchObj.searchBy = supplierSearchBy;
                            if($scope.filter.supplierbranch != 'All'){
                                supplierSearchObj.stockist = $scope.filter.supplierbranch;
                            }
                            else {
                                supplierSearchObj.stockist = '';
                            }
                            if($scope.filter.suppliersales != 'All'){
                                supplierSearchObj.seller = $scope.filter.suppliersales.seller;
                            }
                            else{
                                supplierSearchObj.seller = '';
                            }
                            supplierSearchObj.searchBy = supplierSearchBy;
                            $http.post("/dash/suppliers",supplierSearchObj)
                                .success(function(response){
                                    $scope.renderServiceSupplier(response);
                                    if(viewLength + viewBy > $scope.suppliers.length){
                                        a = viewLength + viewBy - $scope.suppliers.length;
                                        viewBy -= a;
                                        $scope.newViewBy = viewBy;
                                    }
                                    $scope.viewLength = viewLength;
                                })
                        }
                        else{
                            //console.log("Out of data")
                            if(viewLength + viewBy > $scope.suppliers.length){
                                a = viewLength + viewBy - $scope.suppliers.length;
                                viewBy -= a;
                                $scope.newViewBy = viewBy;
                            }
                        }
                    }
                    else{
                        //console.log("Minus viewby")
                        viewLength += viewBy;
                        if(viewLength + viewBy > $scope.suppliers.length){
                            a = viewLength + viewBy - $scope.suppliers.length;
                            viewBy -= a;
                        }
                        $scope.newViewBy = viewBy;
                        $scope.viewLength = viewLength;
                    }
                }
                else{
                    //console.log("BACK");
                    if(viewLength < viewBy){
                        //console.log("NO DATA")
                    }
                    else{
                        if(viewLength + viewBy >= $scope.suppliers.length){
                            viewBy += a;
                            a = 0;
                        }
                        viewLength -= viewBy;
                        $scope.viewLength = viewLength;
                        $scope.newViewBy = viewBy;
                    }
                }
                break;
            //ppurchase order
            case 32:
                var viewLength = $scope.viewLength;
                var viewBy = $scope.newViewBy;
                if(direction){
                    //console.log("NEXT");
                    if(viewLength + viewBy >= $scope.purchaseOrder.length){
                        if(viewLength + viewBy < $scope.purchaseOrder.length){
                            viewLength += viewBy;
                            //console.log("Fetch more")
                            purchaseordersearchObj.viewLength = viewLength;
                            purchaseordersearchObj.viewBy = initialViewBy;
                            purchaseordersearchObj.searchFor = $scope.purchaseOrder.length.filter;
                            purchaseordersearchObj.searchBy = purchaseorderSearchBy;
                            // $http.post("/dash/purchase/orders",purchaseordersearchObj)
                            //     .success(function(response){
                            //         //console.log(response);
                            //
                            //         $scope.renderPurchaseOrders(response);
                            //
                            //         if(viewLength + viewBy > $scope.purchaseOrder.length){
                            //             a = viewLength + viewBy - $scope.purchaseOrder.length;
                            //             viewBy -= a;
                            //             $scope.newViewBy = viewBy;
                            //         }
                            //         $scope.viewLength = viewLength;
                            //     })
                        }
                        else{
                            //console.log("Out of data")
                            if(viewLength + viewBy > $scope.purchaseOrder.length){
                                a = viewLength + viewBy - $scope.purchaseOrder.length;
                                viewBy -= a;
                                $scope.newViewBy = viewBy;
                            }
                        }
                    }
                    else{
                        //console.log("Minus viewby")
                        viewLength += viewBy;
                        if(viewLength + viewBy > $scope.purchaseOrder.length){
                            a = viewLength + viewBy - $scope.purchaseOrder.length;
                            viewBy -= a;
                        }
                        $scope.newViewBy = viewBy;
                        $scope.viewLength = viewLength;
                    }
                }
                else{
                    //console.log("BACK");
                    if(viewLength < viewBy){
                        //console.log("NO DATA")
                    }
                    else{
                        if(viewLength + viewBy >= $scope.purchaseOrder.length){
                            viewBy += a;
                            a = 0;
                        }
                        viewLength -= viewBy;
                        $scope.viewLength = viewLength;
                        $scope.newViewBy = viewBy;
                    }
                }
                break;
            /*   Invoices  */
            case 34:
                break;
            //BidHistory
            case 35:
                var viewLength = $scope.viewLength;
                var viewBy = $scope.newViewBy;
                if(direction){
                    if(viewLength + viewBy >= $scope.bidhistory.length){
                        if(viewLength + viewBy < $scope.bidhistory_count){
                            viewLength += viewBy;
                            bidHistorySearchObj.viewLength = viewLength;
                            bidHistorySearchObj.viewBy = bidHistoryinitialViewBy;
                            // $http.post("/dash/items", bidHistorySearchObj)
                            //     .success(function(response){
                            //         $scope.renderBidHistory(response)
                            //
                            //         if(viewLength + viewBy > $scope.bidhistory_count){
                            //             a = viewLength + viewBy - $scope.bidhistory_count;
                            //             viewBy -= a;
                            //             $scope.newViewBy = viewBy;
                            //         }
                            //         $scope.viewLength = viewLength;
                            //     })
                        }
                        else{
                            //console.log("Out of data")
                            if(viewLength + viewBy > $scope.bidhistory_count){
                                a = viewLength + viewBy - $scope.bidhistory_count;
                                viewBy -= a;
                                $scope.newViewBy = viewBy;
                            }
                        }
                    }
                    else{
                        viewLength += viewBy;
                        if(viewLength + viewBy > $scope.bidhistory_count){
                            a = viewLength + viewBy - $scope.bidhistory_count;
                            viewBy -= a;
                        }
                        $scope.newViewBy = viewBy;
                        $scope.viewLength = viewLength;
                    }
                }
                else{
                    console.log("BACK");
                    if(viewLength < viewBy){
                        //console.log("NO DATA")
                    }
                    else{
                        if(viewLength + viewBy >= $scope.bidhistory_count){
                            viewBy += a;
                            a = 0;
                        }
                        viewLength -= viewBy;
                        $scope.viewLength = viewLength;
                        $scope.newViewBy = viewBy;
                    }
                }
                break;
            //Dealer tab navigation
            case 41:
                var viewLength = $scope.viewLength;
                var viewBy = $scope.newViewBy;
                if(direction){
                    //console.log("NEXT");
                    if(viewLength + viewBy >= $scope.newDealers.length){
                        if(viewLength + viewBy < $scope.searchDealerCount){
                            viewLength += viewBy;
                            //console.log("Fetch more")
                            dealerSearchObj.viewLength = viewLength;
                            dealerSearchObj.viewBy = initialViewBy;
                            dealerSearchObj.searchFor = $scope.searchDealerBox;
                            if($scope.filter.branch != 'All'){
                                dealerSearchObj.stockist = $scope.filter.branch;
                            }
                            else {
                                dealerSearchObj.stockist = '';
                            }
                            if($scope.filter.class != 'All'){
                                dealerSearchObj.class = $scope.filter.class;
                            }
                            else {
                                dealerSearchObj.class = '';
                            }
                            if($scope.filter.sales != 'All'){
                                dealerSearchObj.seller = $scope.filter.sales.seller;
                            }
                            else{
                                dealerSearchObj.seller = '';
                            }
                            dealerSearchObj.searchBy = dealerSearchBy;
                            $http.post("/dash/stores",dealerSearchObj)
                                .success(function(response){
                                    //console.log(response);
                                    $scope.renderServiceClients(response)
                                    $scope.newDealers=$scope.serviceClients;
                                    if(viewLength + viewBy > $scope.searchDealerCount){
                                        a = viewLength + viewBy - $scope.searchDealerCount;
                                        viewBy -= a;
                                        $scope.newViewBy = viewBy;
                                    }
                                    $scope.viewLength = viewLength;
                                })
                        }
                        else{
                            //console.log("Out of data")
                            if(viewLength + viewBy > $scope.searchDealerCount){
                                a = viewLength + viewBy - $scope.searchDealerCount;
                                viewBy -= a;
                                $scope.newViewBy = viewBy;
                            }
                        }
                    }
                    else{
                        //console.log("Minus viewby")
                        viewLength += viewBy;
                        if(viewLength + viewBy > $scope.searchDealerCount){
                            a = viewLength + viewBy - $scope.searchDealerCount;
                            viewBy -= a;
                        }
                        $scope.newViewBy = viewBy;
                        $scope.viewLength = viewLength;
                    }
                }
                else{
                    //console.log("BACK");
                    if(viewLength < viewBy){
                        //console.log("NO DATA")
                    }
                    else{
                        if(viewLength + viewBy >= $scope.searchDealerCount){
                            viewBy += a;
                            a = 0;
                        }
                        viewLength -= viewBy;
                        $scope.viewLength = viewLength;
                        $scope.newViewBy = viewBy;
                    }
                }
                break;
            // Inventory Transaction History
            case 42:
                break;
            // Inventory
            case 43:
                break;
            // Inventory for B&B
            case 44:
                break;
            // Asset Transaction History
            case 45:
                var viewLength = $scope.viewLength;
                var viewBy = $scope.newViewBy;
                var assetTransactionObj = {};
                if(direction){
                    console.log("NEXT");
                    if(viewLength + viewBy >= $scope.assetTransaction.length){
                        if(viewLength + viewBy < $scope.assetTransactionHistory_count){
                            viewLength += viewBy;
                            // console.log("Fetch more")
                            assetTransactionObj.viewLength = viewLength;
                            assetTransactionObj.viewBy = initialViewBy;
                            //console.log(assetTransactionObj)
                            $http.post("/dash/getAsset/transactionHistory",assetTransactionObj)
                                .success(function(response){
                                    // console.log(response);
                                    for(var i=0; i<response.length; i++){
                                        $scope.assetTransaction.push(response[i]);
                                    }
                                    if(viewLength + viewBy > $scope.assetTransactionHistory_count){
                                        a = viewLength + viewBy - $scope.assetTransactionHistory_count;
                                        viewBy -= a;
                                        $scope.newViewBy = viewBy;
                                    }
                                    $scope.viewLength = viewLength;
                                })
                        }
                        else{
                            //console.log("Out of data")
                            if(viewLength + viewBy > $scope.assetTransactionHistory_count){
                                a = viewLength + viewBy - $scope.assetTransactionHistory_count;
                                viewBy -= a;
                                $scope.newViewBy = viewBy;
                            }
                        }
                    }
                    else{
                        // console.log("Minus viewby")
                        viewLength += viewBy;
                        if(viewLength + viewBy > $scope.assetTransactionHistory_count){
                            a = viewLength + viewBy - $scope.assetTransactionHistory_count;
                            viewBy -= a;
                        }
                        $scope.newViewBy = viewBy;
                        $scope.viewLength = viewLength;
                    }
                }
                else{
                    //console.log("BACK");
                    if(viewLength < viewBy){
                        //console.log("NO DATA")
                    }
                    else{
                        if(viewLength + viewBy >= $scope.assetTransactionHistory_count){
                            viewBy += a;
                            a = 0;
                        }
                        viewLength -= viewBy;
                        $scope.viewLength = viewLength;
                        $scope.newViewBy = viewBy;
                    }
                }
                break;
            case 46:
                var viewLength = $scope.viewLength;
                var viewBy = $scope.newViewBy;
                var assetObj = {};
                if(direction){
                    console.log("NEXT");
                    if(viewLength + viewBy >= $scope.assets.length){
                        if(viewLength + viewBy < $scope.asset_count){
                            viewLength += viewBy;
                            // console.log("Fetch more")
                            assetObj.viewLength = viewLength;
                            assetObj.viewBy = initialViewBy;
                            $http.post("/dash/asset/view",assetObj)
                                .success(function(response){
                                    for(var i=0; i<response.length; i++){
                                        $scope.assets.push(response[i]);
                                    }
                                    if(viewLength + viewBy > $scope.asset_count){
                                        a = viewLength + viewBy - $scope.asset_count;
                                        viewBy -= a;
                                        $scope.newViewBy = viewBy;
                                    }
                                    $scope.viewLength = viewLength;
                                })
                        }
                        else{
                            console.log("Out of data")
                            if(viewLength + viewBy > $scope.asset_count){
                                a = viewLength + viewBy - $scope.asset_count;
                                viewBy -= a;
                                $scope.newViewBy = viewBy;
                            }
                        }
                    }
                    else{
                        console.log("Minus viewby")
                        viewLength += viewBy;
                        if(viewLength + viewBy > $scope.asset_count){
                            a = viewLength + viewBy - $scope.asset_count;
                            viewBy -= a;
                        }
                        $scope.newViewBy = viewBy;
                        $scope.viewLength = viewLength;
                    }
                }
                else{
                    console.log("BACK");
                    if(viewLength < viewBy){
                        //console.log("NO DATA")
                    }
                    else{
                        if(viewLength + viewBy >= $scope.asset_count){
                            viewBy += a;
                            a = 0;
                        }
                        viewLength -= viewBy;
                        $scope.viewLength = viewLength;
                        $scope.newViewBy = viewBy;
                    }
                }
                break;
        }
    }
    $scope.statusFilter = '';
    //Apply order filter
    $scope.orderSearchFilter = function(filter)
    {
        jQuery.noConflict();
        debugger;
        $('.refresh').css("display", "inline");
        $scope.orderFilter = filter;
        if(filter != 'all' && filter != undefined){
            $scope.filterStatusSelect = filter;
            // toastr.info('Showing orders of '+filter+' status!!')
        }
        else
            $scope.filterStatusSelect = '';
        //toastr.info('Showing all orders')
        searchObj.viewLength = 0;
        searchObj.viewBy = initialViewBy;
        $scope.orderViewLength = 0;
        $scope.orderNewViewBy = localViewBy;
        if($scope.orderSearch.date_from)
            searchObj.from_date = $scope.orderSearch.date_from;
        if($scope.orderSearch.date_to){
            $scope.orderSearch.date_to.setHours(23,59,59)
            searchObj.to_date = $scope.orderSearch.date_to;
        }
        if(filter != 'all')
            searchObj.filter = filter;
        else
            searchObj.filter = '';
        if($scope.orderSearch.filter){
            searchObj.searchFor = $scope.orderSearch.filter;
            searchObj.searchBy = orderSearchBy;
        }
        searchObj.dealer = {};
        if($scope.orderSearch.dealer){
            searchObj.dealer.dealerID = $scope.orderSearch.dealer.DealerID ? $scope.orderSearch.dealer.DealerID : '';
            searchObj.dealer.dealercode = $scope.orderSearch.dealer.Dealercode ? $scope.orderSearch.dealer.Dealercode : '';
        }
        if($scope.orderSearch.seller){
            searchObj.seller = $scope.orderSearch.seller.sellerphone;
        }
        else{
            searchObj.seller = '';
        }
        if($scope.orderSearch.source){
            searchObj.source = $scope.orderSearch.source;
        }
        else{
            searchObj.source = '';
        }
        $scope.orders = [];
        $http.post("/dash/orders/count", searchObj)
            .success(function(res){
                $scope.transactionCount(res,1);
            });
        $scope.showOrderFilter = true;
        if(filter == 'all' && $scope.orderSearch.filter == '' && $scope.orderSearch.date_from == '' && $scope.orderSearch.date_to == '')
            $scope.showOrderFilter = false;
        setTimeout(function(){
            $('.refresh').css("display", "none");
        }, 2000);
    };
    $scope.purchaseorderSearchFilter = function(filter)
    {
        jQuery.noConflict();
        debugger;
        $('.refresh').css("display", "inline");
        if(filter != 'all' && filter != undefined){
            $scope.filterStatusSelect = filter;
            // toastr.info('Showing orders of '+filter+' status!!')
        }
        else
            $scope.filterStatusSelect = '';
        //toastr.info('Showing all orders')
        purchaseordersearchObj.viewLength = 0;
        purchaseordersearchObj.viewBy = initialViewBy;
        $scope.viewLength = 0;
        $scope.newViewBy = localViewBy;
        if($scope.PurchaseOrderSearch.date_from)
            purchaseordersearchObj.from_date = $scope.PurchaseOrderSearch.date_from;
        if($scope.PurchaseOrderSearch.date_to){
            $scope.PurchaseOrderSearch.date_to.setHours(23,59,59)
            purchaseordersearchObj.to_date = $scope.PurchaseOrderSearch.date_to;
        }
        if(filter != 'all')
            purchaseordersearchObj.filter = filter;
        else
            purchaseordersearchObj.filter = '';
        if($scope.PurchaseOrderSearch.filter){
            purchaseordersearchObj.searchFor = $scope.PurchaseOrderSearch.filter;
            purchaseordersearchObj.searchBy = purchaseorderSearchBy;
        }
        purchaseordersearchObj.supplier = {};
        if($scope.PurchaseOrderSearch.supplier){
            purchaseordersearchObj.supplier.supplierID = $scope.PurchaseOrderSearch.supplier.SupplierID ? $scope.PurchaseOrderSearch.supplier.SupplierID : '';
            purchaseordersearchObj.supplier.suppliercode = $scope.PurchaseOrderSearch.supplier.SupplierCode ? $scope.PurchaseOrderSearch.supplier.SupplierCode : '';
        }
        if($scope.PurchaseOrderSearch.seller){
            purchaseordersearchObj.seller = $scope.PurchaseOrderSearch.seller.sellerid;
        }
        else{
            purchaseordersearchObj.seller = '';
        }
        $scope.purchaseOrder = [];
        // $http.post("/dash/purchase/orders", purchaseordersearchObj)
        //     .success($scope.renderPurchaseOrders);
        //
        // $http.post("/dash/purchase/orders/count", purchaseordersearchObj)
        //     .success(function(res){
        //         $scope.transactionCount(res,32);
        //     });
        $scope.showPurchaseOrderFilter = true;
        if(filter == 'all' && $scope.PurchaseOrderSearch.filter == '' && $scope.PurchaseOrderSearch.date_from == '' && $scope.PurchaseOrderSearch.date_to == '')
            $scope.showPurchaseOrderFilter = false;
        setTimeout(function(){
            $('.refresh').css("display", "none");
        }, 2000);
    };
    $scope.clearFilter = function(tab){
        switch(tab){
            //CLear Orders
            case 1:
                searchObj.viewLength = 0;
                searchObj.viewBy = initialViewBy;
                searchObj.from_date = 0;
                searchObj.to_date = 0;
                searchObj.filter = '';
                searchObj.source = '';
                searchObj.searchFor = [];
                searchObj.searchBy = [];
                searchObj.dealer = {};
                searchObj.seller = '';
                $scope.orderViewLength = 0;
                $scope.orderNewViewBy = localViewBy;
                $scope.filterStatusSelect = '';
                $scope.orderSearch.date_from = '';
                $scope.orderSearch.date_to = '';
                $scope.orderSearch.filter = '';
                $scope.orderSearch.seller = '';
                $scope.orderSearch.dealer = '';
                $scope.orderSearch.source ='';
                $scope.orders = [];
                $http.post('/dash/orders', searchObj)
                    .success($scope.renderOrders);
                $http.post("/dash/orders/count", searchObj)
                    .success(function(res){
                        $scope.transactionCount(res,1);
                    });
                $scope.showOrderFilter = false;
                break;
            //Clear Items
            case 2:
                itemSearchObj.viewLength = 0;
                itemSearchObj.viewBy = initialViewBy;
                itemSearchObj.searchFor = '';
                itemSearchObj.searchBy = [];
                itemSearchObj.searchBySubCategory = [];
                itemSearchObj.searchBySubSubCategory = [];
                itemSearchObj.searchCategory = [];
                $scope.viewLength = 0;
                $scope.newViewBy = viewBy.items;
                $scope.itemSearch.filter = '';
                $scope.itemSearch.priceList = '';
                $scope.priceListView.filter='master' ;
                $scope.priceListfilter = false ;
                $scope.items = [];
                $scope.showItemFilter = false;
                $scope.itemSelectAll.category = true;
                // $http.post("/dash/items",itemSearchObj)
                //     .success(function(response) {
                //
                //         $scope.renderItems(response);
                //     });
                //
                // $http.post('/dash/item/count', itemSearchObj)
                //     .success(function(response){
                //         $scope.transactionCount(response,2)
                //     });
                $scope.getAllCategories(true,'category');
                $scope.getAllSubCategories(true,'subCategory');
                $scope.getAllSubSubCategories(true,'subSubCategory');
                break;
            //Attendance report Clear filter
            case 3:
                break;
            //Dealer tab clear filter
            case 4:
                break;
            case 5:
                var sellerSearchObj = {};
                sellerSearchObj.viewLength = 0;
                sellerSearchObj.viewBy = initialUserViewBy;
                sellerSearchObj.searchFor = '';
                sellerSearchObj.statusFilter = 'allUsers';
                sellerSearchObj.searchBy = [];
                sellerSearchObj.userLoginDetails = $scope.user ;
                if($scope.applicationType == 'Atmosphere' && $scope.user.sellerObject) {
                    sellerSearchObj.resort = $scope.user.sellerObject.Resort;
                }
                $scope.viewLength = 0;
                $scope.newViewBy = viewBy.sellers;
                $scope.userSearch.filter = '';
                $scope.sellers = [];
                $http.post("/dash/users/list", sellerSearchObj)
                    .success($scope.renderSellers)
                $http.post("/dash/users/count", sellerSearchObj)
                    .success(function(res){
                        $scope.sellers_count = res;
                        $scope.transactionCount(res,5);
                    });
                $scope.userFilterStatus = 'allUsers';
                $scope.userSearch.filter = '';
                $scope.statusFilter = '';
                $scope.userRoles.Roles = true;
                for(var i = 0 ;i < $scope.userRole.length; i++){
                    console.log($scope.userRole[i].status);
                    $scope.userRole[i].status = true;
                }
                $scope.showSellerFilter = false;
                break;
            //stock in channel
            case 6:
                break;
            case 31:
                supplierSearchObj.viewLength = 0;
                supplierSearchObj.viewBy = initialViewBy;
                supplierSearchObj.searchFor = '';
                supplierSearchObj.seller = '';
                supplierSearchObj.stockist = '';
                supplierSearchObj.searchBy = [];
                $scope.viewLength = 0;
                $scope.newViewBy = viewBy.suppliers;
                $scope.supplierSearch.filter = '';
                $scope.suppliers = [];
                $scope.filter.suppliersales = "All";
                $scope.filter.supplierbranch = "All";
                $http.post("/dash/suppliers", supplierSearchObj)
                    .success($scope.renderServiceSupplier)
                $http.post("/dash/suppliers/count", supplierSearchObj)
                    .success(function(res){
                        $scope.transactionCount(res,31);
                    })
                $scope.showSupplierFilter = false;
                //Set AREA and CITY checked.
                $scope.supplier_city = masterSupplier.unique('City');
                $scope.supplier_city = masterSupplier.unique('Area');
                $scope.supplier_city.map(function(supplier){
                    supplier.selected_city = true;
                    return supplier;
                })
                $scope.supplier_city.map(function(supplier){
                    supplier.selected_area = true;
                    return supplier;
                })
                break;
            case 32:
                purchaseordersearchObj.viewLength = 0;
                purchaseordersearchObj.viewBy = initialViewBy;
                purchaseordersearchObj.from_date = 0;
                purchaseordersearchObj.to_date = 0;
                purchaseordersearchObj.filter = '';
                purchaseordersearchObj.searchFor = [];
                purchaseordersearchObj.searchBy = [];
                purchaseordersearchObj.supplier = {};
                purchaseordersearchObj.seller = '';
                $scope.viewLength = 0;
                $scope.newViewBy = localViewBy;
                $scope.filterStatusSelect = '';
                $scope.PurchaseOrderSearch.date_from = '';
                $scope.PurchaseOrderSearch.date_to = '';
                $scope.PurchaseOrderSearch.filter = '';
                $scope.PurchaseOrderSearch.seller = '';
                $scope.PurchaseOrderSearch.supplier = '';
                $scope.purchaseOrder = [];
                console.log(purchaseordersearchObj);
                // $http.post("/dash/purchase/orders", purchaseordersearchObj)
                //     .success($scope.renderPurchaseOrders);
                //
                // $http.post("/dash/purchase/orders/count", purchaseordersearchObj)
                //     .success(function(res){
                //         $scope.transactionCount(res,32);
                //     });
                $scope.showPurchaseOrderFilter = false;
                break;
            case 34:
                break;
            case 29 :
                //Fetch Goals if tab is activated
                console.log("***** Tab 29 : Fetching all Goals")
                $scope.viewLength = 0;
                $scope.newViewBy = viewBy.goals;
                $scope.goalSearch.filter = '';
                /*$http.get("/dash/goals")
                 .success(function(response){
                 $scope.allGoals = response;
                 console.log($scope.allGoals)
                 })*/
                goalSearchObj.viewLength = 0;
                goalSearchObj.viewBy = initialViewBy;
                goalSearchObj.searchBy = [];
                goalSearchObj.searchFor = '';
                if($scope.applicationType == 'Atmosphere' && $scope.user.sellerObject) {
                    goalSearchObj.resort = $scope.user.sellerObject.Resort;
                }
                $scope.allGoals = [];
                $scope.reportGoals = [];
                //    $scope.tempGoals = [];
                $http.post("/dash/mastergoals", goalSearchObj)
                    .success($scope.renderGoals);
                $http.post('/dash/mastergoals/count', goalSearchObj)
                    .success(function (response) {
                        console.log("Goals count--------->>>"+response.length);
                        $scope.transactionCount(response, 29)
                    });
                $http.get('/dash/allUsers')
                    .success(function (response) {
                        console.log("Goals users count--------->>>")
                        // console.log(response)
                        if(response.length) $scope.allGoalUsers = response
                    });
                break;
        }
    }
    //Apply item search Filter
    $scope.clearFilterButton = function (search,tab)
    {
        if (search === '')
        {
            switch (tab)
            {
                //order
                case 1:
                    searchObj.viewLength = 0;
                    searchObj.viewBy = initialViewBy;
                    searchObj.from_date = 0;
                    searchObj.to_date = 0;
                    searchObj.filter = '';
                    searchObj.searchFor = [];
                    searchObj.searchBy = [];
                    $scope.viewLength = 0;
                    $scope.newViewBy = localViewBy;
                    $scope.filterStatusSelect = '';
                    $scope.orderSearch.date_from = '';
                    $scope.orderSearch.date_to = '';
                    $scope.orderSearch.filter = '';
                    $scope.orders = [];
                    $http.post('/dash/orders', searchObj)
                        .success($scope.renderOrders);
                    $http.post("/dash/orders/count", searchObj)
                        .success(function (res) {
                            $scope.transactionCount(res, 1);
                        });
                    $scope.showOrderFilter = false;
                    break;
                //Item
                case 2 :
                    itemSearchObj.viewLength = 0;
                    itemSearchObj.viewBy = initialViewBy;
                    itemSearchObj.searchFor = '';
                    itemSearchObj.searchBy = [];
                    $scope.viewLength = 0;
                    $scope.newViewBy = viewBy.items;
                    $scope.itemSearch.filter = '';
                    $scope.itemSearch.priceList = '';
                    $scope.items = [];
                    $http.post('/dash/items', itemSearchObj)
                        .success($scope.renderItems);
                    $http.post('/dash/item/count', itemSearchObj)
                        .success(function (response) {
                            $scope.transactionCount(response, 2)
                        });
                    // $scope.itemCategories = masterItems.unique('Manufacturer')
                    // $scope.itemSubCategories = masterItems.unique('subCategory')
                    //
                    // $scope.itemCategories.map(function (item) {
                    //     item.selected_category = true;
                    //     return item;
                    // })
                    // $scope.itemSubCategories.map(function (item) {
                    //     item.selected_subCategory = true;
                    //     return item;
                    // })
                    $scope.showItemFilter = false;
                    $scope.getAllCategories(true,'category');
                    $scope.getAllSubCategories(true,'subCategory');
                    break;
                //customer
                case 3:
                    break;
                //stocks
                case 4:
                    break;
                //sellers
                case 5:
                    searchObj.viewLength = 0;
                    searchObj.viewBy = initialUserViewBy;
                    searchObj.filter = '';
                    searchObj.searchFor = [];
                    searchObj.searchBy = [];
                    searchObj.userLoginDetails = $scope.user ;
                    if($scope.applicationType == 'Atmosphere' && $scope.user.sellerObject) {
                        searchObj.resort = $scope.user.sellerObject.Resort;
                    }
                    $scope.viewLength = 0;
                    $scope.newViewBy = viewBy.sellers;
                    $scope.filterStatusSelect = '';
                    $scope.userSearch.filter = '';
                    $scope.sellers = [];
                    $http.post("/dash/users/list", searchObj)
                        .success($scope.renderSellers)
                    $http.post("/dash/users/count", searchObj)
                        .success(function(res){
                            $scope.sellers_count = res;
                            $scope.transactionCount(res,5);
                        });
                    $scope.userSearch.filter = '';
                    $scope.showSellerFilter = false;
                    $scope.userFilterStatus = 'allUsers';
                    break;
                //Item
                case 22:
                    $scope.search ='';
                    break;
                case 28:
                    break;
                case 29 :
                    goalSearchObj.viewLength = 0;
                    goalSearchObj.viewBy = initialViewBy;
                    goalSearchObj.searchFor = '';
                    goalSearchObj.searchBy = [];
                    if($scope.applicationType == 'Atmosphere' && $scope.user.sellerObject) {
                        goalSearchObj.resort = $scope.user.sellerObject.Resort;
                    }
                    $scope.viewLength = 0;
                    $scope.newViewBy = viewBy.goals;
                    $scope.goalSearch.filter = '';
                    $scope.allGoals = [];
                    $scope.reportGoals = [];
                    //   $scope.tempGoals = [];
                    $http.post('/dash/mastergoals', goalSearchObj)
                        .success($scope.renderGoals);
                    $http.post('/dash/mastergoals/count', goalSearchObj)
                        .success(function (response) {
                            $scope.transactionCount(response, 29)
                        });
                    // $scope.itemCategories = masterItems.unique('Manufacturer')
                    // $scope.itemSubCategories = masterItems.unique('subCategory')
                    //
                    // $scope.itemCategories.map(function (item) {
                    //     item.selected_category = true;
                    //     return item;
                    // })
                    // $scope.itemSubCategories.map(function (item) {
                    //     item.selected_subCategory = true;
                    //     return item;
                    // })
                    $scope.showItemFilter = false;
                    break;
                case 31 :
                    supplierSearchObj.viewLength = 0;
                    supplierSearchObj.viewBy = initialViewBy;
                    supplierSearchObj.searchFor = '';
                    supplierSearchObj.seller = '';
                    supplierSearchObj.stockist = '';
                    supplierSearchObj.searchBy = [];
                    $scope.viewLength = 0;
                    $scope.newViewBy = viewBy.suppliers;
                    $scope.supplierSearch.filter = '';
                    $scope.suppliers = [];
                    $http.post("/dash/suppliers", supplierSearchObj)
                        .success($scope.renderServiceSupplier)
                    $http.post("/dash/suppliers/count", supplierSearchObj)
                        .success(function(res){
                            $scope.transactionCount(res,31);
                        })
                    $scope.showSupplierFilter = false;
                    //Set AREA and CITY checked.
                    $scope.supplier_city = masterSupplier.unique('City');
                    $scope.supplier_area = masterSupplier.unique('Area');
                    $scope.supplier_city.map(function(supplier){
                        supplier.selected_city = true;
                        return supplier;
                    })
                    $scope.supplier_area.map(function(supplier){
                        supplier.selected_area = true;
                        return supplier;
                    })
                    break;
                case 32:
                    purchaseordersearchObj.viewLength = 0;
                    purchaseordersearchObj.viewBy = initialViewBy;
                    purchaseordersearchObj.from_date = 0;
                    purchaseordersearchObj.to_date = 0;
                    purchaseordersearchObj.filter = '';
                    purchaseordersearchObj.searchFor = [];
                    purchaseordersearchObj.searchBy = [];
                    $scope.viewLength = 0;
                    $scope.newViewBy = localViewBy;
                    $scope.filterStatusSelect = '';
                    $scope.PurchaseOrderSearch.date_from = '';
                    $scope.PurchaseOrderSearch.date_to = '';
                    $scope.PurchaseOrderSearch.filter = '';
                    $scope.purchaseOrder = [];
                    // $http.post('/dash/purchase/orders', purchaseordersearchObj)
                    //     .success($scope.renderPurchaseOrders);
                    //
                    // $http.post("/dash/purchase/orders/count", purchaseordersearchObj)
                    //     .success(function (res) {
                    //         $scope.transactionCount(res, 32);
                    //     });
                    $scope.showPurchaseOrderFilter = false;
                    break;
                case 33 :
                    scoreCardObj.viewLength = 0;
                    scoreCardObj.viewBy = initialViewBy;
                    scoreCardObj.searchFor = '';
                    scoreCardObj.searchBy = [];
                    $scope.viewLength = 0;
                    $scope.newViewBy = viewBy.scoreCard;
                    $scope.scoreCardFilterObj.filter = '';
                    $scope.allPerformance = [];
                    /* $http.post("/dash/all/performance",scoreCardObj)
                     .success(function(response)
                     {
                     console.log(response)
                     $scope.allPerformance = response
                     });*/
                    // $scope.showItemFilter = false;
                    break;
                case 35:
                    bidHistorySearchObj.viewLength = 0;
                    bidHistorySearchObj.viewBy = bidHistoryinitialViewBy;
                    bidHistorySearchObj.searchFor = '';
                    bidHistorySearchObj.seller = '';
                    bidHistorySearchObj.stockist = '';
                    bidHistorySearchObj.searchBy = [];
                    // $http.post("/dash/items", bidHistorySearchObj)
                    //     .success(function(res){
                    //         $scope.renderBidHistory(res);
                    //     });
                    // $http.post("/dash/item/count", bidHistorySearchObj)
                    //     .success(function(res) {
                    //         $scope.transactionCount(res,35);
                    //     });
                    break;
                case 36:
                    break;
                case 37:
                    break;
                case 38:
                    assetObj.viewLength = 0;
                    assetObj.viewBy =  initialViewBy;
                    assetObj.searchFor = '';
                    assetObj.searchBy = [];
                    assetObj.filter = '';
                    $scope.assetSearch.filter = '';
                    $scope.miscellaneousReceipt.location = 'All';
                    $http.post('/dash/asset/view',assetObj).success(function(res){
                        // console.log(res.length)
                        $scope.assets = res;
                    }).catch(function(err){
                        console.log(err)
                    })
                    $http.post('/dash/asset/count',assetObj)
                        .success(function(response){
                            //console.log(response)
                            $scope.transactionCount(response,39)
                        });
                    break;
                case 39:
                    assetObj.viewLength = 0;
                    assetObj.viewBy =  initialViewBy;
                    assetObj.searchFor = '';
                    assetObj.searchBy = [];
                    assetObj.filter = '';
                    $scope.assetSearch.filter = '';
                    $scope.miscellaneousReceipt.location = 'All';
                //1s$scope.inventoryStatusSelect = 'all'
                    $http.post('/dash/getAsset/transactionHistory',assetObj).success(function(res){
                        $scope.assetTransaction = res;
                    }).catch(function(err){
                        console.log(err)
                    })
                    $http.post('/dash/asset/transactionHistory/count',assetObj)
                        .success(function(response){
                            //console.log(response)
                            $scope.transactionCount(response,40)
                        });
                    break;
            }
        }
    }
    //Store filter function search by area and city
    $scope.storeSearchByArea = function(){
        $scope.dealer_city = [];
        $scope.dealer_area = [];
        var temp = [];
        var temp1 = [];
        if($scope.cityText.filter){
            dealerSearchObj.searchFor = $scope.cityText.filter;
            dealerSearchObj.searchBy = dealerSearchBy;
            $http.post("/dash/stores", dealerSearchObj)
                .success(function (res) {
                    $scope.serviceClients = res;
                    $scope.transactionCount(res.length, 4);
                    for(var i=0; i<res.length; i++){
                        temp.push({'selected_city': true ,'_id':res[i].City});
                        temp1.push({'selected_area': true ,'_id':res[i].Area});
                    }
                    $scope.dealer_city = temp.unique("_id");
                    $scope.dealer_area = temp1.unique("_id");
                });
        }
        $scope.showStoreFilter = true;
    };
    //Store filter function
    $scope.storeSearchFilter = function(){
        $scope.showListDealerDetail = false;
        dealerSearchObj.viewLength = 0;
        dealerSearchObj.viewBy = initialViewBy;
        $scope.viewLength = 0;
        $scope.newViewBy = localViewBy;
        if($scope.dealerSearch.filter){
            dealerSearchObj.searchFor = $scope.dealerSearch.filter;
            dealerSearchObj.searchBy = dealerSearchBy;
        }
        dealerSearchObj.stockist = {};
        if($scope.filter.branch != 'All'){
            dealerSearchObj.stockist = $scope.filter.branch;
        }
        else {
            dealerSearchObj.stockist = '';
        }
        if($scope.filter.sales != 'All'){
            dealerSearchObj.seller = $scope.filter.sales;
        }
        else{
            dealerSearchObj.seller = '';
        }
        if($scope.filter.class != 'All'){
            dealerSearchObj.class = $scope.filter.class;
        }
        else{
            dealerSearchObj.class = '';
        }
        $scope.serviceClients = [];
        if($scope.dealerSelectAll.city){
            $http.post('/dash/stores', dealerSearchObj)
                .success(function(res){
                    $scope.multipleUsers(res);
                    $scope.renderStoreMap(res);
                });
            $http.post("/dash/stores/count", dealerSearchObj)
                .success(function(res){
                    $scope.transactionCount(res,4);
                });
        }
        $scope.showStoreFilter = true;
        if($scope.dealerSearch.filter == '' && $scope.filter.branch == 'All' && $scope.filter.sales == 'All' && $scope.filter.class == 'All')
            $scope.showStoreFilter = false;
    };
    $scope.branchUser = [];
    $scope.branchSellerUser = '';
    $scope.getBranchUser = function(branchCode){
        if(!branchCode){
            $scope.branchSellerUser = $scope.sellers;
        }else{
            $http.get("/dash/branch/getUser/sellers/"+branchCode)
                .success(function (res) {
                    $scope.assetTransactionSearch.userName = '';
                    // console.log('res is--==->>>', res);
                    $scope.branchSellerUser = res;
                })
        }
    }
    //supplier//
    $scope.searchDealer = function(text){
        if(text.length >= 3 && text){
            $scope.displayloader = false;
            $http.get("/dash/stores/search/"+text)
                .success(function(res){
                    if(res) {
                        $scope.showPjpDealersSearch = true;
                        if(text.length >=3){
                            console.log('searchDealer 1',res)
                            $scope.searchDealerCount = res.length;
                            $scope.newDealers = res;
                            $scope.viewLength = 0;
                            $scope.newViewBy = localViewBy;
                            if($scope.pjpBeat.length)
                            {
                                for(var i=0; i< $scope.newDealers.length; i++)
                                {
                                    for(var j=0; j< $scope.pjpBeat.length; j++)
                                    {
                                        if($scope.pjpBeat[j].Dealercode == $scope.newDealers[i].Dealercode)
                                        {
                                            $scope.newDealers[i].addedFlag=true;
                                            console.log('inside',$scope.newDealers[i]);
                                        }
                                    }
                                }
                            }
                            if ( $scope.searchDealerCount < localViewBy) {
                                $scope.newViewBy = $scope.searchDealerCount;
                            }
                            jQuery.noConflict();
                            $(".dealerDropdown").css('display', 'block')
                        }else{
                            $scope.viewLength = -1;
                            $scope.newViewBy = 0;
                            $scope.searchDealerCount = 0;
                            $scope.newDealers = [];
                            jQuery.noConflict();
                            $(".dealerDropdown").css('display', 'none')
                        }
                    }else{
                        $scope.searchDealerCount = $scope.dealer_count;
                        $scope.newDealers = $scope.serviceClients;
                        $scope.viewLength = 0;
                        $scope.newViewBy = localViewBy;
                        if ( $scope.searchDealerCount < localViewBy) {
                            $scope.newViewBy = $scope.searchDealerCount;
                        }
                        jQuery.noConflict();
                        $(".dealerDropdown").css('display', 'none');
                    }
                })
        }
        else{
            if(text){
                $scope.displayloader = true;
            }else{
                $scope.displayloader = false;
            }
            $scope.showPjpDealersSearch = false;
            $scope.searchDealerCount = $scope.dealer_count;
            $scope.newDealers = $scope.serviceClients;
            $scope.viewLength = 0;
            $scope.newViewBy = localViewBy;
            if ( $scope.searchDealerCount < localViewBy) {
                $scope.newViewBy = $scope.searchDealerCount;
            }
            jQuery.noConflict();
            $(".dealerDropdown").css('display', 'none')
        }
        // console.log('reslast',$scope.newDealers);
    };
    $scope.selectStoreComplaintCustomers = function(store){
        $scope.complaintapikey = '';
        // $scope.complaint.Phone = Number(store.Phone);
        $scope.complaint.searchDeviceBox = store.DealerName;
        $scope.complaint.store = store;
        $scope.complaint.customercontperson = store.contactPerson;
        $scope.complaint.customercontnumber = store.Phone;
        $scope.complaint.customercontemail = store.email;
        $scope.complaintapikey = store.Api_Key;
        jQuery.noConflict();
        $(".dealerDropdown").css('display', 'none')
        $('#deviceSearchBar').val('');
    }
    $scope.searchUsers = function(text,spcustomer){
        var body = {customer : spcustomer,
            custapikey : $scope.complaintapikey};
        if(text.length > 0){
            $http.post("/dash/user/search/"+text, body)
                .success(function(res){
                    console.log("response from search users is");
                    console.log(res);
                    $scope.newUsers = res;
                    jQuery.noConflict();
                    $(".userDropdown").css('display', 'block')
                })
        }
        else{
            $scope.newUsers = [];
            jQuery.noConflict();
            $(".userDropdown").css('display', 'none')
        }
    }
    $scope.selectStoreComplaintUsers = function(user){
        $scope.complaint.email = user.email;
        $scope.complaint.Phone = user.sellerphone;
        $scope.complaint.searchUserBox = user.sellername;
        jQuery.noConflict();
        $(".userDropdown").css('display', 'none')
        $('#userSearchBar').val('');
    }
    $scope.searchSuppliers = function(text){
        //console.log(text);
        if(text.length > 0){
            $http.get("/dash/supplier/search/"+text)
                .success(function(res){
                    console.log("search filter checking");
                    console.log(res)
                    $scope.getPurchaseSuppliers = res;
                    jQuery.noConflict();
                    $(".supplierDropdown").css('display', 'block')
                })
        }
        else{
            $scope.getPurchaseSuppliers = [];
            jQuery.noConflict();
            $(".supplierDropdown").css('display', 'none')
        }
    };
    $scope.searchDevice = function (text, type) {
        if (type == 'accessory') {
            console.log("accessory")
            if (text.length > 0) {
                $http.get("/dash/getAccessories/" + text)
                    .success(function (res) {
                        console.log(res)
                        $scope.newDevices = res;
                        jQuery.noConflict();
                        $(".itemsDropdown").css('display', 'block')
                    })
            }
            else {
                $scope.newDevices = [];
                jQuery.noConflict();
                $(".itemsDropdown").css('display', 'none')
            }
        }
        else if (type == 'mobile') {
            if (text.length > 0) {
                $http.get("/dash/getMasterItems/" + text)
                    .success(function (res) {
                        $scope.newDevices = res;
                        jQuery.noConflict();
                        $(".itemsDropdown").css('display', 'block')
                    })
            }
            else {
                $scope.newDevices = [];
                jQuery.noConflict();
                $(".itemsDropdown").css('display', 'none')
            }
        }
        else if(type == 'items'){
            if(text.length>0){
                $scope.newDevices = masterItems;
                jQuery.noConflict();
                $(".itemsDropdown").css('display', 'block')
            }
            else{
                $scope.newDevices = [];
                jQuery.noConflict();
                $(".itemsDropdown").css('display', 'none')
            }
        }
    };
    // ADD ENQUIRY FOR AIMRA
    $scope.openEnquiryModel = function () {
        $scope.EnquiryBranch = {};
        $scope.enquiry = [];
        $("#addEnquiry").modal('show');
        // console.log($scope.branchSelectedForEnquiry)
    };
    $scope.enquiry = [];
    $scope.deviceSelectedForEnquiry = function (device, branch) {
        $scope.tempEnquiry = {};
        $scope.tempEnquiry.itemname = device.DeviceName;
        $scope.tempEnquiry.id = device.itemID;
        $scope.tempEnquiry.branchCode = parseInt(branch);
        var date = new Date();
        $scope.tempEnquiry.date_added = [date.getFullYear(), (date.getMonth() + 1).padLeft(), date.getDate().padLeft()].join('-') + ' '
            + [date.getHours().padLeft(), date.getMinutes().padLeft(), date.getSeconds().padLeft()].join(':');
        jQuery.noConflict();
        $(".itemsDropdown").css('display', 'none');
        $('#deviceSearchBar').val('');
        $scope.enquiry.push($scope.tempEnquiry);
        console.log($scope.enquiry)
    };
    $scope.closeAddEnquiryModal = function () {
        $scope.enquiry = [];
        $scope.EnquiryBranch = {};
        jQuery.noConflict();
        $('#branchDropdown').val('');
        $('#deviceSearchBar').val('');
        $('#meetingdeviceSearchBar').val('');
        $(".itemsDropdown").css('display', 'none');
        $('#deviceSearchBar').val('');
    };
    // Add New Meeting
    $scope.newItemMeeting = [];
    $scope.itemSelectedForEnquiry = function(item){
        if($scope.newItemMeeting.indexOf(item) == -1){
            $scope.newItemMeeting.push(item);
            jQuery.noConflict();
            $('#meetingdeviceSearchBar').val('');
            $('#BBdeviceSearchBar').val('');
            console.log($scope.newItemMeeting);
            setTimeout(function()
            {
                $(".selectpicker").selectpicker('refresh',true)
            }, 500);
        }
        else{
            bootbox.alert(
                {
                    title: "ERROR",
                    message: "Already Item is added",
                    className: "text-center"
                });
        }
        jQuery.noConflict();
        $(".itemsDropdown").css('display', 'none')
        $('#deviceSearchBar').val('');
    }
    $scope.removeEnquiryItem = function (i) {
        $scope.newItemMeeting.splice(i, 1);
        setTimeout(function()
        {
            $(".selectpicker").selectpicker('refresh',true)
        }, 500);
    }
    $scope.addAddEnquiry = function (store, enquiry) {
        console.log(enquiry)
        $http.post("/dash/stores/add/enquiry/" + store.DealerID, enquiry)
            .success(function (response) {
                console.log("*** successfully enquiry added");
                if (response) {
                    if(!$scope.storesDisp.enquiry){
                        $scope.storesDisp.enquiry = enquiry ;
                        console.log($scope.storesDisp)
                    }
                    else{
                        for (var i = 0; i < enquiry.length; i++) {
                            $scope.storesDisp.enquiry.push(enquiry[i]);
                        }
                    }
                    $("#addEnquirySuccess").fadeIn(1000, function () {
                        $("#addEnquirySuccess").fadeOut(5000);
                    })
                }
                else {
                    $("#addEnquiryfailure").fadeIn(500, function () {
                        $("#addEnquiryfailure").fadeOut(5000);
                    })
                }
            })
    }
    $scope.removeEnquriy = function (i) {
        $scope.enquiry.splice(i, 1)
    }
    $scope.expenseTotal = function(amt){
        if(amt.length){
            amt = amt.reduce(function(prev, curr){
                return (Number(prev) || 0) + (Number(curr) || 0);
            });
            return amt
        }
        else{
            return amt = 0
        }
    }
    // .......
    //     Get PJP for a salesperson
    // .........
    $scope.selectedCustomers = [];
    $scope.selectedWeek = [];
    $scope.selectedSalesperson = [];
    $scope.toggle = function (item, list) {
        var idx = list.indexOf(item);
        if (idx > -1) {
            list.splice(idx, 1);
        }
        else {
            list.push(item);
        }
    };
    $scope.exists = function (item, list) {
        return list.indexOf(item) > -1;
    };
    $scope.beatSearchText = {};
    $scope.querySearch =function(query) {
        var pjpresults =  $filter('filter')($scope.beats, query);
        console.log('results',pjpresults)
        return pjpresults;
    }
    // $scope.salesSearchText = '';
    $scope.querySalespersonSearch =function(query) {
        var results =  $filter('filter')($scope.roleSalesrep, query);
        console.log('results222',results)
        console.log('allPjp',$scope.allPjp)
        return results;
    }
    $scope.stockistSearchText = '';
    $scope.queryStockistSearch =function(query) {
        var results =  $filter('filter')($scope.allStockistFromDealer, query);
        console.log('allStockistFromDealer',$scope.allStockistFromDealer)
        // console.log('allPjp',$scope.allPjp)
        return results;
    }
    $scope.selectedBeatRow = null;
    $scope.selectedsalesperson = '';
    $scope.filteredBeats = [];
    $scope.selectedBeat='';
    // $scope.isBeatDisabled = true
    $scope.selectedDealer = [];
    $scope.beatSalesPerson = [];
    $scope.pjpBeatId = '';
    $scope.fetchSalesperson = function(value,index) {
        $scope.DistanceCalculate = [];
        $scope.beatDistance = null;
        $scope.beatDistance = 0;
        $scope.selectedBeat = value;
        $scope.selectedBeatRow = index;
        $scope.showPjpMap = false;
        $scope.selectedDealer = value.beat;
        $scope.diaplayEditIcon = true
        $scope.pjpBeatId = value.beatId;
        var result = $scope.allPjp.filter(
            function(items){return items.beatId == value.beatId})
        $scope.beatSalesPerson = result;
        console.log('$scope.beatSalesPerson ',$scope.beatSalesPerson )
        console.log('value.beat ',value.beat )
        $scope.renderPjpMap(value.beat,'map_PJP')
        $scope.pjpSearch.searchDealerByCity = '';
        $scope.pjpSearch.searchDealerByArea = '';
        $scope.beatSearchText.salesSearchText = '';
        $scope.stockistSearchText = '';
    }
    $scope.selectedSalesChange =function(query,flag) {
        console.log('selectedsSalesChange',query)
        $scope.customerVisible = [];
        // $scope.selectedCustomers = [];
        $scope.beatSearchText.searchtext = '';
        $scope.pjpSalesperson = query;
        if(query){
            if(flag == 'Salesperson'){
                $scope.filter.sales =query.sellerphone;
                $scope.selectedAreaCity.salesPerson = query.sellername;
                $scope.selectedAreaCity.flag = '';
                $scope.storeSearchFilter()
            }else if(flag == 'Stockist'){
                $scope.filter.sales =query.Stockist;
                $scope.selectedAreaCity.Stockist = query._id;
                $scope.storeSearchFilter()
            }
            var result = $scope.allPjp.filter(
                function(items){return items.sellerPhone == query.sellerphone})
            // if(result.length){
            //     for(var i=0 ; i<$scope.beats.length;i++){
            //         for(var j=0; j<result.length;j++){
            //             if($scope.beats[i].beatId == result[j].beatId){
            //                 $scope.filteredBeats.push($scope.beats[i])
            //             }
            //         }
            //     }
            // }else{
            //     $scope.filteredBeats=[];
            //
            // }
        }
        // if($scope.filteredBeats.length){
        //     $scope.isBeatDisabled = false
        // }else{
        //     $scope.isBeatDisabled = true
        // }
        // $scope.selectedsalesperson = query;
    }
    $scope.createFilterFor =function(query) {
        var lowercaseQuery = query.toLowerCase();
        console.log('lowercaseQuery',lowercaseQuery)
        return lowercaseQuery
    }
    $scope.fetchBeatFromDashBoard = function(pjp){
        for(var i=0;i<$scope.displayBeat.length;i++){
            if(pjp.beatId == $scope.displayBeat[i].beatId){
                $scope.fetchSalesperson($scope.displayBeat[i],i);
            }
        }
    }
    $scope.choosebeat = {};
    $scope.choosebeat.switch = true;
    $scope.choosePjp = function(value){
        console.log('choosebeat.switch',value);
        $scope.newBeat.beatName = '';
        if(!value){
            $scope.createPjp();
            $scope.clearFilter(4);
            $scope.selectedAreaCity.flag='';
            $scope.beatSearchText.searchtext = '';
            $scope.selectedBeat = '';
        }
    }
    $scope.backToPjpList = function(){
        $scope.beatDistance = null;
        $scope.addPjpButton = true;
        $scope.addPjpDateView = false;
        $scope.selectedDealer=[];
        $scope.beatSalesPerson=[];
        $scope.diaplayEditIcon = false;
        $scope.selectedBeatRow = null;
        $scope.DistanceCalculate = [];
        $http.get("/dash/pjp/get/beats").success(function(response){
            $scope.renderPjpBeat(response);
            $http.get("/dash/getAllPjp").success(function(response){
                $scope.renderPjp(response);
                $scope.fetchBeatFromDashBoard($scope.selectedBeat);
            })
        })
    }
    $scope.addPjpDateView =false;
    $scope.createPjp = function(){
        console.log('createPjp');
        $scope.DistanceCalculate = [];
        $scope.beatDistance = null;
        $scope.addPjpDateView =false;
        $scope.addPjpButton = false;
        $scope.newPjpTab = 0;
        $scope.newPjpBeat = '';
        $scope.newBeat.beatName = '';
        $scope.pjpBeat = [];
        $scope.pjpSalesperson = null;
        $scope.beats = [];
        $scope.beatSearchText.searchtext='';
        // $scope.choosebeat.switch = true;
        $scope.createBeat();
        $scope.showPjpMap = true
        $scope.beatSalesPerson = [];
    }
    $scope.newBeat = {};
    $scope.createBeat = function(flag){
        $scope.pjpSearch.searchDealerByCity = '';
        $scope.pjpSearch.searchDealerByArea = '';
        $scope.stockistSearchText = '';
        $scope.clearSearchAreaCityBox();
        $scope.clearSearchAreaCityBox('Area');
        tempBeat = {};
        if(!flag){
            $scope.clearFilter(4);
        }
        $scope.selectedAreaCity.flag='';
        $scope.selectedAreaCity.salesPerson='';
        $scope.beatSearchText.salesSearchText = '';
        if($scope.pjpDealersByArea.length == 0 && $scope.pjpDealersByCity.length == 0){
            //console.log("Fetch dealers by Area and City")
            $http.get("/dash/pjp/customers")
                .success(function(response){
                    // console.log(response);
                    $scope.pjpDealersByArea = response.byArea;
                    $scope.pjpDealersByCity = response.byCity;
                })
        }
        $http.get("/dash/pjp/get/beats")
            .success(function(response) {
                $scope.renderPjpBeat();
            });
        // $scope.saveBeat(1,'continue');
        // $scope.addPjpDateView = true
        // if(beat == undefined || beat == ''){
        //     bootbox.alert({
        //         title : "ERROR",
        //         message : "Please enter a beat name",
        //         className : "text-center"
        //     })
        // }
        // else{
        //     $scope.pjpBeat =[];
        //     $scope.searchDealerBox=[];
        //     $scope.newPjpTab = 1;
        //     $scope.newPjpBeat = beat;
        //     askToSaveBeat = true;
        // }
    }
    $scope.pjpType = 'Create';
    $scope.pjpMinDate={};
    $scope.pjpMinDate.startDate = null;
    var tempPjp = '';
    $scope.assignPjp = function(beat,sales){
        console.log('assignPjp',beat)
        console.log('sales',sales)
        $scope.pjpMinDate.startDate = null;
        if(beat){
            tempBeat = beat;
            $scope.newPjpBeat = beat.beatName;
            $scope.newPjpTab = 2;
            $scope.addPjpDateView = true
            $scope.addPjpButton = false;
            $scope.pjpType = 'Create';
            $scope.selectedWeek = [];
            if(sales){
                $scope.salesSearchText = sales.sellerPhone;
                var results =  $filter('filter')($scope.roleSalesrep,  $scope.salesSearchText);
                console.log('results',results)
                $scope.selectedSalesChange(results[0]);
                $scope.pjpDateType = {};
                $scope.pjpDateType.group = sales.pjp_type;
                $scope.pjpType = 'edit';
                tempPjp = sales;
                if( $scope.pjpDateType.group == 'date'){
                    $scope.pjpDateType.date = new Date(sales.day);
                }else if($scope.pjpDateType.group == 'range'){
                    $scope.pjpDateType.startDate = new Date(sales.day.startDate);
                    var startDate = new Date(sales.day.startDate)
                    $scope.pjpMinDate.startDate = new Date(
                        startDate.getFullYear(),
                        startDate.getMonth(),
                        startDate.getDate());
                    console.log('$scope.pjpMinDate',$scope.pjpMinDate)
                    $scope.pjpDateType.endDate =new Date(sales.day.endDate);
                }else if($scope.pjpDateType.group == 'week'){
                    $scope.selectedWeek =sales.day.week;
                }else if($scope.pjpDateType.group == 'rangeweek'){
                    $scope.pjpDateType.startDate = new Date(sales.day.dateRange.startDate);
                    var startDate = new Date(sales.day.dateRange.startDate);
                    $scope.pjpMinDate.startDate = new Date(
                        startDate.getFullYear(),
                        startDate.getMonth(),
                        startDate.getDate());
                    $scope.pjpDateType.endDate =new Date(sales.day.dateRange.endDate);
                    $scope.selectedWeek =sales.day.week;
                    $scope.pjpDateType.group = 'range';
                }
            }else{
                $scope.beatSearchText.salesSearchText = '';
                $scope.pjpSalesperson = null;
                $scope.pjpDateType = {};
            }
        }
        else{
            if(!askToSaveBeat){
                $scope.newPjpTab = 2;
            }
            else{
                bootbox.alert({
                    title: 'ERROR',
                    message : 'Please save the Beat',
                    className : 'text-center'
                })
            }
        }
    }
    $scope.sortableOptions = {
        stop: function(e, ui) {
            // this callback has the changed model
            $scope.renderPjpMap($scope.pjpBeat,'map_CreatePJP')
            console.log('log sortable');
        }
    };
    $scope.pjpDailyList = ["Monday", "Tuesday", "Wednesday", "Thursday","Friday","Saturday","Sunday"];
    $scope.saveBeat = function(flag,flag2){
        if(!$scope.newBeat.beatName){
            bootbox.alert({
                title : "ERROR",
                message : "Please enter a beat name",
                className : "text-center"
            })
        }
        else{
            if(flag){        //save beat flag
                var tempObj = {};
                tempObj.beat = $scope.pjpBeat;
                tempObj.beatName = $scope.newBeat.beatName;
                var date = new Date();
                tempObj.date_added = [date.getFullYear(), (date.getMonth() + 1).padLeft(), date.getDate().padLeft()].join('-') + ' '
                    + [date.getHours().padLeft(), date.getMinutes().padLeft(), date.getSeconds().padLeft()].join(':');
                $http.post("/dash/pjp/beat/save", tempObj)
                    .success(function(response){
                        //console.log(response)
                        if(response){
                            toastr.success("Beat "+$scope.newBeat.beatName +" created successfully")
                            if(flag2){
                                $scope.addPjpDateView = true
                                $scope.addPjpButton = false;
                                $scope.assignPjp(response);
                            }else{
                                $scope.backToPjpList()
                            }
                        }
                        $scope.newPjpTab = 0;
                        $scope.clearFilter(4);
                        $scope.selectedAreaCity.flag='';
                        $scope.searchDealerBox=[];
                        $scope.pjpBeat = [];
                        $scope.newPjpTab = 1;
                        $scope.newPjpBeat = $scope.newBeat.beatName;
                    })
                askToSaveBeat = true;
            }
            else{
                var tempObj = {};
                tempObj.beat = $scope.pjpBeat;
                tempObj.id = $scope.beatDetails.beatId;
                $http.post("/dash/pjp/beat/edit", tempObj)
                    .success(function(response){
                        if(response){
                            toastr.success("Beat "+$scope.beatDetails.beatName +" Updated successfully")
                        }
                        $http.get("/dash/pjp/get/beats")
                            .success($scope.renderPjpBeat)
                        if(flag2){
                            $scope.addPjpDateView = true
                            $scope.addPjpButton = false;
                            $scope.assignPjp(response);
                        }else{
                            $scope.backToPjpList()
                        }
                        $scope.newPjpTab = 0;
                        $scope.clearFilter(4);
                        $scope.selectedAreaCity.flag='';
                        $scope.searchDealerBox=[];
                        $scope.newPjpTab = 1;
                        $scope.newPjpBeat = $scope.beatDetails.beatName;
                    })
            }
        }
    }
    // $scope.addDealerToBeatFromModal = function(flag, dealer,type){
    //     if(!flag){
    //         jQuery.noConflict();
    //         $("#beatDetails").modal('hide');
    //         if($scope.dealers.length == 0){
    //             $http.get("/dash/stores")
    //                 .success(function(res){
    //                     $scope.renderDealers(res);
    //                 });
    //         }
    //         $scope.trial39('');
    //         $("#pjp_dealerSearch").val(null);
    //         $("#showDealers").modal('show');
    //         $scope.pjpBeat = $scope.beatDetails.beat;
    //         $scope.AddDealerSearch = '';
    //         $scope.showPjpDealersSearch = false;
    //         console.log('')
    //     }
    //     else{
    //         if(!type)
    //         {
    //             var flag = true;
    //             for(var i=0; i< $scope.pjpBeat.length; i++){
    //                 if(dealer.Dealercode[0] == $scope.pjpBeat[i].Dealercode)
    //                     flag = false;
    //             }
    //             if(flag){
    //                 var tempObj = {};
    //                 tempObj._id = dealer._id;
    //                 tempObj.Address = dealer.Address[0];
    //                 tempObj.Address2 = dealer.Address2[0];
    //                 tempObj.Area = dealer.Area[0];
    //                 tempObj.City = dealer.City[0];
    //                 tempObj.DealerName = dealer.DealerName[0];
    //                 tempObj.Dealercode = dealer.Dealercode[0];
    //                 tempObj.GST = dealer.GST ? dealer.GST[0] : '';
    //                 tempObj.Phone = dealer.Phone[0];
    //                 tempObj.Seller = dealer.Seller[0] ? dealer.Seller[0] : '';
    //                 tempObj.SellerName = dealer.SellerName[0];
    //                 tempObj.Stockist = dealer.Stockist[0];
    //                 tempObj.StockistName = dealer.StockistName[0];
    //                 tempObj.cloudinaryURL = dealer.cloudinaryURL[0];
    //                 tempObj.latitude = Number(dealer.latitude[0]) || dealer.latitude;
    //                 tempObj.longitude = Number(dealer.longitude[0]) || dealer.longitude;
    //                 $http.put("/dash/pjp/add/customer", {'id': $scope.beatDetails.beatId, 'obj': tempObj})
    //                     .success(function(res){
    //                         if(res){
    //                             $http.get("/dash/pjp/get/beats")
    //                                 .success($scope.renderPjpBeat);
    //                             $("#showDealers").modal('hide');
    //                             bootbox.alert({
    //                                 title : 'SUCCESS',
    //                                 message : dealer.DealerName+' added to '+$scope.beatDetails.beatName,
    //                                 className : 'text-center'
    //                             })
    //                         }
    //                     })
    //             }
    //             else{
    //                 bootbox.alert({
    //                     title : 'Warning',
    //                     message : dealer.DealerName+' is already present. Please select another '+$scope.nav[2].tab,
    //                     className : 'text-center'
    //                 })
    //             }
    //         }else{
    //             var flag = true;
    //             for(var i=0; i< $scope.pjpBeat.length; i++){
    //                 if(dealer.Dealercode == $scope.pjpBeat[i].Dealercode)
    //                     flag = false;
    //             }
    //             if(flag){
    //                 var tempObj = {};
    //                 tempObj._id = dealer._id;
    //                 tempObj.Address = dealer.Address;
    //                 tempObj.Address2 = dealer.Address2;
    //                 tempObj.Area = dealer.Area;
    //                 tempObj.City = dealer.City;
    //                 tempObj.DealerName = dealer.DealerName;
    //                 tempObj.Dealercode = dealer.Dealercode;
    //                 tempObj.GST = dealer.GST;
    //                 tempObj.Phone = dealer.Phone;
    //                 tempObj.Seller = dealer.Seller ? dealer.Seller : '';
    //                 tempObj.SellerName = dealer.SellerName;
    //                 tempObj.Stockist = dealer.Stockist;
    //                 tempObj.StockistName = dealer.StockistName;
    //                 tempObj.cloudinaryURL = dealer.cloudinaryURL;
    //                 tempObj.latitude = Number(dealer.latitude) || dealer.latitude;
    //                 tempObj.longitude = Number(dealer.longitude) || dealer.longitude;
    //                 $http.put("/dash/pjp/add/customer", {'id': $scope.beatDetails.beatId, 'obj': tempObj})
    //                     .success(function(res){
    //                         if(res){
    //                             $http.get("/dash/pjp/get/beats")
    //                                 .success($scope.renderPjpBeat);
    //                             $("#showDealers").modal('hide');
    //                             bootbox.alert({
    //                                 title : 'SUCCESS',
    //                                 message : dealer.DealerName+' added to '+$scope.beatDetails.beatName,
    //                                 className : 'text-center'
    //                             })
    //                         }
    //                     })
    //             }
    //             else{
    //                 bootbox.alert({
    //                     title : 'Warning',
    //                     message : dealer.DealerName+' is already present. Please select another '+$scope.nav[2].tab,
    //                     className : 'text-center'
    //                 })
    //             }
    //         }
    //     }
    // }
    $scope.clearTextBox = function(){
        // console.log('entered')
        $scope.selectedAreaCity.flag='';
        $scope.selectedAreaCity.salesPerson='';
        $scope.beatSearchText.salesSearchText='';
        $scope.clearFilter(4);
        // $scope.displayDealerByArea = [];
        // $scope.searchDealerByArea = null;
        // $scope.displayDealerByCity = [];
        // $scope.searchDealerByCity = '';
        // console.log('$scope.searchDealerByArea',$scope.searchDealerByArea)
    }
    $scope.addDealerToBeatBySales = function(dealer, all){
        for(var i=0;i<$scope.serviceClients.length;i++)
        {
            var res=$scope.pjpBeat.indexOf($scope.serviceClients[i]);
            console.log('res',res);
            if(res == -1){
                $scope.pjpBeat.push($scope.serviceClients[i]);
            }else
            {
                bootbox.alert({
                    title : 'Warning',
                    message : $scope.serviceClients[i].DealerName+' is already present. Please select another '+$scope.nav[2].tab,
                    className : 'text-center'
                })
            }
            $scope.serviceClients[i].addedFlag=true;
        }
        $scope.renderPjpMap($scope.pjpBeat,'map_CreatePJP')
    }
    $scope.addDealerToBeat = function(dealer, all){
        //console.log(dealer);
        if(!all){
            //Add dealers one by one to a beat
            // jQuery.noConflict();
            // $(".dealerDropdown").css('display', 'none')
            // $("#pjpDealerSearch").val('');
            var flag = true;
            if($scope.pjpBeat.length)
            {
                for(var i=0; i< $scope.pjpBeat.length; i++){
                    if(dealer.Dealercode == $scope.pjpBeat[i].Dealercode)
                        flag = false;
                }
                if(flag){
                    if(!$scope.selectedAreaCity.flag){
                        for(var i=0; i< $scope.serviceClients.length; i++){
                            if(dealer.Dealercode == $scope.serviceClients[i].Dealercode){
                                $scope.serviceClients[i].addedFlag=true;
                            }
                        }
                    }else{
                        for(var i=0; i< $scope.dealersListForNewBeat.length; i++){
                            if(dealer.Dealercode == $scope.dealersListForNewBeat[i].Dealercode){
                                $scope.dealersListForNewBeat[i].addedFlag=true;
                            }
                        }
                    }
                    $scope.pjpBeat.push(dealer);
                }
                else{
                    bootbox.alert({
                        title : 'Warning',
                        message : dealer.DealerName+' is already present. Please select another '+$scope.nav[2].tab,
                        className : 'text-center'
                    })
                }
            }else{
                if(!$scope.selectedAreaCity.flag){
                    for(var i=0; i< $scope.serviceClients.length; i++){
                        if(dealer.Dealercode == $scope.serviceClients[i].Dealercode){
                            $scope.serviceClients[i].addedFlag=true;
                            // console.log('$scope.newDealers[',i, $scope.newDealers[i])
                        }
                    }
                }else{
                    for(var i=0; i< $scope.dealersListForNewBeat.length; i++){
                        if(dealer.Dealercode == $scope.dealersListForNewBeat[i].Dealercode){
                            $scope.dealersListForNewBeat[i].addedFlag=true;
                            // console.log('$scope.newDealers[',i, $scope.newDealers[i])
                        }
                    }
                }
                $scope.pjpBeat.push(dealer);
            }
            $scope.renderPjpMap($scope.pjpBeat,'map_CreatePJP')
        }
        else{
            //Add all dealers to beat from #addDealerToBeatByFilter modal
            // $scope.pjpBeat = $scope.dealersListForNewBeat;
            for(var i=0;i<$scope.dealersListForNewBeat.length;i++)
            {
                var res=$scope.pjpBeat.indexOf($scope.dealersListForNewBeat[i]);
                console.log('res',res);
                if(res == -1){
                    $scope.pjpBeat.push($scope.dealersListForNewBeat[i]);
                }else
                {
                    bootbox.alert({
                        title : 'Warning',
                        message : $scope.dealersListForNewBeat[i].DealerName+' is already present. Please select another '+$scope.nav[2].tab,
                        className : 'text-center'
                    })
                }
                $scope.dealersListForNewBeat[i].addedFlag=true;
            }
            $scope.renderPjpMap($scope.pjpBeat,'map_CreatePJP')
        }
    }
    $scope.clearSearchDealerBox = function() {
        $scope.searchDealerBox='';
        $scope.newDealers=[];
    }
    $scope.pjpSearch = {};
    $scope.clearSearchAreaCityBox = function(type) {
        console.log('type',type)
        if(type == 'Area'){
            $scope.displayDealerByArea = [];
            $scope.pjpSearch.searchDealerByArea = '';
        }else{
            $scope.displayDealerByCity = [];
            $scope.pjpSearch.searchDealerByCity = '';
        }
    }
    $scope.selectedAreaCity = {};
    $scope.addDealerToBeatByCategory = function(dealers){
        //console.log(dealers)
        // var dealer = dealers.dealer;
        //
        // $scope.pjpBeat = [];
        //
        // for(var i=0; i< dealer.length; i++){
        //     $scope.pjpBeat.push(dealer[i]);
        // }
        $scope.displayDealerByArea=[];
        $scope.selectedAreaCity.flag = dealers._id;
        $scope.selectedAreaCity.salesPerson = '';
        $scope.displayDealerByCity=[];
        $scope.dealersListForNewBeat = [];
        $scope.dealersListForNewBeat = dealers.dealer;
        for(var i=0; i< $scope.dealersListForNewBeat.length; i++)
        {
            $scope.dealersListForNewBeat[i].addedFlag=false;
        }
        if($scope.pjpBeat.length)
        {
            for(var i=0; i< $scope.dealersListForNewBeat.length; i++)
            {
                for(var j=0; j< $scope.pjpBeat.length; j++)
                {
                    if($scope.pjpBeat[j].Dealercode == $scope.dealersListForNewBeat[i].Dealercode)
                    {
                        $scope.dealersListForNewBeat[i].addedFlag=true;
                        // console.log('inside',$scope.serviceClients[i]);
                    }
                }
            }
        }
        // Array.prototype.push.apply($scope.selectedCustomers, $scope.dealersListForNewBeat);
        // console.log('$scope.selectedCustomers',$scope.selectedCustomers);
        // if($scope.selectedCustomers.length >20){
        //     $scope.customerVisible = $scope.selectedCustomers.slice(0, 20);
        // }else{
        //     $scope.customerVisible = $scope.selectedCustomers;
        // }
        $scope.pjp_beat_addDealerFlag = [];
        jQuery.noConflict();
        $('#searchDealerPjp').collapse('hide');
        $('#addDealerToBeatByFilter').modal('show');
    }
    $scope.displayPjpCustSearch = true;
    $scope.closePjpSearch = function(){
        $scope.dealerSearch.filter = "";
        $scope.displayPjpCustSearch = !$scope.displayPjpCustSearch;
        if($scope.displayPjpCustSearch){
            $scope.clearFilter(4);
        }
    }
    $scope.displayBeatSearch = true;
    $scope.closeBeatSearch = function(flag){
        $scope.displayBeatSearch= !$scope.displayBeatSearch
        if(flag){
            $scope.displayBeat = $scope.beats
        }
    }
    $scope.removeFromPjpBeat = function(dealer){
        var temp = $scope.pjpBeat;
        $scope.pjpBeat = [];
        for(var i=0; i< temp.length; i++){
            if(dealer.Dealercode != temp[i].Dealercode)
                $scope.pjpBeat.push(temp[i])
        }
        if(!$scope.selectedAreaCity.flag){
            for(var i=0; i< $scope.serviceClients.length; i++){
                if(dealer.Dealercode == $scope.serviceClients[i].Dealercode)
                    $scope.serviceClients[i].addedFlag=false;
            }
        }else{
            for(var i=0; i< $scope.dealersListForNewBeat.length; i++)
            {
                if(dealer.Dealercode == $scope.dealersListForNewBeat[i].Dealercode){
                    $scope.dealersListForNewBeat[i].addedFlag=false;
                }
            }
        }
        $scope.renderPjpMap($scope.pjpBeat,'map_CreatePJP')
    }
    // $scope.selectedAreaCity = '';
    $scope.checkPjpCustomer= function(){
        console.log('$scope.selectedAreaCity.flag',$scope.selectedAreaCity.flag)
        if($scope.pjpBeat.length)
        {
            for(var i=0; i< $scope.serviceClients.length; i++)
            {
                for(var j=0; j< $scope.pjpBeat.length; j++)
                {
                    if($scope.pjpBeat[j].Dealercode == $scope.serviceClients[i].Dealercode)
                    {
                        $scope.serviceClients[i].addedFlag=true;
                        // console.log('inside',$scope.serviceClients[i]);
                    }
                }
            }
        }else{
            for(var i=0; i< $scope.serviceClients.length; i++)
            {
                $scope.serviceClients[i].addedFlag=false;
            }
        }
    }
    $scope.pjpDateType = {
        group:1
    };
    var today = new Date();
    var day = today.getDay();
    var month = today.getMonth() + 1;
    var year = today.getUTCFullYear();
    var vm = this;
    vm.startDate = new Date();
    $scope.startAt  = new Date(year, month, day);
    // console.log('startAt', $scope.startAt)
    // $scope.endDate.setDate($scope.endDate.getDate() + 5);
    // $scope.pjpDateRange = {
    //     startDate: $scope.startDate,
    //     endDate:$scope.endDate
    // }
    // this.pjpRangestartDate = new Date();
    // this.endDate = new Date();
    // this.endDate.setDate(this.endDate.getDate() + 5);
    $scope.savePjp = function(day, person){
        //console.log(person);
        if(person != null && person != undefined && $scope.pjpDateType.group){
            var checkPjp = true;
            var pjpObj = {};
            var backToHome = true;
            if($scope.pjpDateType.group == 'date'){
                if(!$scope.pjpDateType.date){
                    checkPjp = false;
                    bootbox.alert({
                        title : 'ERROR',
                        message : 'Please select a valid Date',
                        className : 'text-center'
                    })
                }else{
                    pjpObj.day =  $scope.pjpDateType.date;
                    pjpObj.pjpType = $scope.pjpDateType.group
                }
            }else if($scope.pjpDateType.group == 'range'){
                if(!$scope.pjpDateType.startDate ||  !$scope.pjpDateType.endDate){
                    checkPjp = false;
                    bootbox.alert({
                        title : 'ERROR',
                        message : 'Please select a valid Date',
                        className : 'text-center'
                    })
                }else{
                    var dateRange = {
                        startDate:$scope.pjpDateType.startDate,
                        endDate:$scope.pjpDateType.endDate
                    };
                    if($scope.selectedWeek.length){
                        var dateRangeWeek = {
                            dateRange: dateRange,
                            week : $scope.selectedWeek,
                        };
                        pjpObj.day =  dateRangeWeek;
                        pjpObj.pjpType = 'rangeweek'
                    }else{
                        pjpObj.day =  dateRange;
                        pjpObj.pjpType = $scope.pjpDateType.group
                    }
                }
            }else if($scope.pjpDateType.group == 'week'){
                if(!$scope.selectedWeek.length){
                    checkPjp = false;
                    bootbox.alert({
                        title : 'ERROR',
                        message : 'Please select Day',
                        className : 'text-center'
                    })
                }else{
                    var week = {
                        week : $scope.selectedWeek,
                    };
                    pjpObj.day =  week;
                    pjpObj.pjpType = $scope.pjpDateType.group
                }
            }
            if(checkPjp){
                bootbox.confirm({
                    title: 'CONFIRM',
                    message: "Assign " + $scope.newPjpBeat + " to " + person.sellername + " ?",
                    className: 'text-center',
                    buttons: {
                        confirm: {
                            label: 'Assign'
                        }
                    },
                    callback: function (result) {
                        if(result){
                            pjpObj.beatId = tempBeat.beatId;
                            pjpObj.person = person;
                            var date = new Date();
                            pjpObj.date_added = [date.getFullYear(), (date.getMonth() + 1).padLeft(), date.getDate().padLeft()].join('-') + ' '
                                + [date.getHours().padLeft(), date.getMinutes().padLeft(), date.getSeconds().padLeft()].join(':');
                            var notifydate = '';
                            if(pjpObj.pjpType == 'date'){
                                notifydate = moment(pjpObj.day).format('LL');
                            }else if(pjpObj.pjpType == 'week'){
                                notifydate= "\""+ pjpObj.day.week.toString()+"\"";
                            }else if(pjpObj.pjpType == 'range'){
                                notifydate= moment(pjpObj.day.startDate).format("DD-MMM-YYYY") +' to '+ moment(pjpObj.day.endDate).format("DD-MMM-YYYY");
                            }else if(pjpObj.pjpType == 'rangeweek'){
                                notifydate = moment(pjpObj.day.startDate).format("DD-MMM-YYYY") +' to '+ moment(pjpObj.day.endDate).format("DD-MMM-YYYY") +'  '+"\""+ pjpObj.day.week.toString() +"\"";
                            }
                            //console.log(pjpObj)
                            if($scope.pjpType == 'edit'){
                                pjpObj.pjpId = tempPjp.pjpId;
                                $http.post("/dash/pjp/edit", pjpObj)
                                    .success(function (res) {
                                        //console.log(res)
                                        if(res){
                                            $scope.selectedWeek = [];
                                            $scope.diaplayEditIcon = false;
                                            $scope.selectedBeatRow = null;
                                            toastr.success($scope.newPjpBeat+" assigned to "+person.sellername+" for "+notifydate);
                                            if (backToHome) {
                                                $scope.backToPjpList();
                                            }
                                        }
                                        else{
                                            bootbox.alert({
                                                title : "ERROR",
                                                message : $scope.newPjpBeat+" is already assigned to "+person.sellername+" for "+notifydate,
                                                className : 'text-center'
                                            })
                                        }
                                    })
                            }else{
                                $http.post("/dash/pjp/assign", pjpObj)
                                    .success(function (res) {
                                        //console.log(res)
                                        if(res){
                                            $scope.diaplayEditIcon = false;
                                            $scope.selectedBeatRow =null;
                                            toastr.success($scope.newPjpBeat+" assigned to "+person.sellername+" for "+ notifydate);
                                            if (backToHome) {
                                                $scope.backToPjpList();
                                            }
                                        }
                                        else{
                                            bootbox.alert({
                                                title : "ERROR",
                                                message : $scope.newPjpBeat+" is already assigned to "+person.sellername+" for "+notifydate,
                                                className : 'text-center'
                                            })
                                        }
                                    })
                            }
                        }
                    }
                })
            }
        }
        else{
            if(!$scope.pjpDateType.group){
                bootbox.alert({
                    title : 'ERROR',
                    message : 'Please assign a Date',
                    className : 'text-center'
                })
            }else{
                bootbox.alert({
                    title : 'ERROR',
                    message : 'Please select a '+$scope.nav[2].display[6],
                    className : 'text-center'
                })
            }
        }
    }
    $scope.getBeatName = function(beatId){
        if($scope.beats){
            for(var i=0; i< $scope.beats.length; i++){
                if(beatId == $scope.beats[i].beatId)
                    return $scope.beats[i].beatName;
            }
        }
        return '';
    }
    $scope.removePjp = function(pjp){
        bootbox.confirm({
            title : 'CONFIRM',
            message : 'Are you sure?',
            className: 'text-center',
            buttons: {
                confirm: {
                    label : 'Delete'
                }
            },
            callback : function(result){
                if(result){
                    $http.delete("/dash/pjp/delete/"+pjp.pjpId)
                        .success(function(response){
                            $http.get("/dash/getAllPjp")
                                .success(function(response) {
                                    $scope.renderPjp(response);
                                    $scope.fetchSalesperson($scope.selectedBeat,$scope.selectedBeatRow)
                                });
                        })
                }
            }
        })
    }
    $scope.diaplayEditIcon = false;
    $scope.showBeatDetails = function(id,flag){
        console.log('$scope.beatDetails',$scope.beatDetails)
        console.log('id',id)
        if(id){
            for(var i=0; i< $scope.beats.length; i++){
                if(id == $scope.beats[i].beatId)
                    $scope.beatDetails = $scope.beats[i];
            }
            $scope.customerVisible = [];
            $scope.pjpBeat =  $scope.beatDetails.beat;
            $scope.newBeat.beatName = $scope.beatDetails.beatName;
            $scope.showPjpMap = false;
            $scope.diaplayMapIcon = true;
            if(flag){
                $scope.addPjpButton = false;
                // $scope.choosebeat.switch = false;
                $scope.beatSearchText.searchtext =$scope.beatDetails.beatName;
                $scope.createBeat('edit');
            }
            if($scope.beatDetails)
            {
                for(var i=0; i< $scope.serviceClients.length; i++)
                {
                    for(var j=0; j< $scope.pjpBeat.length; j++)
                    {
                        if($scope.pjpBeat[j].Dealercode == $scope.serviceClients[i].Dealercode)
                        {
                            $scope.serviceClients[i].addedFlag=true;
                        }
                    }
                }
            }
            $scope.renderPjpMap($scope.pjpBeat,'map_CreatePJP')
        }
        $scope.clearSearchAreaCityBox();
        $scope.clearSearchAreaCityBox('Area');
    }
    $scope.displayPjpDealers = function (){
        jQuery.noConflict();
        $("#beatDetails").modal('show');
    }
    $scope.removeDealerFromBeat = function(dealer, beat){
        //console.log(beat)
        if(beat.beat.length > 1){
            $http.get("/dash/pjp/beat/remove/dealer/"+beat.beatId+"/"+dealer.Dealercode)
                .success(function(response){
                    //console.log(response)
                    $http.get("/dash/pjp/get/beats")
                        .success(function(res){
                            $scope.beats = res;
                            $scope.showBeatDetails(beat.beatId);
                        })
                })
        }
        else{
            bootbox.alert({
                title : 'WARNING',
                message : 'One entry present in this beat. Please delete the entire Beat',
                className : 'text-center'
            })
        }
    }
    $scope.deleteBeat = function(beat){
        console.log(beat);
        bootbox.confirm({
            title : "CONFIRM",
            message : "Deleting a beat will result in removing all PJPs associated with the beat. Are you sure?",
            buttons: {
                confirm: {
                    label : 'Delete'
                }
            },
            callback : function(res){
                if(res){
                    $http.get("/dash/pjp/beat/remove/beat/"+beat.beatId+"/"+null)
                        .success(function(res){
                            //console.log(res)
                            $http.get("/dash/getAllPjp")
                                .success($scope.renderPjp);
                            $http.get("/dash/pjp/get/beats")
                                .success($scope.renderPjpBeat)
                            $scope.selectedBeatRow = null;
                            $scope.selectedDealer=[];
                            $scope.beatSalesPerson=[];
                            $scope.diaplayEditIcon = false;
                            // jQuery.noConflict();
                            // $("#beatDetails").modal('hide');
                        })
                }
            }
        })
    }
    $scope.editPjp = {};
    $scope.edit_updatePjp = function(pjp, pjpNewBeat, pjpNewDay){
        if(pjpNewBeat || pjpNewDay){
            var tempObj = {};
            tempObj.pjpId = pjp.pjpId;
            tempObj.beatId = pjpNewBeat ? pjpNewBeat.beatId : 0;
            tempObj.day = pjpNewDay ? pjpNewDay : '';
            tempObj.sellerPhone = pjp.sellerPhone;
            // console.log(tempObj);
            bootbox.confirm({
                title : 'CONFIRM',
                message : "Update PJP for "+pjp.sellerName+" ?",
                className : 'text-center',
                buttons: {
                    confirm: {
                        label : 'Update'
                    }
                },
                callback : function(result){
                    if(result){
                        $http.put("/dash/pjp/update", tempObj)
                            .success(function(res){
                                //console.log(res);
                                $scope.editPjp = {};
                                $http.get("/dash/getAllPjp")
                                    .success($scope.renderPjp);
                            })
                    }
                }
            })
        }
    }
    $scope.saveNavChange = function(newNav, nav){
        if(newNav != ''){
            bootbox.confirm({
                title : "Confirm",
                message : "Renaming "+nav.tab+" to "+newNav+". Are you sure?",
                className : "text-center",
                buttons: {
                    confirm: {
                        label : 'Rename'
                    }
                },
                callback : function(result){
                    if(result){
                        nav.tab = newNav;
                        nav.task = 'name';
                        $http.post("/dash/update/navTab", nav)
                            .success(function(res){
                                //console.log(res);
                                if(res){
                                    Settings.getNav(true, function(nav){
                                        $scope.renderNav(nav);
                                    })
                                }
                                else{
                                    console.log("Nav not updated")
                                }
                            })
                    }
                }
            })
        }
        else{
            bootbox.alert({
                title : "ERROR",
                message : "Enter a name for the tab",
                className : "text-center"
            })
        }
    }
    $scope.saveNavReportChange = function(newNav, nav){
        if(newNav != ''){
            bootbox.confirm({
                title : "Confirm",
                message : "Renaming "+nav.tabName+" to "+newNav+". Are you sure?",
                className : "text-center",
                buttons: {
                    confirm: {
                        label : 'Rename'
                    }
                },
                callback : function(result){
                    if(result){
                        nav.tab = newNav;
                        nav.task = 'report';
                        $http.post("/dash/update/navTab", nav)
                            .success(function(res){
                                //console.log(res);
                                if(res){
                                    Settings.getNav(true, function(nav){
                                        $scope.renderNav(nav);
                                    })
                                }
                                else{
                                    console.log("Nav not updated")
                                }
                            })
                    }
                }
            })
        }
        else{
            bootbox.alert({
                title : "ERROR",
                message : "Enter a name for the tab",
                className : "text-center"
            })
        }
    }
    $scope.toggleNavTab = function(nav, flag,value){
        nav.flag = value;
        nav.activated = flag;
        nav.task = 'toggle';
        $http.post("/dash/update/navTab", nav)
            .success(function(res){
                //console.log(res);
                if(res){
                    Settings.getNav(true, function(nav){
                        $scope.renderNav(nav);
                    })
                }
                else{
                    console.log("Nav not updated")
                }
            })
    }
    $scope.checkType = function(data) {return typeof data};
    // //Edit Supplier Details
    // var sellerPresent = false;
    $scope.editSupplierAddress = {};
    $scope.editSupplierDetails = function(supplier, type, newSupplier) {
        var sellerPresent = false;
        if (type == 'Phone') {
            if (!newSupplier) {
                bootbox.alert({
                    title: "ERROR",
                    message: "Invalid Phone Number",
                    className: "text-center"
                })
            }
            else {
                supplier.Phone = Number(newSupplier);
                $http.put("/dash/supplier/update/Phone", supplier)
                    .success(function (res) {
                        if(res){
                            jQuery.noConflict();
                            $('#supplierModal').modal('hide')
                            bootbox.alert({
                                title : 'SUCCESS',
                                message : 'Successfully changed '+$scope.nav[31].tab+'\'s Phone',
                                className : 'text-center'
                            })
                        }
                    })
            }
            $scope.editSupplier.Phone = false;
            $scope.editedSupplier.Phone = null;
        }
        if(type == 'email')
        {
            if(!newSupplier) {
                bootbox.alert({
                    title : "ERROR",
                    message : "Invalid entry",
                    className : "text-center"
                })
            }
            else{
                supplier.Email = newSupplier;
                $http.put("/dash/supplier/update/Email", supplier)
                    .success(function(res){
                        if(res){
                            jQuery.noConflict();
                            $('#supplierModal').modal('hide')
                            bootbox.alert({
                                title : 'SUCCESS',
                                message : 'Successfully changed '+$scope.nav[31].tab+'\'s Email',
                                className : 'text-center'
                            })
                        }
                    })
            }
            $scope.editSupplier.email = false;
            $scope.editedSupplier.email = null;
        }
        if(type == 'gst')
        {
            if(!newSupplier) {
                bootbox.alert({
                    title : "ERROR",
                    message : "Invalid entry",
                    className : "text-center"
                })
            }
            else{
                supplier.GST = newSupplier;
                $http.put("/dash/supplier/update/GST", supplier)
                    .success(function(res){
                        if(res){
                            jQuery.noConflict();
                            $('#supplierModal').modal('hide')
                            bootbox.alert({
                                title : 'SUCCESS',
                                message : 'Successfully changed '+$scope.nav[31].tab+'\'s GST',
                                className : 'text-center'
                            })
                        }
                    })
            }
            $scope.editSupplier.gst = false;
            $scope.editedSupplier.gst = null;
        }
        if(type == 'supplierName')
        {
            if(!newSupplier) {
                bootbox.alert({
                    title : "ERROR",
                    message : "Invalid entry",
                    className : "text-center"
                })
            }
            else{
                supplier.SupplierName = newSupplier;
                $http.put("/dash/supplier/update/SupplierName", supplier)
                    .success(function(res){
                        if(res){
                            jQuery.noConflict();
                            $('#supplierModal').modal('hide')
                            bootbox.alert({
                                title : 'SUCCESS',
                                message : 'Successfully changed '+$scope.nav[31].tab+'\'s SupplierName',
                                className : 'text-center'
                            })
                        }
                    })
            }
            $scope.editSupplier.gst = false;
            $scope.editedSupplier.gst = null;
        }
        /*if(type == 'customfields')
         {
         if(!newSupplier) {
         bootbox.alert({
         title : "ERROR",
         message : "Invalid entry",
         className : "text-center"
         })
         }
         else{
         supplier.Customfields = newSupplier;
         $http.put("/dash/supplier/update/Customfields", supplier)
         .success(function(res){
         if(res){
         jQuery.noConflict();
         $('#supplierModal').modal('hide')
         bootbox.alert({
         title : 'SUCCESS',
         message : 'Successfully changed '+$scope.nav[31].tab+'\'s Customfields',
         className : 'text-center'
         })
         }
         })
         }
         $scope.editSupplier.customfields = false;
         $scope.editedSupplier.customfields = null;
         }*/
        if(type == 'address'){
            console.log(" getting type.....");
            console.log(type);
            console.log($scope.editSupplierAddress);
            if($scope.editSupplierAddress.Address){
                supplier.Address = $scope.editSupplierAddress.Address ? $scope.editSupplierAddress.Address : '';
                supplier.Area = $scope.editSupplierAddress.Area ? $scope.editSupplierAddress.Area : '';
                supplier.City = $scope.editSupplierAddress.City ? $scope.editSupplierAddress.City : '';
                supplier.latitude = $scope.editSupplierAddress.latitude ? $scope.editSupplierAddress.latitude : '';
                supplier.longitude = $scope.editSupplierAddress.longitude ? $scope.editSupplierAddress.longitude : '';
                $http.put("/dash/supplier/update/address", supplier)
                    .success(function(res){
                        if(res){
                            jQuery.noConflict();
                            $('#supplierModal').modal('hide')
                            bootbox.alert({
                                title : 'SUCCESS',
                                message : 'Successfully changed '+$scope.nav[31].tab+'\'s address',
                                className : 'text-center'
                            })
                        }
                    })
            }
            else if(newSupplier != ''){
                console.log($scope.editSupplierAddress);
                console.log(newSupplier);
                supplier.Address = newSupplier ? newSupplier : '';
                supplier.Area =  '';
                supplier.City =  '';
                supplier.latitude =  '';
                supplier.longitude =  '';
                $http.put("/dash/supplier/update/address", supplier)
                    .success(function(res){
                        if(res){
                            jQuery.noConflict();
                            $('#supplierModal').modal('hide')
                            bootbox.alert({
                                title : 'SUCCESS',
                                message : 'Successfully changed '+$scope.nav[31].tab+'\'s address',
                                className : 'text-center'
                            })
                            $scope.refreshTransactions(31);
                        }
                    })
            }
            else{
                bootbox.alert({
                    title : "ERROR",
                    message : "Invalid Address",
                    className : "text-center"
                })
            }
            $scope.editSupplier.address = false;
            $scope.editedSupplier.address = null;
            $scope.editSupplierAddress = {};
        }
        if(type == 'Seller'){
            if(newSupplier == null){
                bootbox.alert({
                    title : "ERROR",
                    message : "Select a Salesperson",
                    className : "text-center"
                })
            }
            else{
                if(supplier.Seller == '' || !supplier.Seller){
                    supplier.Seller = newSupplier.sellerphone;
                    supplier.SellerName = newSupplier.sellername;
                    $http.put("/dash/supplier/update/Seller", supplier)
                        .success(function(res){
                            if(res){
                                jQuery.noConflict();
                                $('#supplierModal').modal('hide')
                                bootbox.alert({
                                    title : 'SUCCESS',
                                    message : 'Successfully assigned Salesperson',
                                    className : 'text-center'
                                })
                                $scope.refreshTransactions(31);
                            }
                        })
                }
                else if(typeof(supplier.Seller) == 'string' || typeof(supplier.Seller) == 'number'){
                    if(supplier.Seller != newSupplier.sellerphone+"" || supplier.Seller != newSupplier.sellerphone){
                        var temp = '';
                        temp = supplier.Seller;
                        supplier.Seller = [];
                        supplier.Seller.push(temp);
                        supplier.Seller.push(newSupplier.sellerphone);
                        supplier.SellerName += ', '+newSupplier.sellername;
                        //console.log(dealer);
                        $http.put("/dash/supplier/update/Seller", supplier)
                            .success(function(res){
                                if(res){
                                    jQuery.noConflict();
                                    $('#supplierModal').modal('hide')
                                    bootbox.alert({
                                        title : 'SUCCESS',
                                        message : 'Successfully assigned Salesperson',
                                        className : 'text-center'
                                    })
                                    $scope.refreshTransactions(31);
                                }
                            })
                    }
                    else{
                        bootbox.alert({
                            title : "ERROR",
                            message : "Salesperson is already assigned to this "+$scope.nav[31].tab,
                            className : "text-center"
                        })
                    }
                }
                else{
                    for(var i=0; i< supplier.Seller.length; i++){
                        if(supplier.Seller[i] == newSupplier.sellerphone+"" || supplier.Seller[i] == newSupplier.sellerphone)
                            sellerPresent = true;
                    }
                    if(!sellerPresent){
                        supplier.Seller.push(newSupplier.sellerphone);
                        supplier.SellerName += ', '+newSupplier.sellername;
                        $http.put("/dash/supplier/update/Seller", supplier)
                            .success(function(res){
                                if(res){
                                    jQuery.noConflict();
                                    $('#supplierModal').modal('hide')
                                    bootbox.alert({
                                        title : 'SUCCESS',
                                        message : 'Successfully assigned Salesperson',
                                        className : 'text-center'
                                    })
                                    $scope.refreshTransactions(31);
                                }
                            })
                    }
                    else{
                        bootbox.alert({
                            title : "ERROR",
                            message : "Salesperson is already assigned to this "+$scope.nav[31].tab,
                            className : "text-center"
                        })
                    }
                }
            }
            $scope.editSupplier.Seller = false;
            $scope.editSupplier.Seller = null;
        }
        if(type == 'Stockist'){
            if(newSupplier == null){
                bootbox.alert({
                    title : "ERROR",
                    message : "Select a Stockist",
                    className : "text-center"
                })
            }
            else{
                console.log(supplier.Stockist);
                if(supplier.Stockist == null){
                    supplier.Stockist = newSupplier.Stockist+"";
                    supplier.StockistName = newSupplier.StockistName;
                    $http.put("/dash/supplier/update/Stockist", supplier)
                        .success(function(res){
                            if(res){
                                jQuery.noConflict();
                                $('#supplierModal').modal('hide')
                                bootbox.alert({
                                    title : 'SUCCESS',
                                    message : 'Successfully assigned Stockist',
                                    className : 'text-center'
                                })
                                $scope.refreshTransactions(31);
                            }
                        })
                }
                else if(typeof(supplier.Stockist) == 'string'){
                    if(supplier.Stockist != newSupplier.Stockist+""){
                        var temp = '';
                        temp = supplier.Stockist;
                        supplier.Stockist = [];
                        supplier.Stockist.push(temp);
                        supplier.Stockist.push(newSupplier.Stockist+"");
                        supplier.StockistName += ', '+newSupplier.StockistName;
                        $http.put("/dash/supplier/update/Stockist", supplier)
                            .success(function(res){
                                if(res){
                                    jQuery.noConflict();
                                    $('#supplierModal').modal('hide')
                                    bootbox.alert({
                                        title : 'SUCCESS',
                                        message : 'Successfully assigned Stockist',
                                        className : 'text-center'
                                    })
                                    $scope.refreshTransactions(31);
                                }
                            })
                    }
                    else{
                        bootbox.alert({
                            title : "ERROR",
                            message : "Stockist is already assigned to this "+$scope.nav[31].tab,
                            className : "text-center"
                        })
                    }
                }
                else{
                    for(var i=0; i< supplier.Stockist.length; i++){
                        if(supplier.Stockist[i] == newSupplier.Stockist+"")
                            sellerPresent = true;
                    }
                    if(!sellerPresent){
                        supplier.Stockist.push(newSupplier.Stockist+"");
                        supplier.StockistName += ', '+newSupplier.StockistName;
                        $http.put("/dash/supplier/update/Stockist", supplier)
                            .success(function(res){
                                if(res){
                                    jQuery.noConflict();
                                    $('#supplierModal').modal('hide')
                                    bootbox.alert({
                                        title : 'SUCCESS',
                                        message : 'Successfully assigned Stockist',
                                        className : 'text-center'
                                    })
                                    $scope.refreshTransactions(31);
                                }
                            })
                    }
                    else{
                        bootbox.alert({
                            title : "ERROR",
                            message : "Stockist is already assigned to this "+$scope.nav[31].tab,
                            className : "text-center"
                        })
                    }
                }
            }
            $scope.editSupplier.Stockist = false;
            $scope.editedSupplier.StockistNumber = null;
        }
    }
    $scope.displaySalesperson = [];
    $scope.searchSalesperson= function (value,role){
        $scope.dropDownHide = false;
        var body = {};
        body.role = role;
        body.text = value;
        $scope.interAssetTransfer = {};
        $scope.interAssetTransfer.receiverId = '';
        $scope.interAssetTransfer.receiverName = '';
        if(!value){
            $scope.mapSellernameDisp = '';
            $scope.mapsFilter.seller = '';
            //$scope.filterMapTransaction();
            jQuery.noConflict();
            $(".salesrepDropdown").css('display', 'none')
        }
        if(value.length > 2 && role == ''){
            $http.post("/dash/getSellers/roleType",body)
                .success(function(response){
                    if(value){
                        $scope.displaySalesperson = response;
                        jQuery.noConflict();
                        $(".salesrepDropdown").css('display', 'block')
                    }else{
                        $scope.displaySalesperson = response;
                        jQuery.noConflict();
                        $(".salesrepDropdown").css('display', 'none')
                    }
                })
        }else if(role && value){
            $http.post("/dash/getSellers/roleType",body)
                .success(function(response){
                    if(value){
                        $scope.displaySalesperson = response;
                        jQuery.noConflict();
                        $(".salesrepDropdown").css('display', 'block')
                    }else{
                        $scope.displaySalesperson = response;
                        jQuery.noConflict();
                        $(".salesrepDropdown").css('display', 'none')
                    }
                })
        }
    }
    $scope.searchbranchByUser= function (value, branchCode) {
        $scope.dropDownHide = false;
        var body = {};
        body.text = value;
        body.branchCode = branchCode;
        if (!value) {
            $scope.mapSellernameDisp = '';
            $scope.mapsFilter.seller = '';
        }
        if (value.length || value.length > 2) {
            $http.post("/dash/getSellers/branchUser", body)
                .success(function (response) {
                    if (value) {
                        $scope.branchSellerUser = response;
                        jQuery.noConflict();
                        $(".salesrepDropdown").css('display', 'block')
                    } else {
                        $scope.branchSellerUser = response;
                        jQuery.noConflict();
                        $(".salesrepDropdown").css('display', 'none')
                    }
                })
        }
    }
    // $scope.editDealerAddress = {};
    //Remove Seller/ Stockist from dealer
    $scope.removeSellerFromDealer = function(dealer, person, type,index){
        if((type == 'salesperson' && index == 'seller') || dealer.Seller.length == 1 || dealer.Seller.length == 0 ){
            $scope.showDealerDetail.multipleSeller = false;
            $scope.storesDisp.multipleSeller = false;
            if(dealer.Seller2){
                dealer.Seller = dealer.Seller2;
                dealer.SellerName = dealer.Seller2Name;
            }else{
                dealer.Seller = "";
                dealer.SellerName = "";
            }
            if(dealer.Seller3){
                dealer.Seller2 = dealer.Seller3;
                dealer.Seller2Name = dealer.Seller3Name;
                dealer.Seller3 = "";
                dealer.Seller3Name = "";
            }else{
                dealer.Seller2 = "";
                dealer.Seller2Name = "";
            }
            $http.put("/dash/stores/update/Seller", dealer)
                .success(function(res){
                    if(res){
                        // jQuery.noConflict();
                        // $('#storeModal').modal('hide')
                        toastr.success('Successfully removed Salesperson');
                        //$scope.refreshTransactions(4);
                    }
                })
        }
        else if(type == 'salesperson' && index == 'seller2'){
            if(dealer.Seller3){
                dealer.Seller2 = dealer.Seller3;
                dealer.Seller2Name = dealer.Seller3Name;
                dealer.Seller3 = "";
                dealer.Seller3Name = "";
            }else{
                dealer.Seller2 = "";
                dealer.Seller2Name = "";
            }
            $http.put("/dash/stores/update/Seller", dealer)
                .success(function(res){
                    if(res){
                        // jQuery.noConflict();
                        // $('#storeModal').modal('hide')
                        toastr.success('Successfully removed Salesperson');
                        // $scope.refreshTransactions(4);
                    }
                })
        }else if(type == 'salesperson' && index == 'seller3'){
            dealer.Seller3 = "";
            dealer.Seller3Name = "";
            $http.put("/dash/stores/update/Seller", dealer)
                .success(function(res){
                    if(res){
                        // jQuery.noConflict();
                        // $('#storeModal').modal('hide')
                        toastr.success('Successfully removed Salesperson');
                        //$scope.refreshTransactions(4);
                    }
                })
        }else if(type == 'salesperson'){
            var tempObj = {};
            //console.log(person)
            tempObj.person = person;
            tempObj.Dealercode = dealer.Dealercode;
            var sellername = [];
            sellername = dealer.SellerName.split(', ');
            //console.log(sellername)
            var deletedSeller = $scope.getSellerName(person);
            //console.log(deletedSeller);
            var Arrayindex = sellername.indexOf(deletedSeller);
            tempObj.sellerName = '';
            for(var i=0; i< sellername.length; i++){
                if(i != Arrayindex){
                    if(i != sellername.length - 2)
                        tempObj.sellerName += sellername[i]+", ";
                    else if(i == sellername.length - 2)
                        tempObj.sellerName += sellername[i];
                }
            }
            dealer.SellerName = tempObj.sellerName;
            $http.put('/dash/stores/update/removeSeller', tempObj)
                .success(function(res){
                    if(res){
                        // jQuery.noConflict();
                        // $('#storeModal').modal('hide')
                        if($scope.showDealerDetail.Seller){
                            if(!$scope.showDealerDetail.Seller.length){
                                $scope.showDealerDetail.multipleSeller = false;
                                if(dealer.Seller2){
                                    dealer.Seller = dealer.Seller2;
                                    dealer.SellerName = dealer.Seller2Name;
                                }else{
                                    dealer.Seller = "";
                                    dealer.SellerName = "";
                                }
                                if(dealer.Seller3){
                                    dealer.Seller2 = dealer.Seller3;
                                    dealer.Seller2Name = dealer.Seller3Name;
                                    dealer.Seller3 = "";
                                    dealer.Seller3Name = "";
                                }else{
                                    dealer.Seller2 = "";
                                    dealer.Seller2Name = "";
                                }
                                $http.put("/dash/stores/update/Seller", dealer)
                                    .success(function(res){
                                        if(res){
                                            // jQuery.noConflict();
                                            // $('#storeModal').modal('hide')
                                            toastr.success('Successfully removed Salesperson');
                                            //$scope.refreshTransactions(4);
                                        }
                                    })
                            }else{
                                if($scope.showDealerDetail.Seller.length){
                                    $scope.showDealerDetail.Seller.splice(index , 1)
                                }
                                toastr.success('Successfully removed salesperson');
                                //$scope.refreshTransactions(4);
                            }
                        }else if($scope.storesDisp.Seller){
                            if(!$scope.storesDisp.Seller.length){
                                $scope.storesDisp.multipleSeller = false;
                                if(dealer.Seller2){
                                    dealer.Seller = dealer.Seller2;
                                    dealer.SellerName = dealer.Seller2Name;
                                }else{
                                    dealer.Seller = "";
                                    dealer.SellerName = "";
                                }
                                if(dealer.Seller3){
                                    dealer.Seller2 = dealer.Seller3;
                                    dealer.Seller2Name = dealer.Seller3Name;
                                    dealer.Seller3 = "";
                                    dealer.Seller3Name = "";
                                }else{
                                    dealer.Seller2 = "";
                                    dealer.Seller2Name = "";
                                }
                                $http.put("/dash/stores/update/Seller", dealer)
                                    .success(function(res){
                                        if(res){
                                            // jQuery.noConflict();
                                            // $('#storeModal').modal('hide')
                                            toastr.success('Successfully removed Salesperson');
                                            //$scope.refreshTransactions(4);
                                        }
                                    })
                            }else{
                                toastr.success('Successfully removed salesperson');
                                if($scope.storesDisp.Seller.length ){
                                    $scope.storesDisp.Seller.splice(index , 1)
                                }
                                //$scope.refreshTransactions(4);
                            }
                        }
                    }
                })
        }
        else if(type == 'stockist'){
            var tempObj = {};
            tempObj.person = person;
            tempObj.dealercode = dealer.Dealercode;
            $http.put('/dash/stores/update/removeStockist', tempObj)
                .success(function(res){
                    if(res){
                        jQuery.noConflict();
                        $('#storeModal').modal('hide')
                        bootbox.alert({
                            title : 'SUCCESS',
                            message : 'Successfully removed Stockist',
                            className : 'text-center'
                        })
                        //$scope.refreshTransactions(4);
                    }
                })
        }
    }
    $scope.removeSellerFromSupplier = function(supplier, person, type){
        if(type == 'salesperson'){
            var tempObj = {};
            //console.log(person)
            tempObj.person = person;
            tempObj.SupplierCode = supplier.SupplierCode;
            var sellername = [];
            sellername = supplier.SellerName.split(', ');
            //console.log(sellername)
            var deletedSeller = $scope.getSellerName(person);
            //console.log(deletedSeller);
            var index = sellername.indexOf(deletedSeller);
            tempObj.sellerName = '';
            for(var i=0; i< sellername.length; i++){
                if(i != index){
                    if(i != sellername.length - 2)
                        tempObj.sellerName += sellername[i]+", ";
                    else if(i == sellername.length - 2)
                        tempObj.sellerName += sellername[i];
                }
            }
            $http.put('/dash/supplier/update/removeSeller', tempObj)
                .success(function(res){
                    if(res){
                        jQuery.noConflict();
                        $('#supplierModal').modal('hide');
                        bootbox.alert({
                            title : 'SUCCESS',
                            message : 'Successfully removed salesperson',
                            className : 'text-center'
                        })
                        $scope.refreshTransactions(31);
                    }
                })
        }
        else if(type == 'stockist'){
            var tempObj = {};
            tempObj.person = person;
            tempObj.SupplierCode = supplier.SupplierCode;
            $http.put('/dash/supplier/update/removeStockist', tempObj)
                .success(function(res){
                    if(res){
                        jQuery.noConflict();
                        $('#supplierModal').modal('hide');
                        bootbox.alert({
                            title : 'SUCCESS',
                            message : 'Successfully removed Stockist',
                            className : 'text-center'
                        });
                        $scope.refreshTransactions(31);
                    }
                })
        }
    }
    //Filter subcategories based on Category selected
    $scope.filterBasedOnCategory=function(category,type){
        var tempCategory = [];
        for(var i=0;i< masterItems.length;i++){
            if(masterItems[i].Manufacturer == category){
                tempCategory.push(masterItems[i]);
            }
        }
        if(type == 'add'){
            $scope.addItemSubCategory = tempCategory.unique('subCategory');
            $scope.newItem.subCategory = 'DEFAULT' ;
            if($scope.itemsDisp){
                $scope.itemsDisp.itemSubCategories = tempCategory.unique('subCategory') ;
            }
        }
        else if (type == 'edit'){
            $scope.editedItem.subCategory = 'DEFAULT' ;
            if($scope.itemsDisp){
                $scope.itemsDisp.itemSubCategories = tempCategory.unique('subCategory') ;
            }
        }
        setTimeout(function(){
            $scope.$digest();
        }, 1000);
    }
    //Function to update PAYMENT ORDER STATUS from SETTINGS PAGE. Only by Admin
    $scope.editPaymentOrderStatusFromSettings = function(status, index){
        if(!status){
            bootbox.alert({
                title : "ERROR",
                message : "Please enter some text",
                className : "text-center"
            })
        }
        else{
            var statusObj = [];
            statusObj = $scope.nav[1].paymentstatus;
            statusObj[index] = status;
            $http.put("/dash/nav/order/payment/status", statusObj)
                .success(function(res){
                    if(res){
                        bootbox.alert({
                            title : 'SUCCESS',
                            message : 'Order status successfully updated',
                            className : 'text-center'
                        })
                        // $scope.orderEditForStatus[index].status = status;
                    }
                    else{
                        bootbox.alert({
                            title : 'Error',
                            message : 'Error while updating order status',
                            className : 'text-center'
                        })
                    }
                })
        }
    }
    $scope.editpurchaseOrderStatusFromSettings = function(status, index){
        if(status == undefined){
            bootbox.alert({
                title : "ERROR",
                message : "Please enter some text",
                className : "text-center"
            })
        }
        else{
            var statusObj = [];
            statusObj = $scope.nav[32].status;
            statusObj[index] = status;
            $http.put("/dash/nav/purchase/order/status", statusObj)
                .success(function(res){
                    if(res){
                        bootbox.alert({
                            title : 'SUCCESS',
                            message : 'Purchase Order status successfully updated',
                            className : 'text-center'
                        })
                        $scope.purchaseorderEditForStatus[index].status = status;
                        $http.put("/dash/settings/update/purchase/order/edit", $scope.purchaseorderEditForStatus)
                            .success(function(res){
                                //console.log(res);
                                $scope.purchaseorderEditForStatus = res;
                            })
                    }
                    else{
                        bootbox.alert({
                            title : 'Error',
                            message : 'Error while updating Purchase order status',
                            className : 'text-center'
                        })
                    }
                })
        }
    }
    $scope.itemDetails = {};
    $scope.getItemsInfo = function(item,index){
        // console.log(item)
        $scope.itemIndexFlag = index ;
        $scope.itemDetails = {};
        $scope.itemEdit = true ;
        $scope.itemEditInfo = true ;
        $scope.currentNavItem = 'Item Info';
        $scope.itemInventoryInfo = false ;
        $scope.itemCustomPriceInfo = false ;
        $scope.itemDetails = item ;
        if(item.cloudinaryURL){
            if(typeof(item.cloudinaryURL) == 'string'){
                var url = item.cloudinaryURL;
                $scope.itemDetails.cloudinaryURL = [];
                $scope.itemDetails.cloudinaryURL = [{'image' : url}];
            }
        }
        jQuery.noConflict();
        $('#uploadItemListImage').val(null);
        $scope.fetchOnlySubCatDropDown(item,'add');
        $scope.fetchOnlySubSubCatDropDown(item,'add');
        $scope.filterBasedOnCategory(item.Manufacturer,'add') ;
    }
    $scope.priceEdit = function(data,pricelist,index){
        // console.log(data)
        $http.put("/dash/item/edit/pricelist", data)
            .success(function(res){
                if(res){
                    $scope.priceEditFlag[index] = false ;
                    $scope.itemDetails.customPricelist[index] = data ;
                    $scope.items[$scope.itemIndexFlag][data.name]  = data.price
                    toastr.success("price updated Successfully");
                }
            })
    }
    $scope.priceChange = function(flag,data,index){
        if(flag == 'click'){
            $scope.newPrice[index] = angular.copy(data);
        }
        else if(flag == 'editPrice'){
            if(data == null || data == undefined){
                $scope.newPrice[index].status = false ;
            }else{
                $scope.newPrice[index].status = true ;
            }
        }
        else if(flag == 'editStatus'){
            if(!data){
                $scope.newPrice[index].price = null ;
            }else{
                $scope.newPrice[index].price = 0 ;
            }
        }
    }
    $scope.priceListFilter = function(data){
        if(data == 'master'){
            $scope.priceListfilter = false ;
            $scope.showItemFilter = false ;
        }else{
            $scope.itemSearch.priceList = data ;
            $scope.priceListfilter = true ;
            $scope.showItemFilter = true ;
        }
    }
    var storeTransactionsFromServer = {};
    // Get all transactions for a store
    $scope.getStoreTransaction = function(store){
        $scope.storeTransactions = {};
        $scope.transactionOfDealerName = '';
        $http.get("/dash/orders/stores/"+store.Dealercode)
            .success(function(res){
                //console.log(res);
                storeTransactionsFromServer = res;
                var allSellers = [];
                for(var i=0; i< res.length; i++)
                    allSellers.push({'sellername' : res[i].sellername[0]});
                $scope.storeUsers = allSellers.unique('sellername');
                //console.log($scope.storeUsers);
                $scope.filterStoreTransactions(res);
                $scope.transactionOfDealerName = store.DealerName;
                $scope.showDealerTransactions = false;
            })
    }
    var supplierTransactionsFromServer = {};
    $scope.getSupplierTransaction = function(supplier){
        $scope.supplierTransactions = {};
        $scope.transactionOfSupplierName = '';
        $http.get("/dash/purchase/orders/supplier/"+supplier.SupplierCode)
            .success(function(res){
                supplierTransactionsFromServer = res;
                var allSellers = [];
                for(var i=0; i< res.length; i++)
                    allSellers.push({'sellername' : res[i].sellername[0]});
                $scope.supplierUsers = allSellers.unique('sellername');
                //console.log($scope.supplierUsers);
                $scope.filterSupplierTransactions(res);
                $scope.transactionOfSupplierName = supplier.SupplierName;
                $scope.showSupplierTransactions = false;
            })
    }
    //Generic function to filter store transactions based on transaction type or Salesperson
    $scope.filterStoreTransactions = function(res){
        $scope.storeTransactions = {};
        $scope.storeTransactions.order = [];
        $scope.storeTransactions.viewOrder = true;
        $scope.storeTransactions.orderValue = 0;
        $scope.storeTransactions.payment = [];
        $scope.storeTransactions.viewPayment = false;
        $scope.storeTransactions.paymentValue = 0;
        $scope.storeTransactions.checkin = [];
        $scope.storeTransactions.viewCheckin = false;
        $scope.storeTransactions.meeting = [];
        $scope.storeTransactions.viewMeeting = false;
        var invoiceCount = 0;
        for(var i=0; i< res.length; i++){
            if(res[i].type[0] == 'Order')
                $scope.storeTransactions.order.push(res[i])
            if(res[i].type[0] == 'Payment' || res[i].itemcode[0] == 'XXX')
                $scope.storeTransactions.payment.push(res[i])
            if(res[i].type[0] == 'Check_In' || res[i].itemcode[0] == 'ZZZ')
                $scope.storeTransactions.checkin.push(res[i]);
            if(res[i].type[0] == 'Meeting' || res[i].itemcode[0] == 'WWW')
                $scope.storeTransactions.meeting.push(res[i]);
        }
        for(var i=0; i< $scope.storeTransactions.order.length; i++){
            $scope.storeTransactions.orderValue += Number($scope.storeTransactions.order[i].orderTotal_amount[0]);
        }
        for(var i=0; i< $scope.storeTransactions.payment.length; i++){
            $scope.storeTransactions.paymentValue += Number($scope.storeTransactions.payment[i].quantity[0]);
        }
        for(var i=0; i < $scope.storeTransactions.order.length; i++){
            for(var j=0; j< $scope.storeTransactions.order[i].invoice_number.length; j++)
            {
                if($scope.storeTransactions.order[i].invoice_number[j] != null && $scope.storeTransactions.order[i].invoice_number[j] != '')
                    invoiceCount = invoiceCount+1;
            }
        }
        $scope.invoiceCount = invoiceCount;
    }
    $scope.filterSupplierTransactions = function(res){
        $scope.supplierTransactions = {};
        $scope.supplierTransactions.order = [];
        $scope.supplierTransactions.viewOrder = true;
        $scope.supplierTransactions.orderValue = 0;
        $scope.supplierTransactions.payment = [];
        $scope.supplierTransactions.viewPayment = false;
        $scope.supplierTransactions.paymentValue = 0;
        $scope.supplierTransactions.checkin = [];
        $scope.supplierTransactions.viewCheckin = false;
        $scope.supplierTransactions.meeting = [];
        $scope.supplierTransactions.viewMeeting = false;
        var invoiceCount = 0;
        for(var i=0; i< res.length; i++){
            if(res[i].type[0] == 'PurchaseOrder')
                $scope.supplierTransactions.order.push(res[i])
            if(res[i].type[0] == 'Payment' || res[i].itemcode[0] == 'XXX')
                $scope.supplierTransactions.payment.push(res[i])
            if(res[i].type[0] == 'Check_In' || res[i].itemcode[0] == 'ZZZ')
                $scope.supplierTransactions.checkin.push(res[i]);
            if(res[i].type[0] == 'Meeting' || res[i].itemcode[0] == 'WWW')
                $scope.supplierTransactions.meeting.push(res[i]);
        }
        for(var i=0; i< $scope.supplierTransactions.order.length; i++){
            $scope.supplierTransactions.orderValue += Number($scope.supplierTransactions.order[i].orderTotal_amount[0]);
        }
        for(var i=0; i< $scope.supplierTransactions.payment.length; i++){
            $scope.supplierTransactions.paymentValue += Number($scope.supplierTransactions.payment[i].quantity[0]);
        }
        for(var i=0; i < $scope.supplierTransactions.order.length; i++){
            for(var j=0; j< $scope.supplierTransactions.order[i].invoice_number.length; j++)
            {
                if($scope.supplierTransactions.order[i].invoice_number[j] != null && $scope.supplierTransactions.order[i].invoice_number[j] != '')
                    invoiceCount = invoiceCount+1;
            }
        }
        $scope.invoiceCount = invoiceCount;
    }
    //Filter store transactions by SALESPERSON
    $scope.filterStoreTransactionBySalesperson = function(user){
        if(user != null){
            var userTransactions = [];
            for(var i=0; i< storeTransactionsFromServer.length; i++){
                if(user.sellername == storeTransactionsFromServer[i].sellername[0])
                    userTransactions.push(storeTransactionsFromServer[i]);
            }
            $scope.filterStoreTransactions(userTransactions);
        }
        else{
            $scope.filterStoreTransactions(storeTransactionsFromServer);
        }
    }
    $scope.filterSupplierTransactionBySalesperson = function(user){
        if(user != null){
            var userTransactions = [];
            for(var i=0; i< supplierTransactionsFromServer.length; i++){
                if(user.sellername == supplierTransactionsFromServer[i].sellername[0])
                    userTransactions.push(supplierTransactionsFromServer[i]);
            }
            $scope.filterSupplierTransactions(userTransactions);
        }
        else{
            $scope.filterSupplierTransactions(supplierTransactionsFromServer);
        }
    }
    //Change Store transaction type
    $scope.changeStoreTransactionType = function(tab){
        switch(tab){
            case 1 :
                $scope.storeTransactions.viewOrder = true;
                $scope.storeTransactions.viewPayment = false;
                $scope.storeTransactions.viewCheckin = false;
                $scope.storeTransactions.viewMeeting = false;
                $scope.storeTransactions.viewOrderInvoice = false;
                break;
            case 2:
                $scope.storeTransactions.viewOrder = false;
                $scope.storeTransactions.viewPayment = true;
                $scope.storeTransactions.viewCheckin = false;
                $scope.storeTransactions.viewMeeting = false;
                $scope.storeTransactions.viewOrderInvoice = false;
                break;
            case 3:
                $scope.storeTransactions.viewOrder = false;
                $scope.storeTransactions.viewPayment = false;
                $scope.storeTransactions.viewCheckin = true;
                $scope.storeTransactions.viewMeeting = false;
                $scope.storeTransactions.viewOrderInvoice = false;
                break;
            case 4:
                $scope.storeTransactions.viewOrder = false;
                $scope.storeTransactions.viewPayment = false;
                $scope.storeTransactions.viewCheckin = false;
                $scope.storeTransactions.viewMeeting = true;
                $scope.storeTransactions.viewOrderInvoice = false;
                break;
            case 5:
                $scope.storeTransactions.viewOrder = false;
                $scope.storeTransactions.viewPayment = false;
                $scope.storeTransactions.viewCheckin = false;
                $scope.storeTransactions.viewMeeting = false;
                $scope.storeTransactions.viewOrderInvoice = true;
                break;
        }
    }
    $scope.changeSupplierTransactionType = function(tab){
        switch(tab){
            case 1 :
                $scope.supplierTransactions.viewOrder = true;
                $scope.supplierTransactions.viewPayment = false;
                $scope.supplierTransactions.viewCheckin = false;
                $scope.supplierTransactions.viewMeeting = false;
                $scope.supplierTransactions.viewOrderInvoice = false;
                break;
            case 2:
                $scope.supplierTransactions.viewOrder = false;
                $scope.supplierTransactions.viewPayment = true;
                $scope.supplierTransactions.viewCheckin = false;
                $scope.supplierTransactions.viewMeeting = false;
                $scope.supplierTransactions.viewOrderInvoice = false;
                break;
            case 3:
                $scope.supplierTransactions.viewOrder = false;
                $scope.supplierTransactions.viewPayment = false;
                $scope.supplierTransactions.viewCheckin = true;
                $scope.supplierTransactions.viewMeeting = false;
                $scope.supplierTransactions.viewOrderInvoice = false;
                break;
            case 4:
                $scope.supplierTransactions.viewOrder = false;
                $scope.supplierTransactions.viewPayment = false;
                $scope.supplierTransactions.viewCheckin = false;
                $scope.supplierTransactions.viewMeeting = true;
                $scope.supplierTransactions.viewOrderInvoice = false;
                break;
            case 5:
                $scope.supplierTransactions.viewOrder = false;
                $scope.supplierTransactions.viewPayment = false;
                $scope.supplierTransactions.viewCheckin = false;
                $scope.supplierTransactions.viewMeeting = false;
                $scope.supplierTransactions.viewOrderInvoice = true;
                break;
        }
    }
    //Get item details based on ITEMCODE
    $scope.getItemDetails = function(id){
        $scope.report_itemDisp = {};
        var isAvailable = false;
        if($scope.applicationType == 'StoreJini'){
            for(var i = 0 ;i < $scope.inventory.length;i++){
                if($scope.inventory[i]._id == id){
                    if($scope.inventory[i].branchCode[0].item[0].type == 'mobile'){
                        $scope.report_itemDisp = $scope.inventory[i].branchCode[0].item[0].device ;
                        $scope.report_itemDisp.type = 'Mobile'
                    }
                    if($scope.inventory[i].branchCode[0].item[0].type == 'accessory'){
                        $scope.report_itemDisp = $scope.inventory[i].branchCode[0].item[0].accessory ;
                        $scope.report_itemDisp.type = 'Accessory'
                    }
                    // console.log($scope.report_itemDisp)
                    isAvailable = true;
                    jQuery.noConflict();
                    $('#reportItemDetailsModal').modal('show');
                    break;
                }
            }
        }
        else{
            //Check in local if available
            for(var i=0; i< $scope.items.length; i++){
                if($scope.items[i].itemCode == id){
                    $scope.report_itemDisp = $scope.items[i];
                    isAvailable = true;
                    jQuery.noConflict();
                    $('#reportItemDetailsModal').modal('show');
                    break;
                }
            }
            //Contact server to get item details if not available in local
            if(!isAvailable){
                $http.get("/dash/item/details/"+id)
                    .success(function(res){
                        $scope.report_itemDisp = res[0];
                        jQuery.noConflict();
                        $('#reportItemDetailsModal').modal('show');
                    })
            }
        }
    }
    $scope.inventoryBranch='';
    $scope.branchCustomers = [];
    $scope.branchSelected = function(){
        $scope.branchCustomers = [];
        $scope.inventoryBranch = '';
        // for(var i=0; i< $scope.inventoryDealer.length; i++){
        //     for(var j=0; j<$scope.allStockistFromDealer.length; j++){
        //         console.log('$scope.allStockistFromDealer[j]._id=-=-=>>',$scope.allStockistFromDealer[j]._id);
        //         if($scope.allStockistFromDealer[j].inventory_selected && ($scope.inventoryDealer[i].StockistName == $scope.allStockistFromDealer[j]._id)){
        //             $scope.branchCustomers.push($scope.inventoryDealer[i]);
        //             $scope.inventoryBranch += $scope.allStockistFromDealer[j]._id+", ";
        //         }
        //     }
        // }
        var selectedStockist = {};
        var stockistName = [];
        if($scope.allStockistFromDealer.length){
            for(var j=0; j<$scope.allStockistFromDealer.length; j++){
                if($scope.allStockistFromDealer[j].inventory_selected){
                    stockistName.push($scope.allStockistFromDealer[j]._id)
                }
            }
        }
        if(stockistName.length){
            $http.post("/dash/stores/stockist/selected", stockistName).success(function(res){
                if(res){
                    $scope.branchCustomers = res;
                    //$scope.inventoryDealer = res;
                }
            });
        }
    }
    $scope.customerSelected = [];
    $scope.itemsSelected = [];
    $scope.selectAllCustomers = false;
    $scope.selectAllItems = false;
    $scope.filterInventory = function(flag, all, value){
        //
        // Parameters ALL and VALUE will be used only when SELECT ALL is clicked
        //
        $scope.inventory = [];
        //Filter by customer
        if(flag){
            $scope.itemsSelected = [];
            $scope.selectAllItems = false;
            //Uncheck all selected item because customers are selected
            // for(var i=0; i< $scope.items.length; i++){
            //     $scope.items[i].inventory_selected = false;
            // }
            $scope.items.map(function(item){
                item.inventory_selected = false
            })
            if(all){ //SELECT ALL is clicked
                for(var i=0; i< $scope.branchCustomers.length; i++){
                    if(value) //SELECT ALL is true
                        $scope.branchCustomers[i].inventory_selected = true;
                    else //SELECT ALL is false
                        $scope.branchCustomers[i].inventory_selected = false;
                }
            }
            else{
                $scope.selectAllCustomers = false; //Uncheck SELECT ALL if indivaidual customers are selected.
            }
            var branchCust = {};
            branchCust.dealercode = [];
            var branchDealercode = {};
            if($scope.branchCustomers.length > 0){
                for(var i=0; i< $scope.branchCustomers.length; i++){
                    if($scope.branchCustomers[i].inventory_selected){
                        branchDealercode = $scope.branchCustomers[i].Dealercode;
                        branchCust.dealercode.push(branchDealercode);
                        // for(var j=0; j< masterInventory.length; j++){
                        //     if($scope.branchCustomers[i].inventory_selected){
                        //         console.log('scope.inventory',$scope.inventory)
                        //
                        //     }
                        // }
                    }
                }
                $scope.customerSelected = branchCust.dealercode;
                branchCust.viewLength = 0;
                branchCust.viewBy = initialViewBy;
                $http.post("/dash/inventory/rental",branchCust)
                    .success(function(res){
                        if(res){
                            //console.log('res',res);
                            $scope.inventory = res;
                        }
                    });
                $http.post("/dash/inventory/rental/count",branchCust)
                    .success(function(res){
                        if(res){
                            //console.log('res',res);
                            $scope.transactionCount(res,38);
                            $scope.inventory_rentalCount = res;
                        }
                    });
            }
        }
        //filter by items
        else{
            $scope.customerSelected = [];
            //Uncheck all selected customers because items are selected
            // for (var i=0; i< $scope.branchCustomers.length; i++){
            //     $scope.branchCustomers[i].inventory_selected = false;
            // }
            $scope.branchCustomers.map(function(branch){
                branch.inventory_selected = false;
            })
            if(all){ //SELECT ALL is clicked
                for(var i=0; i< $scope.items.length; i++){
                    if(value) //SELECT ALL is true
                        $scope.items[i].inventory_selected = true;
                    else //SELECT ALL is false
                        $scope.items[i].inventory_selected = false;
                }
            }
            else{
                $scope.selectAllItems = false; //Uncheck SELECT ALL if indivaidual customers are selected.
            }
            var branchCust = {};
            branchCust.itemCode = [];
            if($scope.items.length){
                for(var i=0; i< $scope.items.length; i++){
                    if($scope.items[i].inventory_selected){
                        branchCust.itemCode.push($scope.items[i].itemCode);
                    }
                }
            }
            $scope.itemsSelected = branchCust.itemCode;
            $http.post("/dash/inventory/rental",branchCust)
                .success(function(res){
                    if(res){
                        //console.log('res',res);
                        $scope.inventory = res;
                    }
                });
            $http.post("/dash/inventory/rental/count",branchCust)
                .success(function(res){
                    if(res){
                        //console.log('res',res);
                        $scope.transactionCount(res,38);
                        $scope.inventory_rentalCount = res;
                    }
                });
            // for(var i=0; i < $scope.items.length; i++){
            //     if($scope.items[i].inventory_selected){
            //         for(var j=0;j < masterInventory.length; j++){
            //             if((masterInventory[j].itemCode == $scope.items[i].itemCode) && (masterInventory[j].locationType == 'customer')){
            //                 $scope.inventory.push(masterInventory[j]);
            //             }
            //         }
            //     }
            // }
        }
        //$scope.loaded(13);
    }
    $scope.branchInventory = [];
    $scope.itemInventory = [];
    $scope.branchInventoryDetails = {};
    //View inventorytransactions for a BRANCH
    $scope.viewBranchInventory = function(obj, flag){
        if(!flag){ //When user clicks a branch
            //console.log(masterInventory)
            $scope.branchInventoryDetails.name = obj._id;
            $scope.branchInventory = [];
            var tempCustomerInventory = []; //Holds all inventory transactions of all customers
            var customerInventory = [];
            //
            // console.log(" temp Customer Inventory")
            // console.log(tempCustomerInventory);
            $http.get("/dash/inventory/branch/dealer/"+obj._id)
                .success(function (res) {
                    $scope.storeBrands = res;
                    $scope.branchInventory = res.branches;
                    tempCustomerInventory = res.customers;
                    for(var i=0; i< $scope.inventoryDealer.length; i++){
                        for(var j=0; j< tempCustomerInventory.length; j++){
                            if(($scope.inventoryDealer[i].Dealercode == tempCustomerInventory[j].location) && ($scope.inventoryDealer[i].StockistName == obj._id))
                                customerInventory.push(tempCustomerInventory[j]);
                        }
                    }
                    // console.log("Customer Inventory")
                    // console.log(customerInventory);
                    for(var i=0; i< $scope.branchInventory.length; i++){
                        $scope.branchInventory[i].customerStock = 0;
                        for(var j=0; j< customerInventory.length; j++){
                            if($scope.branchInventory[i].itemCode == customerInventory[j].itemCode){
                                $scope.branchInventory[i].customerStock += Number(customerInventory[j].Qty);
                            }
                        }
                    }
                    // console.log("Customer Stock")
                    // console.log($scope.branchInventory)
                    if($scope.branchInventory.length > 0){
                        jQuery.noConflict();
                        $('#branchInventoryModal').modal('show');
                    }
                    else{
                        bootbox.alert({
                            title : 'OOPS',
                            message : 'No inventory found for this branch.',
                            className : 'text-center'
                        })
                    }
                })
        }
        else{ //WHen user clicks an item
            $scope.itemInventory = [];
            $http.get("/dash/inventory/branch/items/"+obj.itemCode)
                .success(function (res) {
                    $scope.itemInventory = res;
                    if($scope.itemInventory.length > 0){
                        jQuery.noConflict();
                        $('#itemInventoryModal').modal('show');
                    }
                    else{
                        bootbox.alert({
                            title : 'OOPS',
                            message : 'No inventory found for this item.',
                            className : 'text-center'
                        })
                    }
                });
            // for(var i=0; i< masterInventory.length; i++){
            //     if(masterInventory[i].locationType == 'branch' && obj.itemCode == masterInventory[i].itemCode)
            //         $scope.itemInventory.push(masterInventory[i]);
            // }
        }
    }
    //Get dealer details based on DEALERCODE
    $scope.getDealerDetails = function(id){
        $scope.report_dealerDisp = {};
        var isAvailable = false;
        //Check in local
        for(var i=0; i< $scope.serviceClients.length; i++){
            if($scope.serviceClients[i].Dealercode == id){
                $scope.report_dealerDisp = $scope.serviceClients[i];
                isAvailable = true;
                jQuery.noConflict();
                $('#reportDealerDetailsModal').modal('show');
                break;
            }
        }
        //console.log($scope.report_dealerDisp);
        if(!isAvailable){
            $http.get("/dash/stores/"+id)
                .success(function(res){
                    //console.log(res);
                    $scope.report_dealerDisp = res ;
                    jQuery.noConflict();
                    $('#reportDealerDetailsModal').modal('show');
                })
        }
    }
    // Get lead details in reports for Aimra
    $scope.getLeadDetails = function(lead){
        $scope.leadDetails = lead ;
        jQuery.noConflict();
        $('#reportLeadDetailsModal').modal('show');
    }
    // Get incentive details in reports for Aimra
    $scope.getIncentiveDetails = function(incentive){
        $scope.incentiveDetails = incentive ;
        jQuery.noConflict();
        $('#reportIncentiveDetailsModal').modal('show');
    }
    /*
     Functions for Playlist  - Rhythmscape
     */
    //Apply item search Filter
    $scope.musicSearchFilter = function(){
        if($scope.itemSearch.filter == ''){
            bootbox.alert({
                title: 'Warning',
                message : "Please type text in search box"
            })
        }
        else{
            musicSearchObj.viewLength = 0;
            musicSearchObj.viewBy = initialViewBy;
            $scope.viewLength = 0;
            $scope.newViewBy = viewBy.items;
            $scope.store = [];
            if($scope.storesSearch){
                musicSearchObj.searchFor = $scope.storesSearch;
                musicSearchObj.searchBy = dealerSearchBy;
            }
            $http.post('/dash/items', musicSearchObj)
                .success($scope.renderItems);
            $http.post('/dash/item/count', musicSearchObj)
                .success(function(response){
                    $scope.transactionCount(response,2)
                });
            $scope.showItemFilter = true;
        }
    }
    //Playlist filter function
    $scope.playlistSearchFilter = function(playlistSearch){
        // if(storesSearch != ''){
        playlistSearchObj.viewLength = 0;
        playlistSearchObj.viewBy = initialViewBy;
        playlistSearchObj.searchFor = playlistSearch;
        playlistSearchObj.searchBy = playlistSearchBy;
        $scope.allPlaylists = [];
        $http.post("/dash/playlist", playlistSearchObj)
            .success(function(res)
            {
                console.log(res.length);
                $scope.allPlaylists = res;
            })
    }
    //Song filter function
    $scope.songsSearchFilter = function(songsSearch){
        console.log(songsSearch)
        // if(storesSearch != ''){
        songSearchObj.viewLength = 0;
        songSearchObj.viewBy = initialViewBy;
        songSearchObj.searchFor = songsSearch;
        songSearchObj.searchBy = songSearchBy;
        $scope.allSongs = [];
        $http.post("/dash/songs", songSearchObj)
            .success(function(res)
            {
                console.log(res.length);
                $scope.allSongs = res;
            })
    }
    $scope.playSearchFilter = function(songsSearch){
        console.log(songsSearch)
        // if(storesSearch != ''){
        songSearchObj.viewLength = 0;
        songSearchObj.viewBy = initialViewBy;
        songSearchObj.searchFor = songsSearch;
        songSearchObj.searchBy = songSearchBy;
        $scope.allSongs = [];
        $http.post("/dash/songs", songSearchObj)
            .success(function(res)
            {
                console.log(res.length);
                $scope.allSongs = res;
            })
    }
    $scope.brandSearchFilter = function(storesSearch){
        console.log("Brand Name : " + $scope.brandTabName)
        if(storesSearch == '')
        {
            $http.get("/dash/stores/"+$scope.brandTabName)
                .success(function (res) {
                    console.log(res);
                    $scope.storeBrands = res;
                })
        }
        else {
            // if(storesSearch != ''){
            dealerSearchObj.viewLength = 0;
            dealerSearchObj.viewBy = initialViewBy;
            dealerSearchObj.searchFor = storesSearch;
            dealerSearchObj.searchBy = dealerSearchBy;
            $scope.selectedStores = [];
            $scope.storeBrands = [];
            $http.post("/dash/stores", dealerSearchObj)
                .success(function (res) {
                    for (var i = 0; i <= res.length; i++) {
                        if (res[i].Category == $scope.brandTabName) {
                            console.log(i)
                            console.log(res[i]);
                            $scope.selectedStores.push(res[i].Dealercode);
                            $scope.storeBrands.push(res[i]);
                            $scope.value = true
                        }
                    }
                })
        }
    }
    //Function to open create playlist window
    $scope.getAudioFiles = function(){
        $scope.play = {};
        $scope.play.ID = '';
        $scope.play.bump = '';
        $scope.play.advert = '';
        $scope.previewPlay = [];
        $scope.play.english = '';
        $scope.play.hindi = '';
        $scope.play.kannada = '';
        $scope.play.telugu = '';
        $scope.play.tamil = '';
        $scope.play.malayalam = '';
        $scope.play.brand = '';
        $scope.play.punjabi = '';
        $scope.eng = false;
        $scope.hindi = false;
        $scope.kannada = false;
        $scope.tamil = false;
        $scope.telugu = false;
        $scope.malayalam = false;
        $scope.punjabi = false;
        $scope.playlist = {}
        $scope.playlist.playlist_name = '';
        $scope.playlist.playlist_id = '';
        $scope.playlist.description = '';
        $scope.playlist.date_added = new Date();
        $scope.playlistTagsTemp = [];
        $scope.playlistTags = [];
        $http.get("/dash/songs/")
            .success(function(res){
                //      console.log(res);
                $scope.allSongs = res;
            })
    };
    $scope.getAllBumpers = function(){
        $http.get("/dash/songsBumpers")
            .success(function(res){
                //console.log(res);
                $scope.allBumpers = res;
            })
    };
    $scope.getBumpersByBrand = function(id){
        // console.log(id)
        $http.get("/dash/bumpersByBrand/"+id)
            .success(function(res){
                //  console.log(res);
                $scope.bumpers = []
                $scope.bump = id;
                $scope.bumpersByBrand = res;
                if($scope.bumpersByBrand.length != 0){
                    jQuery.noConflict();
                    $('#bumpersModal').modal('show');
                }
                else{
                    $scope.bumpers = []
                    bootbox.alert({
                        title : 'ERROR',
                        message : "No Bumpers Found for the selected Brand!",
                        className : 'text-center'
                    });
                    return;
                }
            })
    }
    $scope.pushBumpers = function(id){
        //  console.log(id)
        if(id.selected == true){
            $scope.bumpers.push(id);
            //   console.log($scope.bumpers.length);
        }
        else if(id.selected == false){
            $scope.bumpers.pop(id)
        }
    }
    $scope.getAllAds = function(){
        $http.get("/dash/songsAds")
            .success(function(res){
                //console.log(res);
                $scope.allAds = res;
            })
    };
    $scope.getAdsByBrand = function(id){
        $http.get("/dash/adsByBrand/"+id)
            .success(function(res){
                //     console.log(res);
                $scope.adsByBrand = res;
                $scope.ads = []
                $scope.ad = id;
                if($scope.adsByBrand.length != 0){
                    jQuery.noConflict();
                    $('#adsModal').modal('show');
                }
                else{
                    $scope.ads = []
                    bootbox.alert({
                        title : 'ERROR',
                        message : "No Advertisements Found for the selected Brand!",
                        className : 'text-center'
                    });
                    return;
                }
            })
    }
    $scope.pushAds = function(songAds){
        if(songAds.selected == true){
            $scope.ads.push(songAds)
        }
        else if(songAds.selected == false){
            $scope.ads.pop(songAds)
        }
    }
    $scope.changeBrandsView = function(id, name){
        $scope.value = false;
        $scope.playlistDet = '';
        $scope.brandTabName = name;
        $scope.brandTabId = id;
        $scope.showBrands = true;
        $http.get("/dash/storesCategory/"+$scope.brandTabName)
            .success(function(res){
                console.log(res);
                $scope.storeBrands = res;
                $scope.storeBrandsCity = res;
            });
        if(id == 0){
            $scope.showBrands = false;
            $scope.reportTabName = "Home";
        }
    };
    $scope.languages = [];
    $scope.languages.push('English','Hindi','Kannada','Punjabi','Malayalam','Tamil','Telugu')
    $scope.previewSongs = [];
    $scope.previewPlaylist = function(){
        $scope.id = '';
        //   $scope.ads = [];
        $scope.song = [];
        //   $scope.bumpers = [];
        $scope.advertise = '';
        $scope.ID = '';
        $scope.bump = '';
        $scope.arr = [];
        var inc = 0;
        var incBumper = 0;
        var incAdd = 0;
        $scope.insert_array = []
        $scope.previewPlay = [];
        $scope.play.tag = $scope.playlistTagsTemp
        // console.log($scope.play)
        $http.post("/dash/createPlaylist/" , $scope.play)
            .success(function(res){
                // console.log(res);
                $scope.previewSongs = res;
                if($scope.playlist.playlist_name == ''){
                    bootbox.alert({
                        title : 'ERROR',
                        message : "Please enter the Playlist Name",
                        className : 'text-center'
                    });
                    return;
                }
                if($scope.bumpers.length == 0){
                    bootbox.alert({
                        title : 'ERROR',
                        message : "Please select Bumpers",
                        className : 'text-center'
                    });
                    return;
                }
                if($scope.play.ID == ''){
                    bootbox.alert({
                        title : 'ERROR',
                        message : "Please enter the Playlist Sequence",
                        className : 'text-center'
                    });
                    return;
                }
                else if($scope.previewSongs.length <= 1){
                    bootbox.alert({
                        title : 'ERROR',
                        message : "No Songs Found!",
                        className : 'text-center'
                    });
                    return;
                }
                for(var j=0;j<$scope.previewSongs.length;j++){
                    if($scope.previewSongs[j].ID){
                        var ID = parseInt($scope.previewSongs[j].ID);
                        //console.log(ID);
                        $scope.ID = ID;
                    }
                    /* if($scope.previewSongs[j].type == 'advertisement'){
                     $scope.ads.push($scope.previewSongs[j])
                     }*/
                    if($scope.previewSongs[j].type == 'songs'){
                        $scope.song.push($scope.previewSongs[j]);
                    }
                    /* if($scope.previewSongs[j].type == 'bumper'){
                     $scope.bumpers.push($scope.previewSongs[j]);
                     }*/
                    /*   console.log($scope.bumpers);
                     console.log($scope.ads);
                     console.log($scope.song)*/
                    if(j == $scope.previewSongs.length-1){
                        // console.log("last loop end");
                        for(var k=0; k<$scope.song.length; k++)
                        {
                            if(inc != $scope.song.length) {
                                if (incBumper == $scope.bumpers.length) {
                                    incBumper = 0;
                                }
                                if (incAdd == $scope.ads.length ) {
                                    incAdd = 0;
                                }
                                if($scope.bumpers.length){
                                    $scope.previewPlay.push($scope.bumpers[incBumper]);
                                }
                                if($scope.ads.length){
                                    $scope.previewPlay.push($scope.ads[incAdd]);
                                }
                                incBumper++;
                                incAdd++;
                            }
                            for (var l = 0; l < $scope.ID; l++) {
                                if(inc != $scope.song.length)
                                {
                                    $scope.previewPlay.push($scope.song[inc]);
                                    inc++;
                                }
                            }
                            if(k == $scope.song.length-1){
                                var preview = $scope.previewPlay
                                function Subscriber(value) {
                                    return{
                                        'brand' : value.brand,
                                        'category' : value.category,
                                        'language' : value.language,
                                        'license' : value.license,
                                        'selected' : value.selected,
                                        'sequence' : value.sequence,
                                        'date_added' : value.date_added,
                                        'song_Name' : value.song_Name,
                                        'song_URL' : value.song_URL,
                                        'song_id' : value.song_id,
                                        'tempo' : value.tempo,
                                        'type' :value.type,
                                        'unique_id' : value.index
                                    }
                                }
                                for(var g=0;g < preview.length; g++) {
                                    if(!preview[g].unique_id){
                                        delete preview[g]["_id"]
                                        var value = preview[g];
                                        var d = new Date();
                                        value.index = preview[g].song_id * Math.floor(Math.random() * d.getMilliseconds()) + g;
                                        var tempObj = Subscriber(value);
                                        //     console.log(tempObj);
                                        $scope.insert_array.push(tempObj);
                                    }
                                }
                                $scope.play.tag = ''
                            }
                        }
                    }
                }
            });
    };
    $scope.createPlaylist = function(flag){
        // $scope.playlist.playlist_name = ''
        //  console.log($scope.insert_array);
        $scope.unique_id = [];
        $scope.playlist.song = [];
        $scope.playlist.ID = $scope.ID;
        $scope.playlist.advertise = $scope.advertise;
        $scope.playlist.bumper = $scope.bump;
        $scope.playlist.updated_date = new Date();
        if(flag){
            var date = new Date().getTime();
            $scope.playlist.playlist_id = parseInt(date);
            for(var i=0;i<$scope.allPlaylists.length;i++){
                if($scope.playlist.playlist_name == $scope.allPlaylists[i].playlist_name){
                    bootbox.alert({
                        title : 'ERROR',
                        message : "Playlist Name Already exist",
                        className : 'text-center'
                    });
                    return;
                }
            }
            if($scope.playlist.playlist_name == '' || $scope.playlist.playlist_name == undefined || $scope.playlist.playlist_name == null){
                bootbox.alert({
                    title : 'ERROR',
                    message : "Please enter playlist name",
                    className : 'text-center'
                });
                return;
            }
            if($scope.ID == ''){
                bootbox.alert({
                    title : 'ERROR',
                    message : "Please enter Bumper/Advertisement sequence",
                    className : 'text-center'
                });
                return;
            }
            for(var j=0;j<$scope.insert_array.length;j++){
                $scope.playlist.song.push($scope.insert_array[j])
            }
            if($scope.playlist.song == ''){
                bootbox.alert({
                    title : 'ERROR',
                    message : "Please add songs to Playlist",
                    className : 'text-center'
                });
                return;
            }
            console.log($scope.playlist);
            $http.post("/dash/playlist/create" , $scope.playlist)
                .success(function(res){
                    if(res){
                        console.log("error");
                        console.log(res);
                        bootbox.alert({
                            title : 'ERROR',
                            message : "Couldn't create playlist. Please try again after a while or contact your Admin.",
                            className : 'text-center'
                        })
                    }
                    else{
                        console.log("success");
                        jQuery.noConflict();
                        $('#playlistModal').modal('hide');
                        console.log(res);
                        bootbox.alert({
                            title : 'SUCCESS',
                            message : "Successfully created Playlist.",
                            className : 'text-center'
                        });
                        $http.get("/dash/playlist")
                            .success($scope.renderPlaylists);
                        /*$scope.play.classic = '';
                         $scope.play.latest = '';*/
                        //   $scope.play.advertisement = ''
                        //   $scope.play.bumper = ''
                        $scope.play.bump = ''
                        $scope.play.advert = ''
                        $scope.play.high = '';
                        $scope.play.medium = '';
                        $scope.play.low = '';
                        $scope.play.english = '';
                        $scope.play.hindi = '';
                        $scope.play.kannada = '';
                        $scope.play.telugu = '';
                        $scope.play.tamil = '';
                        $scope.play.malayalam = '';
                        $scope.play.punjabi = '';
                        $scope.play.brand = '';
                        $scope.playlist.playlist_name = '';
                        $scope.insert_array = [];
                        $scope.play.ID = '';
                    }
                })
        }
        else{
            $scope.playlist = {};
        }
    }
    $scope.editPreview = function(){
        $scope.id = '';
        $scope.song = [];
        $scope.advertise = '';
        $scope.ID = '';
        $scope.bump = '';
        /*$scope.bumpers = [];
         $scope.ads = [];*/
        var inc = 0;
        var incBumper = 0;
        var incAdd = 0;
        $scope.insert_array = [];
        $scope.preview = [];
        $scope.playlist = {}
        $scope.playlist.playlist_name = ''
        console.log($scope.playSeq);
        $scope.play.tag = $scope.playlistTagsTemp
        if($scope.play.name){
            $scope.playlist.playlist_name = $scope.play.name;
        }
        else if($scope.play.name == '' ){
            console.log($scope.playlist.playlist_name);
        }
        $http.post("/dash/createPlaylist/" , $scope.play)
            .success(function(res){
                console.log("Preview songs api")
                $scope.previewSongs = res;
                for(var i=0;i<$scope.playSeq.length;i++){
                    if($scope.playSeq[i].type == 'songs'){
                        $scope.previewSongs.push($scope.playSeq[i]);
                    }
                    if($scope.bumpers.length < 1){
                        if($scope.playSeq[i].type == 'bumper'){
                            $scope.bumpers.push($scope.playSeq[i]);
                        }
                    }
                    if($scope.ads.length < 1){
                        if($scope.playSeq[i].type == 'advertisement'){
                            $scope.ads.push($scope.playSeq[i]);
                        }
                    }
                }
                $scope.playSeq = [];
                // console.log($scope.previewSongs);
                if($scope.playlist.playlist_name == ''){
                    bootbox.alert({
                        title : 'ERROR',
                        message : "Please enter the Playlist Name",
                        className : 'text-center'
                    });
                    return;
                }
                else if($scope.previewSongs.length <= 1){
                    bootbox.alert({
                        title : 'ERROR',
                        message : "No Songs Found!",
                        className : 'text-center'
                    });
                    return;
                }
                for(var j=0;j<$scope.previewSongs.length;j++){
                    if($scope.previewSongs[j].ID){
                        var ID = parseInt($scope.previewSongs[j].ID);
                        $scope.ID = ID;
                        //   console.log("id" + $scope.ID)
                    }
                    if($scope.previewSongs[j].type == 'songs'){
                        $scope.song.push($scope.previewSongs[j]);
                    }
                    if(j == $scope.previewSongs.length-1){
                        // console.log("last loop end");
                        for(var k=0; k<$scope.song.length; k++)
                        {
                            if(inc != $scope.song.length) {
                                if (incBumper == $scope.bumpers.length) {
                                    incBumper = 0;
                                }
                                if (incAdd == $scope.ads.length ) {
                                    incAdd = 0;
                                }
                                if($scope.bumpers.length){
                                    $scope.playSeq.push($scope.bumpers[incBumper]);
                                }
                                if($scope.ads.length){
                                    $scope.playSeq.push($scope.ads[incAdd]);
                                }
                                incBumper++;
                                incAdd++;
                            }
                            for (var l = 0; l < $scope.ID; l++) {
                                if(inc != $scope.song.length)
                                {
                                    $scope.playSeq.push($scope.song[inc]);
                                    inc++;
                                }
                            }
                            if(k == $scope.song.length-1){
                                // console.log($scope.playSeq);
                                var preview = $scope.playSeq;
                                function Subscriber(value) {
                                    return{
                                        'brand' : value.brand,
                                        'category' : value.category,
                                        'language' : value.language,
                                        'license' : value.license,
                                        'selected' : value.selected,
                                        'sequence' : value.sequence,
                                        'date_added' : value.date_added,
                                        'song_Name' : value.song_Name,
                                        'song_URL' : value.song_URL,
                                        'song_id' : value.song_id,
                                        'tempo' : value.tempo,
                                        'type' :value.type,
                                        'unique_id' : value.index
                                    }
                                }
                                for(var g=0;g < preview.length; g++) {
                                    if(!preview[g].hasOwnProperty('unique_id')){
                                        delete preview[g]["_id"]
                                        console.log("unique id not available")
                                        var value = preview[g];
                                        var d = new Date();
                                        value.index = preview[g].song_id * Math.floor(Math.random() * d.getMilliseconds()) + g;
                                        var tempObj = Subscriber(value);
                                        // console.log(tempObj);
                                        $scope.insert_array.push(tempObj);
                                    }
                                    else{
                                        console.log("unique id found");
                                        $scope.insert_array.push($scope.playSeq[g]);
                                    }
                                }
                                //  console.log($scope.insert_array);
                            }
                        }
                    }
                }
            })
    };
    $scope.regeneratePlaylist = function(flag){
        // $scope.playlist.playlist_name = ''
        console.log($scope.insert_array);
        $scope.playlist = {}
        $scope.playlist.song = [];
        console.log($scope.playlistDet);
        $scope.playlist.playlist_id = $scope.playlistDet[0].playlist_id
        //  $scope.playID = $scope.playlistDet[0].playlist_id
        $scope.playlist.ID = parseInt($scope.play.ID)
        $scope.playlist.playlist_name = $scope.play.name;
        $scope.playlist.updated_date = new Date();
        if(flag){
            for(var i=0;i<$scope.allPlaylists.length;i++){
                if($scope.playlist.playlist_id != $scope.allPlaylists[i].playlist_id){
                    if($scope.play.name == $scope.allPlaylists[i].playlist_name){
                        bootbox.alert({
                            title : 'ERROR',
                            message : "Playlist Name Already exist",
                            className : 'text-center'
                        });
                        return;
                    }
                }
            }
            if($scope.play.name == '' || $scope.play.name == undefined || $scope.play.name == null){
                bootbox.alert({
                    title : 'ERROR',
                    message : "Please enter playlist name",
                    className : 'text-center'
                });
                return;
            }
            if($scope.play.ID == ''){
                bootbox.alert({
                    title : 'ERROR',
                    message : "Please enter Bumper/Advertisement sequence",
                    className : 'text-center'
                });
                return;
            }
            for(var j=0;j<$scope.insert_array.length;j++){
                $scope.playlist.song.push($scope.insert_array[j])
            }
            if($scope.playlist.song == ''){
                bootbox.alert({
                    title : 'ERROR',
                    message : "Please add songs to Playlist",
                    className : 'text-center'
                });
                return;
            }
            console.log($scope.playlist);
            $http.put("/dash/playlist/edit" , $scope.playlist)
                .success(function(res){
                    if(res.n == 0){
                        console.log("error");
                        console.log(res);
                        bootbox.alert({
                            title : 'ERROR',
                            message : "Couldn't create playlist. Please try again after a while or contact your Admin.",
                            className : 'text-center'
                        })
                    }
                    else{
                        console.log("success");
                        jQuery.noConflict();
                        $('#editplaylistModal').modal('hide');
                        console.log(res);
                        bootbox.alert({
                            title : 'SUCCESS',
                            message : "Playlist Successfully Edited.",
                            className : 'text-center'
                        });
                        $http.get("/dash/playlist")
                            .success($scope.renderPlaylists);
                        $scope.play.classic = '';
                        $scope.play.latest = '';
                        $scope.play.high = '';
                        $scope.play.medium = '';
                        $scope.play.low = '';
                        $scope.play.english = '';
                        $scope.play.hindi = '';
                        $scope.play.kannada = '';
                        $scope.play.telugu = '';
                        $scope.play.tamil = '';
                        $scope.play.malayalam = '';
                        $scope.play.brand = '';
                        $scope.play.punjabi = '';
                        $scope.play.name = '';
                        $scope.play.bump = '';
                        $scope.play.advert = '';
                        $scope.insert_array = [];
                        $scope.play.ID = '';
                    }
                })
        }
        else{
            $scope.playlist = {};
        }
    }
    $scope.getPlaylistByID = function(id)
    {
        console.log("Get playlist details by Playlist ID")
        $scope.songsSearch = '';
        $scope.songList = ''
        $scope.playSeq = []
        $http.get("/dash/playlist/"+id)
            .success(function(res){
                //console.log(res);
                $scope.playlistDetails = res;
                if($scope.playlistDetails){
                    //    console.log($scope.playlistDetails[0].song)
                    $scope.playSeq = $scope.playlistDetails[0].song
                }
            })
    }
    $scope.searchPlaylistById = function(qtnval,i) {
        switch (i)
        {
            case  1 : {
                $scope.songsSearch = qtnval;
                $scope.playSeq = $filter('filter')($scope.tempSongList, qtnval);
                break;
            }
            case 2 : {
                $scope.playlistSearch = qtnval;
                $scope.allPlaylists = $filter('filter')($scope.tempPlaylistDet, qtnval);
                break;
            }
            default: {
                console.log("Changed default *******" + tab);
                break;
            }
        }
    }
    $scope.getPlaylistByStoreID = function(id) {
        console.log("Get Playlist details for each store")
        $scope.playlistSearch = '';
        $scope.value = true
        //   console.log(id);
        $scope.storeID = id
        $scope.playlistID = []
        $scope.playlistDet = ''
        $http.get("/dash/storePlaylist/"+id)
            .success(function(res){
                console.log(res);
                $scope.playlistlist = res;
                if($scope.playlistlist){
                    console.log(typeof $scope.playlistlist[0].playlist_id)
                    if(typeof $scope.playlistlist[0].playlist_id == 'object'){
                        $http.post("/dash/playlistStores/", $scope.playlistlist[0].playlist_id)
                            .success(function(res){
                                console.log(res);
                                $scope.playlistDet = res;
                            })
                    }
                    else{
                        //  console.log("not object")
                        $scope.playlistID.push($scope.playlistlist[0].playlist_id)
                        console.log($scope.playlistID)
                        $http.post("/dash/playlistStores/", $scope.playlistID)
                            .success(function(res){
                                //    console.log(res);
                                $scope.playlistDet = res;
                            })
                    }
                }
            })
    }
    $scope.addPlaylistStore = function(){
        console.log("assign playlist to store")
        $scope.playlistDet = ''
        $scope.obj = {}
        $scope.obj.IDs = '';
        $scope.obj.IDs = $scope.storeID;
        $scope.obj.storeIDs = [];
        $scope.obj.tags = []
        // $scope.obj.playlistIDs = []
        if(!$scope.storetags.length){
            $scope.obj.tags = ''
        }
        else{
            $scope.obj.tags = $scope.storetags[0].text
        }
        $scope.playlistIDs = ''
        console.log($scope.obj);
        if($scope.selectedStores != undefined){
            console.log("multiple stores assigning")
            for(var j=0;j<$scope.checkPlay.length;j++){
                if($scope.checkPlay[j] == true){
                    for(var i=0;i<$scope.allPlaylists.length;i++){
                        console.log($scope.allPlaylists[j].playlist_id)
                    }
                    $scope.obj.playlistIDs = Number($scope.allPlaylists[j].playlist_id)
                }
            }
            if($scope.obj.playlistIDs == ''){
                bootbox.alert({
                    title : 'ERROR',
                    message : "Please select playlist",
                    className : 'text-center'
                })
                return;
            }
            $http.put("/dash/multipleStore/playlist",$scope.obj)
                .success(function(res){
                    if(res.n == 0){
                        console.log(res)
                        bootbox.alert({
                            title : 'ERROR',
                            message : "Couldn't assign playlist. Please try again after a while or contact your Admin.",
                            className : 'text-center'
                        })
                    }
                    else{
                        console.log(res)
                        bootbox.alert({
                            title : 'SUCCESS',
                            message : "Successfully assigned Playlist to all the stores.",
                            className : 'text-center'
                        })
                    }
                    $http.get("/dash/storePlaylist/"+$scope.storeID)
                        .success(function(res){
                            console.log(res);
                            $scope.playlistlist = res;
                            if($scope.playlistlist){
                                console.log(typeof $scope.playlistlist[0].playlist_id)
                                if(typeof $scope.playlistlist[0].playlist_id == 'object'){
                                    $http.post("/dash/playlistStores/", $scope.playlistlist[0].playlist_id)
                                        .success(function(res){
                                            //     console.log(res);
                                            $scope.playlistDet = res;
                                        })
                                }
                                else{
                                    $scope.playlistID.push($scope.playlistlist[0].playlist_id)
                                    //   console.log($scope.playlistID)
                                    $http.post("/dash/playlistStores/", $scope.playlistlist[0].playlist_id)
                                        .success(function(res){
                                            //  console.log(res);
                                            $scope.playlistDet = res;
                                        })
                                }
                            }
                        })
                })
        }
        else{
            console.log("single store assign")
            for(var j=0;j<$scope.checkPlay.length;j++){
                if($scope.checkPlay[j] == true){
                    for(var i=0;i<$scope.allPlaylists.length;i++){
                        //  console.log($scope.allPlaylists[j].playlist_id)
                    }
                    $scope.obj.playlistIDs = Number($scope.allPlaylists[j].playlist_id)
                }
            }
            if($scope.obj.playlistIDs == ''){
                bootbox.alert({
                    title : 'ERROR',
                    message : "Please select playlist",
                    className : 'text-center'
                })
                return;
            }
            $http.put("/dash/store/playlist/",$scope.obj)
                .success(function(res){
                    if(res.n == 0){
                        console.log(res)
                        bootbox.alert({
                            title : 'ERROR',
                            message : "Couldn't assign playlist. Please try again after a while or contact your Admin.",
                            className : 'text-center'
                        })
                    }
                    else{
                        console.log(res)
                        bootbox.alert({
                            title : 'SUCCESS',
                            message : "Successfully assigned Playlist.",
                            className : 'text-center'
                        })
                    }
                    $http.get("/dash/storePlaylist/"+$scope.storeID)
                        .success(function(res){
                            //   console.log(res);
                            $scope.playlistlist = res;
                            if($scope.playlistlist){
                                console.log(typeof $scope.playlistlist[0].playlist_id)
                                if(typeof $scope.playlistlist[0].playlist_id == 'object'){
                                    $http.post("/dash/playlistStores/", $scope.playlistlist[0].playlist_id)
                                        .success(function(res){
                                            console.log(res);
                                            $scope.playlistDet = res;
                                        })
                                }
                                else{
                                    $scope.playlistID.push($scope.playlistlist[0].playlist_id)
                                    console.log($scope.playlistID)
                                    $http.post("/dash/playlistStores/", $scope.playlistlist[0].playlist_id)
                                        .success(function(res){
                                            //     console.log(res);
                                            $scope.playlistDet = res;
                                        })
                                }
                            }
                        })
                })
        }
    }
    $scope.deleteSong = function(id){
        // console.log(id)
        bootbox.confirm("Are you sure, you want to delete the song?", function(result){
            if(result) {
                $http.delete("/dash/songsDelete/" + id)
                    .success(function (response) {
                        // console.log(response)
                        $scope.getAudioFiles();
                        if(response.n == 0){
                            console.log(response)
                            bootbox.alert({
                                title : 'ERROR',
                                message : "Couldn't delete song. Please try again after a while or contact your Admin.",
                                className : 'text-center'
                            })
                        }
                        else{
                            //    console.log(response)
                            bootbox.alert({
                                title : 'SUCCESS',
                                message : "Successfully deleted Song.",
                                className : 'text-center'
                            })
                        }
                    });
            }
            else {
                console.log("Song deletion cancelled")
            }
        });
    }
    $scope.deleteAllSongs = function(){
        bootbox.confirm("Are you sure, you want to delete all songs?", function(result){
            if(result) {
                $http.delete("/dash/allSongsDelete")
                    .success(function (response) {
                        //  console.log(response)
                        $scope.getAudioFiles();
                        if(response.n == 0){
                            //  console.log(response)
                            bootbox.alert({
                                title : 'ERROR',
                                message : "Couldn't delete all songs. Please try again after a while or contact your Admin.",
                                className : 'text-center'
                            })
                        }
                        else{
                            console.log(response)
                            bootbox.alert({
                                title : 'SUCCESS',
                                message : "Successfully deleted all Songs.",
                                className : 'text-center'
                            })
                        }
                    });
            }
            else {
                console.log("Song deletion cancelled")
            }
        });
    }
    $scope.deletePlayer = function (id) {
        //  console.log(id)
        bootbox.confirm("Are you sure, you want to delete the Playlist?", function(result){
            if(result) {
                $http.delete("/dash/playlistDelete/" + id)
                    .success(function (response) {
                        //console.log(response)
                        if(response.n == 0){
                            console.log(response)
                            bootbox.alert({
                                title : 'ERROR',
                                message : "Couldn't delete playlist. Please try again after a while or contact your Admin.",
                                className : 'text-center'
                            })
                        }
                        else{
                            //  console.log(response)
                            bootbox.alert({
                                title : 'SUCCESS',
                                message : "Successfully deleted Playlist.",
                                className : 'text-center'
                            })
                            $http.get("/dash/playlist")
                                .success($scope.renderPlaylists);
                        }
                    });
            }
            else {
                console.log("Playlist deletion cancelled")
            }
        });
    }
    $scope.loadTags = function(query) {
        $scope.tags = [];
        // console.log("load tags")
        for(var i =0;i<$scope.allSongs.length;i++){
            console.log($scope.allSongs[i].tag)
            if($scope.allSongs[i].tag != ''){
                $scope.tags = $scope.allSongs[i].tag
            }
        }
        //   console.log($scope.tags)
        return $scope.tags;
    };
    $scope.playlistTagsTemp = []
    $scope.selectTag = function(tag,index,percent)
    {
        // console.log($scope.allSongs)
        // console.log($scope.tagArray)
        $scope.playlistTags[index] = {
            'name' : $scope.play.tagTemp,
            'percent' : percent[index]
        }
        // console.log($scope.playlistTags);
    }
    $scope.selectTag1 = function(tag,select)
    {
        //  console.log(tag);
        // console.log($scope.allSongs)
        $scope.tagArrayTemp = []
        for(var i=0; i<$scope.allSongs.length; i++)
        {
            if($scope.allSongs[i].tag)
            {
                console.log("Tags------->>>")
                for(var j=0; j<$scope.allSongs[i].tag.length; j++)
                {
                    // $scope.tagArray.push($scope.allSongs[i].tag[j])
                    if($scope.tagArrayTemp.includes($scope.allSongs[i].tag)){
                        console.log("data already exists");
                    }
                    else{
                        $scope.tagArrayTemp.push($scope.allSongs[i].tag[j])
                    }
                }
            }
            if(i == $scope.allSongs.length-1)
            {
                if(tag == '') {
                    $scope.tagArray = []
                }
                else {
                    $scope.tagArray = $filter('filter')($scope.tagArrayTemp, tag);
                }
            }
        }
        if(select == 'Selected')
        {
            if($scope.playlistTagsTemp.length != 0){
                for(var i=0;i<$scope.playlistTagsTemp.length;i++){
                    if($scope.playlistTagsTemp[i].name != tag){
                        $scope.playlistTagsTemp.push(
                            {
                                name : tag,
                                percent : ''
                            }
                        )
                    }
                    else{
                        console.log("data already exists")
                    }
                }
            }
            else{
                $scope.playlistTagsTemp.push(
                    {
                        name : tag,
                        percent : ''
                    }
                )
            }
            // console.log($scope.playlistTagsTemp);
            $scope.play.tag = ''
            $scope.play.tagTemp = tag
            $scope.tagArray = []
        }
        if(select == 'Remove'){
            /*  console.log("remove");
             console.log(tag);*/
            $scope.playlistTagsTemp.splice(tag,1);
            // $scope.play.tag1[tag] = '';
            // $scope.playlistTags.splice(tag,1);
        }
    }
    /*
     Fetch Playlist details while editing
     */
    $scope.getPlaylistID = function(id) {
        //  console.log(id);
        $scope.play = {};
        $scope.songDetails = '';
        $scope.playSeq = [];
        $scope.play.name = '';
        $scope.play.ID = '';
        $scope.play.bump = '';
        $scope.play.advert = '';
        $scope.eng = false;
        $scope.hindi = false;
        $scope.kannada = false;
        $scope.tamil = false;
        $scope.telugu = false;
        $scope.malayalam = false;
        $scope.punjabi = false;
        $scope.play.english = '';
        $scope.play.hindi = '';
        $scope.play.kannada = '';
        $scope.play.telugu = '';
        $scope.play.tamil = '';
        $scope.play.malayalam = '';
        $scope.play.brand = '';
        $scope.play.punjabi = '';
        $http.get("/dash/playlist/"+id)
            .success(function(res){
                console.log("Playlist Details Received")
                console.log(res);
                $scope.playlistDet = res;
                if($scope.playlistDet){
                    //  console.log($scope.playlistDet[0].song)
                    $scope.playSeq = $scope.playlistDet[0].song;
                    $scope.play.name = $scope.playlistDet[0].playlist_name;
                    $scope.play.ID = parseInt($scope.playlistDet[0].ID);
                    $scope.songDetails = $scope.playlistDet[0].song;
                    $scope.tempSongList = $scope.songDetails
                }
                else{
                    console.log("no playlist details found");
                }
            })
    }
    $scope.dropLan = function(){
        var options = [];
        jQuery.noConflict();
        $('.dropdown-menu a').on( 'click', function( event ) {
            var $target = $( event.currentTarget ),
                val = $target.attr( 'data-value' ),
                $inp = $target.find( 'input' ),
                idx;
            if ( ( idx = options.indexOf( val ) ) > -1 ) {
                options.splice( idx, 1 );
                setTimeout( function() { $inp.prop( 'checked', false ) }, 0);
                if(val == 'English'){
                    $scope.eng = false
                }
                else if(val == 'Hindi'){
                    $scope.hindi = false
                }
                else if(val == 'Tamil'){
                    $scope.tamil = false
                }
                else if(val == 'Telugu'){
                    $scope.telugu = false
                }
                else if(val == 'Punjabi'){
                    $scope.punjabi = false
                }
                else if(val == 'Kannada'){
                    $scope.kannada = false
                }
                else if(val == 'Malayalam'){
                    $scope.malayalam = false
                }
            } else {
                options.push( val );
                setTimeout( function() { $inp.prop( 'checked', true ) }, 0);
                if(val == 'English'){
                    $scope.eng = true
                }
                else if(val == 'Hindi'){
                    $scope.hindi = true
                }
                else if(val == 'Tamil'){
                    $scope.tamil = true
                }
                else if(val == 'Telugu'){
                    $scope.telugu = true
                }
                else if(val == 'Punjabi'){
                    $scope.punjabi = true
                }
                else if(val == 'Kannada'){
                    $scope.kannada = true
                }
                else if(val == 'Malayalam'){
                    $scope.malayalam = true
                }
            }
            $( event.target ).blur();
            console.log(options);
            /*   function checkValue(value,options){
             var status = 'Not exists';
             console.log(value);
             for(var i=0; i<options.length; i++){
             console.log(options[i])
             var name = options[i];
             if(name == value){
             console.log("inside")
             status = name;
             console.log(status);
             break;
             }
             }
             return status;
             }
             console.log("status : " + checkValue(val, options))*/
            return false;
        });
    }
    /*
     $scope.checkVal = function(value){
     var status = 'Not exist';
     console.log(value)
     console.log($scope.options)
     for(var i=0; i<$scope.options.length; i++){
     var name = $scope.options[i];
     if(name == value){
     status = 'Exist';
     break;
     }
     }
     return status;
     console.log("status : " + checkValue('English',$scope.options))
     }*/
    // $scope.loadTags();
    /*   $scope.uploadSong = function(){
     if($scope.category.latest == true){
     $scope.song.category = 'Latest'
     }
     else if($scope.category.classic == true){
     $scope.song.category = 'Classic'
     }
     else{
     $scope.song.category = ''
     }
     if($scope.tempo.high == true){
     $scope.song.tempo = 'High'
     }
     else if($scope.tempo.medium == true){
     $scope.song.tempo = 'Medium'
     }
     else if($scope.tempo.low == true){
     $scope.song.tempo = 'Low'
     }
     else{
     $scope.song.tempo = ''
     }
     console.log($scope.song)
     $http.post("/dash/songs/upload" , $scope.song)
     .success(function(res){
     if(res){
     console.log(res)
     bootbox.alert({
     title : 'ERROR',
     message : "Couldn't create playlist. Please try again after a while or contact your Admin.",
     className : 'text-center'
     })
     }
     else{
     console.log(res)
     bootbox.alert({
     title : 'SUCCESS',
     message : "Successfully created Playlist.",
     className : 'text-center'
     })
     }
     })
     }*/
    $scope.cancelTaxEdit = function(){
        $scope.editTaxSetting = false;
    }
    $scope.clearOtherTaxArray = function() {
        bootbox.confirm({
            title: 'Are You Sure?',
            message: 'You want to clear the Tax',
            className: 'text-center',
            callback: function (res) {
                if(res){
                    $scope.taxSetupName = '';
                    $scope.otherTaxArray = [];
                }
            }
        })
    }
    $scope.saveNewOtherTax = function(taxSetup, taxSetupName){
        if(taxSetup){
            if(taxSetup.length){
                bootbox.confirm({
                    title : 'CONFIRM',
                    message : 'Are you sure you want to save tax details of '+ taxSetupName +' ?',
                    className : 'text-center',
                    callback : function(res){
                        if(res){
                            var date = new Date();
                            // tax.cgst = tax.cgst ? tax.cgst : 0;
                            // tax.sgst = tax.sgst ? tax.sgst : 0;
                            // tax.igst = tax.igst ? tax.igst : 0;
                            var taxSetups = {};
                            taxSetups.username = $scope.user.username ? $scope.user.username : 'PORTAL ADMIN';
                            taxSetups.seller = $scope.user.sellerphone ? $scope.user.sellerphone : '';
                            taxSetups.date_added = [date.getFullYear(),(date.getMonth()+1).padLeft(), date.getDate().padLeft() ].join('-') + ' '
                                + [date.getHours().padLeft(), date.getMinutes().padLeft(), date.getSeconds().padLeft()].join (':');
                            taxSetups.taxSetupName = taxSetupName;
                            taxSetups.taxId = $scope.generateTaxId();
                            taxSetups.taxs = taxSetup;
                            if(taxSetups){
                                $http.post("/dash/tax/addNew", taxSetups)
                                    .success(function(response){
                                        //console.log(response);
                                        if(response){
                                            if(response.status){
                                                $scope.newTax = {};
                                                $scope.newOtherTax.setupName = '';
                                                $scope.taxSetupName = '';
                                                $http.get('/dash/tax/otherTax/getOnlyTax')
                                                    .success(function (response) {
                                                        if(response){
                                                            $scope.otherTax = response.taxSetup;
                                                        }
                                                    })
                                                $scope.otherTaxArray = [];
                                                toastr.success("Tax Added Successfully");
                                            }
                                            else{
                                                bootbox.alert({
                                                    title: 'ERROR',
                                                    message: 'Failed to save tax. Please try after sometime.',
                                                    className: 'text-center'
                                                })
                                            }
                                        }
                                    })
                            }
                        }
                    }
                })
            }
            else{
                bootbox.alert({
                    title: 'ERROR',
                    message: 'Please enter a tax name.',
                    className : 'text-center'
                })
            }
        }
        else{
            bootbox.alert({
                title: 'ERROR',
                message: 'You have not entered anything.',
                className : 'text-center'
            })
        }
    }
    $scope.deleteTaxsFromSettings = function(type, taxSetupName, taxes, index, taxDetail) {
        var message = '';
        if(type == 'taxSetup'){
            message = 'Are you sure you want to delete ' + taxSetupName + ' ?'
        }else {
            message = 'Are you sure you want to delete ' + taxes + ' ?'
        }
        bootbox.confirm({
            title: 'CONFIRM',
            message: message,
            className: 'text-center',
            callback: function (res) {
                if (res) {
                var obj = {};
                obj.type = type;
                obj.taxs = taxes;
                obj.taxSetupName = taxSetupName;
                obj.index = index+1;
                $http.put('/dash/tax/otherTax/delete', obj)
                    .success(function (respo) {
                        // console.log('respo',respo);
                        if(respo)
                        $http.get('/dash/tax/otherTax/getOnlyTax')
                            .success(function (taxs) {
                                    $http.put("/dash/item/update/tax/"+taxDetail.taxId, taxs)
                                        .success(function (taxes) {
                                            if(taxes){
                                                console.log('items taxes updated');
                                            }
                                        })
                                $scope.otherTax = taxs.taxSetup;
                            })
                    })
                }
            }
        })
    }
    $scope.editTaxSetting = false;
    $scope.showAddTax = true;
    $scope.addTaxName = [];
    $scope.addTaxValue = [];
    $scope.editTaxSave = function (taxSetupName, oldTax, newTaxName, newTaxValue, index, addNewTax, taxDetail) {
            bootbox.confirm({
                title: 'CONFIRM',
                message: 'Are you sure you want save?',
                className: 'text-center',
                callback: function (res) {
                    if (res) {
                        $scope.addTaxName[index] = '';
                        $scope.addTaxValue[index] = '';
                        if(addNewTax){
                            var obj = {};
                            obj.taxSetupName = taxSetupName;
                            obj.tax = oldTax;
                            obj.newTaxName = newTaxName;
                            obj.newTaxValue = newTaxValue;
                            obj.addNewTax = addNewTax || '';
                            // obj.taxId = $scope.generateTaxId();
                            obj.index = index;
                            obj.type = 'taxs';
                            var newTaxObj = {};
                            newTaxObj = {
                                'name': newTaxName,
                                'value': newTaxValue
                            }
                            obj.tax.push(newTaxObj);
                            $http.put('/dash/tax/otherTax/edit',obj)
                                .success(function(tax){
                                    $http.get('/dash/tax/otherTax/getOnlyTax')
                                        .success(function (taxes) {
                                            $scope.showAddTax = false;
                                            $http.put("/dash/item/update/tax/"+taxDetail.taxId, taxes)
                                                .success(function (taxes) {
                                                    if(taxes){
                                                        console.log('items taxes updated');
                                                    }
                                                })
                                            $scope.otherTax = taxes.taxSetup;
                                        })
                                })
                        }else{
                            if(taxSetupName && oldTax && newTaxName && (newTaxValue || (newTaxValue == 0))) {
                                var obj = {};
                                obj.taxSetupName = taxSetupName;
                                obj.oldTax = oldTax;
                                obj.newTaxName = newTaxName;
                                obj.newTaxValue = newTaxValue;
                                obj.addNewTax = addNewTax || '';
                                // obj.taxId = $scope.generateTaxId();
                                obj.index = index;
                                obj.type = 'taxs';
                                $http.put('/dash/tax/otherTax/edit',obj)
                                    .success(function(tax){
                                        $http.get('/dash/tax/otherTax/getOnlyTax')
                                            .success(function (taxes) {
                                                if(taxes)
                                                $http.put("/dash/item/update/tax/"+taxDetail.taxId, taxes)
                                                    .success(function (taxes) {
                                                        if(taxes){
                                                            console.log('items taxes updated');
                                                        }
                                                    })
                                                $scope.otherTax = taxes.taxSetup;
                                            })
                                    })
                            }else if(taxSetupName && oldTax && !newTaxName){
                                var obj = {};
                                obj.taxSetupName = taxSetupName;
                                obj.oldTax = oldTax;
                                obj.index = index;
                                obj.type = 'taxSetupName';
                                $http.put('/dash/tax/otherTax/edit',obj)
                                    .success(function(tax){
                                        if(tax){
                                            $http.get('/dash/tax/otherTax/getOnlyTax')
                                                .success(function (taxes) {
                                                    if(taxes){
                                                        $http.put("/dash/item/update/tax/"+taxDetail.taxId, taxes)
                                                            .success(function (taxUpdate) {
                                                                if(taxUpdate){
                                                                    console.log('items taxes updated');
                                                                }
                                                            })
                                                    }
                                                    $scope.otherTax = taxes.taxSetup;
                                                })
                                        }
                                    })
                            }
                        }
                    }
                }
            })
    }
    $scope.removepurchaseOrderStatus = function(status){
        var index = $scope.nav[32].status.indexOf(status);
        if(index != -1 && ($scope.nav[32].status.length > 1)){
            $scope.nav[32].status.splice(index, 1);
            $scope.purchaseorderEditForStatus.splice(index, 1);
            $http.put("/dash/nav/purchase/order/status", $scope.nav[32].status)
                .success(function(res){
                    $http.put("/dash/settings/update/purchase/order/edit", $scope.purchaseorderEditForStatus)
                        .success(function(res){
                            //console.log(res);
                            $scope.purchaseorderEditForStatus = res;
                        })
                })
        }
        else{
            bootbox.alert({
                title : 'ERROR',
                message : 'A minimum of one status has to be present.',
                className : 'text-center'
            })
        }
    }
    $scope.addPurchaseOrderStatus = function(status){
        if(status != '' && status != undefined){
            $scope.nav[32].status[$scope.nav[32].status.length] = status;
            $scope.purchaseorderEditForStatus[$scope.purchaseorderEditForStatus.length] = {'status' : status, 'editable' : false};
            $http.put("/dash/nav/purchase/order/status", $scope.nav[32].status)
                .success(function(res){
                    $http.put("/dash/settings/update/purchase/order/edit", $scope.purchaseorderEditForStatus)
                        .success(function(res){
                            //console.log(res);
                            $scope.purchaseorderEditForStatus = res;
                        })
                })
        }
        else{
            bootbox.alert({
                title : 'ERROR',
                message : 'Please enter text.',
                className : 'text-center'
            })
        }
    }
    $scope.addTermsCondition = function(addnewtermsandcond){
        console.log("getting Tc..");
        console.log(addnewtermsandcond);
        var body = {};
        body.addnewtermsandcond = addnewtermsandcond;
        $http.post('/dash/purchase/terms/conditions', body).success(function (res) {
            if(res){
                bootbox.alert({
                    title : 'SUCCESS',
                    message : 'Added Succesfully',
                    className : 'text-center'
                })
            }
            $scope.getTermsandCondtion();
        })
    }
    $scope.getTermsandCondtion = function(){
        $http.get('/dash/settings/invoice/terms/conditions').success(function (result) {
            $scope.Termsconditions = result;
        })
    }
     $scope.selectSubExpenses = function (expense){
     $scope.subCatExpenseShow = [];
     $scope.subCatExpenseType = {};
            $scope.selectSubExpense = expense;
            if($scope.subExpenseShow.length){
            for(var i = 0; i < $scope.subExpenseShow.length;i++){
                            if($scope.subExpenseShow[i].subName == expense){
                                $scope.subCatExpenseShow = $scope.subExpenseShow[i].subExp;
                                return;
                            }
                        }
            }
        }
         $scope.addSubCatExpenseType = function(expense, subExpense) {
            if (subExpense && $scope.selectSubExpense && $scope.selectExpense) {
                    if (subExpense) {
                        var body = {};
                        if(expense){
                                expense.push(subExpense);
                                    body.expensetype = expense;
                      }
                      else{
                      expense = [];
                          expense.push(subExpense);
                                body.expensetype = expense;
             }
                        body.subExpense = subExpense;
                        body.selectSubExpense = $scope.selectSubExpense;
                        body.selectExpense = $scope.selectExpense;
                        $http.post('/dash/expense/update/category', body).success(function (res) {
                            $scope.subCatExpenseType.subExpenses = '';
                            $scope.getExpense(expense);
                        });
                    } else {
                        bootbox.alert({
                            title: 'ERROR',
                            message: 'Please enter text.',
                            className: 'text-center'
                        })
                    }
                }
                else{
                console.log("All values not there")
                }
            }
    $scope.getExpense = function(expense){
        $http.get('/dash/expense').success(function (result) {
            if(result && result[0]){
                $scope.expense_Type = result[0];
                for(var i = 0; i < $scope.expense_Type.category.length;i++){
                    if($scope.expense_Type.category[i].name == expense){
                        $scope.subExpenseShow = $scope.expense_Type.category[i].subexpense;
                        if($scope.expense_Type && $scope.expense_Type.category.length)
                            $scope.selectExpenses($scope.expense_Type.category[i].name);
                    }
                }
            }
            $scope.expense.name = '';
        })
    }
    $scope.repurchaseorderOrderStatus = function(dir, value){
        if(dir == 'up'){
            var temp = $scope.nav[32].status[value];
            $scope.nav[32].status[value] = $scope.nav[32].status[value - 1];
            $scope.nav[32].status[value - 1] = temp;
            var temp1 = $scope.purchaseorderEditForStatus[value];
            $scope.purchaseorderEditForStatus[value] = $scope.purchaseorderEditForStatus[value - 1];
            $scope.purchaseorderEditForStatus[value - 1] = temp1;
            $http.put("/dash/nav/purchase/order/status", $scope.nav[32].status)
                .success(function(res){
                    //console.log(res);
                    $http.put("/dash/settings/update/purchase/order/edit", $scope.purchaseorderEditForStatus)
                        .success(function(res){
                            //console.log(res);
                            $scope.purchaseorderEditForStatus = res;
                        })
                })
        }
        else if(dir == 'down'){
            var temp = $scope.nav[32].status[value];
            $scope.nav[32].status[value] = $scope.nav[32].status[value + 1];
            $scope.nav[32].status[value + 1] = temp;
            var temp1 = $scope.purchaseorderEditForStatus[value];
            $scope.purchaseorderEditForStatus[value] = $scope.purchaseorderEditForStatus[value + 1];
            $scope.purchaseorderEditForStatus[value + 1] = temp1;
            $http.put("/dash/nav/purchase/order/status", $scope.nav[32].status)
                .success(function(res){
                    //console.log(res);
                    $http.put("/dash/settings/update/purchase/order/edit", $scope.purchaseorderEditForStatus)
                        .success(function(res){
                            //console.log(res);
                            $scope.purchaseorderEditForStatus = res;
                        })
                })
        }
    }
    var cityFilterObj ={};
    cityFilterObj.viewBy = 0;
    cityFilterObj.searchBy = [];
    $scope.dataload = function (type) {
        cityFilterObj.viewBy += 50;
        if (type == 'city') {
            $http.post("/dash/stores/filter/" + type, cityFilterObj)
                .success(function (city) {
                    // console.log("Aggregate Function");
                    // console.log(city);
                    // Initializing city.selected_city to false for  next 50 Cities
                    if (!city.selected_city)
                        city.selected_city = false;
                    for (var i = 0; i < city.length; i++) {
                        if ($scope.dealerSelectAll.city)
                            city[i].selected_city = true;
                        $scope.dealer_city.push(city[i]);
                    }
                    $scope.dealer_city.map(function (dealer) {
                        if ($scope.dealerSelectAll.city) {
                            if (!dealer.selected_city)
                                dealer.selected_city = false;
                            else
                                dealer.selected_city = true;
                        } else {
                            if (dealer.selected_city)
                                dealer.selected_city = true;
                            else
                                dealer.selected_city = false;
                        }
                        dealer.dealer_city = true;
                        return dealer;
                    })
                })
        } else if (type == 'area') {
            $http.post("/dash/stores/filter/" + type, cityFilterObj)
                .success(function (area) {
                    // console.log("Aggregate Function");
                    console.log(area);
                    console.log($scope.dealerSelectAll.city)
                    if (!area.selected_area)
                        area.selected_area = false;
                    for (var i = 0; i < area.length; i++){
                        if ($scope.dealerSelectAll.city)
                            area[i].selected_area = true;
                        $scope.dealer_area.push(area[i]);
                    }
                    $scope.dealer_area.map(function (dealer) {
                        if ($scope.dealerSelectAll.city)
                            if ($scope.dealerSelectAll.city) {
                                if (!dealer.selected_area)
                                    dealer.selected_area = false;
                                else
                                    dealer.selected_area = true    ;
                            } else {
                                if (dealer.selected_area)
                                    dealer.selected_area = true;
                                else
                                    dealer.selected_area = false;
                            }
                        dealer.dealer_area = true;
                        return dealer;
                    })
                })
        }
    }
    $scope.toggleEditpurchaseOrderStatus = function(status){
        for(var i=0; i< $scope.purchaseorderEditForStatus.length; i++){
            if(status.status == $scope.purchaseorderEditForStatus[i].status){
                $scope.purchaseorderEditForStatus[i].editable = status.editable;
            }
        }
        $http.put("/dash/settings/update/purchase/order/edit", $scope.purchaseorderEditForStatus)
            .success(function(res){
                $scope.purchaseorderEditForStatus = res;
            })
    }
    // $scope.taxIndiaSetup = true;
    // $scope.taxOtherSetup = false;
    $scope.taxSetups = {};
    // $scope.taxSetups.indiaSetup = 'true';
    // $scope.taxSetups.otherSetup = 'false';
    $scope.genericCountryTaxSetup = function(country, flag){
        if(country){
            bootbox.confirm({
                    title : 'CONFIRM',
                    message : 'Are you sure you want to set '+country+' tax setup?',
                    className : 'text-center',
                    buttons: {
                        confirm : {
                            label : 'YES',
                            className : 'btn-success'
                        },
                        cancel : {
                            label: 'NO',
                            className : 'btn-danger'
                        }
                    },
                    callback : function(buttonResponse){
                        if(buttonResponse){
                            var obj = {};
                            obj.country = country;
                            obj.flag = flag;
                            $http.post("/dash/tax/otherTax", obj)
                                .success(function (res) {
                                    if(res){
                                        if(country == 'india'){
                                            $scope.taxSetups.indiaSetup = 'india';
                                            $scope.taxSetups.otherSetup = '';
                                        }else if(country == 'other'){
                                            $scope.taxSetups.indiaSetup = '';
                                            $scope.taxSetups.otherSetup = 'other';
                                        }
                                    }
                                })
                        }else{
                            if(country != 'india'){
                                $scope.taxSetups.indiaSetup = 'india';
                                $scope.taxSetups.otherSetup = '';
                            }else if(country != 'other'){
                                $scope.taxSetups.otherSetup = 'other';
                                $scope.taxSetups.indiaSetup = '';
                            }
                        }
                    }
            })
        }
    }
    $scope.otherTaxArray = [];
    $scope.newOtherTax = {};
    $scope.addOtherTaxSetup = function(name, value, type){
        obj = {
            'name': name,
            'value': value
        }
        if(name && type == 'add') {
            if(value || value== 0){
                $scope.taxSetupName = true;
                $scope.newOtherTax.name = '';
                $scope.newOtherTax.value = 0;
                $scope.otherTaxArray.push(obj);
            }
            else{
                bootbox.alert({
                    title : 'ERROR',
                    message : 'Please enter value.',
                    className : 'text-center'
                })
            }
        }else if(type == 'remove'){
            for(var i=0;i< $scope.otherTaxArray.length; i++){
                if($scope.otherTaxArray[i].name == name){
                    $scope.otherTaxArray.splice(value,1);
                }
            }
        }
    }
    /*.......
     Delete dealer from collection
     .....*/
    $scope.deleteDealer = function(dealerCode){
        bootbox.confirm({
            title : 'CONFIRM',
            message : 'Are you sure?',
            className : 'text-center',
            buttons: {
                confirm : {
                    label : 'YES',
                    className : 'btn-success'
                },
                cancel : {
                    label: 'NO',
                    className : 'btn-danger'
                }
            },
            callback : function(buttonResponse){
                if(buttonResponse){
                    jQuery.noConflict();
                    $('.refresh').css("display", "inline");
                    $http.delete("/dash/store/delete/"+dealerCode)
                        .success(function(res){
                            if(res){
                                $scope.showListDealerDetail = false;
                                $scope.clearFilter(4);
                                $('#storeModal').modal('hide');
                                setTimeout(function(){
                                    $('.refresh').css("display", "none");
                                }, 500);
                                bootbox.alert({
                                    title : 'SUCCESS',
                                    message : 'Successfully deleted.',
                                    className : 'text-center'
                                })
                                $http.get("/dash/pjp/get/beats")
                                    .success(function(res){
                                        $scope.beats = res;
                                    })
                            }
                            else{
                                $('#storeModal').modal('hide');
                                setTimeout(function(){
                                    $('.refresh').css("display", "none");
                                }, 500);
                                bootbox.alert({
                                    title : 'ERROR',
                                    message : 'Failed to delete. Please try again later',
                                    className : 'text-center'
                                })
                            }
                        })
                }
            }
        })
    }
    $scope.deleteSupplier = function(SupplierCode){
        console.log("Deleting suppliers..")
        var body = {};
        body.SupplierCode = SupplierCode;
        console.log(body);
        $http.put("/dash/supplier/delete",body)
            .success(function(res){
                console.log("response");
                console.log(res);
                if(res){
                    $http.get("/dash/supplier")
                        .success(function(response){
                            $scope.suppliers = response;
                            // $scope.addSupplierButton = false;
                            // $scope.showSupplierTransactions = true;
                            console.log($scope.suppliers);
                        })
                    jQuery.noConflict();
                    $('#supplierModal').modal('hide')
                    bootbox.alert({
                        title : 'SUCCESS',
                        message : 'Successfully deleted.',
                        className : 'text-center'
                    })
                }
                else{
                    bootbox.alert({
                        title : 'ERROR',
                        message : 'Failed to delete. Please try again later',
                        className : 'text-center'
                    })
                }
            })
    }
    $scope.updateSupplier = function(SupplierCode){
        console.log("Deleting suppliers..")
        var body = {};
        body.SupplierCode = SupplierCode;
        console.log(body);
        $http.put("/dash/supplier/activate",body)
            .success(function(res){
                console.log("response");
                console.log(res);
                if(res){
                    $http.get("/dash/supplier")
                        .success(function(response){
                            $scope.suppliers = response;
                            // $scope.addSupplierButton = false;
                            // $scope.showSupplierTransactions = true;
                            console.log($scope.suppliers);
                        })
                    jQuery.noConflict();
                    $('#supplierModal').modal('hide')
                    bootbox.alert({
                        title : 'SUCCESS',
                        message : 'Successfully Updated.',
                        className : 'text-center'
                    })
                }
                else{
                    bootbox.alert({
                        title : 'ERROR',
                        message : 'Failed to update. Please try again later',
                        className : 'text-center'
                    })
                }
            })
    }
    /* $scope.customFields = [{id: 'Enter New Field', name: 'Enter New Field'}];
     $scope.addNewFields = function() {
     var newFieldNo = $scope.customFields.length+1;
     $scope.customFields.push({'id' : 'Enter New Field' + newFieldNo, 'name' : 'Enter New Field' + newFieldNo});
     };
     $scope.removeNewFields = function() {
     var newFieldNo = $scope.customFields.length-1;
     if ( newFieldNo !== 0 ) {
     $scope.customFields.pop();
     }
     };
     $scope.showAddFields = function(field) {
     return field.id === $scope.customFields[$scope.customFields.length-1].id;
     };
     $scope.data ={
     names:[{ name:""}]
     };
     $scope.addRow = function(index){
     var name = {name:""};
     if($scope.data.names.length <= index+1){
     $scope.data.names.splice(index+1,0,name);
     }
     };
     $scope.deleteRow = function($event,name){
     var index = $scope.data.names.indexOf(name);
     if($event.which == 1)
     $scope.data.names.splice(index,1);
     }*/
    // Paytm configuration
    $scope.paymentConfig = function (type) {
        type.industryTypeID = 'Retail' ;
        $http.put("/dash/paytmconfig", type)
            .success(function (res) {
                // console.log(res)
                if (res == 'success') {
                    toastr.success("Successfully Updated") ;
                }
            })
    }
    $scope.generateTransactionNumber = function(callback){
        var date = new Date();
        var components = [
            date.getFullYear().toString().substr(-2),
            (date.getMonth() < 10)? '0' + date.getMonth() : date.getMonth(),
            (date.getDate() < 10)? '0' + date.getDate() : date.getDate(),
            (date.getHours() < 10)? '0' + date.getHours() : date.getHours(),
            (date.getMinutes() < 10)? '0' + date.getMinutes() : date.getMinutes(),
            (date.getSeconds() < 10)? '0' + date.getSeconds() : date.getSeconds(),
            (date.getMilliseconds() < 10)? '00' + date.getMilliseconds() : (date.getMilliseconds() < 100)? '0' + date.getMilliseconds() : date.getMilliseconds()
        ];
        var date_ = components.join("");
        callback(date_);
    }
    $scope.generatePurchaseTransactionNumber = function(callback){
        var date = new Date();
        var components = [
            "P",
            date.getFullYear().toString().substr(-2),
            (date.getMonth() < 10)? '0' + date.getMonth() : date.getMonth(),
            (date.getDate() < 10)? '0' + date.getDate() : date.getDate(),
            (date.getHours() < 10)? '0' + date.getHours() : date.getHours(),
            (date.getMinutes() < 10)? '0' + date.getMinutes() : date.getMinutes(),
            (date.getSeconds() < 10)? '0' + date.getSeconds() : date.getSeconds(),
            (date.getMilliseconds() < 10)? '00' + date.getMilliseconds() : (date.getMilliseconds() < 100)? '0' + date.getMilliseconds() : date.getMilliseconds()
        ];
        var date_ = components.join("");
        callback(date_);
    }
    $scope.counts = 0;
    $scope.showBtn = false;
    $scope.disableButton = function (selectBtn){
        if(selectBtn == true) {
            $scope.counts++;
            if($scope.counts >= 1){
                $scope.showBtn = true;
            }
        }else{
            $scope.counts--;
            if($scope.counts == 0){
                $scope.showBtn = false;
            }
        }
        if($scope.counts >= 1){
            $scope.showBtn = true;
        }
    }
    //Generate Invoice for an orders
    $scope.transactionDetails = [];
    $scope.SelectShipmentTransaction = function(transaction){
        if(transaction.txnIdSelect == true){
            $scope.transactionDetails.push(transaction);
        }else if(transaction.txnIdSelect == false && $scope.transactionDetails.length){
            for(var  i=0; i< $scope.transactionDetails.length; i++){
                if($scope.transactionDetails[i].transaction_id == transaction.transaction_id){
                    $scope.transactionDetails.splice(i,1);
                }
            }
        }
    }
    $scope.scannedItem = {};
    $scope.scannedItemCode = '';
    $scope.fetchScannedItem = function(code){
        if(code != '' && code != undefined){
            $scope.scannedItem = {};
            for(var i=0; i< masterItems.length; i++){
                if(Number(masterItems[i].itemCode) == Number(code) || (masterItems[i].itemCode+'' == code+'')){
                    $scope.scannedItem = masterItems[i];
                    break;
                }
            }
            $scope.scannedItem.orderMRP = $scope.scannedItem.MRP
            $scope.scannedItem.itemQuantity = 0;
            $scope.scannedItem.lineComment = '';
            $scope.scannedItemCode = '';
            jQuery.noConflict();
            $('#scannedItemCode').val('');
            if(!$scope.scannedItem.itemCode){ // Shows item is not available
                $('#scannedItemNotAvailable').fadeIn(1000, function(){
                    $('#scannedItemNotAvailable').fadeOut(5000);
                })
            }
            else{ //Open modal to enter mrp and qty
                jQuery.noConflict();
                $("#scanItemModal").modal('show');
            }
        }
        else{
            bootbox.alert({
                title : 'ERROR',
                message: 'Enter code or scan item',
                className : 'text-center',
                callback : function(){
                    jQuery.noConflict();
                    $('#scannedItemCode').focus();
                }
            })
        }
    }
    $scope.addScannedItemToCart = function(item){
        if(item.itemCode){
            $scope.addItemToOrder(item, item.itemQuantity, item.lineComment);
            $scope.scannedItem = {};
            jQuery.noConflict();
            $('#scanItemModal').modal('hide');
            $('#scannedItemCode').focus();
        }
    }
    $scope.deviceSelectedToAddInventory = function (item, branch, type) {
        if (type == 'mobile') {
            $scope.selectedDevice = item;
            $scope.inventory.itemId = item.itemID;
            $scope.inventory.itemName = item.DeviceName;
            $scope.device[0].id = new Date().getTime() + '';
            $scope.color = item.colors.split(",");
            jQuery.noConflict();
            $(".itemsDropdown").css('display', 'none')
            $('#searchInventory').val('');
            $(document).ready(function () {
                $('#IMEI1').focus();
                $(":focus").css("background-color", "lightgoldenrodyellow");
            });
        }
        else if (type == 'accessory') {
            console.log(item)
            $scope.selectedDevice = item;
            $scope.inventory.itemId = item.itemID;
            $scope.inventory.itemName = item.itemName;
            jQuery.noConflict();
            $(".itemsDropdown").css('display', 'none')
            $('#searchInventory').val('');
        }
    }
    $scope.receiveInventory = function () {
        $scope.inventory.branchSelected = '';
        $scope.inventory.typeSelected = '';
        $scope.inventory.itemId = '';
        $scope.inventory.quantity = '';
        $scope.device = [
            {
                imei_1: '',
                imei_2: '',
                color: ''
            }
        ];
        jQuery.noConflict();
        $('#branchDropdown').val('');
        $('#searchInventory').val('');
    }
    $scope.device = [
        {
            imei_1: '',
            imei_2: '',
            color: ''
        }
    ];
    $scope.focusIMEI1 = function () {
        $(document).ready(function () {
            $('input').focus();
            $(":focus").css("background-color", "lightgoldenrodyellow");
        });
    }
    $scope.addIMEI2 = function (i) {
        $('#IMEI2' + i).css('display', 'block');
        $('#addIMEI2' + i).css('display', 'none');
        $(document).ready(function () {
            $('input').focus();
            $(":focus").css("background-color", "lightgoldenrodyellow");
        });
    }
    $scope.addInventory = function () {
        var imei = {};
        imei.id = new Date().getTime() + '';
        $scope.device.push(imei)
        console.log($scope.device)
    }
    $scope.accessory = {};
    $scope.updateStock = function (branch, type, quantity) {
        var date = $scope.formatFullDealerDate(new Date());
        if (type == 'mobile') {
            for (var i = 0; i < $scope.device.length; i++) {
                var device = {};
                device.itemName = $scope.selectedDevice.DeviceName;
                device.brand = $scope.selectedDevice.Brand;
                device.itemID = $scope.selectedDevice.itemID;
                device.internal = $scope.selectedDevice.internal;
                device.color = $scope.device[i].color;
                $scope.device[i].device = device;
                $scope.device[i].branchCode = parseInt(branch);
                $scope.device[i].type = type;
                $scope.device[i].itemID = $scope.selectedDevice.itemID;
                $scope.device[i].seller = $scope.user.seller || '';
                $scope.device[i].sellerName = $scope.user.username || '';
                $scope.device[i].date_added = date;
                $scope.device[i].status = 'available';
                $scope.device[i].cloudinaryURL = '';
            }
            $http.post("/dash/inventory/receive", $scope.device)
                .success(function (res) {
                    if(res)
                        $http.get("/dash/inventory")
                            .success(function (res) {
                                $scope.inventory = res ;
                                toastr.success("Updated Inventory Successfully");
                            })
                })
        }
        else if (type == 'accessory') {
            var temp = [];
            $scope.accessory.id = new Date().getTime() + '';
            $scope.accessory.accessory = {
                itemName: $scope.selectedDevice.itemName,
                brand: $scope.selectedDevice.brand,
                itemID: $scope.selectedDevice.itemID
            }
            $scope.accessory.quantity = quantity;
            $scope.accessory.seller = $scope.user.seller;
            $scope.accessory.sellerName = $scope.user.username;
            $scope.accessory.date_added = date;
            $scope.accessory.type = type;
            $scope.accessory.branchCode = parseInt(branch);
            $scope.accessory.itemID = $scope.selectedDevice.itemID;
            temp.push($scope.accessory)
            $http.post("/dash/inventory/receive", temp)
                .success(function (res) {
                    if(res)
                        $http.get("/dash/inventory")
                            .success(function (res) {
                                $scope.inventory = res ;
                                toastr.success("Updated Inventory Successfully");
                            })
                })
        }
    }
    $scope.inventoryItem = [] ;
    $scope.getInventoryDetails = function(item){
        $scope.inventoryItem = [] ;
        $scope.showInventoryDetails = true;
        var inventory  = item.branchCode ;
        var colors = [] ;
        for(var i = 0 ;i < inventory.length ; i++){
            for(var j = 0 ;j < inventory[i].item.length ;j++){
                if(inventory[i].item[j].device)
                    colors.push(inventory[i].item[j].device.color)
            }
            var unquieColors = colors.filter(function(itm, i, colors) {
                return i == colors.indexOf(itm);
            });
        }
        for(var m = 0 ;m < inventory.length ; m++){
            var temp = {
                branch: inventory[m].branchCode,
                items: [],
            }
            if(inventory[m].item[0].device)
                temp.itemName = inventory[m].item[0].device.itemName ;
            if(inventory[m].item[0].accessory){
                temp.accessories = [];
                for(var i = 0 ;i < inventory[m].item.length ;i++){
                    temp.accessories.push(inventory[m].item[i])
                }
            }
            for(var j = 0; j < unquieColors.length ; j++){
                var obj ={
                    count : 0 ,
                    name : unquieColors[j],
                    device :[],
                }
                for(var i = 0 ;i < inventory[m].item.length ;i++){
                    if(inventory[m].item[i].device.color == unquieColors[j]){
                        obj.count++;
                        obj.device.push(inventory[m].item[i])
                    }
                }
                if(obj.count){
                    temp.items.push(obj)
                }
            }
            $scope.inventoryItem.push(temp)
        }
    }
    $scope.closeInventory = function(){
        $scope.showInventoryDetails = false;
    }
    $scope.imei = {} ;
    $scope.showImei = function(item,ev){
        $scope.imei = item ;
        $mdDialog.show({
            controller: DialogController,
            templateUrl: 'imei.html',
            parent: angular.element(document.body),
            targetEvent: ev,
            clickOutsideToClose:true,
            locals:{dataToPass: item}
        })
    }
    function DialogController($scope, $mdDialog, dataToPass) {
        $scope.hide = function() {
            $mdDialog.hide();
        };
        $scope.cancel = function() {
            $mdDialog.cancel();
        };
        $scope.imei = dataToPass;
        $scope.answer = function(answer) {
            $mdDialog.hide(answer);
        };
        $scope.formatDate = function(date){
            if(date==undefined || date == '')
                return ('');
            /* replace is used to ensure cross browser support*/
            var d = new Date(date.toString().replace("-","/").replace("-","/"));
            var monthNames = ["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"];
            var dt = d.getDate();
            if(dt<10)
                dt = "0"+dt;
            var dateOut = dt+" - "+monthNames[d.getMonth()]+" - "+(d.getFullYear());
            return dateOut;
        }
    }
    $scope.branchFilter = function(branch,type){
        $scope.inventory = masterInventory ;
        var temp = [];
        for(var i =0 ;i < $scope.inventory.length;i++){
            var obj = {
                branchCode :[]
            };
            for(var j =0 ;j < $scope.inventory[i].branchCode.length;j++){
                if(branch){
                    if(branch == $scope.inventory[i].branchCode[j].branchCode){
                        if(type){
                            if(type == $scope.inventory[i].branchCode[j].type){
                                obj._id = $scope.inventory[i]._id ;
                                obj.branchCode.push($scope.inventory[i].branchCode[j])
                                temp.push(obj)
                            }
                        }
                        else{
                            obj._id = $scope.inventory[i]._id ;
                            obj.branchCode.push($scope.inventory[i].branchCode[j])
                            temp.push(obj)
                        }
                    }
                }
                else{
                    if(type == $scope.inventory[i].branchCode[j].type){
                        obj._id = $scope.inventory[i]._id ;
                        obj.branchCode.push($scope.inventory[i].branchCode[j])
                        temp.push(obj)
                    }
                }
            }
        }
        var result = UniqueArraybyId(temp ,"_id");
        function UniqueArraybyId(collection, keyname) {
            var output = [],
                keys = [];
            angular.forEach(collection, function(item) {
                var key = item[keyname];
                if(keys.indexOf(key) === -1) {
                    keys.push(key);
                    output.push(item);
                }
            });
            return output;
        };
        $scope.inventory = result;
        $scope.inventoryFilter = false ;
    }
    $scope.clearInventoryFilter = function(){
        $scope.inventory = masterInventory ;
        $scope.filter.branchCode = '';
        $scope.filter.typeSelected = '';
    }
    /*..........
     Add freight charges in settings page author sandeep
     .........*/
    $scope.newfreight = {};
    $scope.addFreight = function(freight){
        if ($scope.freight.length && $scope.freight[$scope.freight.length - 1].max >= freight.min) {
            bootbox.alert({
                title: 'ERROR',
                message: 'Minimum value should be greater than previous range Maximum value',
                className: 'text-center'
            })
            return;
        }
        else{
            if((freight.min == freight.max)||(freight.min >= freight.max) || (freight.min < 0)||(freight.max <=0) || (freight.amount <=0)){
                bootbox.alert({
                    title: 'ERROR',
                    message: 'Invalid Minimum and Maximum',
                    className: 'text-center'
                })
                return
            }
            else{
                var date = new Date();
                freight.username = $scope.user.username ? $scope.user.username : 'PORTAL ADMIN';
                freight.seller = $scope.user.sellerphone ? $scope.user.sellerphone : '';
                freight.date_added = [date.getFullYear(),(date.getMonth()+1).padLeft(), date.getDate().padLeft() ].join('-') + ' '
                    + [date.getHours().padLeft(), date.getMinutes().padLeft(), date.getSeconds().padLeft()].join (':');
                $http.post("/dash/freight/add",freight)
                    .success(function(res){
                        if(res){
                            $scope.freight.push(freight);
                            $scope.newfreight = {};
                        }
                        else{
                            bootbox.alert({
                                title: 'ERROR',
                                message: 'Failed to save . Please try after sometime.',
                                className: 'text-center'
                            })
                        }
                    })
            }
        }
    }
    $scope.removeFreightCharge = function(data,i){
        var temp = data ;
        bootbox.confirm({
            title : 'CONFIRM',
            message : 'Are you sure?',
            className: 'text-center',
            buttons: {
                confirm: {
                    label : 'Delete'
                }
            },
            callback : function(result){
                if(result){
                    $http.post("/dash/freight/remove",temp)
                        .success(function(res){
                            if(res){
                                $scope.freight.splice(i,1);
                                console.log("true")
                            }
                        })
                }
            }
        })
    }
    $scope.saveFreightCharge = function(data,id){
        console.log(data)
        console.log(id)
        var temp ={
            id : id,
            freight : data
        }
        bootbox.confirm({
            title : 'CONFIRM',
            message : 'Are you sure?',
            className: 'text-center',
            buttons: {
                confirm: {
                    label : 'Save Freight'
                }
            },
            callback : function(result){
                if(result){
                    $http.post("/dash/order/freight/edit",temp)
                        .success(function(res){
                            if(res){
                                $scope.orderDetails[0].freight = data ;
                                $scope.freight.display = false ;
                            }
                        })
                }
            }
        })
    }
    //Add freight charge Type//
    $scope.newFreightChargeType ={};
    $scope.addFreightChargeType = function(freightCharge){
        if(!freightCharge){
            bootbox.alert({
                title : "ERROR",
                message : "Please enter some text",
                className : "text-center"
            })
        }
        else {
            var body = {};
            body.freightCharge = freightCharge;
            $scope.freightCharge = freightCharge;
            $http.post("/dash/freightcharge/addfreightcharge", body)
                .success(function (result) {
                    if (result) {
                        $scope.newFreightChargeType.FreightChargeType = '';
                        $scope.freightChargeType.push(body);
                    }
                })
        }
    }
    //Edit freight charge type//
    $scope.editFreightChargeTypeFromSettings = function(newFreightChargeType, index,freightCharge){
        if(!newFreightChargeType){
            bootbox.alert({
                title : "ERROR",
                message : "Please enter some text",
                className : "text-center"
            })
        }
        else{
            var body = {}
            body.newFreightChargeType = newFreightChargeType
            body.index = index;
            body.freightCharge =freightCharge;
            $http.put("/dash/settings/update/editFreightCharge",body)
                .success(function(res){
                    console.log(res)
                    $scope.getEditedFreight();
                })
        }
    }
    $scope.getEditedFreight = function(){
        $http.get("/dash/settings/getdata/geteditedFreightCharge")
            .success(function(res){
                $scope.freightChargeType = res.obj;
            })
    }
    //Remove Freight Type
    $scope.removeFreightChargeType = function(data,i){
        var body = {} ;
        body.data = data;
        bootbox.confirm({
            title : 'CONFIRM',
            message : 'Are you sure?',
            className: 'text-center',
            buttons: {
                confirm: {
                    label : 'Delete'
                }
            },
            callback : function(result){
                $scope.freightChargeType.splice(i,1);
                if(result){
                    $http.post("/dash/freightChargeType/delete",body)
                        .success(function(res){
                            if(res){
                            }
                        })
                }
            }
        })
    }
    // $scope.importMasterItems = function(){
    //     bootbox.confirm({
    //         title : 'CONFIRM',
    //         message : 'Are you sure?',
    //         className: 'text-center',
    //         buttons: {
    //             confirm: {
    //                 label : 'Import'
    //             }
    //         },
    //         callback : function(result){
    //             if(result){
    //                 $http.get("/dash/import/mobileMaster/items")
    //                     .success(function(res){
    //                         if(res == true){
    //                             $scope.importMobileMaster = false ;
    //                         }
    //                     })
    //             }
    //         }
    //     })
    // }
    // function to disable future dates in a datepicker
    var maxDate = new Date();
    maxDate = maxDate.setDate(maxDate.getDate());
    $scope.datepickerOptions = {
        maxDate: maxDate
    };
    // function to disable past dates in a datepicker
    var minDate = new Date();
    minDate = minDate.setDate(minDate.getDate()-0);
    $scope.datepickerOptionsPast = {
        minDate: minDate
    };
    $scope.calculateAge = function calculateAge(birthday) { // birthday is a date
        var ageDifMs = Date.now() - birthday.getTime();
        var ageDate = new Date(ageDifMs); // miliseconds from epoch
        console.log(Math.abs(ageDate.getUTCFullYear() - 1970))
        $scope.meeting.age = Math.abs(ageDate.getUTCFullYear() - 1970);
        document.getElementById("myText").disabled = true;
    }
    $scope.getEnquiryDetails = function(item){
        // console.log(item)
        $scope.reportEnquiryDetails = item
        jQuery.noConflict();
        $('#enquiryDetailsModal').modal('show');
    }
    // Add Mop margin % in settings page
    $scope.new =  {} ;
    $scope.addMopMargin = function(margin){
        if(margin < 0 || margin > 100 || margin  == undefined || margin == ''){
            bootbox.alert({
                title : 'ERROR',
                message : 'Mop Margin % should be between 0 to 100',
                className : 'text-center'
            })
        }
        else{
            $http.put("/dash/mopMargin/add?value="+margin)
                .success(function(res){
                    if(res){
                        $scope.mopMargin = margin ;
                        bootbox.alert({
                            title : 'SUCCESS',
                            message : 'Mop Margin Successfully updated',
                            className : 'text-center'
                        })
                        $scope.new.MopMargin = '';
                    }
                })
        }
    }
    $scope.userOrderdetails = function(id){
        var order = {
            orderId : id
        }
        fetchOrderDetails(order);
        $('#reportOrderModal').modal('show');
    }
    $scope.selectedUserIndex = undefined;
    $scope.selectUserIndex = function (index) {
        if ($scope.selectedUserIndex !== index) {
            $scope.selectedUserIndex = index;
        }
        else {
            $scope.selectedUserIndex = undefined;
        }
    };
    $scope.addLabel = function(){
        console.log($scope.userLabel);
        $http.put("/dash/settings/add/enquiry",  $scope.userLabel)
            .success(function(res){
                if(res){
                    $http.get("/dash/labels")
                        .success(function(res){
                            if(res){
                                //   console.log(res);
                                $scope.allLabels = res[0].obj;
                                $scope.userLabel.name = '';
                                $scope.userLabel.type = '';
                                $scope.userLabel.mandatory = '';
                                $scope.userLabel.input = '';
                                $scope.userLabel.dropdown = [];
                            }
                        });
                }
                else{
                    console.log("error updating");
                }
            })
    };
    $scope.removeLabel = function(formId,index){
        console.log(formId)
        console.log(index);
        var labelObj = {}
        for(var i = 0; i < $scope.allLabels.length; i++){
            if($scope.allLabels[i].form_id == formId){
                if($scope.allLabels[i].obj.length > 1){
                    labelObj = $scope.allLabels[i]
                    labelObj.obj.splice(index,1);
                    $http.put("/dash/settings/update/enquiry", labelObj)
                        .success(function(res){
                            //console.log(res);
                            if(res){
                                $http.get("/dash/labels")
                                    .success(function(res){
                                        if(res){
                                            //  console.log(res);
                                            $scope.allLabels = res;
                                        }
                                    });
                            }
                            else{
                                console.log("error updating")
                            }
                        })
                    break;
                }
                else{
                    bootbox.alert({
                        title : 'ERROR',
                        message : 'A minimum of one role has to be present.',
                        className : 'text-center'
                    })
                    break;
                }
            }
        }
    };
    $scope.reorderLabel = function(dir, value, formId)
    {
        var labelObj = {}
        if(dir == 'up'){
            for(var i=0; i<$scope.allLabels.length; i++)
            {
                if($scope.allLabels[i].form_id == formId)
                {
                    var temp = $scope.allLabels[i].obj[value];
                    $scope.allLabels[i].obj[value] = $scope.allLabels[i].obj[value - 1];
                    $scope.allLabels[i].obj[value - 1] = temp;
                    labelObj = $scope.allLabels[i]
                    console.log(labelObj)
                    $http.put("/dash/settings/update/enquiry", labelObj)
                        .success(function(res){
                            if(res){
                                $http.get("/dash/labels")
                                    .success(function(res){
                                        if(res){
                                            //  console.log(res);
                                            $scope.allLabels = res;
                                        }
                                    });
                            }
                            else{
                                console.log("error updating")
                            }
                        })
                    break;
                }
            }
        }
        else if(dir == 'down'){
            for(var i=0; i < $scope.allLabels.length; i++)
            {
                if($scope.allLabels[i].form_id == formId)
                {
                    var temp = $scope.allLabels[i].obj[value];
                    $scope.allLabels[i].obj[value] = $scope.allLabels[i].obj[value + 1];
                    $scope.allLabels[i].obj[value + 1] = temp;
                    labelObj = $scope.allLabels[i];
                    $http.put("/dash/settings/update/enquiry", labelObj)
                        .success(function(res){
                            if(res){
                                $http.get("/dash/labels")
                                    .success(function(res){
                                        if(res){
                                            //  console.log(res);
                                            $scope.allLabels = res;
                                        }
                                    });
                            }
                            else{
                                console.log("error updating")
                            }
                        })
                    break;
                }
            }
        }
    };
    $scope.editLabelsFromSettings = function(name, index, formId){
        if(name == undefined){
            bootbox.alert({
                title : "ERROR",
                message : "Please enter some text",
                className : "text-center"
            })
        }
        else{
            var labelObj = [];
            // labelObj = $scope.allLabels;
            for(var i=0; i<$scope.allLabels.length; i++)
            {
                if($scope.allLabels[i].form_id == formId)
                {
                    labelObj = $scope.allLabels[i];
                    labelObj.obj[index] = {
                        name : name,
                        type : labelObj.obj[index].type,
                        mandatory : labelObj.obj[index].mandatory,
                        input : labelObj.obj[index].input,
                        dropdown : labelObj.obj[index].dropdown
                    };
                }
            }
            console.log(labelObj)
            $http.put("/dash/settings/update/enquiry", labelObj)
                .success(function(res)
                {
                    if(res){
                        $http.get("/dash/labels")
                            .success(function(res){
                                if(res){
                                    console.log(res);
                                    $scope.allLabels = res;
                                }
                            });
                    }
                    else{
                        console.log("error updating")
                    }
                })
        }
    };
    $scope.rows = ['Row 1']
    $scope.counter = 1;
    $scope.addRow = function() {
        console.log("new row")
        $scope.counter++;
        $scope.rows.push('Row ' + $scope.counter);
    };
    $scope.deleteRow = function() {
        console.log("delete row")
        $scope.counter--;
        $scope.rows.pop('Row ' + $scope.counter);
    }
    // ................**************************************************************************.................
    // ....................
    //                  ATMOSPHERE FUNCTIONS
    //
    // ....................
    // ................**************************************************************************.................
    $scope.lastFuncAtms = function () {
        console.log("Atms Add user-------->>>>")
        if(mainID == "add-user") {
            // document.getElementById("addUpdateButton").innerHTML = "Add";
            $scope.addUserAtms();
            // $('#myModalAddUser').modal({'show':false});
            // alert("entry");
        }
        else if(mainID == "update-user") {
            // document.getElementById("addUpdateButton").innerHTML = "Update";
            // console.log("update")
            $scope.updateSellerAtms();
        }
    }
    /*$scope.calWeekDays = function()
     {
     /!*moment().isoWeekdayCalc({
     rangeStart: '1 Apr 2015',
     rangeEnd: '31 Mar 2016',
     weekdays: [1,2,3,4,5], //weekdays Mon to Fri
     exclusions: ['6 Apr 2015','7 Apr 2015']  //public holidays
     }) //returns 260 (260 workdays excluding two public holidays)*!/
     $scope.weekdaysCal = moment.isoWeekday('1 Apr 2019','31 Mar 2019',[1,2,3,4,5]);
     console.log($scope.weekdaysCal)
     }*/
    function isFloat(n){
        return Number(n) === n && n % 1 !== 0;
    }
    $scope.addUserAtms = function()
    {
        // console.log($scope.managerSelectedList)
        // console.log("Inside rolemanager")
        // console.log($scope.roleManager)
        var seller_atms = {}
        $scope.seller.userStatus = "Active";
        $scope.seller.showOperations = true;
        // $scope.seller.managerName = $scope.getSellerName($scope.seller.managerid,'goals');
        var date1 = new Date();
        $scope.seller.date_added = [date1.getFullYear(),(date1.getMonth()+1).padLeft(), date1.getDate().padLeft() ].join('-') + ' '
            + [date1.getHours().padLeft(), date1.getMinutes().padLeft(), date1.getSeconds().padLeft()].join (':');
        for(var i=0;i<$scope.userRole.length;i++){
            if($scope.seller.role == $scope.userRole[i].name){
                //  console.log("matched");
                //  $scope.seller.role = $scope.userRole[i].role;
                $scope.seller.user_role = $scope.userRole[i].role;
                if($scope.seller.user_role == 'Manager'){
                    $scope.seller.manager = true;
                }
            }
        }
        if($scope.seller.manager == true){
            $scope.seller.user_role = 'Manager'
        }
        if ($scope.seller && $scope.seller._id != null)
            $scope.seller._id = null;
        if(!$scope.seller.sellername) {
            bootbox.alert({
                title : 'ERROR',
                message : "Please enter your name",
                className : 'text-center'
            });
            return false;
        }
        else if (!$scope.seller.countryCode && !$scope.isPhoneNo($scope.seller.sellerphone)) {
            bootbox.alert({
                title : 'ERROR',
                message : "Please enter a valid phone number",
                className : 'text-center'
            });
            return false;
        }
        else if (!$scope.seller.sellerphone) {
            bootbox.alert({
                title : 'ERROR',
                message : "Please enter a phone number",
                className : 'text-center'
            });
            return false;
        }
        else if (!$scope.seller.role) {
            bootbox.alert({
                title : 'ERROR',
                message : "Please select any role",
                className : 'text-center'
            });
            return false;
        }
        /*else if ($scope.seller.role != 'COO' && $scope.managerSelectedList.length == 0) {
         bootbox.alert({
         title : 'ERROR',
         message : "Please select any manager",
         className : 'text-center'
         });
         return false;
         }*/
        else if(!$scope.seller.EMPLOYEE_ID) {
            bootbox.alert({
                title : 'ERROR',
                message : "Please enter your User ID",
                className : 'text-center'
            });
            return false;
        }
        else {
            if(!$scope.seller.countryCode)
            {
                $scope.seller.countryCode = "";
            }else{
                //   $scope.seller.countryCode = parseInt($scope.seller.countryCode);
                $scope.seller.sellerphone = parseFloat($scope.seller.countryCode + $scope.seller.sellerphone);
            }
            $scope.seller.sellerid = parseFloat($scope.seller.sellerphone);
            $scope.seller.managerid = $scope.managerSelectedList;
            /*  seller_atms.EMPLOYEE_NAME = $scope.seller.sellername;
             seller_atms.EMAIL = $scope.seller.email ? $scope.seller.email : '';
             seller_atms.MANAGER = $scope.managerSelectedList;
             seller_atms.ROLE = $scope.seller.role;
             seller_atms.PORTAL_ACCESS = $scope.seller.portal ? $scope.seller.portal : '';
             seller_atms.DEPARTMENT = $scope.seller.department;
             seller_atms.ID = $scope.seller.ID ? $scope.seller.ID : '';
             seller_atms.EMPLOYEE_PHONE = Number(seller_atms.EMPLOYEE_PHONE);*/
            // console.log(seller_atms)
            console.log($scope.seller)
            delete $scope.seller['p_tabs']
            delete $scope.seller['app_tabs']
            $http.get("/dash/atmsgetsellerDetails/" + $scope.seller.sellerphone + '/'+ $scope.seller.EMPLOYEE_ID)
                .success(function (response) {
                    console.log("Seller details")
                    console.log(response)
                    $scope.sellers1 = response;
                    // $scope.sellers1 = response;
                    if(!response) {
                        $scope.seller.sellerid = $scope.seller.sellerphone;
                        $http.post("/dash/sellers", $scope.seller)
                            .success(function (response) {
                                console.log("Create -->" + response);
                                $scope.refreshSellerNames();
                                $scope.sellers.push($scope.seller);
                                $scope.loaded(4);
                                $scope.transactionCount($scope.sellers.length, 5);
                                toastr.success('User '+$scope.seller.sellername +' Added successfully as '+ $scope.seller.role)
                                jQuery.noConflict();
                                $('#myModalAddUser').modal('hide');
                                $("#userAddSuccess").fadeIn(1000, function () {
                                    $("#userAddSuccess").fadeOut(3000);
                                })
                            });
                    }
                    else {
                        // console.log("Inside else")
                        if ($scope.sellers1.userStatus == 'Active') {
                            if($scope.sellers1.sellerphone==$scope.seller.sellerphone)
                            {
                                bootbox.alert({
                                    title : 'ERROR',
                                    message : "User phone number: " + $scope.sellers1.sellerphone + " already exists for " + $scope.sellers1.sellername,
                                    className : 'text-center'
                                });
                            }
                            else if($scope.sellers1.EMPLOYEE_ID==$scope.seller.EMPLOYEE_ID)
                            {
                                bootbox.alert({
                                    title : 'ERROR',
                                    message : "User Employee Id: " + $scope.sellers1.EMPLOYEE_ID + " already exists for " + $scope.sellers1.sellername,
                                    className : 'text-center'
                                });
                            }
                        }
                        else if ($scope.sellers1.userStatus == 'Deleted') {
                            $scope.enableUsers();
                            jQuery.noConflict();
                        }
                    }
                });
        }
    }
    $scope.formatDateAtms = function (date) {
        if (date == undefined || date == '')
            return ('')
        /* replace is used to ensure cross browser support*/
        var d = new Date(date.toString().replace("-", "/").replace("-", "/"));
        if (d == "Invalid Date")
            d = new Date();
        var monthNames = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"]
        var dt = d.getDate()
        if (dt < 10)
            dt = "0" + dt
        var dateOut = dt + " - " + monthNames[d.getMonth()] + " - " + (d.getFullYear())
        return dateOut;
    }
    $scope.updateSellerAtms = function(){
        $scope.seller.userStatus = "Active";
        $scope.seller.showOperations = true;
        $scope.managerSelectedList = [];
        var date1 = new Date();
        $scope.seller.last_updated = date1;
        if($scope.user.role){
            $scope.seller.last_updated_by = $scope.user.username
        }
        else{
            $scope.seller.last_updated_by = 'Global Admin'
        }
        for(var i=0;i<$scope.userRole.length;i++){
            if($scope.seller.role == $scope.userRole[i].name){
                //  console.log("matched");
                //  $scope.seller.role = $scope.userRole[i].role;
                $scope.seller.user_role = $scope.userRole[i].role;
                if($scope.seller.user_role == 'Manager'){
                    $scope.seller.manager = true;
                }
            }
        }
        if($scope.seller.manager == true){
            $scope.seller.user_role = 'Manager'
        }
        if($scope.seller.sellerphone){
            $scope.seller.sellerid = $scope.seller.sellerphone;
        }
        if($scope.seller.Supervisor_Code){
            $scope.managerSelectedList.push($scope.seller.Supervisor_Code)
        }
        if($scope.seller.Assistant_Manager_Code){
            $scope.managerSelectedList.push($scope.seller.Assistant_Manager_Code)
        }
        if($scope.seller.Manager_Code){
            $scope.managerSelectedList.push($scope.seller.Manager_Code)
        }
        if(!$scope.seller.sellername) {
            bootbox.alert({
                title : 'ERROR',
                message : "Please enter your name",
                className : 'text-center'
            });
            return false;
        }
        else if (!$scope.seller.countryCode && !$scope.isPhoneNo($scope.seller.sellerphone)) {
            bootbox.alert({
                title : 'ERROR',
                message : "Please enter a valid phone number",
                className : 'text-center'
            });
            return false;
        }
        else if (!$scope.seller.sellerphone) {
            bootbox.alert({
                title : 'ERROR',
                message : "Please enter a phone number",
                className : 'text-center'
            });
            return false;
        }
        else if(!$scope.seller.sellerid){
            bootbox.alert({
                title : 'ERROR',
                message : "Please enter Phone number",
                className : 'text-center'
            });
            return false;
        }
        else if (!$scope.seller.EMPLOYEE_ID) {
            bootbox.alert({
                title : 'ERROR',
                message : "Please enter Employee ID",
                className : 'text-center'
            });
            return false;
        }
        else {
            if(!$scope.seller.countryCode)
            {
                $scope.seller.countryCode = "";
            }else{
                //   $scope.seller.countryCode = parseInt($scope.seller.countryCode);
                $scope.seller.sellerphone = parseFloat($scope.seller.countryCode + $scope.seller.sellerphone);
            }
            $scope.seller.sellerid = parseFloat($scope.seller.sellerphone);
            $scope.seller.managerid = $scope.managerSelectedList;
            $http.get("/dash/atmsgetsellerDetails/" + $scope.seller.sellerphone + '/'+ $scope.seller.EMPLOYEE_ID)
                .success(function (response) {
                    $scope.sellers1 = response;
                    // console.log($scope.sellers1);
                    if(oldUser.EMPLOYEE_ID==$scope.sellers1.EMPLOYEE_ID && oldUser.sellerphone==$scope.sellers1.sellerphone ){
                        $http.put("/dash/sellers/" + $scope.seller._id, $scope.seller)
                            .success(function (response) {
                                console.log("Update -->" + response);
                                $scope.refreshTransactions(35);
                                jQuery.noConflict();
                                $('#myModalAddUser').modal('hide');
                                $("#userUpdateSuccess").fadeIn(1000,function(){
                                    $("#userUpdateSuccess").fadeOut(3000);
                                });
                                $scope.userFilterStatus='allUsers';
                            });
                    }
                    else{
                        if($scope.sellers1 && oldUser.sellerphone != $scope.seller.sellerphone){
                            bootbox.alert({
                                title : 'ERROR',
                                message : "SellerPhone: " + $scope.sellers1.sellerphone + " already exists for " + $scope.sellers1.sellername,
                                className : 'text-center'
                            });
                        }
                        else if($scope.sellers1 && oldUser.EMPLOYEE_ID != $scope.seller.EMPLOYEE_ID ){
                            bootbox.alert({
                                title : 'ERROR',
                                message : "User Employee-ID: " + $scope.sellers1.EMPLOYEE_ID + " already exists for " + $scope.sellers1.sellername,
                                className : 'text-center'
                            });
                        } else {
                            $http.put("/dash/sellers/" + $scope.seller._id, $scope.seller)
                                .success(function (response) {
                                    console.log("Update -->" + response);
                                    $scope.refreshTransactions(35);
                                    jQuery.noConflict();
                                    $('#myModalAddUser').modal('hide');
                                    $("#userUpdateSuccess").fadeIn(1000,function(){
                                        $("#userUpdateSuccess").fadeOut(3000);
                                    });
                                    $scope.userFilterStatus='allUsers';
                                });
                        }
                    }
                });
        }
    }
    $scope.ATMSmanagers = {};
    $scope.selectManager = function(user, checkvalue) {
        if($scope.applicationType == 'Atmosphere') {
            if($scope.ATMSmanagers.tempManager){
                $scope.seller.Manager_Code = $scope.ATMSmanagers.tempManager.EMPLOYEE_ID
                $scope.seller.Manager_Name = $scope.ATMSmanagers.tempManager.sellername
                $scope.seller.Manager_Designation = $scope.ATMSmanagers.tempManager.Designation
                $scope.seller.Phone_Number = $scope.ATMSmanagers.tempManager.sellerid
            }
            if($scope.ATMSmanagers.tempManager1){
                $scope.seller.Assistant_Manager_Code = $scope.ATMSmanagers.tempManager1.EMPLOYEE_ID
                $scope.seller.Assistant_Manager_Name = $scope.ATMSmanagers.tempManager1.sellername
                $scope.seller.Assistant_Manager_Designation = $scope.ATMSmanagers.tempManager1.Designation
                $scope.seller.Assistant_Manager_Phone_Number = $scope.ATMSmanagers.tempManager1.sellerid
            }
            if($scope.ATMSmanagers.tempManager2){
                $scope.seller.Supervisor_Code = $scope.ATMSmanagers.tempManager2.EMPLOYEE_ID
                $scope.seller.Supervisor_Name = $scope.ATMSmanagers.tempManager2.sellername
                $scope.seller.Supervisor_Designation = $scope.ATMSmanagers.tempManager2.Designation
                $scope.seller.Supervisor_Phone_Number = $scope.ATMSmanagers.tempManager2.sellerid
            }
            var goalUsers, id;
            try {
                goalUsers = JSON.parse(user)
                id = goalUsers.EMPLOYEE_ID ? goalUsers.EMPLOYEE_ID : goalUsers.managerid;
            }
            catch (e) {
                goalUsers = user
                id = goalUsers.EMPLOYEE_ID ? goalUsers.EMPLOYEE_ID : goalUsers.managerid;
            }
            if(checkvalue != 'remove') {
                if($scope.managerSelectedList.includes(id)){
                    console.log("Manager already exists");
                } else {
                    $scope.managerSelectedList.push(id);
                }
            } else {
                $scope.managerSelectedList.splice($scope.managerSelectedList.indexOf(goalUsers), 1);
            }
        }
    }
    //Apply item search Filter
    $scope.goalSearchFilter = function(){
        console.log($scope.goalSearch.filter)
        if($scope.goalSearch.filter == ''){
            bootbox.alert({
                title: 'Warning',
                message : "Please type text in search box"
            })
        }
        else{
            goalSearchObj.viewLength = 0;
            goalSearchObj.viewBy = initialViewBy;
            $scope.viewLength = 0;
            $scope.newViewBy = viewBy.goals;
            $scope.allGoals = [];
            $scope.reportGoals = [];
            //   $scope.tempGoals = [];
            if($scope.goalSearch.filter){
                goalSearchObj.searchFor = $scope.goalSearch.filter;
                goalSearchObj.searchBy = goalSearchBy;
            }
            if($scope.applicationType == 'Atmosphere' && $scope.user.sellerObject) {
                goalSearchObj.resort = $scope.user.sellerObject.Resort;
            }
            $http.post('/dash/mastergoals', goalSearchObj)
                .success($scope.renderGoals);
            $http.post('/dash/mastergoals/count', goalSearchObj)
                .success(function(response){
                    $scope.transactionCount(response,29)
                });
            $scope.showItemFilter = true;
        }
    }
    function remove_duplicates_safe(arr) {
        var seen = {};
        var ret_arr = [];
        for (var i = 0; i < arr.length; i++) {
            if (!(arr[i] in seen)) {
                ret_arr.push(arr[i]);
                seen[arr[i]] = true;
            }
        }
        return ret_arr;
    }
    $scope.selectedGoal = {}
    $scope.selectGoal = function(col,item) {
        var evaluation = [];
        var evaluator = [];
        $scope.assign = []
        $scope.editGoal.evaluator = {};
        $scope.editGoal.evaluator1 = '';
        $scope.editGoal.evaluation = {};
        $scope.editGoal.evaluation1 = '';
        $scope.editGoal.start = '';
        $scope.editGoal.end = '';
        $scope.addEvaluatorRow = false;
        $scope.goalUserSelected = []
        // console.log(col);
        // console.log(item);
        $scope.selectedGoal = item
        // $scope.editGoal = item
        $http.get("/dash/goals/" + item.GOAL_ID + "/" + 0 + "/" + 0)
            .success(function (response) {
                if (response.length) {
                    // console.log(response)
                    for (var i = 0; i < response.length; i++) {
                        evaluation.push(response[i].EVALUATION)
                        evaluator.push(response[i].EVALUATOR)
                        $scope.selectedGoal.EVALUATOR = response[0].EVALUATOR
                        $scope.selectedGoal.EVALUATION = evaluation
                        $scope.assign.push({
                            'EVALUATOR': response[i].EVALUATOR,
                            'EVALUATION': response[i].EVALUATION,
                            'START_DATE': response[i].START_DATE,
                            'END_DATE': response[i].END_DATE,
                            'ASSIGNMENT_ID': response[i].ASSIGNMENT_ID
                        })
                    }
                    /*$scope.selectedGoal.EVALUATOR = remove_duplicates_safe(evaluator)
                     $scope.selectedGoal.EVALUATION = evaluation
                     for(var j=0; j<$scope.selectedGoal.EVALUATOR.length; j++)
                     {
                     var evaluator_temp = $scope.selectedGoal.EVALUATOR[j]
                     $http.get("/dash/goals/"+item.GOAL_ID+"/"+$scope.selectedGoal.EVALUATOR[j])
                     .success(function (response_evaluator)
                     {
                     (function(j){
                     $scope.assign.push({
                     'EVALUATOR' : response_evaluator[0].EVALUATOR,
                     'EVALUATION' : response_evaluator
                     })
                     console.log(j);
                     console.log($scope.assign);
                     })(j);
                     })
                     }*/
                }
            })
        // jQuery.noConflict();
        // $('#goalModal').modal('show');
        console.log("Assign Evaluator array----->>>")
        console.log($scope.assign)
    }
    $scope.goalsUsers = [];
    $scope.searchEvaluator = function(text,index){
        if(text.length > 0){
            console.log(text.length)
            $http.get("/dash/search/evaluator/"+text)
                .success(function(res){
                    $scope.goalsUsers = res;
                    if(index >= 0)
                    {
                        jQuery.noConflict();
                        $("."+index).css('display', 'block')
                    }
                    else
                    {
                        jQuery.noConflict();
                        $(".evaluatorDropdown").css('display', 'block')
                    }
                })
        }
        else{
            $scope.newTreatments = [];
            if(index >= 0)
            {
                jQuery.noConflict();
                $("."+index).css('display', 'none')
            }
            else
            {
                jQuery.noConflict();
                $(".evaluatorDropdown").css('display', 'none')
            }
        }
        if(index >= 0)
        {
            jQuery.noConflict();
            $("."+index).css('display', 'none')
        }
        else
        {
            jQuery.noConflict();
            $(".evaluatorDropdown").css('display', 'none')
        }
    }
    $scope.evaluationUsers = []
    $scope.searchEvaluation = function(text){
        if(text.length > 0){
            $scope.evaluationUsers = $filter('filter')($scope.evaluatorUsers, text);
            jQuery.noConflict();
            $(".evaluationDropdown").css('display', 'block')
        }
        else{
            $scope.evaluationUsers = [];
            jQuery.noConflict();
            $(".evaluationDropdown").css('display', 'none')
        }
        // jQuery.noConflict();
        // $(".evaluationDropdown").css('display', 'none')
    }
//all evaluation goals are delete and not evaluator
    $scope.deleteEvaluatorDetails = function(goal_id,goal)
    {
        bootbox.confirm({
            title: 'CONFIRM',
            message: "Are you sure about deleting assigned Goal??",
            className: "text-center",
            buttons: {
                confirm: {
                    label: 'YES',
                    className: 'btn-danger'
                },
                cancel: {
                    label: 'Cancel',
                    className: 'btn-success'
                }
            },
            callback: function (result) {
                if(result)
                {
                    $http.delete("/dash/goals/delete/"+goal.ASSIGNMENT_ID+"/"+goal.EVALUATION+"/"+goal.EVALUATOR+"/"+goal_id)
                        .success(function(response)
                        {
                            console.log("deleted response`")
                            console.log(response)
                            if(response)
                            {
                                var today = new Date();
                                today.setHours(0,0,0)
                                var user_body = {}
                                user_body.TODAY_DATE = [today.getFullYear(), (today.getMonth() + 1).padLeft(), today.getDate().padLeft()].join('-') + ' '
                                    + [today.getHours().padLeft(), today.getMinutes().padLeft(), today.getSeconds().padLeft()].join(':');
                                user_body.EVALUATOR = goal.EVALUATOR;
                                user_body.EVALUATOR_NUMBER = response.EVALUATOR_NUMBER.sellerid;
                                user_body.EVALUATION = response.EVALUATION;
                                console.log(user_body)
                                if(user_body.EVALUATION.length)
                                {
                                    $http.post("/dash/calculate/users/performance",user_body)
                                        .success(function(update_user)
                                        {
                                            console.log("User body---->>")
                                            console.log(update_user);
                                            bootbox.alert({
                                                title : "Success",
                                                message : "Goals for the selected evaluation deleted successfully!",
                                                className : "text-center"
                                            })
                                        })
                                }
                            }
                            $scope.selectGoal(0,$scope.selectedGoal)
                        })
                }
            }
        })
    }
    $scope.updateResortDetails = function(goal,selectedGoal)
    {
        var body = {
            'RESORT' : selectedGoal.RESORT,
            'EVALUATION_BY_ROLE' : selectedGoal.EVALUATION_BY_ROLE,
            'EVALUATION' : goal.EVALUATION,
            'EVALUATOR' : goal.EVALUATOR,
            'ASSIGNMENT_ID' : goal.ASSIGNMENT_ID,
            'GOAL_ID' : selectedGoal.GOAL_ID,
            'RATING_1' : selectedGoal.RATING_1,
            'RATING_2' : selectedGoal.RATING_2,
            'RATING_3' : selectedGoal.RATING_3,
            'RATING_4' : selectedGoal.RATING_4,
            'RATING_5' : selectedGoal.RATING_5,
            'EVALUATION_TYPE' : selectedGoal.EVALUATION_TYPE,
            'ROLE' : selectedGoal.ROLE,
            'DEPARTMENT' : selectedGoal.DEPARTMENT,
            'WEIGHTAGE' : selectedGoal.WEIGHTAGE,
            'GOAL_TITLE' : selectedGoal.GOAL_TITLE
        }
        //console.log(body)
        $http.post("/dash/goals/update/details",body)
            .success(function(response)
            {
                console.log(response)
            })
    }
    $scope.createForm = function()
    {
        $scope.userLabel = {};
        $scope.formLabels = [];
        $scope.formName.name = ''
        jQuery.noConflict();
        $('#createFormModal').modal('show');
    }
    $scope.addFormLabel = function(name){
        //console.log(name)
        if(name == undefined || name == ''){
            bootbox.alert({
                title : "ERROR",
                message : "Please enter some text",
                className : "text-center"
            })
        }
        else
        {
            $scope.userLabel['value'] = ''
            console.log($scope.userLabel);
            $scope.formLabels.push($scope.userLabel)
            $scope.userLabel = {}
        }
    };
    $scope.formType = function(type){
        if(type == 'Dropdown'){
            $scope.userLabel.dropdown = [];
        }
    }
    $scope.saveForm = function(name,type){
        if(name == undefined || name == '')
        {
            bootbox.alert({
                title : "ERROR",
                message : "Please enter some text",
                className : "text-center"
            })
        }
        else{
            var labelObj = {};
            labelObj.obj = $scope.formLabels;
            labelObj.type = type.name;
            labelObj.form = true;
            labelObj.form_id = $scope.generateOrderId();
            console.log(labelObj)
            $http.put("/dash/settings/update/enquiry", labelObj)
                .success(function(res){
                    if(res){
                        $http.get("/dash/labels")
                            .success(function(res){
                                if(res){
                                    //  console.log(res);
                                    $scope.allLabels = res;
                                }
                            });
                    }
                    else{
                        console.log("error updating")
                    }
                })
        }
    };
    $scope.editLabelsModalFromSettings = function(name, index){
        if(name == undefined){
            bootbox.alert({
                title : "ERROR",
                message : "Please enter some text",
                className : "text-center"
            })
        }
        else{
            var labelObj = [];
            labelObj = $scope.formLabels;
            labelObj[index] = {
                name : name,
                type : labelObj[index].type,
                mandatory : labelObj[index].mandatory,
                input : labelObj[index].input,
                dropdown : labelObj[index].dropdown
            };
        }
    };
    $scope.selectedUserDetails = {}
    $scope.selectedUserPerformance = {}
    $scope.viewGoals = function(score)
    {
        $scope.selectedUserDetails = score;
        // console.log($scope.selectedUserDetails)
        $http.get("/dash/get/performance/" + score.sellerphone)
            .success(function(response)
            {
                $scope.selectedUserPerformance = response
                // console.log($scope.selectedUserPerformance)
            })
    }
    $scope.removeLabelFromModal = function(name){
        var index = $scope.formLabels.map(function(o) { return o.name; }).indexOf(name);
        if(index != -1 && ($scope.formLabels.length > 1)){
            $scope.formLabels.splice(index, 1);
            $scope.formLabels.splice(index,1);
        }
        else{
            bootbox.alert({
                title : 'ERROR',
                message : 'A minimum of one role has to be present.',
                className : 'text-center'
            })
        }
    };
    $scope.reorderLabelModal = function(dir, value){
        if(dir == 'up'){
            var temp = $scope.formLabels[value];
            $scope.formLabels[value] = $scope.formLabels[value - 1];
            $scope.formLabels[value - 1] = temp;
        }
        else if(dir == 'down'){
            var temp = $scope.formLabels[value];
            $scope.formLabels[value] = $scope.formLabels[value + 1];
            $scope.formLabels[value + 1] = temp;
        }
    };
    $scope.goalEdit = false;
    $scope.editGoal.RATING_SCALE = [];
    $scope.editGoalDetails = function(type) {
        $scope.addEvaluatorRow = false
        if(type == 'edit') {
            $scope.goalEdit = true
        }
        else {
            $scope.goalEdit = false
            if($scope.editGoal.RATING_SCALE){
                if($scope.editGoal.RATING_SCALE[0]){
                    $scope.editGoal.RATING_1 = $scope.editGoal.RATING_SCALE[0]
                }
                else {
                    $scope.editGoal.RATING_1 = $scope.selectedGoal.RATING_SCALE[0].DESCRIPTION
                }
                if($scope.editGoal.RATING_SCALE[1]) {
                    $scope.editGoal.RATING_2 = $scope.editGoal.RATING_SCALE[1]
                }
                else {
                    $scope.editGoal.RATING_2 = $scope.selectedGoal.RATING_SCALE[1].DESCRIPTION
                }
                if($scope.editGoal.RATING_SCALE[2]) {
                    $scope.editGoal.RATING_3 = $scope.editGoal.RATING_SCALE[2]
                }
                else {
                    // $scope.editGoal.RATING_SCALE[2] ={'STAR' : 2, 'DESCRIPTION' : $scope.selectedGoal.RATING_SCALE[2].DESCRIPTION }
                    $scope.editGoal.RATING_3 = $scope.editGoal.RATING_SCALE[2].DESCRIPTION
                }
                if($scope.editGoal.RATING_SCALE[3])
                {
                    // $scope.editGoal.RATING_SCALE[3] ={'STAR' : 3, 'DESCRIPTION' : $scope.editGoal.RATING_SCALE[3]}
                    $scope.editGoal.RATING_4 = $scope.editGoal.RATING_SCALE[3]
                }
                else
                {
                    // $scope.editGoal.RATING_SCALE[3] ={'STAR' : 3, 'DESCRIPTION' : $scope.selectedGoal.RATING_SCALE[3].DESCRIPTION }
                    $scope.editGoal.RATING_4 = $scope.editGoal.RATING_SCALE[3].DESCRIPTION
                }
                if($scope.editGoal.RATING_SCALE[4])
                {
                    // $scope.editGoal.RATING_SCALE[4] ={'STAR' : 4, 'DESCRIPTION' : $scope.editGoal.RATING_SCALE[4]}
                    $scope.editGoal.RATING_5 = $scope.editGoal.RATING_SCALE[4]
                }
                else
                {
                    // $scope.editGoal.RATING_SCALE[4] ={'STAR' : 4, 'DESCRIPTION' : $scope.selectedGoal.RATING_SCALE[4].DESCRIPTION }
                    $scope.editGoal.RATING_5 = $scope.editGoal.RATING_SCALE[4].DESCRIPTION
                }
            }
            $scope.editGoal.GOAL_ID = $scope.selectedGoal.GOAL_ID;
            // console.log($scope.editGoal);
            $http.post("/dash/goals/update", $scope.editGoal)
                .success(function(res){
                    if(res){
                        $scope.editGoal = {}
                    }
                })
        }
        /*if(type == "start"){
         if(replace_data == undefined || replace_data == null){
         bootbox.alert({
         title : "ERROR",
         message : "Please Select a date",
         className : "text-center"
         })
         }
         else{
         var start_date = new Date(replace_data);
         goal.START_DATE = [start_date.getFullYear(), (start_date.getMonth() + 1).padLeft(), start_date.getDate().padLeft()].join('-') + ' '
         + [start_date.getHours().padLeft(), start_date.getMinutes().padLeft(), start_date.getSeconds().padLeft()].join(':');
         $http.post("/dash/goals/update/startDate", goal)
         .success(function(res){
         if(res){
         }
         })
         }
         $scope.editGoal.start = false;
         $scope.editGoal.start = null;
         }
         if(type == "end"){
         if(replace_data == undefined || replace_data == null){
         bootbox.alert({
         title : "ERROR",
         message : "Invalid End date",
         className : "text-center"
         })
         }
         else{
         var end = new Date(replace_data);
         goal.END_DATE = [end.getFullYear(), (end.getMonth() + 1).padLeft(), end.getDate().padLeft()].join('-') + ' '
         + [end.getHours().padLeft(), end.getMinutes().padLeft(), end.getSeconds().padLeft()].join(':');
         $http.post("/dash/goals/update/endDate", goal)
         .success(function(res){
         if(res){
         }
         })
         }
         $scope.editGoal.end = false;
         $scope.editGoal.end = null;
         }
         if(type == 'department')
         {
         if(replace_data == undefined || replace_data == null){
         bootbox.alert({
         title : "ERROR",
         message : "Invalid department",
         className : "text-center"
         })
         }
         else{
         goal.DEPARTMENT = replace_data
         $http.post("/dash/goals/update/department", goal)
         .success(function(res){
         if(res){
         }
         })
         }
         $scope.editGoal.department = false;
         $scope.editGoal.department = null;
         }
         if(type == 'statement')
         {
         if(replace_data == undefined || replace_data == null){
         bootbox.alert({
         title : "ERROR",
         message : "Please enter goal statement",
         className : "text-center"
         })
         }
         else{
         goal.GOAL_STATEMENT = replace_data
         $http.post("/dash/goals/update/statement", goal)
         .success(function(res){
         if(res){
         }
         })
         }
         $scope.editGoal.statement = false;
         $scope.editGoal.statement = null;
         }
         if(type == 'evaluation_type')
         {
         if(replace_data == undefined || replace_data == null){
         bootbox.alert({
         title : "ERROR",
         message : "Please select a type",
         className : "text-center"
         })
         }
         else{
         var evaluationType = {};
         try {
         evaluationType = JSON.parse(replace_data)
         }
         catch (e)
         {
         evaluationType = replace_data
         }
         goal.EVALUATION_TYPE = evaluationType.name
         goal.EVALUATION_DAYS = evaluationType.days
         $http.post("/dash/goals/update/evaluation_type", goal)
         .success(function(res){
         if(res){
         }
         })
         }
         $scope.editGoal.type = false;
         $scope.editGoal.type = null;
         }*/
    }
    $scope.editEvaluatorDetails = function(goal_id,evaluator){
        $scope.goalAssignmentDetails ={}
        $scope.goalEvaluators = {};
        console.log(evaluator)
        $http.get("/dash/goalsAssignment/"+ evaluator.ASSIGNMENT_ID+"/"+goal_id)
            .success(function (res)
            {
                /* console.log("goal assigned details")
                 console.log(res);*/
                jQuery.noConflict();
                $('#editEvaluatorDetail').modal('show');
                if (res.length) {
                    $scope.goalAssignmentDetails = evaluator;
                    $http.get("/dash/managers/users/"+evaluator.EVALUATION)
                        .success(function(managers){
                            //  console.log(managers)
                            $scope.goalEvaluators = managers
                        })
                }
            })
    }
    $scope.saveNewEvaluator = function(newData){
        //console.log(newData)
        if(newData.EVALUATOR){
            $http.put("/dash/goals/update/evaluator", newData)
                .success(function(res){
                    console.log(res);
                    if(res == 'success'){
                        jQuery.noConflict();
                        $('#editEvaluatorDetail').modal('hide');
                        $("#evaluatorUpdateSuccess").fadeIn(1000,function() {
                            $("#evaluatorUpdateSuccess").fadeOut(3000);
                        });
                    }
                    else{
                        console.log('unable to assign');
                        bootbox.alert({
                            title : 'ERROR',
                            message : 'Unable to edit evaluator',
                            className : 'text-center'
                        })
                    }
                })
        }
        else{
            console.log("no evaluator");
            bootbox.alert({
                title : 'ERROR',
                message : 'Please select evaluator',
                className : 'text-center'
            })
        }
    }
    $scope.addDepartment = function(name){
        var length = $scope.settingsDepartment.length-1
        if(name != '' && name != undefined){
            var typeCaps = name.charAt(0).toUpperCase();
            $scope.settingsDepartment[length+1] = {
                'name' : typeCaps+name.slice(1)
            };
            $scope.newEvaluationType.dept = ''
            // $scope.settingsEvaluation[length+1] = type
            $http.put("/dash/settings/update/department",  $scope.settingsDepartment)
                .success(function(res){
                    console.log(res);
                })
        }
        else{
            bootbox.alert({
                title : 'ERROR',
                message : 'Please enter both the fields.',
                className : 'text-center'
            })
        }
    }
    $scope.removeDepartmentFormSetup = function(roles){
        var index = $scope.settingsDepartment.map(function(o) { return o.name; }).indexOf(roles);
        if(index != -1 && ($scope.settingsDepartment.length > 1)){
            $scope.settingsDepartment.splice(index, 1);
            //console.log($scope.settingsDepartment)
            $http.put("/dash/settings/update/department", $scope.settingsDepartment)
                .success(function(res){
                    console.log(res);
                    // $scope.settingsDepartment = res;
                })
        }
        else{
            bootbox.alert({
                title : 'ERROR',
                message : 'A minimum of one type has to be present.',
                className : 'text-center'
            })
        }
    }
    $scope.editDepartmentFromSettings = function(roles, index){
        if(roles == undefined){
            bootbox.alert({
                title : "ERROR",
                message : "Please enter some text",
                className : "text-center"
            })
        }
        else{
            var rolesObj = [];
            var typeCaps = roles.charAt(0).toUpperCase();
            rolesObj = $scope.settingsDepartment;
            rolesObj[index] = {
                name : typeCaps+roles.slice(1)
            };
            //console.log(rolesObj)
            $http.put("/dash/settings/update/department",  rolesObj)
                .success(function(res){
                    console.log(res);
                    if(res)
                    {
                        bootbox.alert({
                            title : 'SUCCESS',
                            message : 'Department successfully updated',
                            className : 'text-center'
                        })
                    }
                    else{
                        bootbox.alert({
                            title : 'Error',
                            message : 'Error while updating department',
                            className : 'text-center'
                        })
                    }
                })
        }
    };
    $scope.addEvaluatorRow = false;
    $scope.addAssignRow = function(tag,goal)
    {
        $scope.goalEdit = false
        // if(tag == 'add')  $scope.assignUI.push({});
        // else $scope.assignUI.splice(0,1);
        // console.log(goal)
        if(tag == 'cancel')
        {
            $scope.addEvaluatorRow = false;
            $scope.goalUserSelected = [];
            $scope.editGoal.evaluator = {};
            $scope.editGoal.evaluator1 = '';
            $scope.editGoal.evaluation = {};
            $scope.editGoal.evaluation1 = '';
            $scope.editGoal.start = '';
            $scope.editGoal.end = '';
        }
        else
        {
            $http.get("/dash/settings/get/evaluation")
                .success(function(response)
                {
                    //console.log(response)
                    if(response.length)
                    {
                        for(var i=0; i<response[0].obj.length; i++)
                        {
                            //console.log(response[0].obj[i].name)
                            //console.log(goal.EVALUATION_TYPE)
                            if(response[0].obj[i].name == goal.EVALUATION_TYPE)
                            {
                                $scope.addEvaluatorRow = true;
                                break;
                            }
                            else
                            {
                                if(i == response[0].obj.length-1)
                                {
                                    bootbox.alert({
                                        title : 'WARNING',
                                        message : 'Setup evaluation delay days in settings before assigning goals',
                                        className : 'text-center'
                                    })
                                }
                            }
                        }
                    }
                    else
                    {
                        bootbox.alert({
                            title : 'WARNING',
                            message : 'Setup evaluation delay days in settings before assigning goals',
                            className : 'text-center'
                        })
                    }
                })
        }
    }
    //assign goal
    $scope.addGoalDetails = function(goal,evaluator,evaluation,startDate,endDate)
    {
        $scope.addEvaluatorRow = false;
        $scope.hideAddButton = true;
        if(goal && evaluator && evaluation && startDate && startDate != null &&
            endDate && endDate != null && $scope.editGoal.evaluator1 && $scope.editGoal.evaluator1 != '')
        {
            delete goal['_id']
            var assign,assignedTo;
            //To handle JSON to JSON parse exceptions
            try {
                assign = JSON.parse(evaluator);  // evaluator is a seller object
                assignedTo = JSON.parse(evaluation); // evaluation is a seller object
            }
            catch(e)
            {
                assign = evaluator;
                assignedTo = evaluation;
            }
            goal.EVALUATOR = assign.EMPLOYEE_ID;
            goal.EVALUATOR_NUMBER = assign.sellerid;
            goal.EVALUATION = $scope.goalUserSelected;
            for(var i=0; i<goal.EVALUATION.length; i++)
            {
                //For every evaluation single assignment ID will be generated
                var uniqueId = $scope.generateOrderId()
                goal.EVALUATION[i].ASSIGNMENT_ID = Number(uniqueId) + i
            }
            var start = new Date(startDate);
            var end = new Date(endDate);
            var today = new Date();
            today.setHours(0,0,0)
            goal.START_DATE = [start.getFullYear(), (start.getMonth() + 1).padLeft(), start.getDate().padLeft()].join('-') + ' '
                + [start.getHours().padLeft(), start.getMinutes().padLeft(), start.getSeconds().padLeft()].join(':');
            goal.END_DATE = [end.getFullYear(), (end.getMonth() + 1).padLeft(), end.getDate().padLeft()].join('-') + ' '
                + [end.getHours().padLeft(), end.getMinutes().padLeft(), end.getSeconds().padLeft()].join(':');
            goal.MODIFIED_DATE = [today.getFullYear(), (today.getMonth() + 1).padLeft(), today.getDate().padLeft()].join('-') + ' '
                + [today.getHours().padLeft(), today.getMinutes().padLeft(), today.getSeconds().padLeft()].join(':');
            console.log(goal)
            console.log($scope.goalUserSelected)
            //Goals check if already assigned
            $http.post("/dash/goalsCheck",goal)
                .success(function(goalsExists)
                {
                    console.log("Goals check"+ goalsExists)
                    if(goalsExists == ''){
                        //To calculate the evaluation delay date
                        $http.get("/dash/settings/get/evaluation")
                            .success(function(evaluationType)
                            {
                                for(var i=0; i<evaluationType[0].obj.length; i++)
                                {
                                    if(evaluationType[0].obj[i].name == goal.EVALUATION_TYPE)
                                    {
                                        goal.EVALUATION_DAYS = parseInt(evaluationType[0].obj[i].days)
                                    }
                                }
                                $http.post("/dash/add/goals", goal)
                                    .success(function(res){
                                        if(res){
                                            /*jQuery.noConflict();
                                             $('#storeModal').modal('hide')
                                             bootbox.alert({
                                             title : 'SUCCESS',
                                             message : 'Successfully assigned Salesperson',
                                             className : 'text-center'
                                             })*/
                                            // $scope.refreshTransactions(4);
                                            if(res == 'no date')
                                            {
                                                bootbox.alert({
                                                    title : 'ERROR',
                                                    message : 'Please select start date and end date',
                                                    className : 'text-center'
                                                })
                                            }
                                            else
                                            {
                                                var user_body = {}
                                                user_body.TODAY_DATE = [today.getFullYear(), (today.getMonth() + 1).padLeft(), today.getDate().padLeft()].join('-') + ' '
                                                    + [today.getHours().padLeft(), today.getMinutes().padLeft(), today.getSeconds().padLeft()].join(':');
                                                user_body.EVALUATOR = goal.EVALUATOR;
                                                user_body.EVALUATOR_NUMBER = assign.sellerid;
                                                user_body.EVALUATION = $scope.goalUserSelected;
                                                //console.log(user_body)
                                                $http.post("/dash/calculate/users/performance",user_body)
                                                    .success(function(update_user)
                                                    {
                                                        console.log("User body---->>")
                                                        console.log(update_user)
                                                        if(update_user.n){
                                                            $scope.hideAddButton = false;
                                                            $scope.goalUserSelected = [];
                                                            /*   bootbox.alert({
                                                             title : 'Success',
                                                             message : 'Goal assigned successfully!!',
                                                             className : 'text-center'
                                                             })*/
                                                            $scope.editGoal.evaluator = {};
                                                            $scope.editGoal.evaluator1 = '';
                                                            $scope.editGoal.evaluation = {};
                                                            $scope.editGoal.evaluation1 = '';
                                                            $scope.editGoal.start = '';
                                                            $scope.editGoal.end = '';
                                                        }
                                                        else{
                                                            $scope.selectGoal(0,$scope.selectedGoal)
                                                            $scope.hideAddButton = false;
                                                            $scope.addEvaluatorRow = true;
                                                            bootbox.alert({
                                                                title : 'Error',
                                                                message : 'Goal not assigned!! Please try again.',
                                                                className : 'text-center'
                                                            })
                                                        }
                                                    })
                                                // jQuery.noConflict();
                                                // $('#goalModal').modal('hide')
                                            }
                                            $scope.selectGoal(0,$scope.selectedGoal)
                                        }
                                    })
                            })
                    }
                    else{
                        $scope.hideAddButton = false;
                        $scope.addEvaluatorRow = true;
                        bootbox.alert({
                            title : 'ERROR',
                            message : 'Goals already assigned!',
                            className : 'text-center'
                        })
                    }
                });
        }
        else{
            $scope.hideAddButton = false;
            $scope.addEvaluatorRow = true;
            bootbox.alert({
                title : 'ERROR',
                message : 'Please fill all the four fields.',
                className : 'text-center'
            })
            $scope.goalUserSelected = [];
            $scope.editGoal.evaluator = {};
            $scope.editGoal.evaluator1 = '';
            $scope.editGoal.evaluation = {};
            $scope.editGoal.evaluation1 = '';
            $scope.editGoal.start = '';
            $scope.editGoal.end = '';
        }
    }
    $scope.goalUserSelected = []
    $scope.evaluationSelected = function(user,checkvalue)
    {
        var goalUsers;
        try{
            goalUsers = JSON.parse(user)
            $scope.editGoal.evaluation1 = goalUsers.sellername
            $scope.editGoal.evaluation = goalUsers
        }
        catch (e)
        {
            goalUsers = user
            $scope.editGoal.evaluation1 = goalUsers.sellername
            $scope.editGoal.evaluation = goalUsers
        }
        var index = $scope.goalUserSelected.findIndex(function(el) {
            return el.sellerid == goalUsers.sellerid;
        });
        if(checkvalue != 'remove')
        {
            if ($scope.goalUserSelected.indexOf(goalUsers) == -1) {
                // SAFE
                $scope.goalUserSelected.push(goalUsers);
            }
            // $scope.goalUserSelected.push(goalUsers);
        }
        else
        {
            $scope.goalUserSelected.splice(index, 1);
        }
        $scope.editGoal.evaluation1 = '';
        jQuery.noConflict();
        $(".evaluationDropdown").css("display", "none");
        console.log($scope.goalUserSelected)
    }
    $scope.evaluatorSelected = function(evaluator,goal)
    {
        $scope.evaluatorUsers =[];
        $scope.goalUserSelected = [];
        var evaluatorObj = {};
        try {
            evaluatorObj = JSON.parse(evaluator)
            $scope.editGoal.evaluator1 = evaluatorObj.sellername
            $scope.editGoal.evaluator = evaluatorObj
        }
        catch (e)
        {
            evaluatorObj = evaluator
            $scope.editGoal.evaluator1 = evaluatorObj.sellername
            $scope.editGoal.evaluator = evaluatorObj
        }
        var tempArrayGoal = []
        var sellerID = evaluatorObj.sellerid ? evaluatorObj.sellerid : evaluatorObj.EMPLOYEE_ID
        $http.get("/dash/evaluator/users/"+evaluatorObj.EMPLOYEE_ID+"/"+sellerID)
            .success(function (response_evaluator1)
            {
                console.log("Evaluator1"+response_evaluator1.length);
                if(response_evaluator1.length)
                {
                    // $scope.evaluatorUsers = response_evaluator1;
                    $http.get("/dash/goals/"+goal.GOAL_ID+"/"+evaluatorObj.EMPLOYEE_ID+"/"+sellerID)
                        .success(function (response_evaluator)
                        {
                            tempArrayGoal = response_evaluator;
                            if(tempArrayGoal.length)
                            {
                                for( var i = 0; i<response_evaluator1.length; i++){
                                    for( var j=0; j<tempArrayGoal.length; j++){
                                        if(response_evaluator1[i].sellerphone != tempArrayGoal[j].EVALUATION){
                                            $scope.evaluatorUsers.push(response_evaluator1[i]);
                                        }
                                    }
                                }
                            }
                            else
                            {
                                $scope.evaluatorUsers = response_evaluator1;
                            }
                        })
                }
            })
        jQuery.noConflict();
        $(".evaluatorDropdown").css('display', 'none')
    }
    $scope.addGoalsConfiguration = function(evaluation)
    {
        if(evaluation != '' && evaluation != undefined){
            $scope.goalsConfigArray= {
                'holiday' : evaluation.holiday,
                'week_start' : evaluation.week_start,
                'week_end' : evaluation.week_end
            }
            $http.put("/dash/settings/update/goalsConfig",  $scope.goalsConfigArray)
                .success(function(res){
                    bootbox.alert({
                        title : 'SUCCESS',
                        message : 'Goals configuration successfully updated',
                        className : 'text-center'
                    })
                })
        }
        else{
            bootbox.alert({
                title : 'ERROR',
                message : 'Please enter text.',
                className : 'text-center'
            })
        }
    }
    $scope.removeEvaluationType = function(roles){
        var index = $scope.settingsEvaluation.map(function(o) { return o.name; }).indexOf(roles);
        console.log(index);
        if(index != -1 && ($scope.settingsEvaluation.length > 1)){
            console.log(index);
            $scope.settingsEvaluation.splice(index, 1);
            console.log($scope.settingsEvaluation)
            $http.put("/dash/settings/update/evaluationType", $scope.settingsEvaluation)
                .success(function(res){
                    //console.log(res);
                    // $scope.userRole = res;
                })
        }
        else{
            bootbox.alert({
                title : 'ERROR',
                message : 'A minimum of one type has to be present.',
                className : 'text-center'
            })
        }
    }
    $scope.addEvaluationType = function(type,days){
        var length = $scope.settingsEvaluation.length-1
        if(type != '' && type != undefined && days != '' && days != undefined){
            var typeCaps = type.charAt(0).toUpperCase();
            $scope.settingsEvaluation[length+1] = {
                'name' : typeCaps+type.slice(1),
                'days' : days
            };
            $scope.newEvaluationType.type = ''
            $scope.newEvaluationType.days = ''
            // $scope.settingsEvaluation[length+1] = type
            $http.put("/dash/settings/update/evaluationType",  $scope.settingsEvaluation)
                .success(function(res){
                    console.log(res);
                })
        }
        else{
            bootbox.alert({
                title : 'ERROR',
                message : 'Please enter both the fields.',
                className : 'text-center'
            })
        }
    }
    $scope.editEvaluationTypeFromSettings = function(roles, index){
        if(roles == undefined){
            bootbox.alert({
                title : "ERROR",
                message : "Please enter some text",
                className : "text-center"
            })
        }
        else{
            var rolesObj = [];
            rolesObj = $scope.settingsEvaluation;
            rolesObj[index] = {
                name : $scope.settingsEvaluation[index].name,
                days : roles
            };
            console.log(rolesObj)
            $http.put("/dash/settings/update/evaluationType",  $scope.settingsEvaluation)
                .success(function(res){
                    console.log(res);
                    if(res)
                    {
                        bootbox.alert({
                            title : 'SUCCESS',
                            message : 'Evaluation type successfully updated',
                            className : 'text-center'
                        })
                    }
                    else{
                        bootbox.alert({
                            title : 'Error',
                            message : 'Error while updating evaluation type',
                            className : 'text-center'
                        })
                    }
                })
        }
    };
    $scope.refreshGoalSellerNames = function(){
        if($scope.allGoalUsers){
            for(var j=0;j<$scope.allGoalUsers.length;j++){
                if($scope.allGoalUsers[j].userStatus == 'Active' || $scope.allGoalUsers[j].role != '')
                    $scope.sellerNames[$scope.allGoalUsers[j].EMPLOYEE_ID] = $scope.allGoalUsers[j].sellername;
                $scope.sellerNames[$scope.allGoalUsers[j].sellerphone] = $scope.allGoalUsers[j].sellername;
            }
        }
        //console.log($scope.sellerNames);
    }
    $scope.renderGoals = function (goals_list) {
        var goalResort = {};
        console.log("Render Goals-->" + goals_list.length);
        if($scope.allGoals.length != 0) {
            for(var i=0; i<goals_list.length; i++) {
                $scope.allGoals.push(goals_list[i]);
            }
        }
        else {
            $scope.allGoals = goals_list;
        }
        if($scope.user){
            if($scope.user.sellerObject){
                goalResort.resort = $scope.user.sellerObject.Resort;
            }
            else{
                goalResort.resort = '';
            }
        }
        else{
            goalResort.resort = '';
        }
        $http.post('/dash/allGoals/resorts',goalResort)
            .success(function (response) {
                console.log("All Goals reosrts--------->>>" + response.length);
                $scope.goalsResort = response; // -- resort dropdown with all the data for goals report
            });
    };
    $scope.renderColleagues = function (colleagues_list) {
        console.log("Render colleagues-->" + colleagues_list.length);
        $scope.atmsColleagues = colleagues_list;
        $http.get("/dash/usersResorts")
            .success(function (res) {
                $scope.usersResorts = res;
            });
    };
    $scope.renderIndividualReports = function (data) {
        console.log("Render Individual Reports-->");
        console.log(data);
        $scope.atmsIndividualReport = data;
        $scope.allIndividualReportData = data;
        $scope.atmsReportTransactionCount(data.length, 4);
    };
    $scope.ratingScale = function(rating,type)
    {
        console.log(rating)
        $scope.newGoal.RATING_SCALE.push(
            {
                'STAR' : type,
                'DESCRIPTION' : rating
            })
    }
    $scope.desc = [];
    $scope.addGoals = function()
    {
        if($scope.newGoal.GOAL_STATEMENT && $scope.desc.length != 0 && $scope.newGoal.WEIGHTAGE
            && $scope.newGoal.EVALUATION_TYPE && $scope.newGoal.DEPARTMENT)
        {
            /*for(var i=0; i<$scope.desc.length; i++)
             {
             $scope.newGoal.RATING_SCALE.push(
             {
             'STAR' : i+1,
             'DESCRIPTION' : $scope.desc[i]
             })
             }*/
            $scope.newGoal.RATING_1 = $scope.desc[0] ? $scope.desc[0] : '-'
            $scope.newGoal.RATING_2 = $scope.desc[1] ? $scope.desc[1] : '-'
            $scope.newGoal.RATING_3 = $scope.desc[2] ? $scope.desc[2] : '-'
            $scope.newGoal.RATING_4 = $scope.desc[3] ? $scope.desc[3] : '-'
            $scope.newGoal.RATING_5 = $scope.desc[4] ? $scope.desc[4] : '-'
            bootbox.confirm({
                title: 'CONFIRM',
                message: "Are you sure about adding the goal??",
                className: "text-center",
                buttons: {
                    confirm: {
                        label: 'YES',
                        className: 'btn-success'
                    },
                    cancel: {
                        label: 'Cancel',
                        className: 'btn-danger'
                    }
                },
                callback: function (result) {
                    if(result)
                    {
                        /*var start = new Date($scope.newGoal.START_DATE);
                         var end = new Date($scope.newGoal.END_DATE);
                         var date = new Date();
                         $scope.newGoal.START_DATE = [start.getFullYear(), (start.getMonth() + 1).padLeft(), start.getDate().padLeft()].join('-') + ' '
                         + [start.getHours().padLeft(), start.getMinutes().padLeft(), start.getSeconds().padLeft()].join(':');
                         $scope.newGoal.END_DATE = [end.getFullYear(), (end.getMonth() + 1).padLeft(), end.getDate().padLeft()].join('-') + ' '
                         + [end.getHours().padLeft(), end.getMinutes().padLeft(), end.getSeconds().padLeft()].join(':');
                         $scope.newGoal.DATE_ADDED = [date.getFullYear(), (date.getMonth() + 1).padLeft(), date.getDate().padLeft()].join('-') + ' '
                         + [date.getHours().padLeft(), date.getMinutes().padLeft(), date.getSeconds().padLeft()].join(':');
                         var tempEvaluationType = {}
                         try{
                         console.log($scope.newGoal.EVALUATION_TYPE)
                         tempEvaluationType = JSON.parse($scope.newGoal.EVALUATION_TYPE)
                         $scope.newGoal.EVALUATION_TYPE = tempEvaluationType.name
                         $scope.newGoal.EVALUATION_DAYS = tempEvaluationType.days
                         }
                         catch(e) {
                         tempEvaluationType = $scope.newGoal.EVALUATION_TYPE
                         $scope.newGoal.EVALUATION_TYPE = tempEvaluationType.name
                         $scope.newGoal.EVALUATION_DAYS = tempEvaluationType.days
                         }*/
                        $http.post("/dash/add/master/goals", $scope.newGoal)
                            .success(function(res)
                            {
                                console.log(res)
                                if(res){
                                    bootbox.alert({
                                        title : "SUCCESS",
                                        message : "New Goal added successfully!",
                                        className : 'text-center'
                                    })
                                }
                                $scope.addGoalButton = true;
                            })
                    }
                    else
                    {}
                }
            })
        }
        else{
            bootbox.alert({
                title : "ERROR",
                message : "Please enter all the fields",
                className : 'text-center'
            })
        }
    }
    $scope.changeGoalButton = function(flag){
        console.log("Change Goal Button------->>>");
        $scope.allGoalsDept = [];
        $scope.allGoalsEVroles = [];
        $scope.allGoalsRoles = [];
        var goalDept = {}
        if(flag) {
            console.log(flag)
            $scope.addGoalButton = true;
            $scope.newGoal = {};
        }
        else{
            $scope.addGoalButton = false;
            $scope.newGoal = {};
            // $scope.newGoal.RATING_SCALE = [];
            $scope.desc = [];
            // $scope.newItem.gst = defaultTaxObj;
            // $scope.newItem.Manufacturer = 'DEFAULT';
            // $scope.newItem.subCategory = 'DEFAULT';
            // $scope.addItemSubCategory = $scope.itemSubCategories;
            if($scope.user.sellerObject){
                goalDept.resort = $scope.user.sellerObject.Resort;
            }
            else{
                goalDept.resort = '';
            }
            $http.post('/dash/goalsDepartments',goalDept)
                .success(function (response) {
                    console.log("ALL goals dept--------->>>"+ response.length)
                    $scope.allGoalsDept = response
                });
            $http.post('/dash/goalsRoles',goalDept)
                .success(function (response) {
                    console.log("ALL goals roles--------->>>"+ response.length)
                    $scope.allGoalsRoles = response
                });
            $http.post('/dash/goalsEVrole',goalDept)
                .success(function (response) {
                    console.log("ALL goals ev roles--------->>>"+ response.length)
                    $scope.allGoalsEVroles = response
                });
            $http.get("/dash/settings/get/evaluation")
                .success(function(response){
                    console.log("Evaluation types" + response.length)
                    $scope.settingsEvaluation = response[0].obj;
                });
            $http.get("/dash/get/recentGoalID")
                .success(function(res){
                    console.log(res)
                    $scope.newGoal.GOAL_ID = res.GOAL_ID + 1;
                })
        }
    }
    $scope.groupallDepartmentsFunc=function(data){
        $scope.department_perf_groups=[];
        $scope.departmentperfgroup={};
        $scope.groupeddepartment=[];
        for (var i = 0; i < data.length; i++) {
            var temp_perf =data[i];
            // console.log(temp_perf);
            if (!$scope.checkIfallDepartmentPerfGrouped(temp_perf)) {
                $scope.departmentperfgroup = {
                    DEPARTMENT: temp_perf.DEPARTMENT,
                    RESORT:temp_perf.RESORT,
                    goals: []
                };
                $scope.department_perf_groups.push($scope.departmentperfgroup);
                $scope.departmentperfgroup.goals.push(temp_perf);
            }
        }
        $scope.groupeddepartment=$scope.department_perf_groups;
        if($scope.groupeddepartment){
            $scope.getallresortwisedetails($scope.groupeddepartment);
        }
    }
    $scope.getallresortwisedetails=function(goals){
        $scope.department_perf_groups =[];
        $scope.departmentbuttons=[]
        if(goals){
            // console.log(index)
            for(var i=0;i< goals.length;i++){
                // console.log($scope.department_perf_groups[i])
                if(goals[i].RESORT==$scope.resortname )
                {
                    $scope.department_perf_groups.push(goals[i])
                    $scope.departmentbuttons.push(goals[i].DEPARTMENT)
                }
            }
        }
    }
    $scope.checkIfallDepartmentPerfGrouped=function(perf_groups){
        for(var i=0;i<$scope.department_perf_groups.length;i++) {
            for (var j = 0; j < $scope.department_perf_groups[i].goals.length; j++) {
                // console.log(this.evaluatedGoals[i])
                if ($scope.department_perf_groups[i].goals[j].DEPARTMENT == perf_groups.DEPARTMENT && $scope.department_perf_groups[i].goals[j].RESORT == perf_groups.RESORT) {
                    // $scope.colleague_perf_groups[i].goals[j].WEIGHTAGE += perf_groups.weightage;
                    // $scope.colleague_perf_groups[i].weightage += perf_groups.weightage
                    $scope.department_perf_groups[i].goals.push(perf_groups);
                    return true;
                }
                else {
                    if (i == $scope.department_perf_groups.length - 1 && j == $scope.department_perf_groups[i].goals.length-1) {
                        return false;
                    }
                }
            }
        }
    }
    //Dashboard colleagues count func 1
    $scope.groupallColleaguescountFunc=function(data){
        // console.log("Data.....")
        // console.log(data)
        $scope.totalcolleagues=0;
        $scope.colleague_perf_groups_count = [];
        $scope.perfgroup_count = [];
        // console.log(data)
        for (var i = 0; i < data.length; i++) {
            var temp_perf =data[i];
            // console.log(data[i]._id.EVALUATION);
            if (!$scope.checkIfallColleaguePerfGroupedcount(temp_perf)) {
                $scope.perfgroup = {
                    EVALUATION: temp_perf._id.EVALUATION,
                    goals: []
                };
                $scope.colleague_perf_groups_count.push($scope.perfgroup);
                $scope.perfgroup.goals.push(temp_perf);
            }
        }
        $scope.totalcolleagues=$scope.colleague_perf_groups_count.length;
        // console.log("Resort count")
        // console.log($scope.colleague_perf_groups_count)
    }
    //Dashboard colleague count func 2
    $scope.checkIfallColleaguePerfGroupedcount=function(perf_groups){
        for(var i=0;i<$scope.colleague_perf_groups_count.length;i++) {
            for (var j = 0; j < $scope.colleague_perf_groups_count[i].goals.length; j++) {
                if ($scope.colleague_perf_groups_count[i].goals[j]._id.EVALUATION == perf_groups._id.EVALUATION) {
                    $scope.colleague_perf_groups_count[i].goals.push(perf_groups);
                    return true;
                }
                else {
                    if (i == $scope.colleague_perf_groups_count.length - 1 && j == $scope.colleague_perf_groups_count[i].goals.length-1) {
                        return false;
                    }
                }
            }
        }
    }
    //Dashboard colleague ng-repeat group by func 1---shradha
    $scope.groupallColleaguesFunc=function(data){
        // console.log("Data.....")
        // console.log(data)
        $scope.colleague_perf_groups = [];
        $scope.perfgroup = [];
        // $scope.groupedcolleagues=[]
        if(data.length){
            for (var i = 0; i < data.length; i++) {
                var temp_perf =data[i];
                // console.log(temp_perf);
                if (!$scope.checkIfallColleaguePerfGrouped(temp_perf)) {
                    $scope.perfgroup = {
                        EVALUATION: temp_perf._id.EVALUATION,
                        RESORT:temp_perf.resort,
                        DEPARTMENT:temp_perf.department,
                        EVALUATION_TYPE:temp_perf.evaluation_type,
                        cloudinaryurl:temp_perf.cloudinaryURL ? temp_perf.cloudinaryURL : '',
                        goals: []
                    };
                    $scope.colleague_perf_groups.push($scope.perfgroup);
                    $scope.perfgroup.goals.push(temp_perf);
                }
                if(i == data.length-1){
                    jQuery.noConflict();
                    $('.refresh').css("display", "none");
                }
            }
            // console.log("Grouped data last")
            // console.log($scope.colleague_perf_groups);
            if($scope.colleague_perf_groups) {
                for (var j = 0; j < $scope.colleague_perf_groups.length; j++) {
                    $scope.colleague_perf_groups[j].weightagesum =0;
                    $scope.colleague_perf_groups[j].Scoretotal=0;
                    $scope.colleague_perf_groups[j].colleagueFinalScore=0;
                    //    $scope.colleague_perf_groups[j].EVALUATION_TYPE = $scope.colleague_perf_groups[j].goals[k].evaluation_type;
                    for(var k=0;k<$scope.colleague_perf_groups[j].goals.length;k++){
                        // console.log($scope.colleague_perf_groups[j].goals[k].weightage)
                        $scope.colleague_perf_groups[j].colleague_code=$scope.colleague_perf_groups[j].goals[k].colleauge_code[0];
                        $scope.colleague_perf_groups[j].employee_name=$scope.colleague_perf_groups[j].goals[k].employee_name[0]
                        $scope.colleague_perf_groups[j].department=$scope.colleague_perf_groups[j].goals[k].department;
                        $scope.colleague_perf_groups[j].designation=$scope.colleague_perf_groups[j].goals[k].designation[0]
                        $scope.colleague_perf_groups[j].weightagesum += ($scope.colleague_perf_groups[j].goals[k].average ? $scope.colleague_perf_groups[j].goals[k].weightage: 0)
                        $scope.colleague_perf_groups[j].Scoretotal += ($scope.colleague_perf_groups[j].goals[k].average ? $scope.colleague_perf_groups[j].goals[k].average : 0) * $scope.colleague_perf_groups[j].goals[k].weightage;
                        if(k== $scope.colleague_perf_groups[j].goals.length-1){
                            $scope.colleague_perf_groups[j].colleagueFinalScore = ($scope.colleague_perf_groups[j].Scoretotal / ($scope.colleague_perf_groups[j].weightagesum * 5))*100
                        }
                    }
                }
            }
        }
        else{
            jQuery.noConflict();
            $('.refresh').css("display", "none");
        }
    }
    //Dashboard colleague ng-repeat group by func 2
    $scope.checkIfallColleaguePerfGrouped=function(perf_groups){
        for(var i=0;i<$scope.colleague_perf_groups.length;i++) {
            for (var j = 0; j < $scope.colleague_perf_groups[i].goals.length; j++) {
                if ($scope.colleague_perf_groups[i].goals[j]._id.EVALUATION == perf_groups._id.EVALUATION) {
                    $scope.colleague_perf_groups[i].goals.push(perf_groups);
                    return true;
                }
                else {
                    if (i == $scope.colleague_perf_groups.length - 1 && j == $scope.colleague_perf_groups[i].goals.length-1) {
                        return false;
                    }
                }
            }
        }
    }
    //Group by colleagues func 1 after search on Dashboard
    $scope.groupColleaguesFunc=function(data){
        // console.log("Data.....")
        // console.log(data)
        $scope.colleague_perf_groups = [];
        $scope.perfgroup = [];
        // console.log(data)
        for (var i = 0; i < data.length; i++) {
            var temp_perf =data[i];
            // console.log(data[i]._id.EVALUATION);
            if (!$scope.checkIfColleaguePerfGrouped(temp_perf)) {
                $scope.perfgroup = {
                    EVALUATION: temp_perf._id.EVALUATION,
                    cloudinaryurl:temp_perf.cloudinaryURL ? temp_perf.cloudinaryURL : '',
                    goals: []
                };
                $scope.colleague_perf_groups.push($scope.perfgroup);
                $scope.perfgroup.goals.push(temp_perf);
            }
        }
        // console.log($scope.colleague_perf_groups);
        if($scope.colleague_perf_groups) {
            for (var j = 0; j < $scope.colleague_perf_groups.length; j++) {
                $scope.colleague_perf_groups[j].weightagesum =0;
                $scope.colleague_perf_groups[j].Scoretotal=0;
                $scope.colleague_perf_groups[j].colleagueFinalScore=0;
                for (var k = 0; k < $scope.colleague_perf_groups[j].goals.length; k++) {
                    $scope.colleague_perf_groups[j].weightagesum += ($scope.colleague_perf_groups[j].goals[k].average ? $scope.colleague_perf_groups[j].goals[k].weightage: 0)
                    $scope.colleague_perf_groups[j].Scoretotal += $scope.colleague_perf_groups[j].goals[k].average * $scope.colleague_perf_groups[j].goals[k].weightage;
                    if(k== $scope.colleague_perf_groups[j].goals.length-1){
                        $scope.colleague_perf_groups[j].colleagueFinalScore = ($scope.colleague_perf_groups[j].Scoretotal/ ($scope.colleague_perf_groups[j].weightagesum * 5))*100
                    }
                    $scope.colleague_perf_groups[j].employee_name = $scope.colleague_perf_groups[j].goals[k].employee_name[0];
                    $scope.colleague_perf_groups[j].department = $scope.colleague_perf_groups[j].goals[k].department[0];
                    $scope.colleague_perf_groups[j].designation = $scope.colleague_perf_groups[j].goals[k].designation[0];
                    $scope.colleague_perf_groups[j].colleague_code = $scope.colleague_perf_groups[j].goals[k].colleauge_code[0];
                }
            }
        }
        // console.log($scope.colleague_perf_groups)
    }
    //Group by colleagues func 2 after search on Dashboard
    $scope.checkIfColleaguePerfGrouped=function(perf_groups){
        // console.log(perf_groups)
        for(var i=0;i<$scope.colleague_perf_groups.length;i++) {
            for (var j = 0; j < $scope.colleague_perf_groups[i].goals.length; j++) {
                // console.log(this.evaluatedGoals[i])
                if ($scope.colleague_perf_groups[i].goals[j].EVALUATION == perf_groups.EVALUATION) {
                    // $scope.colleague_perf_groups[i].goals[j].WEIGHTAGE += perf_groups.weightage;
                    // $scope.colleague_perf_groups[i].weightage += perf_groups.weightage
                    $scope.colleague_perf_groups[i].goals.push(perf_groups);
                    return true;
                }
                else {
                    if (i == $scope.colleague_perf_groups.length - 1 && j == $scope.colleague_perf_groups[i].goals.length-1) {
                        return false;
                    }
                }
            }
        }
    }
    //Department Report ng-repeat func 1
    $scope.groupReportsFunc = function(data){
        $scope.temp_groups2 = [];
        $scope.temObjArray = {};
        $scope.temObjArray.cols = []
        $scope.temObjArray.display = []
        $scope.temp = []
        var index=0
        var perfgroup = {};
        for (var i = 0; i < data.length; i++) {
            if(data[i].personal_details[0].length)
            {
                var temp_perf = data[i];
                if (!$scope.checkIfPerfGrouped(temp_perf)) {
                    perfgroup = {
                        ROLE : temp_perf['role'][0],
                        DEPARTMENT : temp_perf['department'][0],
                        RESORT : temp_perf['resort'][0],
                        EVALUATION : temp_perf['EVALUATION'][0],
                        DETAILS : temp_perf['personal_details'][0],
                        TOTAL : temp_perf['score'],
                        WEIGHTAGE : temp_perf['weightage'][0],
                        goals: []
                    };
                    $scope.temp_groups2.push(perfgroup);
                    var state_var = temp_perf['statement'][0]
                    var obj =  {
                        'SCORE' : temp_perf['score'],
                        'EVALUATION' : temp_perf['EVALUATION'][0],
                        'GOAL_ID' : temp_perf['GOAL_ID'][0],
                        'GOAL_STATEMENT' : temp_perf['statement'][0]
                    }
                    obj[state_var] = temp_perf['score']
                    perfgroup.goals.push(obj);
                }
                if(i == data.length -1){
                    // console.log($scope.temp_groups2);
                    // console.log($scope.temp_groups);
                    for(var j=0; j<$scope.temp_groups2.length; j++)
                    {
                        for(var k=0; k<$scope.temp_groups2[j].goals.length; k++)
                        {
                            $scope.temObjArray.display[index] = $scope.temp_groups2[j].goals[k]
                            if($scope.temp.indexOf($scope.temp_groups2[j].goals[k].GOAL_ID) == -1)
                            {
                                $scope.temp.push($scope.temp_groups2[j].goals[k].GOAL_ID)
                                $scope.temObjArray.cols.push({'GOAL_ID' : $scope.temp_groups2[j].goals[k].GOAL_ID,
                                    'GOAL_STATEMENT' : $scope.temp_groups2[j].goals[k].GOAL_STATEMENT})
                            }
                            index++;
                        }
                        if(j == $scope.temp_groups2.length-1)
                        {
                            console.log($scope.temp_groups2.length)
                            console.log($scope.temObjArray.length)
                            //This score was not coming for the last record. Hence download was not working -- Author : Bhargavi
                            if(!$scope.temp_groups2[j].FINAL_SCORE) $scope.temp_groups2[j].FINAL_SCORE = ($scope.temp_groups2[j].TOTAL/ ($scope.temp_groups2[j].WEIGHTAGE*5))*100
                            $scope.atmsReportTransactionCount($scope.temp_groups2,3);
                            jQuery.noConflict();
                            $('.refresh').css("display", "none");
                        }
                    }
                }
            }
            //
        }
    };
    //Department ng-repeat func 2
    $scope.checkIfPerfGrouped = function(perf) {
        for(var i=0;i<$scope.temp_groups2.length;i++) {
            // var total = $scope.temp_groups2[i].TOTAL
            for (var j = 0; j < $scope.temp_groups2[i].goals.length; j++) {
                if ($scope.temp_groups2[i].goals[j].EVALUATION == perf.EVALUATION[0]) {
                    var stateVar = perf.statement[0]
                    var obj = {
                        'SCORE' : perf.score,
                        'EVALUATION' : perf.EVALUATION[0],
                        'GOAL_ID' : perf.GOAL_ID[0],
                        'GOAL_STATEMENT' : perf.statement[0]
                    }
                    $scope.temp_groups2[i].TOTAL += perf.score
                    $scope.temp_groups2[i].WEIGHTAGE += perf.weightage[0]
                    obj[stateVar] = perf.score
                    $scope.temp_groups2[i].goals.push(obj);
                    if(j == $scope.temp_groups2[i].goals.length-1)
                    {
                        $scope.temp_groups2[i].FINAL_SCORE = ($scope.temp_groups2[i].TOTAL/ ($scope.temp_groups2[i].WEIGHTAGE*5))*100
                    }
                    return true;
                }
                else {
                    if (i == $scope.temp_groups2.length - 1 && j == $scope.temp_groups2[i].goals.length-1) {
                        $scope.temp_groups2[i].FINAL_SCORE = ($scope.temp_groups2[i].TOTAL/ ($scope.temp_groups2[i].WEIGHTAGE*5))*100
                        return false;
                    }
                }
            }
            // $scope.temp_groups2[i].FINAL_SCORE = ($scope.temp_groups2[i].TOTAL/ ($scope.temp_groups2[i].WEIGHTAGE*5))*100
        }
    }
    $scope.getScoreCard = function(id,score){
        // console.log(id)
        jQuery.noConflict();
        $('.refresh').css("display", "inline");
        $scope.scoreofemp=score;
        $scope.showmoregoals=[];
        $scope.employeecloudinary='';
        var start_date = $scope.atmsDasboard.dashboard_startDate;
        var today = $scope.atmsDasboard.dashboard_todayDate;
        today.setHours(0, 0, 0)
        start_date.setHours(0,0,0)
        resortfilter.TODAY_DATE = [today.getFullYear(), (today.getMonth() + 1).padLeft(), today.getDate().padLeft()].join('-') + ' '
            + [today.getHours().padLeft(), today.getMinutes().padLeft(), today.getSeconds().padLeft()].join(':');
        resortfilter.START_DATE = [start_date.getFullYear(), (start_date.getMonth() + 1).padLeft(), (start_date.getDate()).padLeft()].join('-') + ' '
            + [start_date.getHours().padLeft(), start_date.getMinutes().padLeft(), start_date.getSeconds().padLeft()].join(':');
        resortfilter.id = id;
        $http.get("/dash/atmssellercloudinary/"+ id) .success(function(response){
            console.log(response)
            $scope.employeecloudinary=response.cloudinaryURL;
        })
        $http.post("/dash/atms/empScoreCards",resortfilter)
            .success(function(response){
                // console.log("data from api"+ response.length);
                $scope.scoreCards = response;
                /* console.log("scorecard data")
                 console.log($scope.scoreCards);*/
                if($scope.scoreCards){
                    $scope.groupByScore($scope.scoreCards);
                }
            })
    }
    $scope.groupByScore = function(data) {
        $scope.allScoreCards = [];
        $scope.scoregroup = [];
        // var temp_sc
        if(data.length){
            for (var i = 0; i < data.length; i++) {
                for(var j=0;j<data[i].goals.length;j++) {
                    data[i].goals[j].PERFORMANCE_DATE = data[i]._id.PERFORMANCE_DATE;
                    var temp_perf = data[i].goals[j];
                    if (!$scope.checkIfScoreGrouped(temp_perf)) {
                        $scope.scoregroup = {
                            EVALUATION_TYPE: temp_perf.EVALUATION_TYPE,
                            goals: []
                        };
                        $scope.allScoreCards.push($scope.scoregroup);
                        $scope.scoregroup.goals.push(temp_perf);
                    }
                }
            }
            if($scope.allScoreCards){
                console.log($scope.allScoreCards)
                $scope.allScoreCards.employeename=$scope.scoreCards[0].employee_name;
                $scope.allScoreCards.designation=$scope.scoreCards[0].designation;
                $scope.allScoreCards.department=$scope.scoreCards[0].department;
                $scope.allScoreCards.colleaguecode=$scope.scoreCards[0].colleauge_code;
                $scope.allScoreCards.score=$scope.scoreofemp ? $scope.scoreofemp:0;
                $scope.allScoreCards.Manager=$scope.scoreCards[0].Manager;
                $scope.allScoreCards.Evaluation=$scope.scoreCards[0]._id.EVALUATION;
            }
            jQuery.noConflict();
            $('#employeeScorecardModal').modal('show');
            $('.refresh').css("display", "none");
        }
        else{
            jQuery.noConflict();
            $('.refresh').css("display", "none");
        }
        // console.log("all score")
        // console.log($scope.allScoreCards)
    }
    // function ATMSDialogController($scope, $mdDialog, dataToPass) {
    //     $scope.hide = function() {
    //         $mdDialog.hide();
    //     };
    //
    //     $scope.cancel = function() {
    //         $mdDialog.cancel();
    //     };
    //
    //     $scope.allScoreCards = dataToPass;
    //
    //
    //     $scope.answer = function(answer) {
    //
    //         $mdDialog.hide(answer);
    //     };
    //     $scope.formatDate=function(date) {
    //         if (!date) return;
    //         return new Date(date.replace(/-/g, "/"));
    //     };
    //     $scope.showmoregoals=[];
    //     $scope.showHideGoals=function(index){
    //         console.log(index)
    //
    //         $scope.showmoregoals[index] = !$scope.showmoregoals[index];
    //     }
    //
    // }
    $scope.showHideGoals=function(index){
        // console.log(index)
        $scope.showmoregoals[index] = !$scope.showmoregoals[index];
    }
    $scope.checkIfScoreGrouped = function(score){
        for(var i=0;i<$scope.allScoreCards.length;i++) {
            for (var j = 0; j < $scope.allScoreCards[i].goals.length; j++) {
                if ($scope.allScoreCards[i].goals[j].EVALUATION_TYPE == score.EVALUATION_TYPE) {
                    $scope.allScoreCards[i].goals.push(score);
                    return true;
                }
                else {
                    if (i == $scope.allScoreCards.length - 1 && j == $scope.allScoreCards[i].goals.length-1) {
                        return false;
                    }
                }
            }
        }
    }
    $scope.atmsReportView = function(id, name,newViewBy){
        $scope.atmsTabName = name;
        $scope.atmsTab = id;
        $scope.newViewBy = parseInt(newViewBy);
        if(id == 0){
            $scope.showATMSReports = false;
            $scope.atmsTabName = "Atmosphere Reports";
        }
        if(id == 1){
            $scope.showATMSReports = true;
            $scope.atmsTab = 1;
            $scope.atmsTabName = "Goals Report";
            $scope.viewLength = 0;
            $scope.newViewBy = viewBy.reportsGoals;
            /* $scope.showGoalFilter = false;
             $scope.atmsFilter1 = false;*/
            $scope.reportsGoalSearch.filter = '';
            $scope.reportsGoalSearch.allRole = '';
            if($scope.user.sellerObject){
                $scope.reportsGoalSearch.allResort = $scope.user.sellerObject.Resort;
                reportsGoalSearchObj.resort = $scope.user.sellerObject.Resort;
            }
            else{
                $scope.reportsGoalSearch.allResort = '';
                reportsGoalSearchObj.resort = '';
            }
            $scope.reportsGoalSearch.allDepartment = '';
            $scope.reportsGoalSearch.evaluationBy = '';
            $scope.reportsGoalSearch.allFrequency = '';
            reportsGoalSearchObj.viewLength = 0;
            reportsGoalSearchObj.viewBy = initialViewBy;
            reportsGoalSearchObj.searchBy = $scope.reportsGoalSearch.filter;
            reportsGoalSearchObj.searchFor = goalSearchBy;
            reportsGoalSearchObj.dept = '';
            reportsGoalSearchObj.allFrequency = '';
            reportsGoalSearchObj.evaluationBy = '';
            reportsGoalSearchObj.role = '';
            $scope.reportGoals = [];
            // $scope.tempGoals = []
            $http.post("/dash/goals", reportsGoalSearchObj)
                .success($scope.renderGoals);
            $http.post('/dash/reportAllGoals', reportsGoalSearchObj)
                .success(function (response) {
                    $scope.reportALLGoals = response; // --- dropdowns after department
                })
            $http.post('/dash/goals/count', reportsGoalSearchObj)
                .success(function (response) {
                    console.log("Goals count--------->>>");
                    $scope.atmsReportTransactionCount(response, 1)
                });
        }
        if(id == 2){
            $scope.showATMSReports = true;
            $scope.atmsTab = 2;
            $scope.atmsTabName = "Colleagues Report";
            $scope.reportsAllColleagues = [];
            $scope.atmsColleagues = [];
            $scope.showColleaguesFilter =false;
            $scope.atmsFilter2 = false;
            $scope.colleaguesReportSearch.filter ='';
            colleaguesSearchObj.viewLength = 0;
            colleaguesSearchObj.viewBy = initialViewBy;
            // colleaguesSearchObj.searchFor = $scope.colleaguesReportSearch.filter;
            // colleaguesSearchObj.searchBy = colleaguesSearchBy;
            colleaguesSearchObj.searchFor = $scope.colleaguesReportSearch.filter;
            colleaguesSearchObj.searchBy = sellerSearchBy;
            colleaguesSearchObj.DEPARTMENT ='';
            colleaguesSearchObj.Designation ='';
            colleaguesSearchObj.Supervisor_Name ='';
            colleaguesSearchObj.Assistant_Manager_Name ='';
            colleaguesSearchObj.Manager_Name ='';
            if($scope.user.sellerObject){
                $scope.colleaguesReportFilter.allResort = $scope.user.sellerObject.Resort;
                colleaguesSearchObj.resort = $scope.user.sellerObject.Resort;
                $http.post("/dash/reports/ATMS/colleagues", colleaguesSearchObj)
                    .success(function(res){
                        // console.log("Department.....")
                        // console.log(res)
                        $scope.reportsAllColleagues = res;
                        jQuery.noConflict();
                        $('.refresh').css("display", "none");
                    });
            }
            else{
                $scope.colleaguesReportFilter.allResort = '';
                colleaguesSearchObj.resort ='';
            }
            $scope.colleaguesReportFilter.all_Department = '';
            $scope.colleaguesReportFilter.all_Designation = '';
            $scope.colleaguesReportFilter.all_Supervisor_Name = '';
            $scope.colleaguesReportFilter.all_Assistant_Manager_Name = '';
            $scope.colleaguesReportFilter.all_Manager_Name = '';
            $scope.usersResorts = [];
            $scope.viewLength = 0;
            if(!newViewBy){
                $scope.newViewBy = parseInt(localViewBy);
            }
            // $http.post("/dash/reports/atms/sellers", colleaguesSearchObj)
            //     .success($scope.renderColleagues);
            //
            // $http.post("/dash/reports/ATMS/colleagues", colleaguesSearchObj)
            //     .success(function(res){
            //         $scope.reportsAllColleagues = res;
            //     });
            $http.get("/dash/usersResorts")
                .success(function (res) {
                    $scope.usersResorts = res;
                });
            $http.post("/dash/colleagues/count", colleaguesSearchObj)
                .success(function (res) {
                    /* console.log("colleagues count");
                     console.log(res)*/
                    $scope.atmsReportTransactionCount(res, 2);
                })
        }
        if(id == 3){
            $scope.showATMSReports = true;
            $scope.atmsTab = 3;
            $scope.atmsTabName = "Department Report";
            $scope.atmsDashboardReportDays = 0;
            $scope.performanceResorts = []; // push resorts from performance
            $scope.performanceDepartments = []; // push dept from performance
            $scope.performanceRole = []; // push role from performance
            $scope.dashboardFiltersTag = false
            $scope.viewLength = 0;
            $scope.newViewBy = viewBy.reportsGoals;
            $scope.showDashBoardFilter = false;
            $scope.atmsFilter3 = false;
            $scope.reportsDashboardSearch = {}
            reportsDashboardSearchObj.viewLength = 0;
            reportsDashboardSearchObj.viewBy = initialViewBy;
            reportsDashboardSearchObj.searchBy = [];
            reportsDashboardSearchObj.searchFor = '';
            reportsDashboardSearchObj.dept = '';
            reportsDashboardSearchObj.allFrequency = '';
            reportsDashboardSearchObj.evaluationBy = '';
            reportsDashboardSearchObj.role = '';
            reportsDashboardSearchObj.from = '';
            reportsDashboardSearchObj.end = '';
            $scope.temp_groups = [];
            $scope.reportDashboard_count = 0;
            $scope.reportsDashboardSearch.startDate = '';
            $scope.reportsDashboardSearch.endDate = new Date();
            $scope.reportsDashboardSearch.endDate.setHours(23, 59, 59, 59);
            $http.post("/dash/dashBoard/reports", reportsDashboardSearchObj)
                .success(function(res_dashboard)
                {
                    $scope.temp_groups = res_dashboard;
                    // $scope.reportDashboard_count = res_dashboard.length
                    $scope.groupReportsFunc(res_dashboard);
                    // $scope.atmsReportTransactionCount(res_dashboard,3)
                });
        }
        if(id == 4){
            $scope.showATMSReports = true;
            $scope.atmsIndividualReport =[];
            $scope.atmsTab = 4;
            $scope.atmsTabName = "Individual Report";
            $scope.atmsIndividualReportDays =0;
            $scope.searchColleagueBody = {};
            if($scope.user.sellerObject)
                $scope.searchColleagueBody.resort = $scope.user.sellerObject.Resort;
            $scope.showIndividualReportFilter =false;
            $scope.atmsFilter4 = false;
            $scope.individualReportSearch.filter ='';
            individualReportSearchObj.viewLength = 0;
            individualReportSearchObj.viewBy = initialViewBy;
            individualReportSearchObj.searchFor = [];
            individualReportSearchObj.searchBy = '';
            individualReportSearchObj.department ='';
            individualReportSearchObj.colleauge_code ='';
            individualReportSearchObj.startDate ='';
            individualReportSearchObj.endDate ='';
            $scope.individualReportFilter.all_Department ='';
            $scope.individualReportFilter.all_Colleague_Code ='';
            $scope.individualReportFilter.startDate ='';
            $scope.individualReportFilter.endDate = new Date();
            $scope.individualReportFilter.endDate.setHours(23, 59, 59, 59);
            $scope.viewLength = 0;
            if(!newViewBy){
                $scope.newViewBy = parseInt(localViewBy);
            }
            $http.post("/dash/reports/atms/individual", individualReportSearchObj)
                .success($scope.renderIndividualReports);
        }
        if(id == 5){
            console.log("atmsReportView--------->>>")
            $scope.atmsReportsDuration = 0;
            $scope.showATMSReports = true;
            $scope.atmsTab = 5;
            $scope.atmsTabName = "NC/NR Report";
            $scope.ncnrResorts =[];
            $scope.viewLength = 0;
            $scope.newViewBy = viewBy.reportsGoals;
            $scope.reportsNcNr.filter = '';
            $scope.reportsNcNr.startDate = '';
            $scope.reportsNcNr.endDate = new Date();
            $scope.reportsNcNr.endDate.setHours(23, 59, 59, 59);
            $scope.reportsNcNr.allDepartment = '';
            reportsNcNrObj.viewLength = 0;
            reportsNcNrObj.viewBy = initialViewBy;
            reportsNcNrObj.searchBy = [];
            reportsNcNrObj.searchFor = '';
            reportsNcNrObj.from = '';
            reportsNcNrObj.end = '';
            reportsNcNrObj.dept = '';
            $scope.allPerformanceReports = [];
            $scope.tempAllPerformanceReports = [];
            /*$http.post("/dash/nc/nr/reports",reportsNcNrObj)
             .success(function(res_evaluation)
             {
             console.log(res_evaluation)
             $scope.allPerformanceReports = res_evaluation
             })
             $http.post('/dash/performance/count', reportsNcNrObj)
             .success(function (response) {
             console.log("Performance count--------->>>")
             console.log(response)
             $scope.atmsReportTransactionCount(response, 5)
             });*/
            // $scope.atmsFilter5 = false
        }
    }
    /*$scope.tempNrCounts = function()
     {
     $http.get("/dash/group/evaluator")
     .success(function (response)
     {
     console.log(response.length)
     if(response.length) updateCount(0)
     function updateCount(index)
     {
     var k=index
     // if(index+'' == '') k=0
     console.log(k)
     var today = new Date();
     today.setHours(0,0,0)
     response[k].TODAY_DATE = [today.getFullYear(), (today.getMonth() + 1).padLeft(), today.getDate().padLeft()].join('-') + ' '
     + [today.getHours().padLeft(), today.getMinutes().padLeft(), today.getSeconds().padLeft()].join(':');
     $http.post("/dash/calculate/users/performance/temp",response[k])
     .success(function(count_response)
     {
     console.log(count_response)
     if(count_response)
     {
     if(k == response.length-1)
     {
     console.log("success")
     }
     else {
     console.log(k++)
     updateCount(k++)
     }
     }
     })
     }
     })
     }*/
    //pagination for all ATMS reports
    $scope.atmsReportsPage =  function(tab, direction, newViewBy){
        // console.log("newViewBy reportspage",newViewBy)
        $scope.newViewBy = parseInt(newViewBy);
        switch(tab){
            case 1:
                var viewLength = $scope.viewLength;
                var viewBy = $scope.newViewBy;
                if(direction){
                    // console.log("NEXT");
                    if(viewLength + viewBy >= $scope.reportGoals.length){
                        if(viewLength + viewBy < $scope.reportGoals_count){
                            viewLength += viewBy;
                            //console.log("Fetch more")
                            reportsGoalSearchObj.viewLength = viewLength;
                            reportsGoalSearchObj.viewBy = initialViewBy;
                            reportsGoalSearchObj.searchFor = $scope.reportsGoalSearch.filter;
                            reportsGoalSearchObj.searchBy = goalSearchBy;
                            $http.post("/dash/goals",reportsGoalSearchObj)
                                .success(function(response){
                                    console.log(response);
                                    for(var i=0; i<response.length; i++){
                                        $scope.reportGoals.push(response[i]);
                                    }
                                    if(viewLength + viewBy > $scope.reportGoals_count){
                                        a = viewLength + viewBy - $scope.reportGoals_count;
                                        viewBy -= a;
                                        $scope.newViewBy = viewBy;
                                    }
                                    $scope.viewLength = viewLength;
                                })
                        }
                        else{
                            // console.log("Out of data")
                            if(viewLength + viewBy > $scope.reportGoals_count){
                                a = viewLength + viewBy - $scope.reportGoals_count;
                                viewBy -= a;
                                $scope.newViewBy = viewBy;
                            }
                        }
                    }
                    else{
                        // console.log("Minus viewby")
                        viewLength += viewBy;
                        if(viewLength + viewBy > $scope.reportGoals_count){
                            a = viewLength + viewBy - $scope.reportGoals_count;
                            viewBy -= a;
                            if(viewLength + viewBy > $scope.reportGoals.length){
                                reportsGoalSearchObj.viewLength = $scope.reportGoals.length ;
                                reportsGoalSearchObj.viewBy = viewLength + viewBy - $scope.reportGoals.length;
                                reportsGoalSearchObj.searchFor = $scope.reportsGoalSearch.filter;
                                reportsGoalSearchObj.searchBy = goalSearchBy;
                                $http.post("/dash/goals",reportsGoalSearchObj)
                                    .success(function(response){
                                        console.log(response);
                                        for(var i=0; i<response.length; i++){
                                            $scope.reportGoals.push(response[i]);
                                        }
                                        console.log('$scope.itemreport.length',$scope.reportGoals.length);
                                        console.log('response',response.length)
                                    })
                            }
                        }else{
                            if(viewLength + viewBy > $scope.reportGoals.length){
                                reportsGoalSearchObj.viewLength = $scope.reportGoals.length ;
                                reportsGoalSearchObj.viewBy = viewLength + viewBy - $scope.reportGoals.length;
                                reportsGoalSearchObj.searchFor = $scope.reportsGoalSearch.filter;
                                reportsGoalSearchObj.searchBy = goalSearchBy;
                                $http.post("/dash/goals",reportsGoalSearchObj)
                                    .success(function(response){
                                        console.log(response);
                                        for(var i=0; i<response.length; i++){
                                            $scope.reportGoals.push(response[i]);
                                        }
                                    })
                            }
                        }
                        $scope.newViewBy = viewBy;
                        $scope.viewLength = viewLength;
                    }
                }
                else{
                    // console.log("BACK");
                    if(viewLength < viewBy){
                        // console.log("NO DATA")
                    }
                    else{
                        if(viewLength + viewBy >= $scope.reportGoals_count){
                            viewBy += a;
                            a = 0;
                        }
                        viewLength -= viewBy;
                        $scope.viewLength = viewLength;
                        $scope.newViewBy = viewBy;
                    }
                }
                break;
            case 2:
                var viewLength = $scope.viewLength;
                var viewBy = $scope.newViewBy;
                if(direction){
                    if(viewLength + viewBy >= $scope.atmsColleagues.length){
                        if(viewLength + viewBy < $scope.colleagues_count){
                            viewLength += viewBy;
                            colleaguesSearchObj.viewLength = viewLength;
                            colleaguesSearchObj.viewBy = initialViewBy;
                            colleaguesSearchObj.searchFor = $scope.colleaguesReportSearch.filter;
                            colleaguesSearchObj.searchBy = colleaguesSearchBy;
                            $http.post("/dash/reports/atms/sellers",colleaguesSearchObj)
                                .success(function(response){
                                    for(var i=0; i<response.length; i++){
                                        $scope.atmsColleagues.push(response[i]);
                                        console.log( $scope.atmsColleagues);
                                    }
                                    if(viewLength + viewBy > $scope.colleagues_count){
                                        a = viewLength + viewBy - $scope.colleagues_count;
                                        viewBy -= a;
                                        $scope.newViewBy = viewBy;
                                    }
                                    $scope.viewLength = viewLength;
                                })
                        }
                        else{
                            // console.log("Out of data")
                            if(viewLength + viewBy > $scope.colleagues_count){
                                a = viewLength + viewBy - $scope.colleagues_count;
                                viewBy -= a;
                                $scope.newViewBy = viewBy;
                            }
                        }
                    }
                    else{
                        viewLength += viewBy;
                        if(viewLength + viewBy > $scope.colleagues_count){
                            a = viewLength + viewBy - $scope.colleagues_count;
                            viewBy -= a;
                            if(viewLength + viewBy > $scope.atmsColleagues.length){
                                colleaguesSearchObj.viewLength = $scope.atmsColleagues.length;
                                colleaguesSearchObj.viewBy = viewLength + viewBy - $scope.atmsColleagues.length;
                                colleaguesSearchObj.searchFor = $scope.colleaguesReportSearch.filter;
                                colleaguesSearchObj.searchBy = colleaguesSearchBy;
                                $http.post("/dash/reports/atms/sellers",colleaguesSearchObj)
                                    .success(function(response){
                                        for(var i=0; i<response.length; i++){
                                            $scope.atmsColleagues.push(response[i]);
                                            console.log( $scope.atmsColleagues);
                                        }
                                    })
                            }
                        }else {
                            if(viewLength + viewBy > $scope.atmsColleagues.length){
                                colleaguesSearchObj.viewLength = $scope.atmsColleagues.length;
                                colleaguesSearchObj.viewBy = viewLength + viewBy - $scope.atmsColleagues.length;
                                colleaguesSearchObj.searchFor = $scope.colleaguesReportSearch.filter;
                                colleaguesSearchObj.searchBy = colleaguesSearchBy;
                                $http.post("/dash/reports/atms/sellers",colleaguesSearchObj)
                                    .success(function(response){
                                        for(var i=0; i<response.length; i++){
                                            $scope.atmsColleagues.push(response[i]);
                                            console.log( $scope.atmsColleagues);
                                        }
                                    })
                            }
                        }
                        $scope.newViewBy = viewBy;
                        $scope.viewLength = viewLength;
                    }
                }
                else{
                    if(viewLength < viewBy){
                        // console.log("NO DATA")
                    }
                    else{
                        if(viewLength + viewBy >= $scope.colleagues_count){
                            viewBy += a;
                            a = 0;
                        }
                        viewLength -= viewBy;
                        $scope.viewLength = viewLength;
                        $scope.newViewBy = viewBy;
                    }
                }
                break;
            case 3:
                var viewLength = $scope.viewLength;
                var viewBy = $scope.newViewBy;
                if(direction){
                    if(viewLength + viewBy >= $scope.temp_groups2.length){
                        if(viewLength + viewBy < $scope.reportDashboard_count){
                            viewLength += viewBy;
                            reportsDashboardSearchObj.viewLength = viewLength;
                            reportsDashboardSearchObj.viewBy = initialViewBy;
                            reportsDashboardSearchObj.searchFor = $scope.reportsDashboardSearch.filter;
                            reportsDashboardSearchObj.searchBy = colleaguesSearchBy;
                            $http.post("/dash/dashBoard/reports",reportsDashboardSearchObj)
                                .success(function(response){
                                    for(var i=0; i<response.length; i++){
                                        $scope.temp_groups2.push(response[i]);
                                        console.log( $scope.temp_groups);
                                    }
                                    $scope.groupReportsFunc(response);
                                    // $scope.atmsReportTransactionCount(response,3)
                                    if(viewLength + viewBy > $scope.reportDashboard_count){
                                        a = viewLength + viewBy - $scope.reportDashboard_count;
                                        viewBy -= a;
                                        $scope.newViewBy = viewBy;
                                    }
                                    $scope.viewLength = viewLength;
                                })
                        }
                        else{
                            // console.log("Out of data")
                            if(viewLength + viewBy > $scope.reportDashboard_count){
                                a = viewLength + viewBy - $scope.reportDashboard_count;
                                viewBy -= a;
                                $scope.newViewBy = viewBy;
                            }
                        }
                    }
                    else{
                        viewLength += viewBy;
                        if(viewLength + viewBy > $scope.reportDashboard_count){
                            a = viewLength + viewBy - $scope.reportDashboard_count;
                            viewBy -= a;
                            if(viewLength + viewBy > $scope.temp_groups2.length){
                                reportsDashboardSearchObj.viewLength = $scope.temp_groups2.length;
                                reportsDashboardSearchObj.viewBy = viewLength + viewBy - $scope.temp_groups2.length;
                                reportsDashboardSearchObj.searchFor = $scope.reportsDashboardSearch.filter;
                                reportsDashboardSearchObj.searchBy = colleaguesSearchBy;
                                $http.post("/dash/dashBoard/reports",reportsDashboardSearchObj)
                                    .success(function(response){
                                        for(var i=0; i<response.length; i++){
                                            $scope.temp_groups2.push(response[i]);
                                            console.log( $scope.temp_groups);
                                        }
                                        $scope.groupReportsFunc(response);
                                        // $scope.atmsReportTransactionCount(response,3)
                                    })
                            }
                        }else {
                            if(viewLength + viewBy > $scope.temp_groups2.length){
                                reportsDashboardSearchObj.viewLength = $scope.temp_groups2.length;
                                reportsDashboardSearchObj.viewBy = viewLength + viewBy - $scope.temp_groups2.length;
                                reportsDashboardSearchObj.searchFor = $scope.reportsDashboardSearch.filter;
                                reportsDashboardSearchObj.searchBy = colleaguesSearchBy;
                                $http.post("/dash/dashBoard/reports",colleaguesSearchObj)
                                    .success(function(response){
                                        for(var i=0; i<response.length; i++){
                                            $scope.temp_groups2.push(response[i]);
                                        }
                                        $scope.groupReportsFunc(response);
                                        // $scope.atmsReportTransactionCount(response,3)
                                    })
                            }
                        }
                        $scope.newViewBy = viewBy;
                        $scope.viewLength = viewLength;
                    }
                }
                else{
                    if(viewLength < viewBy){
                        // console.log("NO DATA")
                    }
                    else{
                        if(viewLength + viewBy >= $scope.reportDashboard_count){
                            viewBy += a;
                            a = 0;
                        }
                        viewLength -= viewBy;
                        $scope.viewLength = viewLength;
                        $scope.newViewBy = viewBy;
                    }
                }
                break;
            case 4:
                var viewLength = $scope.viewLength;
                var viewBy = $scope.newViewBy;
                if(direction){
                    if(viewLength + viewBy >= $scope.atmsIndividualReport.length){
                        if(viewLength + viewBy < $scope.individualReport_count){
                            viewLength += viewBy;
                            individualReportSearchObj.viewLength = viewLength;
                            individualReportSearchObj.viewBy = initialViewBy;
                            // individualReportSearchObj.startDate = $scope.DateTimeFormat($scope.individualReportFilter.startDate, 'start');
                            // individualReportSearchObj.startDate = $scope.DateTimeFormat($scope.individualReportFilter.endDate, 'end');
                            individualReportSearchObj.searchFor = $scope.individualReportSearch.filter;
                            individualReportSearchObj.searchBy = individualReportSearchBy;
                            $http.post("/dash/reports/atms/individual",individualReportSearchObj)
                                .success(function(response){
                                    for(var i=0; i<response.length; i++){
                                        $scope.atmsIndividualReport.push(response[i]);
                                        //console.log( $scope.individualReportFilter);
                                    }
                                    if(viewLength + viewBy > $scope.individualReport_count){
                                        a = viewLength + viewBy - $scope.individualReport_count;
                                        viewBy -= a;
                                        $scope.newViewBy = viewBy;
                                    }
                                    $scope.viewLength = viewLength;
                                })
                        }
                        else{
                            // console.log("Out of data")
                            if(viewLength + viewBy > $scope.individualReport_count){
                                a = viewLength + viewBy - $scope.individualReport_count;
                                viewBy -= a;
                                $scope.newViewBy = viewBy;
                            }
                        }
                    }
                    else{
                        // console.log("Minus viewby")
                        viewLength += viewBy;
                        if(viewLength + viewBy > $scope.individualReport_count){
                            a = viewLength + viewBy - $scope.individualReport_count;
                            viewBy -= a;
                            if(viewLength + viewBy > $scope.atmsIndividualReport.length){
                                individualReportSearchObj.viewLength = $scope.atmsIndividualReport.length;
                                individualReportSearchObj.viewBy = viewLength + viewBy - $scope.atmsIndividualReport.length;
                                // colleaguesSearchObj.sDate = $scope.DateTimeFormat($scope.sellerReportFilter.startDate, 'start');
                                // colleaguesSearchObj.eDate = $scope.DateTimeFormat($scope.sellerReportFilter.endDate, 'end');
                                individualReportSearchObj.searchFor = $scope.individualReportSearch.filter;
                                individualReportSearchObj.searchBy = individualReportSearchBy;
                                $http.post("/dash/reports/atms/individual",individualReportSearchObj)
                                    .success(function(response){
                                        for(var i=0; i<response.length; i++){
                                            $scope.atmsIndividualReport.push(response[i]);
                                            console.log( $scope.atmsIndividualReport);
                                        }
                                    })
                            }
                        }else {
                            if(viewLength + viewBy > $scope.atmsIndividualReport.length){
                                individualReportSearchObj.viewLength = $scope.atmsIndividualReport.length;
                                individualReportSearchObj.viewBy = viewLength + viewBy - $scope.atmsIndividualReport.length;
                                // colleaguesSearchObj.sDate = $scope.DateTimeFormat($scope.sellerReportFilter.startDate, 'start');
                                // colleaguesSearchObj.eDate = $scope.DateTimeFormat($scope.sellerReportFilter.endDate, 'end');
                                individualReportSearchObj.searchFor = $scope.individualReportSearch.filter;
                                individualReportSearchObj.searchBy = individualReportSearchBy;
                                $http.post("/dash/reports/atms/individual",individualReportSearchObj)
                                    .success(function(response){
                                        for(var i=0; i<response.length; i++){
                                            $scope.atmsIndividualReport.push(response[i]);
                                            console.log($scope.atmsIndividualReport);
                                        }
                                    })
                            }
                        }
                        $scope.newViewBy = viewBy;
                        $scope.viewLength = viewLength;
                    }
                }
                else{
                    console.log(viewLength);
                    console.log(viewBy);
                    console.log($scope.individualReport_count);
                    if(viewLength < viewBy){
                        // console.log("NO DATA")
                    }
                    else{
                        if(viewLength + viewBy >= $scope.individualReport_count){
                            viewBy += a;
                            a = 0;
                        }
                        viewLength -= viewBy;
                        $scope.viewLength = viewLength;
                        $scope.newViewBy = viewBy;
                    }
                }
                break;
            case 5:
                var viewLength = $scope.viewLength;
                var viewBy = $scope.newViewBy;
                if(direction){
                    // console.log("NEXT");
                    if(viewLength + viewBy >= $scope.allPerformanceReports.length){
                        if(viewLength + viewBy < $scope.ncNr_count){
                            viewLength += viewBy;
                            //console.log("Fetch more")
                            reportsNcNrObj.viewLength = viewLength;
                            reportsNcNrObj.viewBy = initialViewBy;
                            reportsNcNrObj.searchFor = $scope.reportsNcNr.filter;
                            reportsNcNrObj.searchBy = goalSearchBy;
                            $http.post("/dash/ncNReports",reportsNcNrObj)
                                .success(function(response){
                                    console.log(response);
                                    for(var i=0; i<response.length; i++){
                                        if(response[i].NR != 0 || response[i].sumValueNc != 0) $scope.allPerformanceReports.push(response[i]);
                                    }
                                    if(viewLength + viewBy > $scope.ncNr_count){
                                        a = viewLength + viewBy - $scope.ncNr_count;
                                        viewBy -= a;
                                        $scope.newViewBy = viewBy;
                                    }
                                    $scope.viewLength = viewLength;
                                })
                        }
                        else{
                            // console.log("Out of data")
                            if(viewLength + viewBy > $scope.ncNr_count){
                                a = viewLength + viewBy - $scope.ncNr_count;
                                viewBy -= a;
                                $scope.newViewBy = viewBy;
                            }
                        }
                    }
                    else{
                        // console.log("Minus viewby")
                        viewLength += viewBy;
                        if(viewLength + viewBy > $scope.ncNr_count){
                            a = viewLength + viewBy - $scope.ncNr_count;
                            viewBy -= a;
                            if(viewLength + viewBy > $scope.allPerformanceReports.length){
                                reportsNcNrObj.viewLength = $scope.allPerformanceReports.length ;
                                reportsNcNrObj.viewBy = viewLength + viewBy - $scope.reportGoals.length;
                                reportsNcNrObj.searchFor = $scope.reportsNcNr.filter;
                                reportsNcNrObj.searchBy = goalSearchBy;
                                $http.post("/dash/ncNReports",reportsNcNrObj)
                                    .success(function(response){
                                        console.log(response);
                                        for(var i=0; i<response.length; i++){
                                            if(response[i].NR != 0 || response[i].sumValueNc != 0) $scope.allPerformanceReports.push(response[i]);
                                        }
                                        console.log('$scope.itemreport.length',$scope.allPerformanceReports.length);
                                        console.log('response',response.length)
                                    })
                            }
                        }else{
                            if(viewLength + viewBy > $scope.allPerformanceReports.length){
                                reportsNcNrObj.viewLength = $scope.allPerformanceReports.length ;
                                reportsNcNrObj.viewBy = viewLength + viewBy - $scope.allPerformanceReports.length;
                                reportsNcNrObj.searchFor = $scope.reportsNcNr.filter;
                                reportsNcNrObj.searchBy = goalSearchBy;
                                $http.post("/dash/ncNReports",reportsNcNrObj)
                                    .success(function(response){
                                        console.log(response);
                                        for(var i=0; i<response.length; i++){
                                            if(response[i].NR != 0 || response[i].sumValueNc != 0) $scope.allPerformanceReports.push(response[i]);
                                        }
                                    })
                            }
                        }
                        $scope.newViewBy = viewBy;
                        $scope.viewLength = viewLength;
                    }
                }
                else{
                    // console.log("BACK");
                    if(viewLength < viewBy){
                        // console.log("NO DATA")
                    }
                    else{
                        if(viewLength + viewBy >= $scope.ncNr_count){
                            viewBy += a;
                            a = 0;
                        }
                        viewLength -= viewBy;
                        $scope.viewLength = viewLength;
                        $scope.newViewBy = viewBy;
                    }
                }
                break;
        }
    }
    $scope.atmsToggleFilter = function(flag, tab){
        switch(tab){
            case 1 :
                if(flag)
                    $scope.atmsFilter1 = true;
                else
                    $scope.atmsFilter1 = false;
                break;
            case 2 :
                if(flag)
                    $scope.atmsFilter2 = true;
                else
                    $scope.atmsFilter2 = false;
                break;
            case 3 :
                if(flag)
                    $scope.atmsFilter3 = true;
                else
                    $scope.atmsFilter3 = false;
                break;
            case 4 :
                if(flag)
                    $scope.atmsFilter4 = true;
                else
                    $scope.atmsFilter4 = false;
                break;
            case 5 :
                if(flag)
                    $scope.atmsFilter5 = true;
                else
                    $scope.atmsFilter5 = false;
                break;
        }
    }
    $scope.atmsRefreshReports = function(id){
        jQuery.noConflict();
        $('.refresh').css("display", "inline");
        switch (id) {
            case 0:
                $scope.loaded(36);
                break;
            case 1 :
                $scope.atmsReportView(1);
                break;
            case 2 :
                $scope.atmsReportView(2);
                break;
            case 3 :
                $scope.atmsReportView(3);
                break;
            case 4 :
                $scope.atmsReportView(4);
                break;
            case 5 :
                $scope.atmsReportView(5);
                break;
        }
        setTimeout(function () {
            $('.refresh').css("display", "none");
        }, 2000)
    }
    $scope.atmsClearReportFilter = function(tab){
        switch(tab) {
            //CLear goals filter
            case 1:
                $scope.viewLength = 0;
                $scope.newViewBy = viewBy.reportsGoals;
                $scope.reportsGoalSearch.filter = '';
                $scope.reportsGoalSearch.allRole = '';
                if($scope.user.sellerObject){
                    $scope.reportsGoalSearch.allResort = $scope.user.sellerObject.Resort;
                    reportsGoalSearchObj.resort = $scope.user.sellerObject.Resort;
                }
                else{
                    $scope.reportsGoalSearch.allResort = '';
                    reportsGoalSearchObj.resort = '';
                }
                $scope.reportsGoalSearch.allDepartment = '';
                $scope.reportsGoalSearch.evaluationBy = '';
                $scope.reportsGoalSearch.allFrequency = '';
                reportsGoalSearchObj.viewLength = 0;
                reportsGoalSearchObj.viewBy = initialViewBy;
                reportsGoalSearchObj.searchBy = [];
                reportsGoalSearchObj.searchFor = '';
                reportsGoalSearchObj.dept = '';
                reportsGoalSearchObj.allFrequency = '';
                reportsGoalSearchObj.evaluationBy = '';
                reportsGoalSearchObj.role = '';
                $scope.reportGoals = [];
                //   $scope.tempGoals = []
                console.log(reportsGoalSearchObj);
                $http.post("/dash/goals", reportsGoalSearchObj)
                    .success($scope.renderGoals);
                $http.post('/dash/goals/count', reportsGoalSearchObj)
                    .success(function (response) {
                        console.log("Goals count--------->>>")
                        console.log(response)
                        $scope.atmsReportTransactionCount(response, 1)
                    });
                //  $scope.showGoalFilter = false;
                break;
            case 2:
                $scope.viewLength = 0;
                $scope.newViewBy = localViewBy;
                $scope.colleaguesReportSearch.filter = '';
                colleaguesSearchObj.viewLength = 0;
                colleaguesSearchObj.viewBy = initialViewBy;
                colleaguesSearchObj.searchBy = [];
                colleaguesSearchObj.searchFor = '';
                if($scope.user.sellerObject){
                    $scope.colleaguesReportFilter.allResort = $scope.user.sellerObject.Resort;
                    colleaguesSearchObj.resort = $scope.user.sellerObject.Resort;
                }
                else{
                    $scope.colleaguesReportFilter.allResort = '';
                    colleaguesSearchObj.resort = '';
                }
                $scope.atmsColleagues = [];
                // $http.post("/dash/reports/atms/sellers", colleaguesSearchObj)
                //     .success(function(response){
                //         $scope.atmsColleagues = response;
                //
                //     })
                $http.post("/dash/colleagues/count", colleaguesSearchObj)
                    .success(function (res) {
                        $scope.atmsReportTransactionCount(res, 2);
                    });
                $http.post("/dash/reports/ATMS/colleagues", colleaguesSearchObj)
                    .success(function(res){
                        $scope.reportsAllColleagues = res;
                        jQuery.noConflict();
                        $('.refresh').css("display", "none");
                    });
                $http.get("/dash/usersResorts")
                    .success(function (res) {
                        $scope.usersResorts = res;
                    });
                $scope.showColleaguesFilter = false;
                break;
            case 3:
                $scope.viewLength = 0;
                $scope.newViewBy = localViewBy;
                $scope.reportsDashboardSearch.filter = '';
                $scope.reportsDashboardSearch = {}
                $scope.atmsDashboardReportDays = 0;
                /* reportsGoalSearchObj.viewLength = 0;
                 reportsGoalSearchObj.viewBy = initialViewBy;
                 reportsGoalSearchObj.searchBy = [];
                 reportsGoalSearchObj.searchFor = '';
                 $scope.temp_groups2 = [];
                 $http.post("/dash/dashBoard/reports", reportsGoalSearchObj)
                 .success(function(response){
                 $scope.temp_groups = response;
                 // $scope.reportDashboard_count = response.length
                 $scope.groupReportsFunc(response);
                 // $scope.atmsReportTransactionCount(response,3)
                 })*/
                // $scope.showIndividualReportFilter = false;
                break;
            case 4:
                $scope.viewLength = 0;
                $scope.newViewBy = localViewBy;
                $scope.individualReportSearch.filter = '';
                individualReportSearchObj.viewLength = 0;
                individualReportSearchObj.viewBy = initialViewBy;
                individualReportSearchObj.searchBy = [];
                individualReportSearchObj.searchFor = '';
                $scope.atmsIndividualReport = [];
                $http.post("/dash/reports/atms/individual", individualReportSearchObj)
                    .success(function(response){
                        if(response){
                            $scope.individualScoretotal =0;
                            $scope.individualFinalScore =0;
                            $scope.weightagesSum = 0;
                            $scope.atmsIndividualReport = response;
                            $scope.atmsReportTransactionCount(response.length, 4);
                            for(var i=0; i< $scope.atmsIndividualReport.length; i++){
                                $scope.individualScoretotal += $scope.atmsIndividualReport[i].average * $scope.atmsIndividualReport[i].weightage;
                                $scope.weightagesSum += ($scope.atmsIndividualReport[i].average ? $scope.atmsIndividualReport[i].weightage : 0);
                                if(i== $scope.atmsIndividualReport.length-1){
                                    $scope.individualFinalScore = ($scope.individualScoretotal/ ($scope.weightagesSum * 5))*100
                                }
                            }
                        }
                    })
                $scope.showIndividualReportFilter = false;
                break;
            case 5:
                reportsNcNrObj.viewLength = 0;
                reportsNcNrObj.viewBy = initialViewBy;
                reportsNcNrObj.searchBy = [];
                reportsNcNrObj.searchFor = '';
                // reportsNcNrObj.dept = '';
                $scope.allPerformanceReports = [];
                // $scope.tempAllPerformanceReports = [];
                $scope.reportsNcNr.filter = '';
                // $scope.reportsNcNr.allDepartment = '';
                $http.post("/dash/ncNReports",reportsNcNrObj)
                    .success(function(res_evaluation)
                    {
                        console.log(res_evaluation)
                        for(var i=0; i<res_evaluation.length; i++)
                        {
                            if(res_evaluation[i].NR != 0 || res_evaluation[i].NC != 0) $scope.allPerformanceReports.push(res_evaluation[i]);
                        }
                        // $scope.allPerformanceReports = res_evaluation
                        // $scope.tempAllPerformanceReports = res_evaluation
                        $scope.atmsReportTransactionCount($scope.allPerformanceReports.length, 5)
                    })
                /*$http.post('/dash/performance/count', reportsNcNrObj)
                 .success(function (response) {
                 console.log("Performance count--------->>>")
                 console.log(response)
                 var tempArray = []
                 for(var i=0; i<response.length; i++)
                 {
                 if(response[i].NR != 0 || response[i].sumValueNc != 0) tempArray.push(response[i]);
                 }
                 $scope.atmsReportTransactionCount(tempArray.length, 5)
                 });*/
                $scope.showNcNrFilter = false;
                break;
        }
    }
    $scope.atmsclearSearch = function(id){
        if(id == 1){
            $scope.reportsGoalSearch.filter = '';
            reportsGoalSearchObj.searchFor = '';
            $scope.atmsReportFilter(1);
        }
        if(id==2){
            $scope.colleaguesReportSearch.filter = '';
            colleaguesSearchObj.searchFor = '';
            $scope.atmsReportFilter(2);
        }
    }
    $scope.atmsReportFilter = function(id,tag){
        if(id == 1){
            reportsGoalSearchObj.viewLength = 0;
            reportsGoalSearchObj.viewBy = initialViewBy;
            $scope.viewLength = 0;
            $scope.newViewBy = localViewBy;
            if($scope.reportsGoalSearch.filter){
                reportsGoalSearchObj.searchFor = $scope.reportsGoalSearch.filter;
                reportsGoalSearchObj.searchBy = goalSearchBy;
            }
            if($scope.reportsGoalSearch.allResort){
                reportsGoalSearchObj.resort = $scope.reportsGoalSearch.allResort;
            }
            else{
                if($scope.user.sellerObject){
                    $scope.reportsGoalSearch.allResort = $scope.user.sellerObject.Resort;
                    reportsGoalSearchObj.resort = $scope.user.sellerObject.Resort;
                }
                else{
                    $scope.reportsGoalSearch.allResort = '';
                    reportsGoalSearchObj.resort = '';
                }
            }
            if($scope.reportsGoalSearch.allDepartment != ''){
                reportsGoalSearchObj.dept = $scope.reportsGoalSearch.allDepartment;
            }
            else{
                reportsGoalSearchObj.dept = ''
            }
            if($scope.reportsGoalSearch.allRole){
                reportsGoalSearchObj.role = $scope.reportsGoalSearch.allRole;
            }
            else{
                reportsGoalSearchObj.role = ''
            }
            if($scope.reportsGoalSearch.evaluationBy){
                reportsGoalSearchObj.evaluationBy = $scope.reportsGoalSearch.evaluationBy;
            }
            else{
                reportsGoalSearchObj.evaluationBy = ''
            }
            if($scope.reportsGoalSearch.allFrequency){
                reportsGoalSearchObj.allFrequency = $scope.reportsGoalSearch.allFrequency;
            }
            else{
                reportsGoalSearchObj.allFrequency = ''
            }
            // $scope.reportGoals = [];
            // $scope.reportALLGoals = [];
            // console.log(reportsGoalSearchObj);
            $http.post("/dash/goals",reportsGoalSearchObj)
                .success(function(response){
                    // console.log(response);
                    $scope.reportGoals = response;
                    /* if($scope.reportGoals.length == 0){
                     $scope.tempGoals = $scope.allGoals;
                     }*/
                })
            $http.post('/dash/goals/count', reportsGoalSearchObj)
                .success(function (response) {
                    $scope.atmsReportTransactionCount(response, 1);
                });
            $http.post('/dash/reportAllGoals', reportsGoalSearchObj)
                .success(function (response) {
                    $scope.reportALLGoals = response; // ---- All dropdowns after resort
                })
            $scope.showGoalFilter = true;
            if($scope.reportsGoalSearch.filter == '')
                $scope.showGoalFilter = false;
        }
        if(id == 2){
            jQuery.noConflict();
            $('.refresh').css("display", "inline");
            $scope.atmsColleagues =[];
            colleaguesSearchObj.viewLength = 0;
            colleaguesSearchObj.viewBy = initialViewBy;
            $scope.viewLength = 0;
            $scope.newViewBy = localViewBy;
            console.log($scope.colleaguesReportSearch.filter)
            if($scope.colleaguesReportSearch.filter){
                colleaguesSearchObj.searchFor = $scope.colleaguesReportSearch.filter;
                colleaguesSearchObj.searchBy = colleaguesSearchBy;
            }
            if($scope.colleaguesReportFilter.allResort){
                colleaguesSearchObj.resort = $scope.colleaguesReportFilter.allResort;
            }
            else{
                if($scope.user.sellerObject){
                    $scope.colleaguesReportFilter.allResort = $scope.user.sellerObject.Resort;
                    colleaguesSearchObj.resort = $scope.user.sellerObject.Resort;
                }
                else{
                    $scope.colleaguesReportFilter.allResort = '';
                    colleaguesSearchObj.resort = ''
                }
            }
            if($scope.colleaguesReportFilter.all_Department){
                colleaguesSearchObj.DEPARTMENT = $scope.colleaguesReportFilter.all_Department;
            }
            else{
                colleaguesSearchObj.DEPARTMENT = ''
            }
            if($scope.colleaguesReportFilter.all_Designation){
                colleaguesSearchObj.Designation = $scope.colleaguesReportFilter.all_Designation;
            }
            else{
                colleaguesSearchObj.Designation = ''
            }
            if($scope.colleaguesReportFilter.all_Supervisor_Name){
                colleaguesSearchObj.Supervisor_Name = $scope.colleaguesReportFilter.all_Supervisor_Name;
            }
            else{
                colleaguesSearchObj.Supervisor_Name = ''
            }
            if($scope.colleaguesReportFilter.all_Assistant_Manager_Name){
                colleaguesSearchObj.Assistant_Manager_Name = $scope.colleaguesReportFilter.all_Assistant_Manager_Name;
            }
            else{
                colleaguesSearchObj.Assistant_Manager_Name = ''
            }
            if($scope.colleaguesReportFilter.all_Manager_Name){
                colleaguesSearchObj.Manager_Name = $scope.colleaguesReportFilter.all_Manager_Name;
            }
            else{
                colleaguesSearchObj.Manager_Name = ''
            }
            $http.post("/dash/reports/atms/sellers", colleaguesSearchObj)
                .success(function(response){
                    console.log("sellers "+ response.length);
                    $scope.atmsColleagues = response;
                });
            $http.post("/dash/reports/ATMS/colleagues", colleaguesSearchObj)
                .success(function(res){
                    $scope.reportsAllColleagues = res;
                    jQuery.noConflict();
                    $('.refresh').css("display", "none");
                });
            $http.post("/dash/colleagues/count", colleaguesSearchObj)
                .success(function (res) {
                    $scope.atmsReportTransactionCount(res, 2);
                })
            $scope.showColleaguesFilter = true;
            if($scope.colleaguesReportSearch.filter == '')
                $scope.showColleaguesFilter = false;
        }
        if(id == 3){
            console.log("Department reports--->>>");
            jQuery.noConflict();
            $('.refresh').css("display", "inline");
            $scope.dashboardFiltersTag = false
            reportsDashboardSearchObj.viewLength = 0;
            reportsDashboardSearchObj.viewBy = initialViewBy;
            $scope.viewLength = 0;
            $scope.newViewBy = localViewBy;
            if(tag){
                reportsDashboardSearchObj.searchFor = tag;
                reportsDashboardSearchObj.searchBy = dashboardReportSearchBy;
            }
            if($scope.reportsDashboardSearch.department){
                reportsDashboardSearchObj.department = $scope.reportsDashboardSearch.department;
            }
            else{
                reportsDashboardSearchObj.department = ''
            }
            if($scope.reportsDashboardSearch.role){
                reportsDashboardSearchObj.role = $scope.reportsDashboardSearch.role;
            }
            else{
                reportsDashboardSearchObj.role = ''
            }
            if($scope.reportsDashboardSearch.startDate){
                reportsDashboardSearchObj.startDate = $scope.reportsDashboardSearch.startDate;
            }
            else{
                reportsDashboardSearchObj.startDate = ''
            }
            if($scope.reportsDashboardSearch.endDate){
                reportsDashboardSearchObj.endDate = $scope.reportsDashboardSearch.endDate;
            }
            else{
                reportsDashboardSearchObj.endDate = ''
            }
            if($scope.reportsDashboardSearch.resort){
                reportsDashboardSearchObj.resort = $scope.reportsDashboardSearch.resort;
            }
            else{
                if($scope.user.sellerObject){
                    reportsDashboardSearchObj.resort = $scope.user.sellerObject.Resort;
                    $scope.reportsDashboardSearch.resort = $scope.user.sellerObject.Resort;
                }else{
                    reportsDashboardSearchObj.resort = ''
                    $scope.reportsDashboardSearch.resort = ''
                }
            }
            console.log(reportsDashboardSearchObj)
            $http.post("/dash/dashBoard/reports", reportsDashboardSearchObj)
                .success(function(res_dashboard)
                {
                    console.log(res_dashboard.length);
                    // console.log(res_dashboard)
                    $scope.temp_groups = res_dashboard;
                    $scope.groupReportsFunc(res_dashboard);
                    if($scope.reportsDashboardSearch.startDate && $scope.reportsDashboardSearch.endDate &&
                        $scope.reportsDashboardSearch.department && $scope.reportsDashboardSearch.role && res_dashboard.length)
                    {
                        $scope.dashboardFiltersTag = true
                    }
                    // $scope.atmsReportTransactionCount(res_dashboard,3)
                })
            //Not using it -- Author : Bhargavi
            $scope.tempDashbordDropdown=[]
            $http.post("/dash/dashBoard/reports/count", reportsDashboardSearchObj)
                .success(function(res_dashboard)
                {
                    $scope.tempDashbordDropdown = res_dashboard;
                    // $scope.groupReportsFunc($scope.reportsDashboard);
                })
            //Get the resorts dropdown without skip and limit
            $http.post("/dash/deptReports",reportsDashboardSearchObj)
                .success(function(resorts){
                    console.log("dept resorts"+ resorts.length);
                    for(var j=0;j<resorts.length;j++){
                        if(resorts[j].resort[0] != undefined){
                            if($scope.performanceResorts.includes(resorts[j].resort[0])){
                                // console.log("data already exists");
                            }
                            else{
                                $scope.performanceResorts.push(resorts[j].resort[0]);
                            }
                        }
                    }
                })
        }
        if(id == 4){
            jQuery.noConflict();
            $(".colleagueCodeDropdown").css('display', 'none')
            if($scope.individualReportFilter.all_Colleague_Code) {
                jQuery.noConflict();
                $('.refresh').css("display", "inline");
            }
            individualReportSearchObj.viewLength = 0;
            individualReportSearchObj.viewBy = initialViewBy;
            $scope.viewLength = 0;
            $scope.newViewBy = localViewBy;
            if($scope.individualReportSearch.filter){
                individualReportSearchObj.searchFor = $scope.individualReportSearch.filter;
                individualReportSearchObj.searchBy = individualReportSearchBy;
            }
            if($scope.individualReportFilter.all_Department){
                individualReportSearchObj.department = $scope.individualReportFilter.all_Department;
            }
            else{
                individualReportSearchObj.department = ''
            }
            if($scope.individualReportFilter.all_Colleague_Code){
                individualReportSearchObj.colleauge_code = tag.EVALUATION_ID;
                if(tag.EVALUATION_NAME)
                    $scope.individualReportFilter.all_Colleague_Code = tag.EVALUATION_ID+' - '+tag.EVALUATION_NAME;
                else
                    $scope.individualReportFilter.all_Colleague_Code = tag.EVALUATION_ID;
                $scope.selected_Colleague_code = tag;
            }
            else{
                individualReportSearchObj.colleauge_code = ''
            }
            if($scope.individualReportFilter.startDate){
                individualReportSearchObj.startDate = $scope.individualReportFilter.startDate;
                $scope.searchColleagueBody.startDate = $scope.individualReportFilter.startDate;
            }
            else{
                individualReportSearchObj.startDate = ''
                $scope.searchColleagueBody.startDate = ''
            }
            if($scope.individualReportFilter.endDate){
                individualReportSearchObj.endDate = $scope.individualReportFilter.endDate;
                $scope.searchColleagueBody.endDate = $scope.individualReportFilter.endDate;
            }
            else{
                individualReportSearchObj.endDate = ''
                $scope.searchColleagueBody.endDate =''
            }
            $scope.atmsIndividualReport = [];
            $http.post("/dash/reports/atms/individual", individualReportSearchObj)
                .success(function(response){
                    if(response){
                        $scope.individualScoretotal =0;
                        $scope.individualFinalScore =0;
                        $scope.weightagesSum = 0;
                        $scope.atmsIndividualReport = response;
                        //console.log($scope.atmsIndividualReport);
                        $scope.atmsReportTransactionCount(response.length, 4);
                        for(var i=0; i< $scope.atmsIndividualReport.length; i++){
                            $scope.individualScoretotal += $scope.atmsIndividualReport[i].average * $scope.atmsIndividualReport[i].weightage;
                            $scope.weightagesSum += ($scope.atmsIndividualReport[i].average ? $scope.atmsIndividualReport[i].weightage : 0);
                            if(i== $scope.atmsIndividualReport.length-1){
                                $scope.individualFinalScore = ($scope.individualScoretotal/ ($scope.weightagesSum * 5))*100;
                                jQuery.noConflict();
                                $('.refresh').css("display", "none");
                            }
                        }
                    }
                    else {
                        jQuery.noConflict();
                        $('.refresh').css("display", "none");
                    }
                })
            $scope.showIndividualReportFilter = true;
            if($scope.individualReportSearch.filter == '')
                $scope.showIndividualReportFilter = false;
        }
        if(id == 5){
            if(tag == 'clear')
            {
                reportsNcNrObj.viewLength = 0;
                reportsNcNrObj.viewBy = initialViewBy;
                reportsNcNrObj.dept = '';
                reportsNcNrObj.from = ''
                reportsNcNrObj.end = ''
                if($scope.user.sellerObject){
                    reportsNcNrObj.resort = $scope.user.sellerObject.Resort;
                    $scope.reportsNcNr.resort = $scope.user.sellerObject.Resort;
                }
                else{
                    $scope.reportsNcNr.resort = '';
                    reportsNcNrObj.resort = '';
                }
                $scope.atmsReportsDuration = 0;
                $scope.allPerformanceReports = [];
                $scope.reportsNcNr.startDate = ''
                $scope.reportsNcNr.endDate = ''
                $scope.reportsNcNr.allDepartment = ''
            }
            else {
                if ($scope.reportsNcNr.allDepartment) {
                    jQuery.noConflict();
                    $('.refresh').css("display", "inline");
                    $scope.flagforncNr=true;
                }
                reportsNcNrObj.viewLength = 0;
                reportsNcNrObj.viewBy = 1000;
                $scope.viewLength = 0;
                $scope.newViewBy = localViewBy;
                if ($scope.reportsNcNr.filter) {
                    $scope.showNcNrFilter = true;
                    reportsNcNrObj.searchFor = $scope.reportsNcNr.filter;
                    reportsNcNrObj.searchBy = ncNrSearchBy;
                }
                if ($scope.reportsNcNr.startDate && $scope.reportsNcNr.endDate) {
                    reportsNcNrObj.from = $scope.reportsNcNr.startDate;
                    reportsNcNrObj.end = $scope.reportsNcNr.endDate
                }
                if ($scope.reportsNcNr.allDepartment && $scope.reportsNcNr.allDepartment != '') {
                    reportsNcNrObj.dept = $scope.reportsNcNr.allDepartment;
                } else {
                    reportsNcNrObj.dept = ''
                }
                if ($scope.reportsNcNr.resort && $scope.reportsNcNr.resort != '') {
                    reportsNcNrObj.resort = $scope.reportsNcNr.resort;
                } else {
                    if ($scope.user.sellerObject) {
                        $scope.reportsNcNr.resort = $scope.user.sellerObject.Resort;
                        reportsNcNrObj.resort = $scope.user.sellerObject.Resort;
                        $http.post("/dash/nc/nr/depts", $scope.reportsNcNr)
                            .success(function(depts){
                                $scope.ncnrdepts = depts;
                            })
                    } else {
                        $scope.reportsNcNr.resort = '';
                        reportsNcNrObj.resort = '';
                    }
                }
                $scope.allPerformanceReports = [];
                // console.log(reportsNcNrObj);
                $http.post("/dash/ncNReports", reportsNcNrObj)
                    .success(function (response_data) {
                        console.log("Response of NC NR------>>>" + response_data.length);
                        // console.log(response_data);
                        // $scope.allPerformanceReports = response_data;
                        for (var i = 0; i < response_data.length; i++) {
                            if (response_data[i].NR || response_data[i].NC) {
                                // console.log(response_data);
                                $scope.allPerformanceReports.push(response_data[i]);
                                // console.log("Peformance")
                                // console.log($scope.allPerformanceReports)
                                $scope.flagforncNr=false;
                                jQuery.noConflict();
                                $('.refresh').css("display", "none");
                            }
                        }
                        $scope.atmsReportTransactionCount($scope.allPerformanceReports.length, 5);
                    })
                if (!reportsNcNrObj.resort && (reportsNcNrObj.from || reportsNcNrObj.end || reportsNcNrObj.dept)) {
                    $http.post("/dash/nc/nr/resorts", reportsNcNrObj)
                        .success(function (resorts) {
                            // console.log('----- nc nr resorts ----')
                            // console.log(resorts);
                            $scope.ncnrResorts = resorts;
                            jQuery.noConflict();
                            $('.refresh').css("display", "none");
                        })
                }
            }
        }
    }
    $scope.colleaguesResortChange = function(){
        if(!$scope.colleaguesReportFilter.allResort){
            $scope.reportsAllColleagues=[];
        }
        $scope.showColleaguesFilter =false;
        $scope.atmsFilter2 = false;
        $scope.colleaguesReportSearch.filter ='';
        colleaguesSearchObj.searchFor = [];
        colleaguesSearchObj.searchBy = '';
        colleaguesSearchObj.DEPARTMENT ='';
        colleaguesSearchObj.Designation ='';
        colleaguesSearchObj.Supervisor_Name ='';
        colleaguesSearchObj.Assistant_Manager_Name ='';
        colleaguesSearchObj.Manager_Name ='';
        $scope.colleaguesReportFilter.all_Department = '';
        $scope.colleaguesReportFilter.all_Designation = '';
        $scope.colleaguesReportFilter.all_Supervisor_Name = '';
        $scope.colleaguesReportFilter.all_Assistant_Manager_Name = '';
        $scope.colleaguesReportFilter.all_Manager_Name = '';
    }
    $scope.getNcNrDepts = function(){
        if($scope.reportsNcNr.resort && $scope.reportsNcNr.resort!='')
        {
            $scope.reportsNcNr.allDepartment ='';
            $http.post("/dash/nc/nr/depts", $scope.reportsNcNr)
                .success(function(depts){
                    // console.log('----- nc nr depts ----')
                    // console.log(depts);
                    $scope.ncnrdepts = depts;
                })
        }
    }
    $scope.atmsReportTransactionCount = function (response,tab) {
        if(tab == 1){
            console.log("response report goals : count:");
            if(response){
                if(response > viewBy.goals){
                    $scope.reportGoals_count = response;
                }
                else if(response <= viewBy.goals){
                    $scope.reportGoals_count = response;
                    $scope.newViewBy = response;
                }
                else{
                    $scope.reportGoals = [];
                    // $scope.tempGoals = [];
                    $scope.newViewBy = 1;
                    $scope.allGoals_count = 0;
                    $scope.viewLength = -1;
                }
            }
            else{
                $scope.reportGoals = [];
                // $scope.tempGoals = [];
                $scope.newViewBy = 1;
                $scope.reportGoals_count = 0;
                $scope.viewLength = -1;
            }
        }
        if(tab == 2)
        {
            // console.log("top user report  ",response);
            if(response){
                if(response > $scope.newViewBy){
                    $scope.colleagues_count = response;
                }
                else if(response <= $scope.newViewBy){
                    $scope.colleagues_count = response;
                    $scope.newViewBy = response;
                }
                else{
                    $scope.atmsColleagues = [];
                    $scope.newViewBy = 1;
                    $scope.colleagues_count = 0;
                    $scope.viewLength = -1;
                }
            }
            else{
                $scope.atmsColleagues = [];
                $scope.newViewBy = 1;
                $scope.colleagues_count = 0;
                $scope.viewLength = -1;
            }
        }
        if(tab == 3){
            console.log("response report Dashboard : count:  " +response.length);
            console.log($scope.newViewBy)
            if(response.length){
                if(response.length > $scope.newViewBy){
                    $scope.reportDashboard_count = response.length;
                }
                else if(response.length <= $scope.newViewBy){
                    $scope.reportDashboard_count = response.length;
                    $scope.newViewBy = response.length;
                }
                else{
                    console.log("Else inside if---->>>")
                    $scope.temp_groups2 = [];
                    $scope.newViewBy = 1;
                    $scope.reportDashboard_count = 0;
                    $scope.viewLength = -1;
                }
            }
            else{
                console.log("No response---->>>")
                $scope.temp_groups2 = [];
                $scope.newViewBy = 1;
                $scope.reportDashboard_count = 0;
                $scope.viewLength = -1;
            }
        }
        if(tab == 4)
        {
            // console.log("top user report  ",response);
            if(response){
                if(response > $scope.newViewBy){
                    $scope.individualReport_count = response;
                }
                else if(response <= $scope.newViewBy){
                    $scope.individualReport_count = response;
                    $scope.newViewBy = response;
                }
                else{
                    $scope.atmsIndividualReport = [];
                    $scope.newViewBy = 1;
                    $scope.individualReport_count = 0;
                    $scope.viewLength = -1;
                }
            }
            else{
                $scope.atmsIndividualReport = [];
                $scope.newViewBy = 1;
                $scope.individualReport_count = 0;
                $scope.viewLength = -1;
            }
        }
        if(tab == 5)
        {
            console.log("response goals : count:");
            console.log(response);
            if(response){
                if(response > viewBy.reportsGoals){
                    $scope.ncNr_count = response;
                }
                else if(response <= viewBy.reportsGoals){
                    $scope.ncNr_count = response;
                    $scope.newViewBy = response;
                }
                else{
                    // $scope.allGoals = [];
                    $scope.allPerformanceReports = [];
                    $scope.newViewBy = 1;
                    $scope.ncNr_count = 0;
                    $scope.viewLength = -1;
                }
            }
            else{
                $scope.allGoals = [];
                $scope.reportGoals = [];
                $scope.newViewBy = 1;
                $scope.ncNr_count = 0;
                $scope.viewLength = -1;
            }
        }
    }
    $scope.reportsGoalDetails = function(evaluator)
    {
        jQuery.noConflict();
        $('.refresh').css("display", "inline");
        // reportsNcNrObj.evaluator = evaluator;
        evaluator.from = reportsNcNrObj.from;
        evaluator.end = reportsNcNrObj.end;
        evaluator.dept = reportsNcNrObj.dept;
        //console.log(evaluator)
        $scope.goalStatements = [];
        //  console.log(evaluator);
        $http.post("/dash/ncNrReports/goals/details",evaluator)
            .success(function(response) {
                console.log(response)
                $scope.goalStatements = []
                for (var i = 0; i < response.length; i++) {
                    var nr=0,nc=0,nrNames = [], ncNames = [];
                    (function (i)
                    {
                        for(var j=0; j<response[i].goals1.length; j++)
                        {
                            if(response[i].goals1[j].NOTRATED){
                                if(response[i].goals1[j].name){
                                    nrNames.push(response[i].goals1[j].name);
                                    nr++;
                                    /*    if(nrNames.includes(response[i].goals1[j].name)){
                                     console.log("nr name already exists");
                                     }
                                     else{
                                     nrNames.push(response[i].goals1[j].name)
                                     }
                                     nr++;*/
                                }
                            }
                            if(response[i].goals1[j].NOT_COMPLETED){
                                if(response[i].goals1[j].name) {
                                    ncNames.push(response[i].goals1[j].name);
                                    nc++;
                                    /*   if(nrNames.includes(response[i].goals1[j].name)){
                                     console.log("NC name already exists");
                                     }
                                     else{
                                     ncNames.push(response[i].goals1[j].name)
                                     }
                                     nc++;*/
                                }
                            }
                            if(j == response[i].goals1.length-1)
                            {
                                $scope.goalStatements[i] = {
                                    'GOAL_ID' : response[i]._id,
                                    'NC' : nc,
                                    'NR' : nr,
                                    'NC_Names' : ncNames,
                                    'NR_Names' : nrNames,
                                    'GOAL_STATEMENT' : response[i].goals1[0].GOAL_STATEMENT
                                }
                                if(i == response.length-1){
                                    jQuery.noConflict();
                                    $('.refresh').css("display", "none");
                                    $('#ncNrApply').modal('show');
                                }
                            }
                        }
                    })(i)
                }
                console.log($scope.goalStatements)
            })
    }
    $scope.individualReportPdf = function(){
        document.getElementById('individualReport-print-body').style.display = 'block';
        var options = {
            pagesplit : true
        }
        var pdf = new jsPDF('p', 'pt', 'a4');
        jQuery.noConflict();
        pdf.addHTML($("#individualReport-print-body"), 0, 0, options, function() {
            var title = 'Individual_Reports_' +$scope.selected_Colleague_code.EVALUATION_ID + ($scope.selected_Colleague_code.EVALUATION_NAME ? ('_' + $scope.selected_Colleague_code.EVALUATION_NAME) : '') + '.pdf';
            pdf.save(title);
            document.getElementById('individualReport-print-body').style.display = 'none';
        });
    }
    $scope.atmsDownloadReports = function(tab,res,dashboard_statements){
        if(tab == 1){
            if(res){
                var result = "Role, Goal Title, Goal Statement, Evaluation By, Wtg, Department, Frequency,Resort, RATING_1, RATING_2, RATING_3, RATING_4, RATING_5, Created Date,Created By, Modified Date,Modified By\n";
                for(var i=0; i< res.length; i++){
                    result += res[i].ROLE;
                    result += ',';
                    if(res[i].GOAL_TITLE){
                        if ((res[i]['GOAL_TITLE']).toString().indexOf(',') != -1) {
                            var quotesWrapped = '"' + res[i]['GOAL_TITLE'] + '"'
                            res[i].GOAL_TITLE = quotesWrapped;
                        }
                        if (res[i]['GOAL_TITLE'] == undefined || res[i]['GOAL_TITLE'] == 'undefined' || !res[i]['GOAL_TITLE']) { //undefined
                            res[i].GOAL_TITLE = ' '
                        }
                        if ((res[i]['GOAL_TITLE']).toString().indexOf('\n') != -1) {
                            var quotesWrapped = res[i]['GOAL_TITLE'].replace('\n', ' ');
                            res[i].GOAL_TITLE = quotesWrapped
                        }
                        if ((res[i]['GOAL_TITLE']).toString().indexOf('\t') != -1) {
                            var quotesWrapped = result[i]['GOAL_TITLE'].replace('\t', ' ');
                            res[i].GOAL_TITLE = quotesWrapped
                        }
                        result += res[i].GOAL_TITLE;
                        result += ',';
                    }
                    else{
                        res[i].GOAL_TITLE = '';
                        result += res[i].GOAL_TITLE;
                        result += ',';
                    }
                    if(res[i].GOAL_STATEMENT){
                        if ((res[i]['GOAL_STATEMENT']).toString().indexOf(',') != -1) {
                            var quotesWrapped = '"' + res[i]['GOAL_STATEMENT'] + '"'
                            res[i].GOAL_STATEMENT = quotesWrapped;
                        }
                        if (res[i]['GOAL_STATEMENT'] == undefined || res[i]['GOAL_STATEMENT'] == 'undefined' || !res[i]['GOAL_STATEMENT']) { //undefined
                            res[i].GOAL_STATEMENT = ' '
                        }
                        if ((res[i]['GOAL_STATEMENT']).toString().indexOf('\n') != -1) {
                            var quotesWrapped = res[i]['GOAL_STATEMENT'].replace('\n', ' ');
                            res[i].GOAL_STATEMENT = quotesWrapped
                        }
                        if ((res[i]['GOAL_STATEMENT']).toString().indexOf('\t') != -1) {
                            var quotesWrapped = result[i]['GOAL_STATEMENT'].replace('\t', ' ');
                            res[i].GOAL_STATEMENT = quotesWrapped
                        }
                        result += res[i].GOAL_STATEMENT;
                        result += ',';
                    }
                    else{
                        res[i].GOAL_STATEMENT = '';
                        result += res[i].GOAL_STATEMENT;
                        result += ',';
                    }
                    if(res[i].EVALUATION_BY_ROLE){
                        result += res[i].EVALUATION_BY_ROLE;
                        result += ',';
                    }
                    else{
                        res[i].EVALUATION_BY_ROLE = '';
                        result += res[i].EVALUATION_BY_ROLE;
                        result += ',';
                    }
                    if(res[i].WEIGHTAGE){
                        result += res[i].WEIGHTAGE;
                        result += ',';
                    }
                    else{
                        res[i].WEIGHTAGE = '';
                        result += res[i].WEIGHTAGE;
                        result += ',';
                    }
                    if(res[i].DEPARTMENT){
                        result += res[i].DEPARTMENT;
                        result += ',';
                    }
                    else{
                        res[i].DEPARTMENT = '';
                        result += res[i].DEPARTMENT;
                        result += ',';
                    }
                    if(res[i].EVALUATION_TYPE){
                        result += res[i].EVALUATION_TYPE;
                        result += ',';
                    }
                    else{
                        res[i].EVALUATION_TYPE = '';
                        result += res[i].EVALUATION_TYPE;
                        result += ',';
                    }
                    if(res[i].RESORT){
                        result += res[i].RESORT;
                        result += ',';
                    }
                    else{
                        res[i].RESORT = '';
                        result += res[i].RESORT;
                        result += ',';
                    }
                    if(res[i].RATING_1){
                        if ((res[i]['RATING_1']).toString().indexOf(',') != -1) {
                            var quotesWrapped = '"' + res[i]['RATING_1'] + '"'
                            res[i].RATING_1 = quotesWrapped;
                        }
                        if ((res[i]['RATING_1']).toString().indexOf('\n') != -1) {
                            var quotesWrapped = res[i]['RATING_1'].replace('\n', ' ');
                            res[i].RATING_1 = quotesWrapped
                        }
                        if ((res[i]['RATING_1']).toString().indexOf('\t') != -1) {
                            var quotesWrapped = result[i]['RATING_1'].replace('\t', ' ');
                            res[i].RATING_1 = quotesWrapped
                        }
                        result += res[i].RATING_1;
                        result += ',';
                    }
                    else{
                        res[i].RATING_1 = '';
                        result += res[i].RATING_1;
                        result += ',';
                    }
                    if(res[i].RATING_2){
                        if ((res[i]['RATING_2']).toString().indexOf(',') != -1) {
                            var quotesWrapped = '"' + res[i]['RATING_2'] + '"'
                            res[i].RATING_2 = quotesWrapped;
                        }
                        if ((res[i]['RATING_2']).toString().indexOf('\n') != -1) {
                            var quotesWrapped = res[i]['RATING_2'].replace('\n', ' ');
                            res[i].RATING_2 = quotesWrapped
                        }
                        if ((res[i]['RATING_2']).toString().indexOf('\t') != -1) {
                            var quotesWrapped = result[i]['RATING_2'].replace('\t', ' ');
                            res[i].RATING_2 = quotesWrapped
                        }
                        result += res[i].RATING_2;
                        result += ',';
                    }
                    else{
                        res[i].RATING_2 = '';
                        result += res[i].RATING_2;
                        result += ',';
                    }
                    if(res[i].RATING_3){
                        if ((res[i]['RATING_3']).toString().indexOf(',') != -1) {
                            var quotesWrapped = '"' + res[i]['RATING_3'] + '"'
                            res[i].RATING_3 = quotesWrapped;
                        }
                        if ((res[i]['RATING_3']).toString().indexOf('\n') != -1) {
                            var quotesWrapped = res[i]['RATING_3'].replace('\n', ' ');
                            res[i].RATING_3 = quotesWrapped
                        }
                        if ((res[i]['RATING_3']).toString().indexOf('\t') != -1) {
                            var quotesWrapped = result[i]['RATING_3'].replace('\t', ' ');
                            res[i].RATING_3 = quotesWrapped
                        }
                        result += res[i].RATING_3;
                        result += ',';
                    }
                    else{
                        res[i].RATING_3 = '';
                        result += res[i].RATING_3;
                        result += ',';
                    }
                    if(res[i].RATING_4){
                        if ((res[i]['RATING_4']).toString().indexOf(',') != -1) {
                            var quotesWrapped = '"' + res[i]['RATING_4'] + '"'
                            res[i].RATING_4 = quotesWrapped;
                        }
                        if ((res[i]['RATING_4']).toString().indexOf('\n') != -1) {
                            var quotesWrapped = res[i]['RATING_4'].replace('\n', ' ');
                            res[i].RATING_4 = quotesWrapped
                        }
                        if ((res[i]['RATING_4']).toString().indexOf('\t') != -1) {
                            var quotesWrapped = result[i]['RATING_4'].replace('\t', ' ');
                            res[i].RATING_4 = quotesWrapped
                        }
                        result += res[i].RATING_4;
                        result += ',';
                    }
                    else{
                        res[i].RATING_4 = '';
                        result += res[i].RATING_4;
                        result += ',';
                    }
                    if(res[i].RATING_5){
                        if ((res[i]['RATING_5']).toString().indexOf(',') != -1) {
                            var quotesWrapped = '"' + res[i]['RATING_5'] + '"'
                            res[i].RATING_5 = quotesWrapped;
                        }
                        if ((res[i]['RATING_5']).toString().indexOf('\n') != -1) {
                            var quotesWrapped = res[i]['RATING_5'].replace('\n', ' ');
                            res[i].RATING_5 = quotesWrapped
                        }
                        if ((res[i]['RATING_5']).toString().indexOf('\t') != -1) {
                            var quotesWrapped = result[i]['RATING_5'].replace('\t', ' ');
                            res[i].RATING_5 = quotesWrapped
                        }
                        result += res[i].RATING_5;
                        result += ',';
                    }
                    else{
                        res[i].RATING_5 = '';
                        result += res[i].RATING_5;
                        result += ',';
                    }
                    if(res[i].CREATED_DATE){
                        result += $scope.atmsFormatedDate(res[i].CREATED_DATE);
                        result += ',';
                    }
                    else{
                        res[i].CREATED_DATE = '';
                        result += res[i].CREATED_DATE;
                        result += ',';
                    }
                    if(res[i].CREATED_BY){
                        result += res[i].CREATED_BY;
                        result += ',';
                    }
                    else{
                        res[i].CREATED_BY = '';
                        result += res[i].CREATED_BY;
                        result += ',';
                    }
                    if(res[i].MODIFIED_DATE){
                        result += $scope.atmsFormatedDate(res[i].MODIFIED_DATE);
                        result += ',';
                    }
                    else{
                        res[i].MODIFIED_DATE = '';
                        result += res[i].MODIFIED_DATE;
                        result += ',';
                    }
                    if(res[i].MODIFIED_BY){
                        result += res[i].MODIFIED_BY;
                        result += ',';
                    }
                    else{
                        res[i].MODIFIED_BY = '';
                        result += res[i].MODIFIED_BY;
                        result += ',';
                    }
                    result += '\n';
                }
                var blob = new Blob([result], {type : "text/csv;charset=UTF-8"});
                //console.log(blob);
                window.URL = window.webkitURL || window.URL;
                var url = window.URL.createObjectURL(blob);
                var d = new Date();
                var anchor = angular.element('<a/>');
                anchor.attr({
                    href: url,
                    target: '_blank',
                    download: 'Goal_Reports_'+d.getDate()+'/'+(d.getMonth()+1)+'/'+d.getFullYear()+'.csv'
                })[0].click();
            }
        }
        if(tab == 2){
            if(res.length){
                var result = "Colleague Code, Colleague Name, Department,Role, Designation, Supervisor Code, Supervisor Name, Supervisor Designation, Phone Number, Assistant Manager Code, Assistant Manager Name, Assistant Manager Designation, Phone Number, Manager Code, Manager Name, Manager Designation, Phone Number,Created Date,Created By, Last Update, Update by,Image Modified By\n";
                for(var i=0; i< res.length; i++){
                    result += res[i].EMPLOYEE_ID;
                    result += ',';
                    result += res[i].sellername;
                    result += ',';
                    result += res[i].DEPARTMENT;
                    result += ',';
                    if(res[i].role){
                        if (res[i].role.toString().indexOf(',') != -1) {
                            var quotesWrapped = '"' + res[i].role + '"';
                            res[i].role = quotesWrapped;
                        }
                        if (res[i].role.toString().indexOf('\n') != -1) {
                            var quotesWrapped = res[i].role.replace('\n', ' ');
                            res[i].role = quotesWrapped;
                        }
                        if (res[i].role.toString().indexOf('\t') != -1) {
                            var quotesWrapped = res[i].role.replace('\t', ' ');
                            res[i].role = quotesWrapped;
                        }
                        result += res[i].role;
                        result += ',';
                    }else
                        result += ',';
                    if(res[i].Designation){
                        if (res[i].Designation.toString().indexOf(',') != -1) {
                            var quotesWrapped = '"' + res[i].Designation + '"';
                            res[i].Designation = quotesWrapped;
                        }
                        if (res[i].Designation.toString().indexOf('\n') != -1) {
                            var quotesWrapped = res[i].Designation.replace('\n', ' ');
                            res[i].role = quotesWrapped;
                        }
                        if (res[i].Designation.toString().indexOf('\t') != -1) {
                            var quotesWrapped = res[i].Designation.replace('\t', ' ');
                            res[i].Designation = quotesWrapped;
                        }
                        result += res[i].Designation;
                        result += ',';
                    }else
                        result += ',';
                    if(res[i].Supervisor_Code){
                        result += res[i].Supervisor_Code;
                        result += ',';
                    }
                    else{
                        res[i].Supervisor_Code = '';
                        result += res[i].Supervisor_Code;
                        result += ',';
                    }
                    if(res[i].Supervisor_Name){
                        result += res[i].Supervisor_Name;
                        result += ',';
                    }
                    else{
                        res[i].Supervisor_Name = '';
                        result += res[i].Supervisor_Name;
                        result += ',';
                    }
                    if(res[i].Supervisor_Designation) {
                        if (res[i].Supervisor_Designation.toString().indexOf(',') != -1) {
                            var quotesWrapped = '"' + res[i].Supervisor_Designation + '"';
                            res[i].Supervisor_Designation = quotesWrapped;
                        }
                        if (res[i].Supervisor_Designation.toString().indexOf('\n') != -1) {
                            var quotesWrapped = res[i].Supervisor_Designation.replace('\n', ' ');
                            res[i].Supervisor_Designation = quotesWrapped;
                        }
                        if (res[i].Supervisor_Designation.toString().indexOf('\t') != -1) {
                            var quotesWrapped = res[i].Supervisor_Designation.replace('\t', ' ');
                            res[i].Supervisor_Designation = quotesWrapped;
                        }
                        result += res[i].Supervisor_Designation
                        result += ',';
                    }else
                        result += ',';
                    if(res[i].Supervisor_Phone_Number){
                        result += res[i].Supervisor_Phone_Number;
                        result += ',';
                    }
                    else{
                        res[i].Supervisor_Phone_Number = '';
                        result += res[i].Supervisor_Phone_Number;
                        result += ',';
                    }
                    if(res[i].Assistant_Manager_Code){
                        result += res[i].Assistant_Manager_Code;
                        result += ',';
                    }
                    else{
                        res[i].Assistant_Manager_Code = '';
                        result += res[i].Assistant_Manager_Code;
                        result += ',';
                    }
                    if(res[i].Assistant_Manager_Name){
                        result += res[i].Assistant_Manager_Name;
                        result += ',';
                    }
                    else{
                        res[i].Assistant_Manager_Name = '';
                        result += res[i].Assistant_Manager_Name;
                        result += ',';
                    }
                    if(res[i].Assistant_Manager_Designation) {
                        if (res[i].Assistant_Manager_Designation.toString().indexOf(',') != -1) {
                            var quotesWrapped = '"' + res[i].Assistant_Manager_Designation + '"';
                            res[i].Assistant_Manager_Designation = quotesWrapped;
                        }
                        if (res[i].Assistant_Manager_Designation.toString().indexOf('\n') != -1) {
                            var quotesWrapped = res[i].Assistant_Manager_Designation.replace('\n', ' ');
                            res[i].Assistant_Manager_Designation = quotesWrapped;
                        }
                        if (res[i].Assistant_Manager_Designation.toString().indexOf('\t') != -1) {
                            var quotesWrapped = res[i].Assistant_Manager_Designation.replace('\t', ' ');
                            res[i].Assistant_Manager_Designation = quotesWrapped;
                        }
                        result += res[i].Assistant_Manager_Designation;
                        result += ',';
                    }else
                        result += ',';
                    if(res[i].Assistant_Manager_Phone_Number){
                        result += res[i].Assistant_Manager_Phone_Number;
                        result += ',';
                    }
                    else{
                        res[i].Assistant_Manager_Phone_Number = '';
                        result += res[i].Assistant_Manager_Phone_Number;
                        result += ',';
                    }
                    if(res[i].Manager_Code){
                        result += res[i].Manager_Code;
                        result += ',';
                    }
                    else{
                        res[i].Manager_Code = '';
                        result += res[i].Manager_Code;
                        result += ',';
                    }
                    if(res[i].Manager_Name){
                        result += res[i].Manager_Name;
                        result += ',';
                    }
                    else{
                        res[i].Manager_Name = '';
                        result += res[i].Manager_Name;
                        result += ',';
                    }
                    if(res[i].Manager_Designation) {
                        if (res[i].Manager_Designation.toString().indexOf(',') != -1) {
                            var quotesWrapped = '"' + res[i].Manager_Designation + '"';
                            res[i].Manager_Designation = quotesWrapped;
                        }
                        if (res[i].Manager_Designation.toString().indexOf('\n') != -1) {
                            var quotesWrapped = res[i].Manager_Designation.replace('\n', ' ');
                            res[i].Manager_Designation = quotesWrapped;
                        }
                        if (res[i].Manager_Designation.toString().indexOf('\t') != -1) {
                            var quotesWrapped = res[i].Manager_Designation.replace('\t', ' ');
                            res[i].Manager_Designation = quotesWrapped;
                        }
                        result += res[i].Manager_Designation;
                        result += ',';
                    }else
                        result += ',';
                    if(res[i].Manager_Phone_Number){
                        result += res[i].Manager_Phone_Number;
                        result += ',';
                    }
                    else{
                        res[i].Manager_Phone_Number = '';
                        result += res[i].Manager_Phone_Number;
                        result += ',';
                    }
                    if(res[i].CREATED_DATE) {
                        result += $scope.atmsFormatedDate(res[i].CREATED_DATE);
                        result += ',';
                    }
                    else{
                        res[i].CREATED_DATE = '';
                        result += ',';
                    }
                    if(res[i].CREATED_BY) {
                        result += res[i].CREATED_BY;
                        result += ',';
                    }
                    else{
                        res[i].CREATED_BY = '';
                        result += ',';
                    }
                    if(res[i].last_updated) {
                        result += $scope.atmsFormatedDate(res[i].last_updated);
                        result += ',';
                    }
                    else{
                        res[i].last_updated = '';
                        result += ',';
                    }
                    if(res[i].last_updated_by) {
                        result += res[i].last_updated_by;
                        result += ',';
                    }
                    else{
                        res[i].last_updated_by = '';
                        result += ',';
                    }
                    if(res[i].IMAGE_MODIFIED_BY) {
                        result += res[i].IMAGE_MODIFIED_BY;
                        result += ',';
                    }
                    else{
                        res[i].IMAGE_MODIFIED_BY = '';
                        result += ',';
                    }
                    result += '\n';
                }
                var blob = new Blob([result], {type : "text/csv;charset=UTF-8"});
                //console.log(blob);
                window.URL = window.webkitURL || window.URL;
                var url = window.URL.createObjectURL(blob);
                var d = new Date();
                var anchor = angular.element('<a/>');
                anchor.attr({
                    href: url,
                    target: '_blank',
                    download: 'Colleauges_Reports_'+d.getDate()+'/'+(d.getMonth()+1)+'/'+d.getFullYear()+'.csv'
                })[0].click();
            }
        }
        if(tab == 3){
            if(res){
                var result = "Colleague Code, Colleague Name, Designation,";
                var count =0;
                for (var j = 0; j <= 1; j++) {
                    /*if(j == 0){
                     var result = 'Dates';
                     result += ',';
                     }
                     else{
                     result += $scope.getDownloadableDate($scope.individualReportFilter.startDate, j-1);
                     result += ',';
                     }*/
                    if(j==0)
                    {
                        for (var i = 0; i < dashboard_statements.cols.length; i++) {
                            var temp = dashboard_statements.cols[i].GOAL_STATEMENT;
                            // if(result.indexOf(res[i].statement[0]) == -1)
                            // {
                            if (dashboard_statements.cols[i].GOAL_STATEMENT.toString().indexOf(',') != -1) {
                                var quotesWrapped = '"' + dashboard_statements.cols[i].GOAL_STATEMENT + '"';
                                temp = quotesWrapped;
                            }
                            if (dashboard_statements.cols[i].GOAL_STATEMENT.toString().indexOf(' ') != -1) {
                                var quotesWrapped = '"' + dashboard_statements.cols[i].GOAL_STATEMENT + '"';
                                temp = quotesWrapped;
                            }
                            if (dashboard_statements.cols[i].GOAL_STATEMENT.toString().indexOf('\n') != -1) {
                                var quotesWrapped = dashboard_statements.cols[i].GOAL_STATEMENT.replace('\n', ' ');
                                temp = quotesWrapped;
                            }
                            if (dashboard_statements.cols[i].GOAL_STATEMENT.toString().indexOf('\t') != -1) {
                                var quotesWrapped = dashboard_statements.cols[i].GOAL_STATEMENT.replace('\t', ' ');
                                temp = quotesWrapped;
                            }
                            result += temp;
                            if (i == dashboard_statements.cols.length - 1) {
                                result += ', Total, Final Score\n ';
                            } else
                                result += ',';
                            // }
                        }
                    }
                    else {
                        console.log(res.length)
                        //unique evaluation array with grouped goals -- the main ng-repeat after the groupFunc
                        for(var det=0; det<res.length; det++)
                        {
                            if(res[det].DETAILS.length)
                            {
                                result += res[det].DETAILS[0].EMPLOYEE_ID;
                                result += ',';
                                result += res[det].DETAILS[0].sellername;
                                result += ',';
                                result += res[det].DETAILS[0].Designation ? res[det].DETAILS[0].Designation : res[det].DETAILS[0].role;
                                result += ',';
                                //dashboard_statements is the grouped array for cols and display
                                for (var k = 0; k < dashboard_statements.cols.length; k++) {
                                    for(var index=0; index < dashboard_statements.display.length; index++)
                                    {
                                        if(res[det].EVALUATION == dashboard_statements.display[index].EVALUATION)
                                        {
                                            // if(dashboard_statements.cols[k].GOAL_ID == dashboard_statements.display[index].GOAL_ID)
                                            // {
                                            //To check if the goal statement has score in the dashboard_statements.display array
                                            if(dashboard_statements.display[index][dashboard_statements.cols[k].GOAL_STATEMENT]) {
                                                result += dashboard_statements.display[index][dashboard_statements.cols[k].GOAL_STATEMENT];
                                            }
                                            // }
                                        }
                                    }
                                    result += ',';
                                    if (k == dashboard_statements.cols.length - 1) {
                                        result += res[det].TOTAL ? res[det].TOTAL : '';
                                        result += ',';
                                        result += res[det].FINAL_SCORE ? res[det].FINAL_SCORE.toFixed(2) : '';
                                        result += ',';
                                        result += ' \n ';
                                    }
                                }
                                if (det == res.length - 1) {
                                    result += ' \n ';
                                }
                            }
                            else
                            {
                                if (det == res.length - 1) {
                                    result += ' \n ';
                                }
                            }
                        }
                    }
                }
                var blob = new Blob([result], {type: "text/csv;charset=UTF-8"});
                //console.log(blob);
                window.URL = window.webkitURL || window.URL;
                var url = window.URL.createObjectURL(blob);
                var d = new Date();
                var anchor = angular.element('<a/>');
                anchor.attr({
                    href: url,
                    target: '_blank',
                    download: 'Dashboard_Reports_' + d.getDate() + '/' + (d.getMonth() + 1) + '/' + d.getFullYear() + '.csv'
                })[0].click();
            }
        }
        if(tab == 4) {
            $http.post('/dash/reports/atms/download/individualReport', individualReportSearchObj)
                .success(function (res) {
                    console.log(res);
                    if (res) {
                        for (var j = 0; j <= Math.round($scope.atmsIndividualReportDays); j++) {
                            if(j == 0){
                                var result = 'Dates';
                                result += ',';
                            }
                            else{
                                result += $scope.getDownloadableDate($scope.individualReportFilter.startDate, j-1);
                                result += ',';
                            }
                            for (var i = 0; i < res.length; i++) {
                                if(j==0){
                                    var temp = res[i].goal_statement;
                                    if (res[i].goal_statement.toString().indexOf(',') != -1) {
                                        var quotesWrapped = '"' + res[i].goal_statement + '"';
                                        temp = quotesWrapped;
                                    }
                                    if (res[i].goal_statement.toString().indexOf(' ') != -1) {
                                        var quotesWrapped = '"' + res[i].goal_statement + '"';
                                        temp = quotesWrapped;
                                    }
                                    if (res[i].goal_statement.toString().indexOf('\n') != -1) {
                                        var quotesWrapped = res[i].goal_statement.replace('\n', ' ');
                                        temp = quotesWrapped;
                                    }
                                    if (res[i].goal_statement.toString().indexOf('\t') != -1) {
                                        var quotesWrapped = res[i].goal_statement.replace('\t', ' ');
                                        temp = quotesWrapped;
                                    }
                                    result += temp+' - '+ res[i].evaluation_type;
                                    result += ',';
                                    result += 'Comment';
                                    if (i == res.length - 1) {
                                        result += ' \n ';
                                    } else
                                        result += ',';
                                }
                                else{
                                    function fillData(count) {
                                        if (res[i].goal_end[count] && res[i].goal_end[count]!= res[i].goal_start[count]) {
                                            if ($scope.inDateRange(res[i].goal_end[count], res[i].goal_start[count], '') == 'not_started') {
                                                result += '';
                                                result += ',';
                                                result += '';
                                            } else if ($scope.inDateRange(res[i].goal_end[count], res[i].goal_start[count], '')) {
                                                result += res[i].rating[count] ? res[i].rating[count].STAR : (res[i].not_completed[count] ? 'NC' : 'NR');
                                                result += ',';
                                                result += res[i].comment[count];
                                            } else {
                                                if (res[i].goal_end[count+1]) {
                                                    fillData(count+1);
                                                } else {
                                                    result += '';
                                                    result += ',';
                                                    result += '';
                                                }
                                            }
                                        }
                                        else{
                                            if($scope.inDateRange('', res[i].goal_start[count], true) == 'not_started'){
                                                result += '';
                                                result += ',';
                                                result += '';
                                            }
                                            else if($scope.inDateRange('', res[i].goal_start[count], true)){
                                                result += res[i].rating[count]? res[i].rating[count].STAR : (res[i].not_completed[count] ? 'NC' : 'NR');
                                                result += ',';
                                                result += res[i].comment[count];
                                            }
                                            else{
                                                if(res[i].goal_start[count+1]){
                                                    fillData(count+1);
                                                }
                                                else{
                                                    result += '';
                                                    result += ',';
                                                    result += '';
                                                }
                                            }
                                        }
                                    }
                                    fillData(0);
                                    if (i == res.length - 1) {
                                        result += ' \n ';
                                    } else
                                        result += ',';
                                }
                            }
                        }
                        var blob = new Blob([result], {type: "text/csv;charset=UTF-8"});
                        //console.log(blob);
                        window.URL = window.webkitURL || window.URL;
                        var url = window.URL.createObjectURL(blob);
                        var d = new Date();
                        var anchor = angular.element('<a/>');
                        anchor.attr({
                            href: url,
                            target: '_blank',
                            download: 'Individual_Reports_' +$scope.selected_Colleague_code.EVALUATION_ID + ($scope.selected_Colleague_code.EVALUATION_NAME ? ('_' + $scope.selected_Colleague_code.EVALUATION_NAME) : '') + '_' + d.getDate() + '/' + (d.getMonth() + 1) + '/' + d.getFullYear() + '.csv'
                        })[0].click();
                    }
                })
        }
        if(tab == 5){
            if(res){
                var result = "Colleague Code, Colleague Name, Department, Designation, No of Goals, No of NCs, No of NRs\n";
                for(var i=0; i< res.length; i++){
                    if(res[i].NC != 0 || res[i].NR != 0)
                    {
                        result += res[i]._id.EMPLOYEE_ID;
                        result += ',';
                        result += res[i]._id.EVALUATOR_NAME;
                        result += ',';
                        result += res[i].DEPARTMENT ? res[i].DEPARTMENT : '';
                        result += ',';
                        result += res[i].DESIGNATION ? res[i].DESIGNATION : '';
                        result += ',';
                        result += res[i].TOTAL ? res[i].TOTAL : '-';
                        result += ',';
                        result += res[i].NC ? res[i].NC : '0';
                        result += ',';
                        result += res[i].NR ? res[i].NR : '0';
                        result += ',';
                        result += '\n';
                    }
                }
                var blob = new Blob([result], {type : "text/csv;charset=UTF-8"});
                //console.log(blob);
                window.URL = window.webkitURL || window.URL;
                var url = window.URL.createObjectURL(blob);
                var d = new Date();
                var anchor = angular.element('<a/>');
                anchor.attr({
                    href: url,
                    target: '_blank',
                    download: 'NC/NR_Reports_'+d.getDate()+'/'+(d.getMonth()+1)+'/'+d.getFullYear()+'.csv'
                })[0].click();
            }
        }
    }
    $scope.getDownloadableDate = function(date, days){
        var tempDate = new Date(date);
        tempDate.setDate(tempDate.getDate() + days);
        $scope.newColumnDate = new Date(tempDate);
        var monthNames = ['Jan','Feb','Mar','Apr','May','Jun','Jul','Aug','Sept','Oct','Nov','Dec'];
        var month =  monthNames[tempDate.getMonth()];
        var d = tempDate.getDate();
        var dateformat = d + '-' + month ;
        //console.log(dateformat)
        return dateformat
    }
    $scope.inDateRange = function(goal_end, goal_start, type){
        if(type){
            var goalStartDate = new Date(goal_start);
            if($scope.newColumnDate >= goalStartDate) {
                if(($scope.newColumnDate).toString() == (goalStartDate).toString()){
                    return true;
                }
                else
                    return false;
            }
            else
                return 'not_started';
        }
        else{
            var goalEndDate = new Date(goal_end);
            var goalStartDate = new Date(goal_start);
            if($scope.newColumnDate >= goalStartDate) {
                if ($scope.newColumnDate <= goalEndDate){
                    return true;
                }
                else
                    return false;
            }
            else
                return 'not_started';
        }
    }
    $scope.all_colleague_codes = [];
    $scope.searchColleagueCodes = function(text){
        // console.log(text)
        if(text.length >= 4){
            $http.post("/dash/atms/search/colleagueCodes/"+text, $scope.searchColleagueBody)
                .success(function(res){
                    // console.log(res)
                    if(res.length){
                        $scope.all_colleague_codes = res;
                        jQuery.noConflict();
                        $(".colleagueCodeDropdown").css('display', 'block')
                    }
                    else
                        $scope.all_colleague_codes = [];
                })
        }
        else{
            jQuery.noConflict();
            $(".colleagueCodeDropdown").css('display', 'none')
        }
    }
    $scope.goals_colleague_codes=[];
    $scope.searchColleaguesfromGoals=function(text){
        // console.log($scope.user.sellerObject)
        if($scope.user.sellerObject) {
            $scope.searchcolleaguefromgoalsBody.resort = $scope.user.sellerObject.Resort;
        }
        // console.log(text)
        if(text.length>=4){
            $http.post("/dash/atms/search/colleagueCodesfromgoals/"+text, $scope.searchcolleaguefromgoalsBody)
                .success(function(res){
                    // console.log(res)
                    if(res.length){
                        $scope.goals_colleague_codes = res;
                        jQuery.noConflict();
                        $(".colleagueCodeDropdown").css('display', 'block')
                    }
                    else
                        $scope.goals_colleague_codes = [];
                })
        }
        else{
            jQuery.noConflict();
            $(".colleagueCodeDropdown").css('display', 'none')
        }
    }
    $scope.atmsgoalsforcolleague=function(code){
        // console.log(code)
        $scope.showsearchedgoals=true;
        $scope.showevaluatorgoals = [];
        jQuery.noConflict();
        $(".colleagueCodeDropdown").css('display', 'none')
        if(code.EMPLOYEE_ID){
            $scope.goalEmployeecode.all_Colleague_Code=code.EMPLOYEE_ID+' - '+code.sellername;
            $scope.goalssearchwithemployee.EMPLOYEE_ID=code.EMPLOYEE_ID;
        }
        else{
            $scope.goalssearchwithemployee.EvaluationId=code;
        }
        if($scope.goalssearchwithemployee){
            $http.post("/dash/atms/goalsforselectedevaluator",$scope.goalssearchwithemployee)
                .success(function(res){
                    // console.log(res)
                    if(res.length){
                        for(var i=0; i<res.length; i++) {
                            $scope.showevaluatorgoals.push(res[i]);
                            for(var j=0;j<res[i].EVALUATION_ID.length;j++){
                                $scope.goalsevaluation.push({'id' : res[i].EVALUATION_ID[j]});
                            }
                        }
                        // console.log($scope.showevaluatorgoals)
                        $scope.transactionCount(res.length, 29);
                    }
                })
        }
        // if($scope.goalEmployeecode.all_Colleague_Code) {
        //     jQuery.noConflict();
        //     $('.refresh').css("display", "inline");
        // }
    }
    $scope.openRatingsDetails = function (goal) {
        jQuery.noConflict();
        $('.refresh').css("display", "inline");
        goal.TODAY_DATE = $scope.atms_Dashboard_filter.TODAY_DATE;
        goal.START_DATE = $scope.atms_Dashboard_filter.START_DATE;
        $http.post("/dash/atms/deptGoals",goal).success(function (response) {
            if(response){
                $scope.employeeRatingDetails  = response;
                $scope.employeeRatingDetails.average = goal.average;
                $scope.employeeRatingDetails.goalstatement = goal.goalstatement;
                $scope.employeeRatingDetails.DEPARTMENT = goal.DEPARTMENT;
                $scope.employeeRatingDetails.RESORT = goal.RESORT;
                // console.log($scope.employeeRatingDetails)
                jQuery.noConflict();
                $('#ratingDetailsModal').modal('show');
                $('.refresh').css("display", "none");
            }
        })
    };
    $scope.scoreCardSearchFilter = function(){
        if($scope.scoreCardFilterObj.filter == ''){
            bootbox.alert({
                title: 'Warning',
                message : "Please type text in search box"
            })
        }
        else{
            scoreCardObj.viewLength = 0;
            scoreCardObj.viewBy = initialViewBy;
            $scope.viewLength = 0;
            $scope.newViewBy = viewBy.scoreCard;
            $scope.allPerformance = [];
            if($scope.scoreCardFilterObj.filter){
                scoreCardObj.searchFor = $scope.scoreCardFilterObj.filter;
                scoreCardObj.searchBy = scoreCardSearchBy;
            }
            /*$http.post("/dash/all/performance",scoreCardObj)
             .success(function(response)
             {
             console.log(response)
             $scope.allPerformance = response
             });*/
            // $scope.showItemFilter = true;
        }
    }
    $scope.addLocation = function(){
        $scope.pickup.type = 'add';
        $http.put("/dash/settings/pickupLocation", $scope.pickup)
            .success(function(res){
                // console.log(res)
                if(res){
                    $scope.getPickupLocations();
                    $scope.pickup = {};
                }
            })
    }
    $scope.removeLocation = function(location){
        bootbox.confirm({
            title: 'CONFIRM',
            message: "Are you sure",
            className: "text-center",
            buttons: {
                confirm: {
                    label: 'YES',
                    className: 'btn-success'
                },
                cancel: {
                    label: 'Cancel',
                    className: 'btn-danger'
                }
            },
            callback: function (result) {
                if (result) {
                    var obj = location;
                    obj.type = 'remove';
                    $http.put("/dash/settings/pickupLocation", obj)
                        .success(function(res){
                            // console.log(res)
                            if(res){
                                $scope.getPickupLocations();
                            }
                        })
                }
            }
        })
    }
    // ................**************************************************************************.................
    // ....................
    //                         Keep the below two functions in the end..
    //
    //                         This is for rendering the same page as the one before refreshing the browser.
    //
    //                         It might throw error if the code is placed else where...
    //
    //
    //                         Author : Nithish
    //
    // ....................
    // ................**************************************************************************.................
    // $scope.logoutFlag = false; // To check if user is logging out..
    // if(typeof(Storage) != undefined){
    //     $scope.all();
    //     var tab = $window.sessionStorage.getItem("tab");
    //     $window.sessionStorage.removeItem("tab");
    //
    //     $scope.tab = Number(tab);
    //
    //     if(tab != 1 && tab != undefined && tab != "" && tab != null && tab !=8 && tab != 5){
    //         $scope.loaded($scope.tab);
    //     }
    //     else{
    //         $scope.loaded(0);
    //     }
    //
    // }
    // $window.onbeforeunload = function () {
    //
    //         //Does not save tab number if logging out
    //         if(!$scope.logoutFlag){
    //         if(typeof(Storage) != undefined){
    //             var tab = $window.sessionStorage.getItem('tab');
    //             if(tab == null && tab != 1 && tab !=8)
    //                 $window.sessionStorage.setItem('tab', $scope.tab);
    //         }
    //     }
    // }
    // ................**************************************************************************.................
    //
    //              DON'T WRITE ANYTHING BELOW....
    //
    //          Please write before the above 2 functions....
    //
    // ................**************************************************************************.................
    $scope.QBRedirected = function(){
        console.log("Redirected")
        $scope.qbConnect = true;
    }
})
    .controller("quotationModalController",[ "$scope", "$modalInstance", "quotation", "newQuotationTaxAmount", "GST","qty", function ($scope, $modalInstance, quotation, newQuotationTaxAmount, GST, qty) {
        $scope.quotation = quotation;
        $scope.quotationtotalAmount = newQuotationTaxAmount;
        $scope.GST = GST;
        $scope.qty = qty
        console.log(newQuotationTaxAmount)
        //console.log(GST);
        $scope.quotationconfirm	= function() { $modalInstance.close('confirm');	  };
        $scope.quotationcancel 	= function() { $modalInstance.close('cancel');  };
        $scope.quotationmodalDismiss = function() { $modalInstance.dismiss();}
    }])
    .controller("PurchaseOrderModalController",[ "$scope", "$modalInstance", "purchaseorder", "totalAmount","taxableAmount","purchaseorderTotalAmount", "GST","nav", function ($scope, $modalInstance, purchaseorder, totalAmount, taxableAmount, purchaseorderTotalAmount,  GST,nav) {
        //console.log(nav)
        $scope.NAV=nav;
        $scope.purchaseorder = purchaseorder;
        $scope.totalAmount = totalAmount;
        $scope.purchaseorderTaxableAmount = taxableAmount;
        $scope.purchaseorderTotalAmount = purchaseorderTotalAmount;
        $scope.GST = GST;
        //console.log(GST);
        $scope.confirm	= function() { $modalInstance.close('confirm');	  };
        $scope.cancel 	= function() { $modalInstance.close('cancel');  };
        $scope.modalDismiss = function() { $modalInstance.dismiss();}
    }])
    .controller("alertController",[ "$scope", "$modalInstance", "alertHeading", "alertType", "alertMessage", function ($scope, $modalInstance, alertHeading, alertType, alertMessage ){
        $scope.alertClass = "text-" + alertType;
        $scope.alertHeading = alertHeading;
        $scope.alertType = alertType;
        $scope.alertMessage = alertMessage;
        $scope.ok	= function() { $modalInstance.close('ok');	  };
        $scope.modalDismiss = function() { $modalInstance.dismiss();}
    }])
